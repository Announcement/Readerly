;(function(modules) {
  var installedModules = {}
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) {
      return installedModules[moduleId].exports
    }
    var module = (installedModules[moduleId] = {
      i: moduleId,
      l: false,
      exports: {}
    })
    modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      __webpack_require__
    )
    module.l = true
    return module.exports
  }
  __webpack_require__.m = modules
  __webpack_require__.c = installedModules
  __webpack_require__.d = function(exports, name, getter) {
    if (!__webpack_require__.o(exports, name)) {
      Object.defineProperty(exports, name, {
        configurable: false,
        enumerable: true,
        get: getter
      })
    }
  }
  __webpack_require__.n = function(module) {
    var getter =
      module && module.__esModule
        ? function getDefault() {
            return module['default']
          }
        : function getModuleExports() {
            return module
          }
    __webpack_require__.d(getter, 'a', getter)
    return getter
  }
  __webpack_require__.o = function(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property)
  }
  __webpack_require__.p = ''
  return __webpack_require__((__webpack_require__.s = 46))
})([
  function(module, exports) {
    if (typeof Object.create === 'function') {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        })
      }
    } else {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        var TempCtor = function() {}
        TempCtor.prototype = superCtor.prototype
        ctor.prototype = new TempCtor()
        ctor.prototype.constructor = ctor
      }
    }
  },
  function(module, exports) {
    var process = (module.exports = {})
    var cachedSetTimeout
    var cachedClearTimeout
    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined')
    }
    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined')
    }
    ;(function() {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout
        } else {
          cachedSetTimeout = defaultSetTimout
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout
        } else {
          cachedClearTimeout = defaultClearTimeout
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout
      }
    })()
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0)
      }
      if (
        (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
        setTimeout
      ) {
        cachedSetTimeout = setTimeout
        return setTimeout(fun, 0)
      }
      try {
        return cachedSetTimeout(fun, 0)
      } catch (e) {
        try {
          return cachedSetTimeout.call(null, fun, 0)
        } catch (e) {
          return cachedSetTimeout.call(this, fun, 0)
        }
      }
    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker)
      }
      if (
        (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&
        clearTimeout
      ) {
        cachedClearTimeout = clearTimeout
        return clearTimeout(marker)
      }
      try {
        return cachedClearTimeout(marker)
      } catch (e) {
        try {
          return cachedClearTimeout.call(null, marker)
        } catch (e) {
          return cachedClearTimeout.call(this, marker)
        }
      }
    }
    var queue = []
    var draining = false
    var currentQueue
    var queueIndex = -1
    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return
      }
      draining = false
      if (currentQueue.length) {
        queue = currentQueue.concat(queue)
      } else {
        queueIndex = -1
      }
      if (queue.length) {
        drainQueue()
      }
    }
    function drainQueue() {
      if (draining) {
        return
      }
      var timeout = runTimeout(cleanUpNextTick)
      draining = true
      var len = queue.length
      while (len) {
        currentQueue = queue
        queue = []
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run()
          }
        }
        queueIndex = -1
        len = queue.length
      }
      currentQueue = null
      draining = false
      runClearTimeout(timeout)
    }
    process.nextTick = function(fun) {
      var args = new Array(arguments.length - 1)
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i]
        }
      }
      queue.push(new Item(fun, args))
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue)
      }
    }
    function Item(fun, array) {
      this.fun = fun
      this.array = array
    }
    Item.prototype.run = function() {
      this.fun.apply(null, this.array)
    }
    process.title = 'browser'
    process.browser = true
    process.env = {}
    process.argv = []
    process.version = ''
    process.versions = {}
    function noop() {}
    process.on = noop
    process.addListener = noop
    process.once = noop
    process.off = noop
    process.removeListener = noop
    process.removeAllListeners = noop
    process.emit = noop
    process.prependListener = noop
    process.prependOnceListener = noop
    process.listeners = function(name) {
      return []
    }
    process.binding = function(name) {
      throw new Error('process.binding is not supported')
    }
    process.cwd = function() {
      return '/'
    }
    process.chdir = function(dir) {
      throw new Error('process.chdir is not supported')
    }
    process.umask = function() {
      return 0
    }
  },
  function(module, exports, __webpack_require__) {
    ;(function(Buffer) {
      function isArray(arg) {
        if (Array.isArray) {
          return Array.isArray(arg)
        }
        return objectToString(arg) === '[object Array]'
      }
      exports.isArray = isArray
      function isBoolean(arg) {
        return typeof arg === 'boolean'
      }
      exports.isBoolean = isBoolean
      function isNull(arg) {
        return arg === null
      }
      exports.isNull = isNull
      function isNullOrUndefined(arg) {
        return arg == null
      }
      exports.isNullOrUndefined = isNullOrUndefined
      function isNumber(arg) {
        return typeof arg === 'number'
      }
      exports.isNumber = isNumber
      function isString(arg) {
        return typeof arg === 'string'
      }
      exports.isString = isString
      function isSymbol(arg) {
        return typeof arg === 'symbol'
      }
      exports.isSymbol = isSymbol
      function isUndefined(arg) {
        return arg === void 0
      }
      exports.isUndefined = isUndefined
      function isRegExp(re) {
        return objectToString(re) === '[object RegExp]'
      }
      exports.isRegExp = isRegExp
      function isObject(arg) {
        return typeof arg === 'object' && arg !== null
      }
      exports.isObject = isObject
      function isDate(d) {
        return objectToString(d) === '[object Date]'
      }
      exports.isDate = isDate
      function isError(e) {
        return objectToString(e) === '[object Error]' || e instanceof Error
      }
      exports.isError = isError
      function isFunction(arg) {
        return typeof arg === 'function'
      }
      exports.isFunction = isFunction
      function isPrimitive(arg) {
        return (
          arg === null ||
          typeof arg === 'boolean' ||
          typeof arg === 'number' ||
          typeof arg === 'string' ||
          typeof arg === 'symbol' ||
          typeof arg === 'undefined'
        )
      }
      exports.isPrimitive = isPrimitive
      exports.isBuffer = Buffer.isBuffer
      function objectToString(o) {
        return Object.prototype.toString.call(o)
      }
    }.call(exports, __webpack_require__(7).Buffer))
  },
  function(module, exports, __webpack_require__) {
    ;(function(module, global) {
      var __WEBPACK_AMD_DEFINE_RESULT__
      ;(function() {
        var undefined
        var arrayPool = [],
          objectPool = []
        var idCounter = 0
        var keyPrefix = +new Date() + ''
        var largeArraySize = 75
        var maxPoolSize = 40
        var whitespace =
          ' \t\v\f \ufeff' + '\n\r\u2028\u2029' + ' ᠎             　'
        var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g
        var reFlags = /\w*$/
        var reFuncName = /^\s*function[ \n\r\t]+\w/
        var reInterpolate = /<%=([\s\S]+?)%>/g
        var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)')
        var reNoMatch = /($^)/
        var reThis = /\bthis\b/
        var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g
        var contextProps = [
          'Array',
          'Boolean',
          'Date',
          'Function',
          'Math',
          'Number',
          'Object',
          'RegExp',
          'String',
          '_',
          'attachEvent',
          'clearTimeout',
          'isFinite',
          'isNaN',
          'parseInt',
          'setTimeout'
        ]
        var templateCounter = 0
        var argsClass = '[object Arguments]',
          arrayClass = '[object Array]',
          boolClass = '[object Boolean]',
          dateClass = '[object Date]',
          funcClass = '[object Function]',
          numberClass = '[object Number]',
          objectClass = '[object Object]',
          regexpClass = '[object RegExp]',
          stringClass = '[object String]'
        var cloneableClasses = {}
        cloneableClasses[funcClass] = false
        cloneableClasses[argsClass] = cloneableClasses[
          arrayClass
        ] = cloneableClasses[boolClass] = cloneableClasses[
          dateClass
        ] = cloneableClasses[numberClass] = cloneableClasses[
          objectClass
        ] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true
        var debounceOptions = {
          leading: false,
          maxWait: 0,
          trailing: false
        }
        var descriptor = {
          configurable: false,
          enumerable: false,
          value: null,
          writable: false
        }
        var objectTypes = {
          boolean: false,
          function: true,
          object: true,
          number: false,
          string: false,
          undefined: false
        }
        var stringEscapes = {
          '\\': '\\',
          "'": "'",
          '\n': 'n',
          '\r': 'r',
          '\t': 't',
          '\u2028': 'u2028',
          '\u2029': 'u2029'
        }
        var root = (objectTypes[typeof window] && window) || this
        var freeExports =
          objectTypes[typeof exports] && exports && !exports.nodeType && exports
        var freeModule =
          objectTypes[typeof module] && module && !module.nodeType && module
        var moduleExports =
          freeModule && freeModule.exports === freeExports && freeExports
        var freeGlobal = objectTypes[typeof global] && global
        if (
          freeGlobal &&
          (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)
        ) {
          root = freeGlobal
        }
        function baseIndexOf(array, value, fromIndex) {
          var index = (fromIndex || 0) - 1,
            length = array ? array.length : 0
          while (++index < length) {
            if (array[index] === value) {
              return index
            }
          }
          return -1
        }
        function cacheIndexOf(cache, value) {
          var type = typeof value
          cache = cache.cache
          if (type == 'boolean' || value == null) {
            return cache[value] ? 0 : -1
          }
          if (type != 'number' && type != 'string') {
            type = 'object'
          }
          var key = type == 'number' ? value : keyPrefix + value
          cache = (cache = cache[type]) && cache[key]
          return type == 'object'
            ? cache && baseIndexOf(cache, value) > -1 ? 0 : -1
            : cache ? 0 : -1
        }
        function cachePush(value) {
          var cache = this.cache,
            type = typeof value
          if (type == 'boolean' || value == null) {
            cache[value] = true
          } else {
            if (type != 'number' && type != 'string') {
              type = 'object'
            }
            var key = type == 'number' ? value : keyPrefix + value,
              typeCache = cache[type] || (cache[type] = {})
            if (type == 'object') {
              ;(typeCache[key] || (typeCache[key] = [])).push(value)
            } else {
              typeCache[key] = true
            }
          }
        }
        function charAtCallback(value) {
          return value.charCodeAt(0)
        }
        function compareAscending(a, b) {
          var ac = a.criteria,
            bc = b.criteria,
            index = -1,
            length = ac.length
          while (++index < length) {
            var value = ac[index],
              other = bc[index]
            if (value !== other) {
              if (value > other || typeof value == 'undefined') {
                return 1
              }
              if (value < other || typeof other == 'undefined') {
                return -1
              }
            }
          }
          return a.index - b.index
        }
        function createCache(array) {
          var index = -1,
            length = array.length,
            first = array[0],
            mid = array[(length / 2) | 0],
            last = array[length - 1]
          if (
            first &&
            typeof first == 'object' &&
            mid &&
            typeof mid == 'object' &&
            last &&
            typeof last == 'object'
          ) {
            return false
          }
          var cache = getObject()
          cache['false'] = cache['null'] = cache['true'] = cache[
            'undefined'
          ] = false
          var result = getObject()
          result.array = array
          result.cache = cache
          result.push = cachePush
          while (++index < length) {
            result.push(array[index])
          }
          return result
        }
        function escapeStringChar(match) {
          return '\\' + stringEscapes[match]
        }
        function getArray() {
          return arrayPool.pop() || []
        }
        function getObject() {
          return (
            objectPool.pop() || {
              array: null,
              cache: null,
              criteria: null,
              false: false,
              index: 0,
              null: false,
              number: null,
              object: null,
              push: null,
              string: null,
              true: false,
              undefined: false,
              value: null
            }
          )
        }
        function releaseArray(array) {
          array.length = 0
          if (arrayPool.length < maxPoolSize) {
            arrayPool.push(array)
          }
        }
        function releaseObject(object) {
          var cache = object.cache
          if (cache) {
            releaseObject(cache)
          }
          object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null
          if (objectPool.length < maxPoolSize) {
            objectPool.push(object)
          }
        }
        function slice(array, start, end) {
          start || (start = 0)
          if (typeof end == 'undefined') {
            end = array ? array.length : 0
          }
          var index = -1,
            length = end - start || 0,
            result = Array(length < 0 ? 0 : length)
          while (++index < length) {
            result[index] = array[start + index]
          }
          return result
        }
        function runInContext(context) {
          context = context
            ? _.defaults(root.Object(), context, _.pick(root, contextProps))
            : root
          var Array = context.Array,
            Boolean = context.Boolean,
            Date = context.Date,
            Function = context.Function,
            Math = context.Math,
            Number = context.Number,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError
          var arrayRef = []
          var objectProto = Object.prototype
          var oldDash = context._
          var toString = objectProto.toString
          var reNative = RegExp(
            '^' +
              String(toString)
                .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
                .replace(/toString| for [^\]]+/g, '.*?') +
              '$'
          )
          var ceil = Math.ceil,
            clearTimeout = context.clearTimeout,
            floor = Math.floor,
            fnToString = Function.prototype.toString,
            getPrototypeOf =
              isNative((getPrototypeOf = Object.getPrototypeOf)) &&
              getPrototypeOf,
            hasOwnProperty = objectProto.hasOwnProperty,
            push = arrayRef.push,
            setTimeout = context.setTimeout,
            splice = arrayRef.splice,
            unshift = arrayRef.unshift
          var defineProperty = (function() {
            try {
              var o = {},
                func = isNative((func = Object.defineProperty)) && func,
                result = func(o, o, o) && func
            } catch (e) {}
            return result
          })()
          var nativeCreate =
              isNative((nativeCreate = Object.create)) && nativeCreate,
            nativeIsArray =
              isNative((nativeIsArray = Array.isArray)) && nativeIsArray,
            nativeIsFinite = context.isFinite,
            nativeIsNaN = context.isNaN,
            nativeKeys = isNative((nativeKeys = Object.keys)) && nativeKeys,
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random
          var ctorByClass = {}
          ctorByClass[arrayClass] = Array
          ctorByClass[boolClass] = Boolean
          ctorByClass[dateClass] = Date
          ctorByClass[funcClass] = Function
          ctorByClass[objectClass] = Object
          ctorByClass[numberClass] = Number
          ctorByClass[regexpClass] = RegExp
          ctorByClass[stringClass] = String
          function lodash(value) {
            return value &&
              typeof value == 'object' &&
              !isArray(value) &&
              hasOwnProperty.call(value, '__wrapped__')
              ? value
              : new lodashWrapper(value)
          }
          function lodashWrapper(value, chainAll) {
            this.__chain__ = !!chainAll
            this.__wrapped__ = value
          }
          lodashWrapper.prototype = lodash.prototype
          var support = (lodash.support = {})
          support.funcDecomp =
            !isNative(context.WinRTError) && reThis.test(runInContext)
          support.funcNames = typeof Function.name == 'string'
          lodash.templateSettings = {
            escape: /<%-([\s\S]+?)%>/g,
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: reInterpolate,
            variable: '',
            imports: {
              _: lodash
            }
          }
          function baseBind(bindData) {
            var func = bindData[0],
              partialArgs = bindData[2],
              thisArg = bindData[4]
            function bound() {
              if (partialArgs) {
                var args = slice(partialArgs)
                push.apply(args, arguments)
              }
              if (this instanceof bound) {
                var thisBinding = baseCreate(func.prototype),
                  result = func.apply(thisBinding, args || arguments)
                return isObject(result) ? result : thisBinding
              }
              return func.apply(thisArg, args || arguments)
            }
            setBindData(bound, bindData)
            return bound
          }
          function baseClone(value, isDeep, callback, stackA, stackB) {
            if (callback) {
              var result = callback(value)
              if (typeof result != 'undefined') {
                return result
              }
            }
            var isObj = isObject(value)
            if (isObj) {
              var className = toString.call(value)
              if (!cloneableClasses[className]) {
                return value
              }
              var ctor = ctorByClass[className]
              switch (className) {
                case boolClass:
                case dateClass:
                  return new ctor(+value)

                case numberClass:
                case stringClass:
                  return new ctor(value)

                case regexpClass:
                  result = ctor(value.source, reFlags.exec(value))
                  result.lastIndex = value.lastIndex
                  return result
              }
            } else {
              return value
            }
            var isArr = isArray(value)
            if (isDeep) {
              var initedStack = !stackA
              stackA || (stackA = getArray())
              stackB || (stackB = getArray())
              var length = stackA.length
              while (length--) {
                if (stackA[length] == value) {
                  return stackB[length]
                }
              }
              result = isArr ? ctor(value.length) : {}
            } else {
              result = isArr ? slice(value) : assign({}, value)
            }
            if (isArr) {
              if (hasOwnProperty.call(value, 'index')) {
                result.index = value.index
              }
              if (hasOwnProperty.call(value, 'input')) {
                result.input = value.input
              }
            }
            if (!isDeep) {
              return result
            }
            stackA.push(value)
            stackB.push(result)
            ;(isArr ? forEach : forOwn)(value, function(objValue, key) {
              result[key] = baseClone(
                objValue,
                isDeep,
                callback,
                stackA,
                stackB
              )
            })
            if (initedStack) {
              releaseArray(stackA)
              releaseArray(stackB)
            }
            return result
          }
          function baseCreate(prototype, properties) {
            return isObject(prototype) ? nativeCreate(prototype) : {}
          }
          if (!nativeCreate) {
            baseCreate = (function() {
              function Object() {}
              return function(prototype) {
                if (isObject(prototype)) {
                  Object.prototype = prototype
                  var result = new Object()
                  Object.prototype = null
                }
                return result || context.Object()
              }
            })()
          }
          function baseCreateCallback(func, thisArg, argCount) {
            if (typeof func != 'function') {
              return identity
            }
            if (typeof thisArg == 'undefined' || !('prototype' in func)) {
              return func
            }
            var bindData = func.__bindData__
            if (typeof bindData == 'undefined') {
              if (support.funcNames) {
                bindData = !func.name
              }
              bindData = bindData || !support.funcDecomp
              if (!bindData) {
                var source = fnToString.call(func)
                if (!support.funcNames) {
                  bindData = !reFuncName.test(source)
                }
                if (!bindData) {
                  bindData = reThis.test(source)
                  setBindData(func, bindData)
                }
              }
            }
            if (bindData === false || (bindData !== true && bindData[1] & 1)) {
              return func
            }
            switch (argCount) {
              case 1:
                return function(value) {
                  return func.call(thisArg, value)
                }

              case 2:
                return function(a, b) {
                  return func.call(thisArg, a, b)
                }

              case 3:
                return function(value, index, collection) {
                  return func.call(thisArg, value, index, collection)
                }

              case 4:
                return function(accumulator, value, index, collection) {
                  return func.call(
                    thisArg,
                    accumulator,
                    value,
                    index,
                    collection
                  )
                }
            }
            return bind(func, thisArg)
          }
          function baseCreateWrapper(bindData) {
            var func = bindData[0],
              bitmask = bindData[1],
              partialArgs = bindData[2],
              partialRightArgs = bindData[3],
              thisArg = bindData[4],
              arity = bindData[5]
            var isBind = bitmask & 1,
              isBindKey = bitmask & 2,
              isCurry = bitmask & 4,
              isCurryBound = bitmask & 8,
              key = func
            function bound() {
              var thisBinding = isBind ? thisArg : this
              if (partialArgs) {
                var args = slice(partialArgs)
                push.apply(args, arguments)
              }
              if (partialRightArgs || isCurry) {
                args || (args = slice(arguments))
                if (partialRightArgs) {
                  push.apply(args, partialRightArgs)
                }
                if (isCurry && args.length < arity) {
                  bitmask |= 16 & ~32
                  return baseCreateWrapper([
                    func,
                    isCurryBound ? bitmask : bitmask & ~3,
                    args,
                    null,
                    thisArg,
                    arity
                  ])
                }
              }
              args || (args = arguments)
              if (isBindKey) {
                func = thisBinding[key]
              }
              if (this instanceof bound) {
                thisBinding = baseCreate(func.prototype)
                var result = func.apply(thisBinding, args)
                return isObject(result) ? result : thisBinding
              }
              return func.apply(thisBinding, args)
            }
            setBindData(bound, bindData)
            return bound
          }
          function baseDifference(array, values) {
            var index = -1,
              indexOf = getIndexOf(),
              length = array ? array.length : 0,
              isLarge = length >= largeArraySize && indexOf === baseIndexOf,
              result = []
            if (isLarge) {
              var cache = createCache(values)
              if (cache) {
                indexOf = cacheIndexOf
                values = cache
              } else {
                isLarge = false
              }
            }
            while (++index < length) {
              var value = array[index]
              if (indexOf(values, value) < 0) {
                result.push(value)
              }
            }
            if (isLarge) {
              releaseObject(values)
            }
            return result
          }
          function baseFlatten(array, isShallow, isStrict, fromIndex) {
            var index = (fromIndex || 0) - 1,
              length = array ? array.length : 0,
              result = []
            while (++index < length) {
              var value = array[index]
              if (
                value &&
                typeof value == 'object' &&
                typeof value.length == 'number' &&
                (isArray(value) || isArguments(value))
              ) {
                if (!isShallow) {
                  value = baseFlatten(value, isShallow, isStrict)
                }
                var valIndex = -1,
                  valLength = value.length,
                  resIndex = result.length
                result.length += valLength
                while (++valIndex < valLength) {
                  result[resIndex++] = value[valIndex]
                }
              } else if (!isStrict) {
                result.push(value)
              }
            }
            return result
          }
          function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
            if (callback) {
              var result = callback(a, b)
              if (typeof result != 'undefined') {
                return !!result
              }
            }
            if (a === b) {
              return a !== 0 || 1 / a == 1 / b
            }
            var type = typeof a,
              otherType = typeof b
            if (
              a === a &&
              !(a && objectTypes[type]) &&
              !(b && objectTypes[otherType])
            ) {
              return false
            }
            if (a == null || b == null) {
              return a === b
            }
            var className = toString.call(a),
              otherClass = toString.call(b)
            if (className == argsClass) {
              className = objectClass
            }
            if (otherClass == argsClass) {
              otherClass = objectClass
            }
            if (className != otherClass) {
              return false
            }
            switch (className) {
              case boolClass:
              case dateClass:
                return +a == +b

              case numberClass:
                return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b

              case regexpClass:
              case stringClass:
                return a == String(b)
            }
            var isArr = className == arrayClass
            if (!isArr) {
              var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
                bWrapped = hasOwnProperty.call(b, '__wrapped__')
              if (aWrapped || bWrapped) {
                return baseIsEqual(
                  aWrapped ? a.__wrapped__ : a,
                  bWrapped ? b.__wrapped__ : b,
                  callback,
                  isWhere,
                  stackA,
                  stackB
                )
              }
              if (className != objectClass) {
                return false
              }
              var ctorA = a.constructor,
                ctorB = b.constructor
              if (
                ctorA != ctorB &&
                !(
                  isFunction(ctorA) &&
                  ctorA instanceof ctorA &&
                  isFunction(ctorB) &&
                  ctorB instanceof ctorB
                ) &&
                ('constructor' in a && 'constructor' in b)
              ) {
                return false
              }
            }
            var initedStack = !stackA
            stackA || (stackA = getArray())
            stackB || (stackB = getArray())
            var length = stackA.length
            while (length--) {
              if (stackA[length] == a) {
                return stackB[length] == b
              }
            }
            var size = 0
            result = true
            stackA.push(a)
            stackB.push(b)
            if (isArr) {
              length = a.length
              size = b.length
              result = size == length
              if (result || isWhere) {
                while (size--) {
                  var index = length,
                    value = b[size]
                  if (isWhere) {
                    while (index--) {
                      if (
                        (result = baseIsEqual(
                          a[index],
                          value,
                          callback,
                          isWhere,
                          stackA,
                          stackB
                        ))
                      ) {
                        break
                      }
                    }
                  } else if (
                    !(result = baseIsEqual(
                      a[size],
                      value,
                      callback,
                      isWhere,
                      stackA,
                      stackB
                    ))
                  ) {
                    break
                  }
                }
              }
            } else {
              forIn(b, function(value, key, b) {
                if (hasOwnProperty.call(b, key)) {
                  size++
                  return (result =
                    hasOwnProperty.call(a, key) &&
                    baseIsEqual(
                      a[key],
                      value,
                      callback,
                      isWhere,
                      stackA,
                      stackB
                    ))
                }
              })
              if (result && !isWhere) {
                forIn(a, function(value, key, a) {
                  if (hasOwnProperty.call(a, key)) {
                    return (result = --size > -1)
                  }
                })
              }
            }
            stackA.pop()
            stackB.pop()
            if (initedStack) {
              releaseArray(stackA)
              releaseArray(stackB)
            }
            return result
          }
          function baseMerge(object, source, callback, stackA, stackB) {
            ;(isArray(source) ? forEach : forOwn)(source, function(
              source,
              key
            ) {
              var found,
                isArr,
                result = source,
                value = object[key]
              if (
                source &&
                ((isArr = isArray(source)) || isPlainObject(source))
              ) {
                var stackLength = stackA.length
                while (stackLength--) {
                  if ((found = stackA[stackLength] == source)) {
                    value = stackB[stackLength]
                    break
                  }
                }
                if (!found) {
                  var isShallow
                  if (callback) {
                    result = callback(value, source)
                    if ((isShallow = typeof result != 'undefined')) {
                      value = result
                    }
                  }
                  if (!isShallow) {
                    value = isArr
                      ? isArray(value) ? value : []
                      : isPlainObject(value) ? value : {}
                  }
                  stackA.push(source)
                  stackB.push(value)
                  if (!isShallow) {
                    baseMerge(value, source, callback, stackA, stackB)
                  }
                }
              } else {
                if (callback) {
                  result = callback(value, source)
                  if (typeof result == 'undefined') {
                    result = source
                  }
                }
                if (typeof result != 'undefined') {
                  value = result
                }
              }
              object[key] = value
            })
          }
          function baseRandom(min, max) {
            return min + floor(nativeRandom() * (max - min + 1))
          }
          function baseUniq(array, isSorted, callback) {
            var index = -1,
              indexOf = getIndexOf(),
              length = array ? array.length : 0,
              result = []
            var isLarge =
                !isSorted &&
                length >= largeArraySize &&
                indexOf === baseIndexOf,
              seen = callback || isLarge ? getArray() : result
            if (isLarge) {
              var cache = createCache(seen)
              indexOf = cacheIndexOf
              seen = cache
            }
            while (++index < length) {
              var value = array[index],
                computed = callback ? callback(value, index, array) : value
              if (
                isSorted
                  ? !index || seen[seen.length - 1] !== computed
                  : indexOf(seen, computed) < 0
              ) {
                if (callback || isLarge) {
                  seen.push(computed)
                }
                result.push(value)
              }
            }
            if (isLarge) {
              releaseArray(seen.array)
              releaseObject(seen)
            } else if (callback) {
              releaseArray(seen)
            }
            return result
          }
          function createAggregator(setter) {
            return function(collection, callback, thisArg) {
              var result = {}
              callback = lodash.createCallback(callback, thisArg, 3)
              var index = -1,
                length = collection ? collection.length : 0
              if (typeof length == 'number') {
                while (++index < length) {
                  var value = collection[index]
                  setter(
                    result,
                    value,
                    callback(value, index, collection),
                    collection
                  )
                }
              } else {
                forOwn(collection, function(value, key, collection) {
                  setter(
                    result,
                    value,
                    callback(value, key, collection),
                    collection
                  )
                })
              }
              return result
            }
          }
          function createWrapper(
            func,
            bitmask,
            partialArgs,
            partialRightArgs,
            thisArg,
            arity
          ) {
            var isBind = bitmask & 1,
              isBindKey = bitmask & 2,
              isCurry = bitmask & 4,
              isCurryBound = bitmask & 8,
              isPartial = bitmask & 16,
              isPartialRight = bitmask & 32
            if (!isBindKey && !isFunction(func)) {
              throw new TypeError()
            }
            if (isPartial && !partialArgs.length) {
              bitmask &= ~16
              isPartial = partialArgs = false
            }
            if (isPartialRight && !partialRightArgs.length) {
              bitmask &= ~32
              isPartialRight = partialRightArgs = false
            }
            var bindData = func && func.__bindData__
            if (bindData && bindData !== true) {
              bindData = slice(bindData)
              if (bindData[2]) {
                bindData[2] = slice(bindData[2])
              }
              if (bindData[3]) {
                bindData[3] = slice(bindData[3])
              }
              if (isBind && !(bindData[1] & 1)) {
                bindData[4] = thisArg
              }
              if (!isBind && bindData[1] & 1) {
                bitmask |= 8
              }
              if (isCurry && !(bindData[1] & 4)) {
                bindData[5] = arity
              }
              if (isPartial) {
                push.apply(bindData[2] || (bindData[2] = []), partialArgs)
              }
              if (isPartialRight) {
                unshift.apply(
                  bindData[3] || (bindData[3] = []),
                  partialRightArgs
                )
              }
              bindData[1] |= bitmask
              return createWrapper.apply(null, bindData)
            }
            var creater =
              bitmask == 1 || bitmask === 17 ? baseBind : baseCreateWrapper
            return creater([
              func,
              bitmask,
              partialArgs,
              partialRightArgs,
              thisArg,
              arity
            ])
          }
          function escapeHtmlChar(match) {
            return htmlEscapes[match]
          }
          function getIndexOf() {
            var result =
              (result = lodash.indexOf) === indexOf ? baseIndexOf : result
            return result
          }
          function isNative(value) {
            return typeof value == 'function' && reNative.test(value)
          }
          var setBindData = !defineProperty
            ? noop
            : function(func, value) {
                descriptor.value = value
                defineProperty(func, '__bindData__', descriptor)
                descriptor.value = null
              }
          function shimIsPlainObject(value) {
            var ctor, result
            if (
              !(value && toString.call(value) == objectClass) ||
              ((ctor = value.constructor),
              isFunction(ctor) && !(ctor instanceof ctor))
            ) {
              return false
            }
            forIn(value, function(value, key) {
              result = key
            })
            return (
              typeof result == 'undefined' || hasOwnProperty.call(value, result)
            )
          }
          function unescapeHtmlChar(match) {
            return htmlUnescapes[match]
          }
          function isArguments(value) {
            return (
              (value &&
                typeof value == 'object' &&
                typeof value.length == 'number' &&
                toString.call(value) == argsClass) ||
              false
            )
          }
          var isArray =
            nativeIsArray ||
            function(value) {
              return (
                (value &&
                  typeof value == 'object' &&
                  typeof value.length == 'number' &&
                  toString.call(value) == arrayClass) ||
                false
              )
            }
          var shimKeys = function(object) {
            var index,
              iterable = object,
              result = []
            if (!iterable) return result
            if (!objectTypes[typeof object]) return result
            for (index in iterable) {
              if (hasOwnProperty.call(iterable, index)) {
                result.push(index)
              }
            }
            return result
          }
          var keys = !nativeKeys
            ? shimKeys
            : function(object) {
                if (!isObject(object)) {
                  return []
                }
                return nativeKeys(object)
              }
          var htmlEscapes = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
          }
          var htmlUnescapes = invert(htmlEscapes)
          var reEscapedHtml = RegExp(
              '(' + keys(htmlUnescapes).join('|') + ')',
              'g'
            ),
            reUnescapedHtml = RegExp(
              '[' + keys(htmlEscapes).join('') + ']',
              'g'
            )
          var assign = function(object, source, guard) {
            var index,
              iterable = object,
              result = iterable
            if (!iterable) return result
            var args = arguments,
              argsIndex = 0,
              argsLength = typeof guard == 'number' ? 2 : args.length
            if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
              var callback = baseCreateCallback(
                args[--argsLength - 1],
                args[argsLength--],
                2
              )
            } else if (
              argsLength > 2 &&
              typeof args[argsLength - 1] == 'function'
            ) {
              callback = args[--argsLength]
            }
            while (++argsIndex < argsLength) {
              iterable = args[argsIndex]
              if (iterable && objectTypes[typeof iterable]) {
                var ownIndex = -1,
                  ownProps = objectTypes[typeof iterable] && keys(iterable),
                  length = ownProps ? ownProps.length : 0
                while (++ownIndex < length) {
                  index = ownProps[ownIndex]
                  result[index] = callback
                    ? callback(result[index], iterable[index])
                    : iterable[index]
                }
              }
            }
            return result
          }
          function clone(value, isDeep, callback, thisArg) {
            if (typeof isDeep != 'boolean' && isDeep != null) {
              thisArg = callback
              callback = isDeep
              isDeep = false
            }
            return baseClone(
              value,
              isDeep,
              typeof callback == 'function' &&
                baseCreateCallback(callback, thisArg, 1)
            )
          }
          function cloneDeep(value, callback, thisArg) {
            return baseClone(
              value,
              true,
              typeof callback == 'function' &&
                baseCreateCallback(callback, thisArg, 1)
            )
          }
          function create(prototype, properties) {
            var result = baseCreate(prototype)
            return properties ? assign(result, properties) : result
          }
          var defaults = function(object, source, guard) {
            var index,
              iterable = object,
              result = iterable
            if (!iterable) return result
            var args = arguments,
              argsIndex = 0,
              argsLength = typeof guard == 'number' ? 2 : args.length
            while (++argsIndex < argsLength) {
              iterable = args[argsIndex]
              if (iterable && objectTypes[typeof iterable]) {
                var ownIndex = -1,
                  ownProps = objectTypes[typeof iterable] && keys(iterable),
                  length = ownProps ? ownProps.length : 0
                while (++ownIndex < length) {
                  index = ownProps[ownIndex]
                  if (typeof result[index] == 'undefined')
                    result[index] = iterable[index]
                }
              }
            }
            return result
          }
          function findKey(object, callback, thisArg) {
            var result
            callback = lodash.createCallback(callback, thisArg, 3)
            forOwn(object, function(value, key, object) {
              if (callback(value, key, object)) {
                result = key
                return false
              }
            })
            return result
          }
          function findLastKey(object, callback, thisArg) {
            var result
            callback = lodash.createCallback(callback, thisArg, 3)
            forOwnRight(object, function(value, key, object) {
              if (callback(value, key, object)) {
                result = key
                return false
              }
            })
            return result
          }
          var forIn = function(collection, callback, thisArg) {
            var index,
              iterable = collection,
              result = iterable
            if (!iterable) return result
            if (!objectTypes[typeof iterable]) return result
            callback =
              callback && typeof thisArg == 'undefined'
                ? callback
                : baseCreateCallback(callback, thisArg, 3)
            for (index in iterable) {
              if (callback(iterable[index], index, collection) === false)
                return result
            }
            return result
          }
          function forInRight(object, callback, thisArg) {
            var pairs = []
            forIn(object, function(value, key) {
              pairs.push(key, value)
            })
            var length = pairs.length
            callback = baseCreateCallback(callback, thisArg, 3)
            while (length--) {
              if (callback(pairs[length--], pairs[length], object) === false) {
                break
              }
            }
            return object
          }
          var forOwn = function(collection, callback, thisArg) {
            var index,
              iterable = collection,
              result = iterable
            if (!iterable) return result
            if (!objectTypes[typeof iterable]) return result
            callback =
              callback && typeof thisArg == 'undefined'
                ? callback
                : baseCreateCallback(callback, thisArg, 3)
            var ownIndex = -1,
              ownProps = objectTypes[typeof iterable] && keys(iterable),
              length = ownProps ? ownProps.length : 0
            while (++ownIndex < length) {
              index = ownProps[ownIndex]
              if (callback(iterable[index], index, collection) === false)
                return result
            }
            return result
          }
          function forOwnRight(object, callback, thisArg) {
            var props = keys(object),
              length = props.length
            callback = baseCreateCallback(callback, thisArg, 3)
            while (length--) {
              var key = props[length]
              if (callback(object[key], key, object) === false) {
                break
              }
            }
            return object
          }
          function functions(object) {
            var result = []
            forIn(object, function(value, key) {
              if (isFunction(value)) {
                result.push(key)
              }
            })
            return result.sort()
          }
          function has(object, key) {
            return object ? hasOwnProperty.call(object, key) : false
          }
          function invert(object) {
            var index = -1,
              props = keys(object),
              length = props.length,
              result = {}
            while (++index < length) {
              var key = props[index]
              result[object[key]] = key
            }
            return result
          }
          function isBoolean(value) {
            return (
              value === true ||
              value === false ||
              (value &&
                typeof value == 'object' &&
                toString.call(value) == boolClass) ||
              false
            )
          }
          function isDate(value) {
            return (
              (value &&
                typeof value == 'object' &&
                toString.call(value) == dateClass) ||
              false
            )
          }
          function isElement(value) {
            return (value && value.nodeType === 1) || false
          }
          function isEmpty(value) {
            var result = true
            if (!value) {
              return result
            }
            var className = toString.call(value),
              length = value.length
            if (
              className == arrayClass ||
              className == stringClass ||
              className == argsClass ||
              (className == objectClass &&
                typeof length == 'number' &&
                isFunction(value.splice))
            ) {
              return !length
            }
            forOwn(value, function() {
              return (result = false)
            })
            return result
          }
          function isEqual(a, b, callback, thisArg) {
            return baseIsEqual(
              a,
              b,
              typeof callback == 'function' &&
                baseCreateCallback(callback, thisArg, 2)
            )
          }
          function isFinite(value) {
            return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value))
          }
          function isFunction(value) {
            return typeof value == 'function'
          }
          function isObject(value) {
            return !!(value && objectTypes[typeof value])
          }
          function isNaN(value) {
            return isNumber(value) && value != +value
          }
          function isNull(value) {
            return value === null
          }
          function isNumber(value) {
            return (
              typeof value == 'number' ||
              (value &&
                typeof value == 'object' &&
                toString.call(value) == numberClass) ||
              false
            )
          }
          var isPlainObject = !getPrototypeOf
            ? shimIsPlainObject
            : function(value) {
                if (!(value && toString.call(value) == objectClass)) {
                  return false
                }
                var valueOf = value.valueOf,
                  objProto =
                    isNative(valueOf) &&
                    (objProto = getPrototypeOf(valueOf)) &&
                    getPrototypeOf(objProto)
                return objProto
                  ? value == objProto || getPrototypeOf(value) == objProto
                  : shimIsPlainObject(value)
              }
          function isRegExp(value) {
            return (
              (value &&
                typeof value == 'object' &&
                toString.call(value) == regexpClass) ||
              false
            )
          }
          function isString(value) {
            return (
              typeof value == 'string' ||
              (value &&
                typeof value == 'object' &&
                toString.call(value) == stringClass) ||
              false
            )
          }
          function isUndefined(value) {
            return typeof value == 'undefined'
          }
          function mapValues(object, callback, thisArg) {
            var result = {}
            callback = lodash.createCallback(callback, thisArg, 3)
            forOwn(object, function(value, key, object) {
              result[key] = callback(value, key, object)
            })
            return result
          }
          function merge(object) {
            var args = arguments,
              length = 2
            if (!isObject(object)) {
              return object
            }
            if (typeof args[2] != 'number') {
              length = args.length
            }
            if (length > 3 && typeof args[length - 2] == 'function') {
              var callback = baseCreateCallback(
                args[--length - 1],
                args[length--],
                2
              )
            } else if (length > 2 && typeof args[length - 1] == 'function') {
              callback = args[--length]
            }
            var sources = slice(arguments, 1, length),
              index = -1,
              stackA = getArray(),
              stackB = getArray()
            while (++index < length) {
              baseMerge(object, sources[index], callback, stackA, stackB)
            }
            releaseArray(stackA)
            releaseArray(stackB)
            return object
          }
          function omit(object, callback, thisArg) {
            var result = {}
            if (typeof callback != 'function') {
              var props = []
              forIn(object, function(value, key) {
                props.push(key)
              })
              props = baseDifference(
                props,
                baseFlatten(arguments, true, false, 1)
              )
              var index = -1,
                length = props.length
              while (++index < length) {
                var key = props[index]
                result[key] = object[key]
              }
            } else {
              callback = lodash.createCallback(callback, thisArg, 3)
              forIn(object, function(value, key, object) {
                if (!callback(value, key, object)) {
                  result[key] = value
                }
              })
            }
            return result
          }
          function pairs(object) {
            var index = -1,
              props = keys(object),
              length = props.length,
              result = Array(length)
            while (++index < length) {
              var key = props[index]
              result[index] = [key, object[key]]
            }
            return result
          }
          function pick(object, callback, thisArg) {
            var result = {}
            if (typeof callback != 'function') {
              var index = -1,
                props = baseFlatten(arguments, true, false, 1),
                length = isObject(object) ? props.length : 0
              while (++index < length) {
                var key = props[index]
                if (key in object) {
                  result[key] = object[key]
                }
              }
            } else {
              callback = lodash.createCallback(callback, thisArg, 3)
              forIn(object, function(value, key, object) {
                if (callback(value, key, object)) {
                  result[key] = value
                }
              })
            }
            return result
          }
          function transform(object, callback, accumulator, thisArg) {
            var isArr = isArray(object)
            if (accumulator == null) {
              if (isArr) {
                accumulator = []
              } else {
                var ctor = object && object.constructor,
                  proto = ctor && ctor.prototype
                accumulator = baseCreate(proto)
              }
            }
            if (callback) {
              callback = lodash.createCallback(callback, thisArg, 4)
              ;(isArr ? forEach : forOwn)(object, function(
                value,
                index,
                object
              ) {
                return callback(accumulator, value, index, object)
              })
            }
            return accumulator
          }
          function values(object) {
            var index = -1,
              props = keys(object),
              length = props.length,
              result = Array(length)
            while (++index < length) {
              result[index] = object[props[index]]
            }
            return result
          }
          function at(collection) {
            var args = arguments,
              index = -1,
              props = baseFlatten(args, true, false, 1),
              length =
                args[2] && args[2][args[1]] === collection ? 1 : props.length,
              result = Array(length)
            while (++index < length) {
              result[index] = collection[props[index]]
            }
            return result
          }
          function contains(collection, target, fromIndex) {
            var index = -1,
              indexOf = getIndexOf(),
              length = collection ? collection.length : 0,
              result = false
            fromIndex =
              (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) ||
              0
            if (isArray(collection)) {
              result = indexOf(collection, target, fromIndex) > -1
            } else if (typeof length == 'number') {
              result =
                (isString(collection)
                  ? collection.indexOf(target, fromIndex)
                  : indexOf(collection, target, fromIndex)) > -1
            } else {
              forOwn(collection, function(value) {
                if (++index >= fromIndex) {
                  return !(result = value === target)
                }
              })
            }
            return result
          }
          var countBy = createAggregator(function(result, value, key) {
            hasOwnProperty.call(result, key) ? result[key]++ : (result[key] = 1)
          })
          function every(collection, callback, thisArg) {
            var result = true
            callback = lodash.createCallback(callback, thisArg, 3)
            var index = -1,
              length = collection ? collection.length : 0
            if (typeof length == 'number') {
              while (++index < length) {
                if (
                  !(result = !!callback(collection[index], index, collection))
                ) {
                  break
                }
              }
            } else {
              forOwn(collection, function(value, index, collection) {
                return (result = !!callback(value, index, collection))
              })
            }
            return result
          }
          function filter(collection, callback, thisArg) {
            var result = []
            callback = lodash.createCallback(callback, thisArg, 3)
            var index = -1,
              length = collection ? collection.length : 0
            if (typeof length == 'number') {
              while (++index < length) {
                var value = collection[index]
                if (callback(value, index, collection)) {
                  result.push(value)
                }
              }
            } else {
              forOwn(collection, function(value, index, collection) {
                if (callback(value, index, collection)) {
                  result.push(value)
                }
              })
            }
            return result
          }
          function find(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg, 3)
            var index = -1,
              length = collection ? collection.length : 0
            if (typeof length == 'number') {
              while (++index < length) {
                var value = collection[index]
                if (callback(value, index, collection)) {
                  return value
                }
              }
            } else {
              var result
              forOwn(collection, function(value, index, collection) {
                if (callback(value, index, collection)) {
                  result = value
                  return false
                }
              })
              return result
            }
          }
          function findLast(collection, callback, thisArg) {
            var result
            callback = lodash.createCallback(callback, thisArg, 3)
            forEachRight(collection, function(value, index, collection) {
              if (callback(value, index, collection)) {
                result = value
                return false
              }
            })
            return result
          }
          function forEach(collection, callback, thisArg) {
            var index = -1,
              length = collection ? collection.length : 0
            callback =
              callback && typeof thisArg == 'undefined'
                ? callback
                : baseCreateCallback(callback, thisArg, 3)
            if (typeof length == 'number') {
              while (++index < length) {
                if (callback(collection[index], index, collection) === false) {
                  break
                }
              }
            } else {
              forOwn(collection, callback)
            }
            return collection
          }
          function forEachRight(collection, callback, thisArg) {
            var length = collection ? collection.length : 0
            callback =
              callback && typeof thisArg == 'undefined'
                ? callback
                : baseCreateCallback(callback, thisArg, 3)
            if (typeof length == 'number') {
              while (length--) {
                if (
                  callback(collection[length], length, collection) === false
                ) {
                  break
                }
              }
            } else {
              var props = keys(collection)
              length = props.length
              forOwn(collection, function(value, key, collection) {
                key = props ? props[--length] : --length
                return callback(collection[key], key, collection)
              })
            }
            return collection
          }
          var groupBy = createAggregator(function(result, value, key) {
            ;(hasOwnProperty.call(result, key)
              ? result[key]
              : (result[key] = [])
            ).push(value)
          })
          var indexBy = createAggregator(function(result, value, key) {
            result[key] = value
          })
          function invoke(collection, methodName) {
            var args = slice(arguments, 2),
              index = -1,
              isFunc = typeof methodName == 'function',
              length = collection ? collection.length : 0,
              result = Array(typeof length == 'number' ? length : 0)
            forEach(collection, function(value) {
              result[++index] = (isFunc ? methodName : value[methodName]).apply(
                value,
                args
              )
            })
            return result
          }
          function map(collection, callback, thisArg) {
            var index = -1,
              length = collection ? collection.length : 0
            callback = lodash.createCallback(callback, thisArg, 3)
            if (typeof length == 'number') {
              var result = Array(length)
              while (++index < length) {
                result[index] = callback(collection[index], index, collection)
              }
            } else {
              result = []
              forOwn(collection, function(value, key, collection) {
                result[++index] = callback(value, key, collection)
              })
            }
            return result
          }
          function max(collection, callback, thisArg) {
            var computed = -Infinity,
              result = computed
            if (
              typeof callback != 'function' &&
              thisArg &&
              thisArg[callback] === collection
            ) {
              callback = null
            }
            if (callback == null && isArray(collection)) {
              var index = -1,
                length = collection.length
              while (++index < length) {
                var value = collection[index]
                if (value > result) {
                  result = value
                }
              }
            } else {
              callback =
                callback == null && isString(collection)
                  ? charAtCallback
                  : lodash.createCallback(callback, thisArg, 3)
              forEach(collection, function(value, index, collection) {
                var current = callback(value, index, collection)
                if (current > computed) {
                  computed = current
                  result = value
                }
              })
            }
            return result
          }
          function min(collection, callback, thisArg) {
            var computed = Infinity,
              result = computed
            if (
              typeof callback != 'function' &&
              thisArg &&
              thisArg[callback] === collection
            ) {
              callback = null
            }
            if (callback == null && isArray(collection)) {
              var index = -1,
                length = collection.length
              while (++index < length) {
                var value = collection[index]
                if (value < result) {
                  result = value
                }
              }
            } else {
              callback =
                callback == null && isString(collection)
                  ? charAtCallback
                  : lodash.createCallback(callback, thisArg, 3)
              forEach(collection, function(value, index, collection) {
                var current = callback(value, index, collection)
                if (current < computed) {
                  computed = current
                  result = value
                }
              })
            }
            return result
          }
          var pluck = map
          function reduce(collection, callback, accumulator, thisArg) {
            if (!collection) return accumulator
            var noaccum = arguments.length < 3
            callback = lodash.createCallback(callback, thisArg, 4)
            var index = -1,
              length = collection.length
            if (typeof length == 'number') {
              if (noaccum) {
                accumulator = collection[++index]
              }
              while (++index < length) {
                accumulator = callback(
                  accumulator,
                  collection[index],
                  index,
                  collection
                )
              }
            } else {
              forOwn(collection, function(value, index, collection) {
                accumulator = noaccum
                  ? ((noaccum = false), value)
                  : callback(accumulator, value, index, collection)
              })
            }
            return accumulator
          }
          function reduceRight(collection, callback, accumulator, thisArg) {
            var noaccum = arguments.length < 3
            callback = lodash.createCallback(callback, thisArg, 4)
            forEachRight(collection, function(value, index, collection) {
              accumulator = noaccum
                ? ((noaccum = false), value)
                : callback(accumulator, value, index, collection)
            })
            return accumulator
          }
          function reject(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg, 3)
            return filter(collection, function(value, index, collection) {
              return !callback(value, index, collection)
            })
          }
          function sample(collection, n, guard) {
            if (collection && typeof collection.length != 'number') {
              collection = values(collection)
            }
            if (n == null || guard) {
              return collection
                ? collection[baseRandom(0, collection.length - 1)]
                : undefined
            }
            var result = shuffle(collection)
            result.length = nativeMin(nativeMax(0, n), result.length)
            return result
          }
          function shuffle(collection) {
            var index = -1,
              length = collection ? collection.length : 0,
              result = Array(typeof length == 'number' ? length : 0)
            forEach(collection, function(value) {
              var rand = baseRandom(0, ++index)
              result[index] = result[rand]
              result[rand] = value
            })
            return result
          }
          function size(collection) {
            var length = collection ? collection.length : 0
            return typeof length == 'number' ? length : keys(collection).length
          }
          function some(collection, callback, thisArg) {
            var result
            callback = lodash.createCallback(callback, thisArg, 3)
            var index = -1,
              length = collection ? collection.length : 0
            if (typeof length == 'number') {
              while (++index < length) {
                if ((result = callback(collection[index], index, collection))) {
                  break
                }
              }
            } else {
              forOwn(collection, function(value, index, collection) {
                return !(result = callback(value, index, collection))
              })
            }
            return !!result
          }
          function sortBy(collection, callback, thisArg) {
            var index = -1,
              isArr = isArray(callback),
              length = collection ? collection.length : 0,
              result = Array(typeof length == 'number' ? length : 0)
            if (!isArr) {
              callback = lodash.createCallback(callback, thisArg, 3)
            }
            forEach(collection, function(value, key, collection) {
              var object = (result[++index] = getObject())
              if (isArr) {
                object.criteria = map(callback, function(key) {
                  return value[key]
                })
              } else {
                ;(object.criteria = getArray())[0] = callback(
                  value,
                  key,
                  collection
                )
              }
              object.index = index
              object.value = value
            })
            length = result.length
            result.sort(compareAscending)
            while (length--) {
              var object = result[length]
              result[length] = object.value
              if (!isArr) {
                releaseArray(object.criteria)
              }
              releaseObject(object)
            }
            return result
          }
          function toArray(collection) {
            if (collection && typeof collection.length == 'number') {
              return slice(collection)
            }
            return values(collection)
          }
          var where = filter
          function compact(array) {
            var index = -1,
              length = array ? array.length : 0,
              result = []
            while (++index < length) {
              var value = array[index]
              if (value) {
                result.push(value)
              }
            }
            return result
          }
          function difference(array) {
            return baseDifference(array, baseFlatten(arguments, true, true, 1))
          }
          function findIndex(array, callback, thisArg) {
            var index = -1,
              length = array ? array.length : 0
            callback = lodash.createCallback(callback, thisArg, 3)
            while (++index < length) {
              if (callback(array[index], index, array)) {
                return index
              }
            }
            return -1
          }
          function findLastIndex(array, callback, thisArg) {
            var length = array ? array.length : 0
            callback = lodash.createCallback(callback, thisArg, 3)
            while (length--) {
              if (callback(array[length], length, array)) {
                return length
              }
            }
            return -1
          }
          function first(array, callback, thisArg) {
            var n = 0,
              length = array ? array.length : 0
            if (typeof callback != 'number' && callback != null) {
              var index = -1
              callback = lodash.createCallback(callback, thisArg, 3)
              while (++index < length && callback(array[index], index, array)) {
                n++
              }
            } else {
              n = callback
              if (n == null || thisArg) {
                return array ? array[0] : undefined
              }
            }
            return slice(array, 0, nativeMin(nativeMax(0, n), length))
          }
          function flatten(array, isShallow, callback, thisArg) {
            if (typeof isShallow != 'boolean' && isShallow != null) {
              thisArg = callback
              callback =
                typeof isShallow != 'function' &&
                thisArg &&
                thisArg[isShallow] === array
                  ? null
                  : isShallow
              isShallow = false
            }
            if (callback != null) {
              array = map(array, callback, thisArg)
            }
            return baseFlatten(array, isShallow)
          }
          function indexOf(array, value, fromIndex) {
            if (typeof fromIndex == 'number') {
              var length = array ? array.length : 0
              fromIndex =
                fromIndex < 0
                  ? nativeMax(0, length + fromIndex)
                  : fromIndex || 0
            } else if (fromIndex) {
              var index = sortedIndex(array, value)
              return array[index] === value ? index : -1
            }
            return baseIndexOf(array, value, fromIndex)
          }
          function initial(array, callback, thisArg) {
            var n = 0,
              length = array ? array.length : 0
            if (typeof callback != 'number' && callback != null) {
              var index = length
              callback = lodash.createCallback(callback, thisArg, 3)
              while (index-- && callback(array[index], index, array)) {
                n++
              }
            } else {
              n = callback == null || thisArg ? 1 : callback || n
            }
            return slice(array, 0, nativeMin(nativeMax(0, length - n), length))
          }
          function intersection() {
            var args = [],
              argsIndex = -1,
              argsLength = arguments.length,
              caches = getArray(),
              indexOf = getIndexOf(),
              trustIndexOf = indexOf === baseIndexOf,
              seen = getArray()
            while (++argsIndex < argsLength) {
              var value = arguments[argsIndex]
              if (isArray(value) || isArguments(value)) {
                args.push(value)
                caches.push(
                  trustIndexOf &&
                    value.length >= largeArraySize &&
                    createCache(argsIndex ? args[argsIndex] : seen)
                )
              }
            }
            var array = args[0],
              index = -1,
              length = array ? array.length : 0,
              result = []
            outer: while (++index < length) {
              var cache = caches[0]
              value = array[index]
              if (
                (cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0
              ) {
                argsIndex = argsLength
                ;(cache || seen).push(value)
                while (--argsIndex) {
                  cache = caches[argsIndex]
                  if (
                    (cache
                      ? cacheIndexOf(cache, value)
                      : indexOf(args[argsIndex], value)) < 0
                  ) {
                    continue outer
                  }
                }
                result.push(value)
              }
            }
            while (argsLength--) {
              cache = caches[argsLength]
              if (cache) {
                releaseObject(cache)
              }
            }
            releaseArray(caches)
            releaseArray(seen)
            return result
          }
          function last(array, callback, thisArg) {
            var n = 0,
              length = array ? array.length : 0
            if (typeof callback != 'number' && callback != null) {
              var index = length
              callback = lodash.createCallback(callback, thisArg, 3)
              while (index-- && callback(array[index], index, array)) {
                n++
              }
            } else {
              n = callback
              if (n == null || thisArg) {
                return array ? array[length - 1] : undefined
              }
            }
            return slice(array, nativeMax(0, length - n))
          }
          function lastIndexOf(array, value, fromIndex) {
            var index = array ? array.length : 0
            if (typeof fromIndex == 'number') {
              index =
                (fromIndex < 0
                  ? nativeMax(0, index + fromIndex)
                  : nativeMin(fromIndex, index - 1)) + 1
            }
            while (index--) {
              if (array[index] === value) {
                return index
              }
            }
            return -1
          }
          function pull(array) {
            var args = arguments,
              argsIndex = 0,
              argsLength = args.length,
              length = array ? array.length : 0
            while (++argsIndex < argsLength) {
              var index = -1,
                value = args[argsIndex]
              while (++index < length) {
                if (array[index] === value) {
                  splice.call(array, index--, 1)
                  length--
                }
              }
            }
            return array
          }
          function range(start, end, step) {
            start = +start || 0
            step = typeof step == 'number' ? step : +step || 1
            if (end == null) {
              end = start
              start = 0
            }
            var index = -1,
              length = nativeMax(0, ceil((end - start) / (step || 1))),
              result = Array(length)
            while (++index < length) {
              result[index] = start
              start += step
            }
            return result
          }
          function remove(array, callback, thisArg) {
            var index = -1,
              length = array ? array.length : 0,
              result = []
            callback = lodash.createCallback(callback, thisArg, 3)
            while (++index < length) {
              var value = array[index]
              if (callback(value, index, array)) {
                result.push(value)
                splice.call(array, index--, 1)
                length--
              }
            }
            return result
          }
          function rest(array, callback, thisArg) {
            if (typeof callback != 'number' && callback != null) {
              var n = 0,
                index = -1,
                length = array ? array.length : 0
              callback = lodash.createCallback(callback, thisArg, 3)
              while (++index < length && callback(array[index], index, array)) {
                n++
              }
            } else {
              n = callback == null || thisArg ? 1 : nativeMax(0, callback)
            }
            return slice(array, n)
          }
          function sortedIndex(array, value, callback, thisArg) {
            var low = 0,
              high = array ? array.length : low
            callback = callback
              ? lodash.createCallback(callback, thisArg, 1)
              : identity
            value = callback(value)
            while (low < high) {
              var mid = (low + high) >>> 1
              callback(array[mid]) < value ? (low = mid + 1) : (high = mid)
            }
            return low
          }
          function union() {
            return baseUniq(baseFlatten(arguments, true, true))
          }
          function uniq(array, isSorted, callback, thisArg) {
            if (typeof isSorted != 'boolean' && isSorted != null) {
              thisArg = callback
              callback =
                typeof isSorted != 'function' &&
                thisArg &&
                thisArg[isSorted] === array
                  ? null
                  : isSorted
              isSorted = false
            }
            if (callback != null) {
              callback = lodash.createCallback(callback, thisArg, 3)
            }
            return baseUniq(array, isSorted, callback)
          }
          function without(array) {
            return baseDifference(array, slice(arguments, 1))
          }
          function xor() {
            var index = -1,
              length = arguments.length
            while (++index < length) {
              var array = arguments[index]
              if (isArray(array) || isArguments(array)) {
                var result = result
                  ? baseUniq(
                      baseDifference(result, array).concat(
                        baseDifference(array, result)
                      )
                    )
                  : array
              }
            }
            return result || []
          }
          function zip() {
            var array = arguments.length > 1 ? arguments : arguments[0],
              index = -1,
              length = array ? max(pluck(array, 'length')) : 0,
              result = Array(length < 0 ? 0 : length)
            while (++index < length) {
              result[index] = pluck(array, index)
            }
            return result
          }
          function zipObject(keys, values) {
            var index = -1,
              length = keys ? keys.length : 0,
              result = {}
            if (!values && length && !isArray(keys[0])) {
              values = []
            }
            while (++index < length) {
              var key = keys[index]
              if (values) {
                result[key] = values[index]
              } else if (key) {
                result[key[0]] = key[1]
              }
            }
            return result
          }
          function after(n, func) {
            if (!isFunction(func)) {
              throw new TypeError()
            }
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments)
              }
            }
          }
          function bind(func, thisArg) {
            return arguments.length > 2
              ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
              : createWrapper(func, 1, null, null, thisArg)
          }
          function bindAll(object) {
            var funcs =
                arguments.length > 1
                  ? baseFlatten(arguments, true, false, 1)
                  : functions(object),
              index = -1,
              length = funcs.length
            while (++index < length) {
              var key = funcs[index]
              object[key] = createWrapper(object[key], 1, null, null, object)
            }
            return object
          }
          function bindKey(object, key) {
            return arguments.length > 2
              ? createWrapper(key, 19, slice(arguments, 2), null, object)
              : createWrapper(key, 3, null, null, object)
          }
          function compose() {
            var funcs = arguments,
              length = funcs.length
            while (length--) {
              if (!isFunction(funcs[length])) {
                throw new TypeError()
              }
            }
            return function() {
              var args = arguments,
                length = funcs.length
              while (length--) {
                args = [funcs[length].apply(this, args)]
              }
              return args[0]
            }
          }
          function curry(func, arity) {
            arity = typeof arity == 'number' ? arity : +arity || func.length
            return createWrapper(func, 4, null, null, null, arity)
          }
          function debounce(func, wait, options) {
            var args,
              maxTimeoutId,
              result,
              stamp,
              thisArg,
              timeoutId,
              trailingCall,
              lastCalled = 0,
              maxWait = false,
              trailing = true
            if (!isFunction(func)) {
              throw new TypeError()
            }
            wait = nativeMax(0, wait) || 0
            if (options === true) {
              var leading = true
              trailing = false
            } else if (isObject(options)) {
              leading = options.leading
              maxWait =
                'maxWait' in options && (nativeMax(wait, options.maxWait) || 0)
              trailing = 'trailing' in options ? options.trailing : trailing
            }
            var delayed = function() {
              var remaining = wait - (now() - stamp)
              if (remaining <= 0) {
                if (maxTimeoutId) {
                  clearTimeout(maxTimeoutId)
                }
                var isCalled = trailingCall
                maxTimeoutId = timeoutId = trailingCall = undefined
                if (isCalled) {
                  lastCalled = now()
                  result = func.apply(thisArg, args)
                  if (!timeoutId && !maxTimeoutId) {
                    args = thisArg = null
                  }
                }
              } else {
                timeoutId = setTimeout(delayed, remaining)
              }
            }
            var maxDelayed = function() {
              if (timeoutId) {
                clearTimeout(timeoutId)
              }
              maxTimeoutId = timeoutId = trailingCall = undefined
              if (trailing || maxWait !== wait) {
                lastCalled = now()
                result = func.apply(thisArg, args)
                if (!timeoutId && !maxTimeoutId) {
                  args = thisArg = null
                }
              }
            }
            return function() {
              args = arguments
              stamp = now()
              thisArg = this
              trailingCall = trailing && (timeoutId || !leading)
              if (maxWait === false) {
                var leadingCall = leading && !timeoutId
              } else {
                if (!maxTimeoutId && !leading) {
                  lastCalled = stamp
                }
                var remaining = maxWait - (stamp - lastCalled),
                  isCalled = remaining <= 0
                if (isCalled) {
                  if (maxTimeoutId) {
                    maxTimeoutId = clearTimeout(maxTimeoutId)
                  }
                  lastCalled = stamp
                  result = func.apply(thisArg, args)
                } else if (!maxTimeoutId) {
                  maxTimeoutId = setTimeout(maxDelayed, remaining)
                }
              }
              if (isCalled && timeoutId) {
                timeoutId = clearTimeout(timeoutId)
              } else if (!timeoutId && wait !== maxWait) {
                timeoutId = setTimeout(delayed, wait)
              }
              if (leadingCall) {
                isCalled = true
                result = func.apply(thisArg, args)
              }
              if (isCalled && !timeoutId && !maxTimeoutId) {
                args = thisArg = null
              }
              return result
            }
          }
          function defer(func) {
            if (!isFunction(func)) {
              throw new TypeError()
            }
            var args = slice(arguments, 1)
            return setTimeout(function() {
              func.apply(undefined, args)
            }, 1)
          }
          function delay(func, wait) {
            if (!isFunction(func)) {
              throw new TypeError()
            }
            var args = slice(arguments, 2)
            return setTimeout(function() {
              func.apply(undefined, args)
            }, wait)
          }
          function memoize(func, resolver) {
            if (!isFunction(func)) {
              throw new TypeError()
            }
            var memoized = function() {
              var cache = memoized.cache,
                key = resolver
                  ? resolver.apply(this, arguments)
                  : keyPrefix + arguments[0]
              return hasOwnProperty.call(cache, key)
                ? cache[key]
                : (cache[key] = func.apply(this, arguments))
            }
            memoized.cache = {}
            return memoized
          }
          function once(func) {
            var ran, result
            if (!isFunction(func)) {
              throw new TypeError()
            }
            return function() {
              if (ran) {
                return result
              }
              ran = true
              result = func.apply(this, arguments)
              func = null
              return result
            }
          }
          function partial(func) {
            return createWrapper(func, 16, slice(arguments, 1))
          }
          function partialRight(func) {
            return createWrapper(func, 32, null, slice(arguments, 1))
          }
          function throttle(func, wait, options) {
            var leading = true,
              trailing = true
            if (!isFunction(func)) {
              throw new TypeError()
            }
            if (options === false) {
              leading = false
            } else if (isObject(options)) {
              leading = 'leading' in options ? options.leading : leading
              trailing = 'trailing' in options ? options.trailing : trailing
            }
            debounceOptions.leading = leading
            debounceOptions.maxWait = wait
            debounceOptions.trailing = trailing
            return debounce(func, wait, debounceOptions)
          }
          function wrap(value, wrapper) {
            return createWrapper(wrapper, 16, [value])
          }
          function constant(value) {
            return function() {
              return value
            }
          }
          function createCallback(func, thisArg, argCount) {
            var type = typeof func
            if (func == null || type == 'function') {
              return baseCreateCallback(func, thisArg, argCount)
            }
            if (type != 'object') {
              return property(func)
            }
            var props = keys(func),
              key = props[0],
              a = func[key]
            if (props.length == 1 && a === a && !isObject(a)) {
              return function(object) {
                var b = object[key]
                return a === b && (a !== 0 || 1 / a == 1 / b)
              }
            }
            return function(object) {
              var length = props.length,
                result = false
              while (length--) {
                if (
                  !(result = baseIsEqual(
                    object[props[length]],
                    func[props[length]],
                    null,
                    true
                  ))
                ) {
                  break
                }
              }
              return result
            }
          }
          function escape(string) {
            return string == null
              ? ''
              : String(string).replace(reUnescapedHtml, escapeHtmlChar)
          }
          function identity(value) {
            return value
          }
          function mixin(object, source, options) {
            var chain = true,
              methodNames = source && functions(source)
            if (!source || (!options && !methodNames.length)) {
              if (options == null) {
                options = source
              }
              ctor = lodashWrapper
              source = object
              object = lodash
              methodNames = functions(source)
            }
            if (options === false) {
              chain = false
            } else if (isObject(options) && 'chain' in options) {
              chain = options.chain
            }
            var ctor = object,
              isFunc = isFunction(ctor)
            forEach(methodNames, function(methodName) {
              var func = (object[methodName] = source[methodName])
              if (isFunc) {
                ctor.prototype[methodName] = function() {
                  var chainAll = this.__chain__,
                    value = this.__wrapped__,
                    args = [value]
                  push.apply(args, arguments)
                  var result = func.apply(object, args)
                  if (chain || chainAll) {
                    if (value === result && isObject(result)) {
                      return this
                    }
                    result = new ctor(result)
                    result.__chain__ = chainAll
                  }
                  return result
                }
              }
            })
          }
          function noConflict() {
            context._ = oldDash
            return this
          }
          function noop() {}
          var now =
            (isNative((now = Date.now)) && now) ||
            function() {
              return new Date().getTime()
            }
          var parseInt =
            nativeParseInt(whitespace + '08') == 8
              ? nativeParseInt
              : function(value, radix) {
                  return nativeParseInt(
                    isString(value)
                      ? value.replace(reLeadingSpacesAndZeros, '')
                      : value,
                    radix || 0
                  )
                }
          function property(key) {
            return function(object) {
              return object[key]
            }
          }
          function random(min, max, floating) {
            var noMin = min == null,
              noMax = max == null
            if (floating == null) {
              if (typeof min == 'boolean' && noMax) {
                floating = min
                min = 1
              } else if (!noMax && typeof max == 'boolean') {
                floating = max
                noMax = true
              }
            }
            if (noMin && noMax) {
              max = 1
            }
            min = +min || 0
            if (noMax) {
              max = min
              min = 0
            } else {
              max = +max || 0
            }
            if (floating || min % 1 || max % 1) {
              var rand = nativeRandom()
              return nativeMin(
                min +
                  rand *
                    (max - min + parseFloat('1e-' + ((rand + '').length - 1))),
                max
              )
            }
            return baseRandom(min, max)
          }
          function result(object, key) {
            if (object) {
              var value = object[key]
              return isFunction(value) ? object[key]() : value
            }
          }
          function template(text, data, options) {
            var settings = lodash.templateSettings
            text = String(text || '')
            options = defaults({}, options, settings)
            var imports = defaults({}, options.imports, settings.imports),
              importsKeys = keys(imports),
              importsValues = values(imports)
            var isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '"
            var reDelimiters = RegExp(
              (options.escape || reNoMatch).source +
                '|' +
                interpolate.source +
                '|' +
                (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                  .source +
                '|' +
                (options.evaluate || reNoMatch).source +
                '|$',
              'g'
            )
            text.replace(reDelimiters, function(
              match,
              escapeValue,
              interpolateValue,
              esTemplateValue,
              evaluateValue,
              offset
            ) {
              interpolateValue || (interpolateValue = esTemplateValue)
              source += text
                .slice(index, offset)
                .replace(reUnescapedString, escapeStringChar)
              if (escapeValue) {
                source += "' +\n__e(" + escapeValue + ") +\n'"
              }
              if (evaluateValue) {
                isEvaluating = true
                source += "';\n" + evaluateValue + ";\n__p += '"
              }
              if (interpolateValue) {
                source +=
                  "' +\n((__t = (" +
                  interpolateValue +
                  ")) == null ? '' : __t) +\n'"
              }
              index = offset + match.length
              return match
            })
            source += "';\n"
            var variable = options.variable,
              hasVariable = variable
            if (!hasVariable) {
              variable = 'obj'
              source = 'with (' + variable + ') {\n' + source + '\n}\n'
            }
            source = (isEvaluating
              ? source.replace(reEmptyStringLeading, '')
              : source
            )
              .replace(reEmptyStringMiddle, '$1')
              .replace(reEmptyStringTrailing, '$1;')
            source =
              'function(' +
              variable +
              ') {\n' +
              (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
              "var __t, __p = '', __e = _.escape" +
              (isEvaluating
                ? ', __j = Array.prototype.join;\n' +
                  "function print() { __p += __j.call(arguments, '') }\n"
                : ';\n') +
              source +
              'return __p\n}'
            var sourceURL =
              '\n/*\n//# sourceURL=' +
              (options.sourceURL ||
                '/lodash/template/source[' + templateCounter++ + ']') +
              '\n*/'
            try {
              var result = Function(
                importsKeys,
                'return ' + source + sourceURL
              ).apply(undefined, importsValues)
            } catch (e) {
              e.source = source
              throw e
            }
            if (data) {
              return result(data)
            }
            result.source = source
            return result
          }
          function times(n, callback, thisArg) {
            n = (n = +n) > -1 ? n : 0
            var index = -1,
              result = Array(n)
            callback = baseCreateCallback(callback, thisArg, 1)
            while (++index < n) {
              result[index] = callback(index)
            }
            return result
          }
          function unescape(string) {
            return string == null
              ? ''
              : String(string).replace(reEscapedHtml, unescapeHtmlChar)
          }
          function uniqueId(prefix) {
            var id = ++idCounter
            return String(prefix == null ? '' : prefix) + id
          }
          function chain(value) {
            value = new lodashWrapper(value)
            value.__chain__ = true
            return value
          }
          function tap(value, interceptor) {
            interceptor(value)
            return value
          }
          function wrapperChain() {
            this.__chain__ = true
            return this
          }
          function wrapperToString() {
            return String(this.__wrapped__)
          }
          function wrapperValueOf() {
            return this.__wrapped__
          }
          lodash.after = after
          lodash.assign = assign
          lodash.at = at
          lodash.bind = bind
          lodash.bindAll = bindAll
          lodash.bindKey = bindKey
          lodash.chain = chain
          lodash.compact = compact
          lodash.compose = compose
          lodash.constant = constant
          lodash.countBy = countBy
          lodash.create = create
          lodash.createCallback = createCallback
          lodash.curry = curry
          lodash.debounce = debounce
          lodash.defaults = defaults
          lodash.defer = defer
          lodash.delay = delay
          lodash.difference = difference
          lodash.filter = filter
          lodash.flatten = flatten
          lodash.forEach = forEach
          lodash.forEachRight = forEachRight
          lodash.forIn = forIn
          lodash.forInRight = forInRight
          lodash.forOwn = forOwn
          lodash.forOwnRight = forOwnRight
          lodash.functions = functions
          lodash.groupBy = groupBy
          lodash.indexBy = indexBy
          lodash.initial = initial
          lodash.intersection = intersection
          lodash.invert = invert
          lodash.invoke = invoke
          lodash.keys = keys
          lodash.map = map
          lodash.mapValues = mapValues
          lodash.max = max
          lodash.memoize = memoize
          lodash.merge = merge
          lodash.min = min
          lodash.omit = omit
          lodash.once = once
          lodash.pairs = pairs
          lodash.partial = partial
          lodash.partialRight = partialRight
          lodash.pick = pick
          lodash.pluck = pluck
          lodash.property = property
          lodash.pull = pull
          lodash.range = range
          lodash.reject = reject
          lodash.remove = remove
          lodash.rest = rest
          lodash.shuffle = shuffle
          lodash.sortBy = sortBy
          lodash.tap = tap
          lodash.throttle = throttle
          lodash.times = times
          lodash.toArray = toArray
          lodash.transform = transform
          lodash.union = union
          lodash.uniq = uniq
          lodash.values = values
          lodash.where = where
          lodash.without = without
          lodash.wrap = wrap
          lodash.xor = xor
          lodash.zip = zip
          lodash.zipObject = zipObject
          lodash.collect = map
          lodash.drop = rest
          lodash.each = forEach
          lodash.eachRight = forEachRight
          lodash.extend = assign
          lodash.methods = functions
          lodash.object = zipObject
          lodash.select = filter
          lodash.tail = rest
          lodash.unique = uniq
          lodash.unzip = zip
          mixin(lodash)
          lodash.clone = clone
          lodash.cloneDeep = cloneDeep
          lodash.contains = contains
          lodash.escape = escape
          lodash.every = every
          lodash.find = find
          lodash.findIndex = findIndex
          lodash.findKey = findKey
          lodash.findLast = findLast
          lodash.findLastIndex = findLastIndex
          lodash.findLastKey = findLastKey
          lodash.has = has
          lodash.identity = identity
          lodash.indexOf = indexOf
          lodash.isArguments = isArguments
          lodash.isArray = isArray
          lodash.isBoolean = isBoolean
          lodash.isDate = isDate
          lodash.isElement = isElement
          lodash.isEmpty = isEmpty
          lodash.isEqual = isEqual
          lodash.isFinite = isFinite
          lodash.isFunction = isFunction
          lodash.isNaN = isNaN
          lodash.isNull = isNull
          lodash.isNumber = isNumber
          lodash.isObject = isObject
          lodash.isPlainObject = isPlainObject
          lodash.isRegExp = isRegExp
          lodash.isString = isString
          lodash.isUndefined = isUndefined
          lodash.lastIndexOf = lastIndexOf
          lodash.mixin = mixin
          lodash.noConflict = noConflict
          lodash.noop = noop
          lodash.now = now
          lodash.parseInt = parseInt
          lodash.random = random
          lodash.reduce = reduce
          lodash.reduceRight = reduceRight
          lodash.result = result
          lodash.runInContext = runInContext
          lodash.size = size
          lodash.some = some
          lodash.sortedIndex = sortedIndex
          lodash.template = template
          lodash.unescape = unescape
          lodash.uniqueId = uniqueId
          lodash.all = every
          lodash.any = some
          lodash.detect = find
          lodash.findWhere = find
          lodash.foldl = reduce
          lodash.foldr = reduceRight
          lodash.include = contains
          lodash.inject = reduce
          mixin(
            (function() {
              var source = {}
              forOwn(lodash, function(func, methodName) {
                if (!lodash.prototype[methodName]) {
                  source[methodName] = func
                }
              })
              return source
            })(),
            false
          )
          lodash.first = first
          lodash.last = last
          lodash.sample = sample
          lodash.take = first
          lodash.head = first
          forOwn(lodash, function(func, methodName) {
            var callbackable = methodName !== 'sample'
            if (!lodash.prototype[methodName]) {
              lodash.prototype[methodName] = function(n, guard) {
                var chainAll = this.__chain__,
                  result = func(this.__wrapped__, n, guard)
                return !chainAll &&
                  (n == null ||
                    (guard && !(callbackable && typeof n == 'function')))
                  ? result
                  : new lodashWrapper(result, chainAll)
              }
            }
          })
          lodash.VERSION = '2.4.2'
          lodash.prototype.chain = wrapperChain
          lodash.prototype.toString = wrapperToString
          lodash.prototype.value = wrapperValueOf
          lodash.prototype.valueOf = wrapperValueOf
          forEach(['join', 'pop', 'shift'], function(methodName) {
            var func = arrayRef[methodName]
            lodash.prototype[methodName] = function() {
              var chainAll = this.__chain__,
                result = func.apply(this.__wrapped__, arguments)
              return chainAll ? new lodashWrapper(result, chainAll) : result
            }
          })
          forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
            var func = arrayRef[methodName]
            lodash.prototype[methodName] = function() {
              func.apply(this.__wrapped__, arguments)
              return this
            }
          })
          forEach(['concat', 'slice', 'splice'], function(methodName) {
            var func = arrayRef[methodName]
            lodash.prototype[methodName] = function() {
              return new lodashWrapper(
                func.apply(this.__wrapped__, arguments),
                this.__chain__
              )
            }
          })
          return lodash
        }
        var _ = runInContext()
        if (true) {
          root._ = _
          !((__WEBPACK_AMD_DEFINE_RESULT__ = function() {
            return _
          }.call(exports, __webpack_require__, exports, module)),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
            (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
        } else if (freeExports && freeModule) {
          if (moduleExports) {
            ;(freeModule.exports = _)._ = _
          } else {
            freeExports._ = _
          }
        } else {
          root._ = _
        }
      }.call(this))
    }.call(exports, __webpack_require__(100)(module), __webpack_require__(5)))
  },
  function(module, exports, __webpack_require__) {
    var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__
    ;(function(global, factory) {
      'use strict'
      if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document
          ? factory(global, true)
          : function(w) {
              if (!w.document) {
                throw new Error('jQuery requires a window with a document')
              }
              return factory(w)
            }
      } else {
        factory(global)
      }
    })(typeof window !== 'undefined' ? window : this, function(
      window,
      noGlobal
    ) {
      'use strict'
      var arr = []
      var document = window.document
      var getProto = Object.getPrototypeOf
      var slice = arr.slice
      var concat = arr.concat
      var push = arr.push
      var indexOf = arr.indexOf
      var class2type = {}
      var toString = class2type.toString
      var hasOwn = class2type.hasOwnProperty
      var fnToString = hasOwn.toString
      var ObjectFunctionString = fnToString.call(Object)
      var support = {}
      function DOMEval(code, doc) {
        doc = doc || document
        var script = doc.createElement('script')
        script.text = code
        doc.head.appendChild(script).parentNode.removeChild(script)
      }
      var version = '3.2.1',
        jQuery = function(selector, context) {
          return new jQuery.fn.init(selector, context)
        },
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([a-z])/g,
        fcamelCase = function(all, letter) {
          return letter.toUpperCase()
        }
      jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function() {
          return slice.call(this)
        },
        get: function(num) {
          if (num == null) {
            return slice.call(this)
          }
          return num < 0 ? this[num + this.length] : this[num]
        },
        pushStack: function(elems) {
          var ret = jQuery.merge(this.constructor(), elems)
          ret.prevObject = this
          return ret
        },
        each: function(callback) {
          return jQuery.each(this, callback)
        },
        map: function(callback) {
          return this.pushStack(
            jQuery.map(this, function(elem, i) {
              return callback.call(elem, i, elem)
            })
          )
        },
        slice: function() {
          return this.pushStack(slice.apply(this, arguments))
        },
        first: function() {
          return this.eq(0)
        },
        last: function() {
          return this.eq(-1)
        },
        eq: function(i) {
          var len = this.length,
            j = +i + (i < 0 ? len : 0)
          return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
        },
        end: function() {
          return this.prevObject || this.constructor()
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
      }
      jQuery.extend = jQuery.fn.extend = function() {
        var options,
          name,
          src,
          copy,
          copyIsArray,
          clone,
          target = arguments[0] || {},
          i = 1,
          length = arguments.length,
          deep = false
        if (typeof target === 'boolean') {
          deep = target
          target = arguments[i] || {}
          i++
        }
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
          target = {}
        }
        if (i === length) {
          target = this
          i--
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              src = target[name]
              copy = options[name]
              if (target === copy) {
                continue
              }
              if (
                deep &&
                copy &&
                (jQuery.isPlainObject(copy) ||
                  (copyIsArray = Array.isArray(copy)))
              ) {
                if (copyIsArray) {
                  copyIsArray = false
                  clone = src && Array.isArray(src) ? src : []
                } else {
                  clone = src && jQuery.isPlainObject(src) ? src : {}
                }
                target[name] = jQuery.extend(deep, clone, copy)
              } else if (copy !== undefined) {
                target[name] = copy
              }
            }
          }
        }
        return target
      }
      jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function(msg) {
          throw new Error(msg)
        },
        noop: function() {},
        isFunction: function(obj) {
          return jQuery.type(obj) === 'function'
        },
        isWindow: function(obj) {
          return obj != null && obj === obj.window
        },
        isNumeric: function(obj) {
          var type = jQuery.type(obj)
          return (
            (type === 'number' || type === 'string') &&
            !isNaN(obj - parseFloat(obj))
          )
        },
        isPlainObject: function(obj) {
          var proto, Ctor
          if (!obj || toString.call(obj) !== '[object Object]') {
            return false
          }
          proto = getProto(obj)
          if (!proto) {
            return true
          }
          Ctor = hasOwn.call(proto, 'constructor') && proto.constructor
          return (
            typeof Ctor === 'function' &&
            fnToString.call(Ctor) === ObjectFunctionString
          )
        },
        isEmptyObject: function(obj) {
          var name
          for (name in obj) {
            return false
          }
          return true
        },
        type: function(obj) {
          if (obj == null) {
            return obj + ''
          }
          return typeof obj === 'object' || typeof obj === 'function'
            ? class2type[toString.call(obj)] || 'object'
            : typeof obj
        },
        globalEval: function(code) {
          DOMEval(code)
        },
        camelCase: function(string) {
          return string
            .replace(rmsPrefix, 'ms-')
            .replace(rdashAlpha, fcamelCase)
        },
        each: function(obj, callback) {
          var length,
            i = 0
          if (isArrayLike(obj)) {
            length = obj.length
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break
              }
            }
          }
          return obj
        },
        trim: function(text) {
          return text == null ? '' : (text + '').replace(rtrim, '')
        },
        makeArray: function(arr, results) {
          var ret = results || []
          if (arr != null) {
            if (isArrayLike(Object(arr))) {
              jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr)
            } else {
              push.call(ret, arr)
            }
          }
          return ret
        },
        inArray: function(elem, arr, i) {
          return arr == null ? -1 : indexOf.call(arr, elem, i)
        },
        merge: function(first, second) {
          var len = +second.length,
            j = 0,
            i = first.length
          for (; j < len; j++) {
            first[i++] = second[j]
          }
          first.length = i
          return first
        },
        grep: function(elems, callback, invert) {
          var callbackInverse,
            matches = [],
            i = 0,
            length = elems.length,
            callbackExpect = !invert
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i)
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i])
            }
          }
          return matches
        },
        map: function(elems, callback, arg) {
          var length,
            value,
            i = 0,
            ret = []
          if (isArrayLike(elems)) {
            length = elems.length
            for (; i < length; i++) {
              value = callback(elems[i], i, arg)
              if (value != null) {
                ret.push(value)
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg)
              if (value != null) {
                ret.push(value)
              }
            }
          }
          return concat.apply([], ret)
        },
        guid: 1,
        proxy: function(fn, context) {
          var tmp, args, proxy
          if (typeof context === 'string') {
            tmp = fn[context]
            context = fn
            fn = tmp
          }
          if (!jQuery.isFunction(fn)) {
            return undefined
          }
          args = slice.call(arguments, 2)
          proxy = function() {
            return fn.apply(context || this, args.concat(slice.call(arguments)))
          }
          proxy.guid = fn.guid = fn.guid || jQuery.guid++
          return proxy
        },
        now: Date.now,
        support: support
      })
      if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator]
      }
      jQuery.each(
        'Boolean Number String Function Array Date RegExp Object Error Symbol'.split(
          ' '
        ),
        function(i, name) {
          class2type['[object ' + name + ']'] = name.toLowerCase()
        }
      )
      function isArrayLike(obj) {
        var length = !!obj && 'length' in obj && obj.length,
          type = jQuery.type(obj)
        if (type === 'function' || jQuery.isWindow(obj)) {
          return false
        }
        return (
          type === 'array' ||
          length === 0 ||
          (typeof length === 'number' && length > 0 && length - 1 in obj)
        )
      }
      var Sizzle = (function(window) {
        var i,
          support,
          Expr,
          getText,
          isXML,
          tokenize,
          compile,
          select,
          outermostContext,
          sortInput,
          hasDuplicate,
          setDocument,
          document,
          docElem,
          documentIsHTML,
          rbuggyQSA,
          rbuggyMatches,
          matches,
          contains,
          expando = 'sizzle' + 1 * new Date(),
          preferredDoc = window.document,
          dirruns = 0,
          done = 0,
          classCache = createCache(),
          tokenCache = createCache(),
          compilerCache = createCache(),
          sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true
            }
            return 0
          },
          hasOwn = {}.hasOwnProperty,
          arr = [],
          pop = arr.pop,
          push_native = arr.push,
          push = arr.push,
          slice = arr.slice,
          indexOf = function(list, elem) {
            var i = 0,
              len = list.length
            for (; i < len; i++) {
              if (list[i] === elem) {
                return i
              }
            }
            return -1
          },
          booleans =
            'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
          whitespace = '[\\x20\\t\\r\\n\\f]',
          identifier = '(?:\\\\.|[\\w-]|[^\0-\\xa0])+',
          attributes =
            '\\[' +
            whitespace +
            '*(' +
            identifier +
            ')(?:' +
            whitespace +
            '*([*^$|!~]?=)' +
            whitespace +
            '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' +
            identifier +
            '))|)' +
            whitespace +
            '*\\]',
          pseudos =
            ':(' +
            identifier +
            ')(?:\\((' +
            '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' +
            '((?:\\\\.|[^\\\\()[\\]]|' +
            attributes +
            ')*)|' +
            '.*' +
            ')\\)|)',
          rwhitespace = new RegExp(whitespace + '+', 'g'),
          rtrim = new RegExp(
            '^' +
              whitespace +
              '+|((?:^|[^\\\\])(?:\\\\.)*)' +
              whitespace +
              '+$',
            'g'
          ),
          rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'),
          rcombinators = new RegExp(
            '^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'
          ),
          rattributeQuotes = new RegExp(
            '=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]',
            'g'
          ),
          rpseudo = new RegExp(pseudos),
          ridentifier = new RegExp('^' + identifier + '$'),
          matchExpr = {
            ID: new RegExp('^#(' + identifier + ')'),
            CLASS: new RegExp('^\\.(' + identifier + ')'),
            TAG: new RegExp('^(' + identifier + '|[*])'),
            ATTR: new RegExp('^' + attributes),
            PSEUDO: new RegExp('^' + pseudos),
            CHILD: new RegExp(
              '^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' +
                whitespace +
                '*(even|odd|(([+-]|)(\\d*)n|)' +
                whitespace +
                '*(?:([+-]|)' +
                whitespace +
                '*(\\d+)|))' +
                whitespace +
                '*\\)|)',
              'i'
            ),
            bool: new RegExp('^(?:' + booleans + ')$', 'i'),
            needsContext: new RegExp(
              '^' +
                whitespace +
                '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' +
                whitespace +
                '*((?:-\\d)?\\d*)' +
                whitespace +
                '*\\)|)(?=[^-]|$)',
              'i'
            )
          },
          rinputs = /^(?:input|select|textarea|button)$/i,
          rheader = /^h\d$/i,
          rnative = /^[^{]+\{\s*\[native \w/,
          rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
          rsibling = /[+~]/,
          runescape = new RegExp(
            '\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)',
            'ig'
          ),
          funescape = function(_, escaped, escapedWhitespace) {
            var high = '0x' + escaped - 65536
            return high !== high || escapedWhitespace
              ? escaped
              : high < 0
                ? String.fromCharCode(high + 65536)
                : String.fromCharCode(
                    (high >> 10) | 55296,
                    (high & 1023) | 56320
                  )
          },
          rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
          fcssescape = function(ch, asCodePoint) {
            if (asCodePoint) {
              if (ch === '\0') {
                return '�'
              }
              return (
                ch.slice(0, -1) +
                '\\' +
                ch.charCodeAt(ch.length - 1).toString(16) +
                ' '
              )
            }
            return '\\' + ch
          },
          unloadHandler = function() {
            setDocument()
          },
          disabledAncestor = addCombinator(
            function(elem) {
              return (
                elem.disabled === true && ('form' in elem || 'label' in elem)
              )
            },
            {
              dir: 'parentNode',
              next: 'legend'
            }
          )
        try {
          push.apply(
            (arr = slice.call(preferredDoc.childNodes)),
            preferredDoc.childNodes
          )
          arr[preferredDoc.childNodes.length].nodeType
        } catch (e) {
          push = {
            apply: arr.length
              ? function(target, els) {
                  push_native.apply(target, slice.call(els))
                }
              : function(target, els) {
                  var j = target.length,
                    i = 0
                  while ((target[j++] = els[i++])) {}
                  target.length = j - 1
                }
          }
        }
        function Sizzle(selector, context, results, seed) {
          var m,
            i,
            elem,
            nid,
            match,
            groups,
            newSelector,
            newContext = context && context.ownerDocument,
            nodeType = context ? context.nodeType : 9
          results = results || []
          if (
            typeof selector !== 'string' ||
            !selector ||
            (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
          ) {
            return results
          }
          if (!seed) {
            if (
              (context ? context.ownerDocument || context : preferredDoc) !==
              document
            ) {
              setDocument(context)
            }
            context = context || document
            if (documentIsHTML) {
              if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                if ((m = match[1])) {
                  if (nodeType === 9) {
                    if ((elem = context.getElementById(m))) {
                      if (elem.id === m) {
                        results.push(elem)
                        return results
                      }
                    } else {
                      return results
                    }
                  } else {
                    if (
                      newContext &&
                      (elem = newContext.getElementById(m)) &&
                      contains(context, elem) &&
                      elem.id === m
                    ) {
                      results.push(elem)
                      return results
                    }
                  }
                } else if (match[2]) {
                  push.apply(results, context.getElementsByTagName(selector))
                  return results
                } else if (
                  (m = match[3]) &&
                  support.getElementsByClassName &&
                  context.getElementsByClassName
                ) {
                  push.apply(results, context.getElementsByClassName(m))
                  return results
                }
              }
              if (
                support.qsa &&
                !compilerCache[selector + ' '] &&
                (!rbuggyQSA || !rbuggyQSA.test(selector))
              ) {
                if (nodeType !== 1) {
                  newContext = context
                  newSelector = selector
                } else if (context.nodeName.toLowerCase() !== 'object') {
                  if ((nid = context.getAttribute('id'))) {
                    nid = nid.replace(rcssescape, fcssescape)
                  } else {
                    context.setAttribute('id', (nid = expando))
                  }
                  groups = tokenize(selector)
                  i = groups.length
                  while (i--) {
                    groups[i] = '#' + nid + ' ' + toSelector(groups[i])
                  }
                  newSelector = groups.join(',')
                  newContext =
                    (rsibling.test(selector) &&
                      testContext(context.parentNode)) ||
                    context
                }
                if (newSelector) {
                  try {
                    push.apply(
                      results,
                      newContext.querySelectorAll(newSelector)
                    )
                    return results
                  } catch (qsaError) {
                  } finally {
                    if (nid === expando) {
                      context.removeAttribute('id')
                    }
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrim, '$1'), context, results, seed)
        }
        function createCache() {
          var keys = []
          function cache(key, value) {
            if (keys.push(key + ' ') > Expr.cacheLength) {
              delete cache[keys.shift()]
            }
            return (cache[key + ' '] = value)
          }
          return cache
        }
        function markFunction(fn) {
          fn[expando] = true
          return fn
        }
        function assert(fn) {
          var el = document.createElement('fieldset')
          try {
            return !!fn(el)
          } catch (e) {
            return false
          } finally {
            if (el.parentNode) {
              el.parentNode.removeChild(el)
            }
            el = null
          }
        }
        function addHandle(attrs, handler) {
          var arr = attrs.split('|'),
            i = arr.length
          while (i--) {
            Expr.attrHandle[arr[i]] = handler
          }
        }
        function siblingCheck(a, b) {
          var cur = b && a,
            diff =
              cur &&
              a.nodeType === 1 &&
              b.nodeType === 1 &&
              a.sourceIndex - b.sourceIndex
          if (diff) {
            return diff
          }
          if (cur) {
            while ((cur = cur.nextSibling)) {
              if (cur === b) {
                return -1
              }
            }
          }
          return a ? 1 : -1
        }
        function createInputPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase()
            return name === 'input' && elem.type === type
          }
        }
        function createButtonPseudo(type) {
          return function(elem) {
            var name = elem.nodeName.toLowerCase()
            return (name === 'input' || name === 'button') && elem.type === type
          }
        }
        function createDisabledPseudo(disabled) {
          return function(elem) {
            if ('form' in elem) {
              if (elem.parentNode && elem.disabled === false) {
                if ('label' in elem) {
                  if ('label' in elem.parentNode) {
                    return elem.parentNode.disabled === disabled
                  } else {
                    return elem.disabled === disabled
                  }
                }
                return (
                  elem.isDisabled === disabled ||
                  (elem.isDisabled !== !disabled &&
                    disabledAncestor(elem) === disabled)
                )
              }
              return elem.disabled === disabled
            } else if ('label' in elem) {
              return elem.disabled === disabled
            }
            return false
          }
        }
        function createPositionalPseudo(fn) {
          return markFunction(function(argument) {
            argument = +argument
            return markFunction(function(seed, matches) {
              var j,
                matchIndexes = fn([], seed.length, argument),
                i = matchIndexes.length
              while (i--) {
                if (seed[(j = matchIndexes[i])]) {
                  seed[j] = !(matches[j] = seed[j])
                }
              }
            })
          })
        }
        function testContext(context) {
          return (
            context &&
            typeof context.getElementsByTagName !== 'undefined' &&
            context
          )
        }
        support = Sizzle.support = {}
        isXML = Sizzle.isXML = function(elem) {
          var documentElement =
            elem && (elem.ownerDocument || elem).documentElement
          return documentElement ? documentElement.nodeName !== 'HTML' : false
        }
        setDocument = Sizzle.setDocument = function(node) {
          var hasCompare,
            subWindow,
            doc = node ? node.ownerDocument || node : preferredDoc
          if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
            return document
          }
          document = doc
          docElem = document.documentElement
          documentIsHTML = !isXML(document)
          if (
            preferredDoc !== document &&
            (subWindow = document.defaultView) &&
            subWindow.top !== subWindow
          ) {
            if (subWindow.addEventListener) {
              subWindow.addEventListener('unload', unloadHandler, false)
            } else if (subWindow.attachEvent) {
              subWindow.attachEvent('onunload', unloadHandler)
            }
          }
          support.attributes = assert(function(el) {
            el.className = 'i'
            return !el.getAttribute('className')
          })
          support.getElementsByTagName = assert(function(el) {
            el.appendChild(document.createComment(''))
            return !el.getElementsByTagName('*').length
          })
          support.getElementsByClassName = rnative.test(
            document.getElementsByClassName
          )
          support.getById = assert(function(el) {
            docElem.appendChild(el).id = expando
            return (
              !document.getElementsByName ||
              !document.getElementsByName(expando).length
            )
          })
          if (support.getById) {
            Expr.filter['ID'] = function(id) {
              var attrId = id.replace(runescape, funescape)
              return function(elem) {
                return elem.getAttribute('id') === attrId
              }
            }
            Expr.find['ID'] = function(id, context) {
              if (
                typeof context.getElementById !== 'undefined' &&
                documentIsHTML
              ) {
                var elem = context.getElementById(id)
                return elem ? [elem] : []
              }
            }
          } else {
            Expr.filter['ID'] = function(id) {
              var attrId = id.replace(runescape, funescape)
              return function(elem) {
                var node =
                  typeof elem.getAttributeNode !== 'undefined' &&
                  elem.getAttributeNode('id')
                return node && node.value === attrId
              }
            }
            Expr.find['ID'] = function(id, context) {
              if (
                typeof context.getElementById !== 'undefined' &&
                documentIsHTML
              ) {
                var node,
                  i,
                  elems,
                  elem = context.getElementById(id)
                if (elem) {
                  node = elem.getAttributeNode('id')
                  if (node && node.value === id) {
                    return [elem]
                  }
                  elems = context.getElementsByName(id)
                  i = 0
                  while ((elem = elems[i++])) {
                    node = elem.getAttributeNode('id')
                    if (node && node.value === id) {
                      return [elem]
                    }
                  }
                }
                return []
              }
            }
          }
          Expr.find['TAG'] = support.getElementsByTagName
            ? function(tag, context) {
                if (typeof context.getElementsByTagName !== 'undefined') {
                  return context.getElementsByTagName(tag)
                } else if (support.qsa) {
                  return context.querySelectorAll(tag)
                }
              }
            : function(tag, context) {
                var elem,
                  tmp = [],
                  i = 0,
                  results = context.getElementsByTagName(tag)
                if (tag === '*') {
                  while ((elem = results[i++])) {
                    if (elem.nodeType === 1) {
                      tmp.push(elem)
                    }
                  }
                  return tmp
                }
                return results
              }
          Expr.find['CLASS'] =
            support.getElementsByClassName &&
            function(className, context) {
              if (
                typeof context.getElementsByClassName !== 'undefined' &&
                documentIsHTML
              ) {
                return context.getElementsByClassName(className)
              }
            }
          rbuggyMatches = []
          rbuggyQSA = []
          if ((support.qsa = rnative.test(document.querySelectorAll))) {
            assert(function(el) {
              docElem.appendChild(el).innerHTML =
                "<a id='" +
                expando +
                "'></a>" +
                "<select id='" +
                expando +
                "-\r\\' msallowcapture=''>" +
                "<option selected=''></option></select>"
              if (el.querySelectorAll("[msallowcapture^='']").length) {
                rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")')
              }
              if (!el.querySelectorAll('[selected]').length) {
                rbuggyQSA.push(
                  '\\[' + whitespace + '*(?:value|' + booleans + ')'
                )
              }
              if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                rbuggyQSA.push('~=')
              }
              if (!el.querySelectorAll(':checked').length) {
                rbuggyQSA.push(':checked')
              }
              if (!el.querySelectorAll('a#' + expando + '+*').length) {
                rbuggyQSA.push('.#.+[+~]')
              }
            })
            assert(function(el) {
              el.innerHTML =
                "<a href='' disabled='disabled'></a>" +
                "<select disabled='disabled'><option/></select>"
              var input = document.createElement('input')
              input.setAttribute('type', 'hidden')
              el.appendChild(input).setAttribute('name', 'D')
              if (el.querySelectorAll('[name=d]').length) {
                rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=')
              }
              if (el.querySelectorAll(':enabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              docElem.appendChild(el).disabled = true
              if (el.querySelectorAll(':disabled').length !== 2) {
                rbuggyQSA.push(':enabled', ':disabled')
              }
              el.querySelectorAll('*,:x')
              rbuggyQSA.push(',.*:')
            })
          }
          if (
            (support.matchesSelector = rnative.test(
              (matches =
                docElem.matches ||
                docElem.webkitMatchesSelector ||
                docElem.mozMatchesSelector ||
                docElem.oMatchesSelector ||
                docElem.msMatchesSelector)
            ))
          ) {
            assert(function(el) {
              support.disconnectedMatch = matches.call(el, '*')
              matches.call(el, "[s!='']:x")
              rbuggyMatches.push('!=', pseudos)
            })
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'))
          rbuggyMatches =
            rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'))
          hasCompare = rnative.test(docElem.compareDocumentPosition)
          contains =
            hasCompare || rnative.test(docElem.contains)
              ? function(a, b) {
                  var adown = a.nodeType === 9 ? a.documentElement : a,
                    bup = b && b.parentNode
                  return (
                    a === bup ||
                    !!(
                      bup &&
                      bup.nodeType === 1 &&
                      (adown.contains
                        ? adown.contains(bup)
                        : a.compareDocumentPosition &&
                          a.compareDocumentPosition(bup) & 16)
                    )
                  )
                }
              : function(a, b) {
                  if (b) {
                    while ((b = b.parentNode)) {
                      if (b === a) {
                        return true
                      }
                    }
                  }
                  return false
                }
          sortOrder = hasCompare
            ? function(a, b) {
                if (a === b) {
                  hasDuplicate = true
                  return 0
                }
                var compare =
                  !a.compareDocumentPosition - !b.compareDocumentPosition
                if (compare) {
                  return compare
                }
                compare =
                  (a.ownerDocument || a) === (b.ownerDocument || b)
                    ? a.compareDocumentPosition(b)
                    : 1
                if (
                  compare & 1 ||
                  (!support.sortDetached &&
                    b.compareDocumentPosition(a) === compare)
                ) {
                  if (
                    a === document ||
                    (a.ownerDocument === preferredDoc &&
                      contains(preferredDoc, a))
                  ) {
                    return -1
                  }
                  if (
                    b === document ||
                    (b.ownerDocument === preferredDoc &&
                      contains(preferredDoc, b))
                  ) {
                    return 1
                  }
                  return sortInput
                    ? indexOf(sortInput, a) - indexOf(sortInput, b)
                    : 0
                }
                return compare & 4 ? -1 : 1
              }
            : function(a, b) {
                if (a === b) {
                  hasDuplicate = true
                  return 0
                }
                var cur,
                  i = 0,
                  aup = a.parentNode,
                  bup = b.parentNode,
                  ap = [a],
                  bp = [b]
                if (!aup || !bup) {
                  return a === document
                    ? -1
                    : b === document
                      ? 1
                      : aup
                        ? -1
                        : bup
                          ? 1
                          : sortInput
                            ? indexOf(sortInput, a) - indexOf(sortInput, b)
                            : 0
                } else if (aup === bup) {
                  return siblingCheck(a, b)
                }
                cur = a
                while ((cur = cur.parentNode)) {
                  ap.unshift(cur)
                }
                cur = b
                while ((cur = cur.parentNode)) {
                  bp.unshift(cur)
                }
                while (ap[i] === bp[i]) {
                  i++
                }
                return i
                  ? siblingCheck(ap[i], bp[i])
                  : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
              }
          return document
        }
        Sizzle.matches = function(expr, elements) {
          return Sizzle(expr, null, null, elements)
        }
        Sizzle.matchesSelector = function(elem, expr) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          expr = expr.replace(rattributeQuotes, "='$1']")
          if (
            support.matchesSelector &&
            documentIsHTML &&
            !compilerCache[expr + ' '] &&
            (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
            (!rbuggyQSA || !rbuggyQSA.test(expr))
          ) {
            try {
              var ret = matches.call(elem, expr)
              if (
                ret ||
                support.disconnectedMatch ||
                (elem.document && elem.document.nodeType !== 11)
              ) {
                return ret
              }
            } catch (e) {}
          }
          return Sizzle(expr, document, null, [elem]).length > 0
        }
        Sizzle.contains = function(context, elem) {
          if ((context.ownerDocument || context) !== document) {
            setDocument(context)
          }
          return contains(context, elem)
        }
        Sizzle.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) !== document) {
            setDocument(elem)
          }
          var fn = Expr.attrHandle[name.toLowerCase()],
            val =
              fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                ? fn(elem, name, !documentIsHTML)
                : undefined
          return val !== undefined
            ? val
            : support.attributes || !documentIsHTML
              ? elem.getAttribute(name)
              : (val = elem.getAttributeNode(name)) && val.specified
                ? val.value
                : null
        }
        Sizzle.escape = function(sel) {
          return (sel + '').replace(rcssescape, fcssescape)
        }
        Sizzle.error = function(msg) {
          throw new Error('Syntax error, unrecognized expression: ' + msg)
        }
        Sizzle.uniqueSort = function(results) {
          var elem,
            duplicates = [],
            j = 0,
            i = 0
          hasDuplicate = !support.detectDuplicates
          sortInput = !support.sortStable && results.slice(0)
          results.sort(sortOrder)
          if (hasDuplicate) {
            while ((elem = results[i++])) {
              if (elem === results[i]) {
                j = duplicates.push(i)
              }
            }
            while (j--) {
              results.splice(duplicates[j], 1)
            }
          }
          sortInput = null
          return results
        }
        getText = Sizzle.getText = function(elem) {
          var node,
            ret = '',
            i = 0,
            nodeType = elem.nodeType
          if (!nodeType) {
            while ((node = elem[i++])) {
              ret += getText(node)
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            if (typeof elem.textContent === 'string') {
              return elem.textContent
            } else {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                ret += getText(elem)
              }
            }
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue
          }
          return ret
        }
        Expr = Sizzle.selectors = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            '>': {
              dir: 'parentNode',
              first: true
            },
            ' ': {
              dir: 'parentNode'
            },
            '+': {
              dir: 'previousSibling',
              first: true
            },
            '~': {
              dir: 'previousSibling'
            }
          },
          preFilter: {
            ATTR: function(match) {
              match[1] = match[1].replace(runescape, funescape)
              match[3] = (match[3] || match[4] || match[5] || '').replace(
                runescape,
                funescape
              )
              if (match[2] === '~=') {
                match[3] = ' ' + match[3] + ' '
              }
              return match.slice(0, 4)
            },
            CHILD: function(match) {
              match[1] = match[1].toLowerCase()
              if (match[1].slice(0, 3) === 'nth') {
                if (!match[3]) {
                  Sizzle.error(match[0])
                }
                match[4] = +(match[4]
                  ? match[5] + (match[6] || 1)
                  : 2 * (match[3] === 'even' || match[3] === 'odd'))
                match[5] = +(match[7] + match[8] || match[3] === 'odd')
              } else if (match[3]) {
                Sizzle.error(match[0])
              }
              return match
            },
            PSEUDO: function(match) {
              var excess,
                unquoted = !match[6] && match[2]
              if (matchExpr['CHILD'].test(match[0])) {
                return null
              }
              if (match[3]) {
                match[2] = match[4] || match[5] || ''
              } else if (
                unquoted &&
                rpseudo.test(unquoted) &&
                (excess = tokenize(unquoted, true)) &&
                (excess =
                  unquoted.indexOf(')', unquoted.length - excess) -
                  unquoted.length)
              ) {
                match[0] = match[0].slice(0, excess)
                match[2] = unquoted.slice(0, excess)
              }
              return match.slice(0, 3)
            }
          },
          filter: {
            TAG: function(nodeNameSelector) {
              var nodeName = nodeNameSelector
                .replace(runescape, funescape)
                .toLowerCase()
              return nodeNameSelector === '*'
                ? function() {
                    return true
                  }
                : function(elem) {
                    return (
                      elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                    )
                  }
            },
            CLASS: function(className) {
              var pattern = classCache[className + ' ']
              return (
                pattern ||
                ((pattern = new RegExp(
                  '(^|' +
                    whitespace +
                    ')' +
                    className +
                    '(' +
                    whitespace +
                    '|$)'
                )) &&
                  classCache(className, function(elem) {
                    return pattern.test(
                      (typeof elem.className === 'string' && elem.className) ||
                        (typeof elem.getAttribute !== 'undefined' &&
                          elem.getAttribute('class')) ||
                        ''
                    )
                  }))
              )
            },
            ATTR: function(name, operator, check) {
              return function(elem) {
                var result = Sizzle.attr(elem, name)
                if (result == null) {
                  return operator === '!='
                }
                if (!operator) {
                  return true
                }
                result += ''
                return operator === '='
                  ? result === check
                  : operator === '!='
                    ? result !== check
                    : operator === '^='
                      ? check && result.indexOf(check) === 0
                      : operator === '*='
                        ? check && result.indexOf(check) > -1
                        : operator === '$='
                          ? check && result.slice(-check.length) === check
                          : operator === '~='
                            ? (' ' +
                                result.replace(rwhitespace, ' ') +
                                ' '
                              ).indexOf(check) > -1
                            : operator === '|='
                              ? result === check ||
                                result.slice(0, check.length + 1) ===
                                  check + '-'
                              : false
              }
            },
            CHILD: function(type, what, argument, first, last) {
              var simple = type.slice(0, 3) !== 'nth',
                forward = type.slice(-4) !== 'last',
                ofType = what === 'of-type'
              return first === 1 && last === 0
                ? function(elem) {
                    return !!elem.parentNode
                  }
                : function(elem, context, xml) {
                    var cache,
                      uniqueCache,
                      outerCache,
                      node,
                      nodeIndex,
                      start,
                      dir =
                        simple !== forward ? 'nextSibling' : 'previousSibling',
                      parent = elem.parentNode,
                      name = ofType && elem.nodeName.toLowerCase(),
                      useCache = !xml && !ofType,
                      diff = false
                    if (parent) {
                      if (simple) {
                        while (dir) {
                          node = elem
                          while ((node = node[dir])) {
                            if (
                              ofType
                                ? node.nodeName.toLowerCase() === name
                                : node.nodeType === 1
                            ) {
                              return false
                            }
                          }
                          start = dir =
                            type === 'only' && !start && 'nextSibling'
                        }
                        return true
                      }
                      start = [forward ? parent.firstChild : parent.lastChild]
                      if (forward && useCache) {
                        node = parent
                        outerCache = node[expando] || (node[expando] = {})
                        uniqueCache =
                          outerCache[node.uniqueID] ||
                          (outerCache[node.uniqueID] = {})
                        cache = uniqueCache[type] || []
                        nodeIndex = cache[0] === dirruns && cache[1]
                        diff = nodeIndex && cache[2]
                        node = nodeIndex && parent.childNodes[nodeIndex]
                        while (
                          (node =
                            (++nodeIndex && node && node[dir]) ||
                            (diff = nodeIndex = 0) ||
                            start.pop())
                        ) {
                          if (node.nodeType === 1 && ++diff && node === elem) {
                            uniqueCache[type] = [dirruns, nodeIndex, diff]
                            break
                          }
                        }
                      } else {
                        if (useCache) {
                          node = elem
                          outerCache = node[expando] || (node[expando] = {})
                          uniqueCache =
                            outerCache[node.uniqueID] ||
                            (outerCache[node.uniqueID] = {})
                          cache = uniqueCache[type] || []
                          nodeIndex = cache[0] === dirruns && cache[1]
                          diff = nodeIndex
                        }
                        if (diff === false) {
                          while (
                            (node =
                              (++nodeIndex && node && node[dir]) ||
                              (diff = nodeIndex = 0) ||
                              start.pop())
                          ) {
                            if (
                              (ofType
                                ? node.nodeName.toLowerCase() === name
                                : node.nodeType === 1) &&
                              ++diff
                            ) {
                              if (useCache) {
                                outerCache =
                                  node[expando] || (node[expando] = {})
                                uniqueCache =
                                  outerCache[node.uniqueID] ||
                                  (outerCache[node.uniqueID] = {})
                                uniqueCache[type] = [dirruns, diff]
                              }
                              if (node === elem) {
                                break
                              }
                            }
                          }
                        }
                      }
                      diff -= last
                      return (
                        diff === first ||
                        (diff % first === 0 && diff / first >= 0)
                      )
                    }
                  }
            },
            PSEUDO: function(pseudo, argument) {
              var args,
                fn =
                  Expr.pseudos[pseudo] ||
                  Expr.setFilters[pseudo.toLowerCase()] ||
                  Sizzle.error('unsupported pseudo: ' + pseudo)
              if (fn[expando]) {
                return fn(argument)
              }
              if (fn.length > 1) {
                args = [pseudo, pseudo, '', argument]
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())
                  ? markFunction(function(seed, matches) {
                      var idx,
                        matched = fn(seed, argument),
                        i = matched.length
                      while (i--) {
                        idx = indexOf(seed, matched[i])
                        seed[idx] = !(matches[idx] = matched[i])
                      }
                    })
                  : function(elem) {
                      return fn(elem, 0, args)
                    }
              }
              return fn
            }
          },
          pseudos: {
            not: markFunction(function(selector) {
              var input = [],
                results = [],
                matcher = compile(selector.replace(rtrim, '$1'))
              return matcher[expando]
                ? markFunction(function(seed, matches, context, xml) {
                    var elem,
                      unmatched = matcher(seed, null, xml, []),
                      i = seed.length
                    while (i--) {
                      if ((elem = unmatched[i])) {
                        seed[i] = !(matches[i] = elem)
                      }
                    }
                  })
                : function(elem, context, xml) {
                    input[0] = elem
                    matcher(input, null, xml, results)
                    input[0] = null
                    return !results.pop()
                  }
            }),
            has: markFunction(function(selector) {
              return function(elem) {
                return Sizzle(selector, elem).length > 0
              }
            }),
            contains: markFunction(function(text) {
              text = text.replace(runescape, funescape)
              return function(elem) {
                return (
                  (elem.textContent || elem.innerText || getText(elem)).indexOf(
                    text
                  ) > -1
                )
              }
            }),
            lang: markFunction(function(lang) {
              if (!ridentifier.test(lang || '')) {
                Sizzle.error('unsupported lang: ' + lang)
              }
              lang = lang.replace(runescape, funescape).toLowerCase()
              return function(elem) {
                var elemLang
                do {
                  if (
                    (elemLang = documentIsHTML
                      ? elem.lang
                      : elem.getAttribute('xml:lang') ||
                        elem.getAttribute('lang'))
                  ) {
                    elemLang = elemLang.toLowerCase()
                    return (
                      elemLang === lang || elemLang.indexOf(lang + '-') === 0
                    )
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1)
                return false
              }
            }),
            target: function(elem) {
              var hash = window.location && window.location.hash
              return hash && hash.slice(1) === elem.id
            },
            root: function(elem) {
              return elem === docElem
            },
            focus: function(elem) {
              return (
                elem === document.activeElement &&
                (!document.hasFocus || document.hasFocus()) &&
                !!(elem.type || elem.href || ~elem.tabIndex)
              )
            },
            enabled: createDisabledPseudo(false),
            disabled: createDisabledPseudo(true),
            checked: function(elem) {
              var nodeName = elem.nodeName.toLowerCase()
              return (
                (nodeName === 'input' && !!elem.checked) ||
                (nodeName === 'option' && !!elem.selected)
              )
            },
            selected: function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex
              }
              return elem.selected === true
            },
            empty: function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false
                }
              }
              return true
            },
            parent: function(elem) {
              return !Expr.pseudos['empty'](elem)
            },
            header: function(elem) {
              return rheader.test(elem.nodeName)
            },
            input: function(elem) {
              return rinputs.test(elem.nodeName)
            },
            button: function(elem) {
              var name = elem.nodeName.toLowerCase()
              return (
                (name === 'input' && elem.type === 'button') ||
                name === 'button'
              )
            },
            text: function(elem) {
              var attr
              return (
                elem.nodeName.toLowerCase() === 'input' &&
                elem.type === 'text' &&
                ((attr = elem.getAttribute('type')) == null ||
                  attr.toLowerCase() === 'text')
              )
            },
            first: createPositionalPseudo(function() {
              return [0]
            }),
            last: createPositionalPseudo(function(matchIndexes, length) {
              return [length - 1]
            }),
            eq: createPositionalPseudo(function(
              matchIndexes,
              length,
              argument
            ) {
              return [argument < 0 ? argument + length : argument]
            }),
            even: createPositionalPseudo(function(matchIndexes, length) {
              var i = 0
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            odd: createPositionalPseudo(function(matchIndexes, length) {
              var i = 1
              for (; i < length; i += 2) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            lt: createPositionalPseudo(function(
              matchIndexes,
              length,
              argument
            ) {
              var i = argument < 0 ? argument + length : argument
              for (; --i >= 0; ) {
                matchIndexes.push(i)
              }
              return matchIndexes
            }),
            gt: createPositionalPseudo(function(
              matchIndexes,
              length,
              argument
            ) {
              var i = argument < 0 ? argument + length : argument
              for (; ++i < length; ) {
                matchIndexes.push(i)
              }
              return matchIndexes
            })
          }
        }
        Expr.pseudos['nth'] = Expr.pseudos['eq']
        for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
          Expr.pseudos[i] = createInputPseudo(i)
        }
        for (i in {
          submit: true,
          reset: true
        }) {
          Expr.pseudos[i] = createButtonPseudo(i)
        }
        function setFilters() {}
        setFilters.prototype = Expr.filters = Expr.pseudos
        Expr.setFilters = new setFilters()
        tokenize = Sizzle.tokenize = function(selector, parseOnly) {
          var matched,
            match,
            tokens,
            type,
            soFar,
            groups,
            preFilters,
            cached = tokenCache[selector + ' ']
          if (cached) {
            return parseOnly ? 0 : cached.slice(0)
          }
          soFar = selector
          groups = []
          preFilters = Expr.preFilter
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar
              }
              groups.push((tokens = []))
            }
            matched = false
            if ((match = rcombinators.exec(soFar))) {
              matched = match.shift()
              tokens.push({
                value: matched,
                type: match[0].replace(rtrim, ' ')
              })
              soFar = soFar.slice(matched.length)
            }
            for (type in Expr.filter) {
              if (
                (match = matchExpr[type].exec(soFar)) &&
                (!preFilters[type] || (match = preFilters[type](match)))
              ) {
                matched = match.shift()
                tokens.push({
                  value: matched,
                  type: type,
                  matches: match
                })
                soFar = soFar.slice(matched.length)
              }
            }
            if (!matched) {
              break
            }
          }
          return parseOnly
            ? soFar.length
            : soFar
              ? Sizzle.error(selector)
              : tokenCache(selector, groups).slice(0)
        }
        function toSelector(tokens) {
          var i = 0,
            len = tokens.length,
            selector = ''
          for (; i < len; i++) {
            selector += tokens[i].value
          }
          return selector
        }
        function addCombinator(matcher, combinator, base) {
          var dir = combinator.dir,
            skip = combinator.next,
            key = skip || dir,
            checkNonElements = base && key === 'parentNode',
            doneName = done++
          return combinator.first
            ? function(elem, context, xml) {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    return matcher(elem, context, xml)
                  }
                }
                return false
              }
            : function(elem, context, xml) {
                var oldCache,
                  uniqueCache,
                  outerCache,
                  newCache = [dirruns, doneName]
                if (xml) {
                  while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      if (matcher(elem, context, xml)) {
                        return true
                      }
                    }
                  }
                } else {
                  while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                      outerCache = elem[expando] || (elem[expando] = {})
                      uniqueCache =
                        outerCache[elem.uniqueID] ||
                        (outerCache[elem.uniqueID] = {})
                      if (skip && skip === elem.nodeName.toLowerCase()) {
                        elem = elem[dir] || elem
                      } else if (
                        (oldCache = uniqueCache[key]) &&
                        oldCache[0] === dirruns &&
                        oldCache[1] === doneName
                      ) {
                        return (newCache[2] = oldCache[2])
                      } else {
                        uniqueCache[key] = newCache
                        if ((newCache[2] = matcher(elem, context, xml))) {
                          return true
                        }
                      }
                    }
                  }
                }
                return false
              }
        }
        function elementMatcher(matchers) {
          return matchers.length > 1
            ? function(elem, context, xml) {
                var i = matchers.length
                while (i--) {
                  if (!matchers[i](elem, context, xml)) {
                    return false
                  }
                }
                return true
              }
            : matchers[0]
        }
        function multipleContexts(selector, contexts, results) {
          var i = 0,
            len = contexts.length
          for (; i < len; i++) {
            Sizzle(selector, contexts[i], results)
          }
          return results
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem,
            newUnmatched = [],
            i = 0,
            len = unmatched.length,
            mapped = map != null
          for (; i < len; i++) {
            if ((elem = unmatched[i])) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem)
                if (mapped) {
                  map.push(i)
                }
              }
            }
          }
          return newUnmatched
        }
        function setMatcher(
          preFilter,
          selector,
          matcher,
          postFilter,
          postFinder,
          postSelector
        ) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter)
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector)
          }
          return markFunction(function(seed, results, context, xml) {
            var temp,
              i,
              elem,
              preMap = [],
              postMap = [],
              preexisting = results.length,
              elems =
                seed ||
                multipleContexts(
                  selector || '*',
                  context.nodeType ? [context] : context,
                  []
                ),
              matcherIn =
                preFilter && (seed || !selector)
                  ? condense(elems, preMap, preFilter, context, xml)
                  : elems,
              matcherOut = matcher
                ? postFinder || (seed ? preFilter : preexisting || postFilter)
                  ? []
                  : results
                : matcherIn
            if (matcher) {
              matcher(matcherIn, matcherOut, context, xml)
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap)
              postFilter(temp, [], context, xml)
              i = temp.length
              while (i--) {
                if ((elem = temp[i])) {
                  matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = []
                  i = matcherOut.length
                  while (i--) {
                    if ((elem = matcherOut[i])) {
                      temp.push((matcherIn[i] = elem))
                    }
                  }
                  postFinder(null, (matcherOut = []), temp, xml)
                }
                i = matcherOut.length
                while (i--) {
                  if (
                    (elem = matcherOut[i]) &&
                    (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1
                  ) {
                    seed[temp] = !(results[temp] = elem)
                  }
                }
              }
            } else {
              matcherOut = condense(
                matcherOut === results
                  ? matcherOut.splice(preexisting, matcherOut.length)
                  : matcherOut
              )
              if (postFinder) {
                postFinder(null, results, matcherOut, xml)
              } else {
                push.apply(results, matcherOut)
              }
            }
          })
        }
        function matcherFromTokens(tokens) {
          var checkContext,
            matcher,
            j,
            len = tokens.length,
            leadingRelative = Expr.relative[tokens[0].type],
            implicitRelative = leadingRelative || Expr.relative[' '],
            i = leadingRelative ? 1 : 0,
            matchContext = addCombinator(
              function(elem) {
                return elem === checkContext
              },
              implicitRelative,
              true
            ),
            matchAnyContext = addCombinator(
              function(elem) {
                return indexOf(checkContext, elem) > -1
              },
              implicitRelative,
              true
            ),
            matchers = [
              function(elem, context, xml) {
                var ret =
                  (!leadingRelative && (xml || context !== outermostContext)) ||
                  ((checkContext = context).nodeType
                    ? matchContext(elem, context, xml)
                    : matchAnyContext(elem, context, xml))
                checkContext = null
                return ret
              }
            ]
          for (; i < len; i++) {
            if ((matcher = Expr.relative[tokens[i].type])) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)]
            } else {
              matcher = Expr.filter[tokens[i].type].apply(
                null,
                tokens[i].matches
              )
              if (matcher[expando]) {
                j = ++i
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break
                  }
                }
                return setMatcher(
                  i > 1 && elementMatcher(matchers),
                  i > 1 &&
                    toSelector(
                      tokens.slice(0, i - 1).concat({
                        value: tokens[i - 2].type === ' ' ? '*' : ''
                      })
                    ).replace(rtrim, '$1'),
                  matcher,
                  i < j && matcherFromTokens(tokens.slice(i, j)),
                  j < len && matcherFromTokens((tokens = tokens.slice(j))),
                  j < len && toSelector(tokens)
                )
              }
              matchers.push(matcher)
            }
          }
          return elementMatcher(matchers)
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0,
            byElement = elementMatchers.length > 0,
            superMatcher = function(seed, context, xml, results, outermost) {
              var elem,
                j,
                matcher,
                matchedCount = 0,
                i = '0',
                unmatched = seed && [],
                setMatched = [],
                contextBackup = outermostContext,
                elems = seed || (byElement && Expr.find['TAG']('*', outermost)),
                dirrunsUnique = (dirruns +=
                  contextBackup == null ? 1 : Math.random() || 0.1),
                len = elems.length
              if (outermost) {
                outermostContext = context === document || context || outermost
              }
              for (; i !== len && (elem = elems[i]) != null; i++) {
                if (byElement && elem) {
                  j = 0
                  if (!context && elem.ownerDocument !== document) {
                    setDocument(elem)
                    xml = !documentIsHTML
                  }
                  while ((matcher = elementMatchers[j++])) {
                    if (matcher(elem, context || document, xml)) {
                      results.push(elem)
                      break
                    }
                  }
                  if (outermost) {
                    dirruns = dirrunsUnique
                  }
                }
                if (bySet) {
                  if ((elem = !matcher && elem)) {
                    matchedCount--
                  }
                  if (seed) {
                    unmatched.push(elem)
                  }
                }
              }
              matchedCount += i
              if (bySet && i !== matchedCount) {
                j = 0
                while ((matcher = setMatchers[j++])) {
                  matcher(unmatched, setMatched, context, xml)
                }
                if (seed) {
                  if (matchedCount > 0) {
                    while (i--) {
                      if (!(unmatched[i] || setMatched[i])) {
                        setMatched[i] = pop.call(results)
                      }
                    }
                  }
                  setMatched = condense(setMatched)
                }
                push.apply(results, setMatched)
                if (
                  outermost &&
                  !seed &&
                  setMatched.length > 0 &&
                  matchedCount + setMatchers.length > 1
                ) {
                  Sizzle.uniqueSort(results)
                }
              }
              if (outermost) {
                dirruns = dirrunsUnique
                outermostContext = contextBackup
              }
              return unmatched
            }
          return bySet ? markFunction(superMatcher) : superMatcher
        }
        compile = Sizzle.compile = function(selector, match) {
          var i,
            setMatchers = [],
            elementMatchers = [],
            cached = compilerCache[selector + ' ']
          if (!cached) {
            if (!match) {
              match = tokenize(selector)
            }
            i = match.length
            while (i--) {
              cached = matcherFromTokens(match[i])
              if (cached[expando]) {
                setMatchers.push(cached)
              } else {
                elementMatchers.push(cached)
              }
            }
            cached = compilerCache(
              selector,
              matcherFromGroupMatchers(elementMatchers, setMatchers)
            )
            cached.selector = selector
          }
          return cached
        }
        select = Sizzle.select = function(selector, context, results, seed) {
          var i,
            tokens,
            token,
            type,
            find,
            compiled = typeof selector === 'function' && selector,
            match =
              !seed && tokenize((selector = compiled.selector || selector))
          results = results || []
          if (match.length === 1) {
            tokens = match[0] = match[0].slice(0)
            if (
              tokens.length > 2 &&
              (token = tokens[0]).type === 'ID' &&
              context.nodeType === 9 &&
              documentIsHTML &&
              Expr.relative[tokens[1].type]
            ) {
              context = (Expr.find['ID'](
                token.matches[0].replace(runescape, funescape),
                context
              ) || [])[0]
              if (!context) {
                return results
              } else if (compiled) {
                context = context.parentNode
              }
              selector = selector.slice(tokens.shift().value.length)
            }
            i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length
            while (i--) {
              token = tokens[i]
              if (Expr.relative[(type = token.type)]) {
                break
              }
              if ((find = Expr.find[type])) {
                if (
                  (seed = find(
                    token.matches[0].replace(runescape, funescape),
                    (rsibling.test(tokens[0].type) &&
                      testContext(context.parentNode)) ||
                      context
                  ))
                ) {
                  tokens.splice(i, 1)
                  selector = seed.length && toSelector(tokens)
                  if (!selector) {
                    push.apply(results, seed)
                    return results
                  }
                  break
                }
              }
            }
          }
          ;(compiled || compile(selector, match))(
            seed,
            context,
            !documentIsHTML,
            results,
            !context ||
              (rsibling.test(selector) && testContext(context.parentNode)) ||
              context
          )
          return results
        }
        support.sortStable =
          expando
            .split('')
            .sort(sortOrder)
            .join('') === expando
        support.detectDuplicates = !!hasDuplicate
        setDocument()
        support.sortDetached = assert(function(el) {
          return (
            el.compareDocumentPosition(document.createElement('fieldset')) & 1
          )
        })
        if (
          !assert(function(el) {
            el.innerHTML = "<a href='#'></a>"
            return el.firstChild.getAttribute('href') === '#'
          })
        ) {
          addHandle('type|href|height|width', function(elem, name, isXML) {
            if (!isXML) {
              return elem.getAttribute(
                name,
                name.toLowerCase() === 'type' ? 1 : 2
              )
            }
          })
        }
        if (
          !support.attributes ||
          !assert(function(el) {
            el.innerHTML = '<input/>'
            el.firstChild.setAttribute('value', '')
            return el.firstChild.getAttribute('value') === ''
          })
        ) {
          addHandle('value', function(elem, name, isXML) {
            if (!isXML && elem.nodeName.toLowerCase() === 'input') {
              return elem.defaultValue
            }
          })
        }
        if (
          !assert(function(el) {
            return el.getAttribute('disabled') == null
          })
        ) {
          addHandle(booleans, function(elem, name, isXML) {
            var val
            if (!isXML) {
              return elem[name] === true
                ? name.toLowerCase()
                : (val = elem.getAttributeNode(name)) && val.specified
                  ? val.value
                  : null
            }
          })
        }
        return Sizzle
      })(window)
      jQuery.find = Sizzle
      jQuery.expr = Sizzle.selectors
      jQuery.expr[':'] = jQuery.expr.pseudos
      jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort
      jQuery.text = Sizzle.getText
      jQuery.isXMLDoc = Sizzle.isXML
      jQuery.contains = Sizzle.contains
      jQuery.escapeSelector = Sizzle.escape
      var dir = function(elem, dir, until) {
        var matched = [],
          truncate = until !== undefined
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break
            }
            matched.push(elem)
          }
        }
        return matched
      }
      var siblings = function(n, elem) {
        var matched = []
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n)
          }
        }
        return matched
      }
      var rneedsContext = jQuery.expr.match.needsContext
      function nodeName(elem, name) {
        return (
          elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
        )
      }
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i
      var risSimple = /^.[^:#\[\.,]*$/
      function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
          return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not
          })
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function(elem) {
            return (elem === qualifier) !== not
          })
        }
        if (typeof qualifier !== 'string') {
          return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not
          })
        }
        if (risSimple.test(qualifier)) {
          return jQuery.filter(qualifier, elements, not)
        }
        qualifier = jQuery.filter(qualifier, elements)
        return jQuery.grep(elements, function(elem) {
          return (
            indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1
          )
        })
      }
      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0]
        if (not) {
          expr = ':not(' + expr + ')'
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : []
        }
        return jQuery.find.matches(
          expr,
          jQuery.grep(elems, function(elem) {
            return elem.nodeType === 1
          })
        )
      }
      jQuery.fn.extend({
        find: function(selector) {
          var i,
            ret,
            len = this.length,
            self = this
          if (typeof selector !== 'string') {
            return this.pushStack(
              jQuery(selector).filter(function() {
                for (i = 0; i < len; i++) {
                  if (jQuery.contains(self[i], this)) {
                    return true
                  }
                }
              })
            )
          }
          ret = this.pushStack([])
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret)
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false))
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true))
        },
        is: function(selector) {
          return !!winnow(
            this,
            typeof selector === 'string' && rneedsContext.test(selector)
              ? jQuery(selector)
              : selector || [],
            false
          ).length
        }
      })
      var rootjQuery,
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
        init = (jQuery.fn.init = function(selector, context, root) {
          var match, elem
          if (!selector) {
            return this
          }
          root = root || rootjQuery
          if (typeof selector === 'string') {
            if (
              selector[0] === '<' &&
              selector[selector.length - 1] === '>' &&
              selector.length >= 3
            ) {
              match = [null, selector, null]
            } else {
              match = rquickExpr.exec(selector)
            }
            if (match && (match[1] || !context)) {
              if (match[1]) {
                context = context instanceof jQuery ? context[0] : context
                jQuery.merge(
                  this,
                  jQuery.parseHTML(
                    match[1],
                    context && context.nodeType
                      ? context.ownerDocument || context
                      : document,
                    true
                  )
                )
                if (
                  rsingleTag.test(match[1]) &&
                  jQuery.isPlainObject(context)
                ) {
                  for (match in context) {
                    if (jQuery.isFunction(this[match])) {
                      this[match](context[match])
                    } else {
                      this.attr(match, context[match])
                    }
                  }
                }
                return this
              } else {
                elem = document.getElementById(match[2])
                if (elem) {
                  this[0] = elem
                  this.length = 1
                }
                return this
              }
            } else if (!context || context.jquery) {
              return (context || root).find(selector)
            } else {
              return this.constructor(context).find(selector)
            }
          } else if (selector.nodeType) {
            this[0] = selector
            this.length = 1
            return this
          } else if (jQuery.isFunction(selector)) {
            return root.ready !== undefined
              ? root.ready(selector)
              : selector(jQuery)
          }
          return jQuery.makeArray(selector, this)
        })
      init.prototype = jQuery.fn
      rootjQuery = jQuery(document)
      var rparentsprev = /^(?:parents|prev(?:Until|All))/,
        guaranteedUnique = {
          children: true,
          contents: true,
          next: true,
          prev: true
        }
      jQuery.fn.extend({
        has: function(target) {
          var targets = jQuery(target, this),
            l = targets.length
          return this.filter(function() {
            var i = 0
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true
              }
            }
          })
        },
        closest: function(selectors, context) {
          var cur,
            i = 0,
            l = this.length,
            matched = [],
            targets = typeof selectors !== 'string' && jQuery(selectors)
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (
                cur = this[i];
                cur && cur !== context;
                cur = cur.parentNode
              ) {
                if (
                  cur.nodeType < 11 &&
                  (targets
                    ? targets.index(cur) > -1
                    : cur.nodeType === 1 &&
                      jQuery.find.matchesSelector(cur, selectors))
                ) {
                  matched.push(cur)
                  break
                }
              }
            }
          }
          return this.pushStack(
            matched.length > 1 ? jQuery.uniqueSort(matched) : matched
          )
        },
        index: function(elem) {
          if (!elem) {
            return this[0] && this[0].parentNode
              ? this.first().prevAll().length
              : -1
          }
          if (typeof elem === 'string') {
            return indexOf.call(jQuery(elem), this[0])
          }
          return indexOf.call(this, elem.jquery ? elem[0] : elem)
        },
        add: function(selector, context) {
          return this.pushStack(
            jQuery.uniqueSort(
              jQuery.merge(this.get(), jQuery(selector, context))
            )
          )
        },
        addBack: function(selector) {
          return this.add(
            selector == null
              ? this.prevObject
              : this.prevObject.filter(selector)
          )
        }
      })
      function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur
      }
      jQuery.each(
        {
          parent: function(elem) {
            var parent = elem.parentNode
            return parent && parent.nodeType !== 11 ? parent : null
          },
          parents: function(elem) {
            return dir(elem, 'parentNode')
          },
          parentsUntil: function(elem, i, until) {
            return dir(elem, 'parentNode', until)
          },
          next: function(elem) {
            return sibling(elem, 'nextSibling')
          },
          prev: function(elem) {
            return sibling(elem, 'previousSibling')
          },
          nextAll: function(elem) {
            return dir(elem, 'nextSibling')
          },
          prevAll: function(elem) {
            return dir(elem, 'previousSibling')
          },
          nextUntil: function(elem, i, until) {
            return dir(elem, 'nextSibling', until)
          },
          prevUntil: function(elem, i, until) {
            return dir(elem, 'previousSibling', until)
          },
          siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem)
          },
          children: function(elem) {
            return siblings(elem.firstChild)
          },
          contents: function(elem) {
            if (nodeName(elem, 'iframe')) {
              return elem.contentDocument
            }
            if (nodeName(elem, 'template')) {
              elem = elem.content || elem
            }
            return jQuery.merge([], elem.childNodes)
          }
        },
        function(name, fn) {
          jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until)
            if (name.slice(-5) !== 'Until') {
              selector = until
            }
            if (selector && typeof selector === 'string') {
              matched = jQuery.filter(selector, matched)
            }
            if (this.length > 1) {
              if (!guaranteedUnique[name]) {
                jQuery.uniqueSort(matched)
              }
              if (rparentsprev.test(name)) {
                matched.reverse()
              }
            }
            return this.pushStack(matched)
          }
        }
      )
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g
      function createOptions(options) {
        var object = {}
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
          object[flag] = true
        })
        return object
      }
      jQuery.Callbacks = function(options) {
        options =
          typeof options === 'string'
            ? createOptions(options)
            : jQuery.extend({}, options)
        var firing,
          memory,
          fired,
          locked,
          list = [],
          queue = [],
          firingIndex = -1,
          fire = function() {
            locked = locked || options.once
            fired = firing = true
            for (; queue.length; firingIndex = -1) {
              memory = queue.shift()
              while (++firingIndex < list.length) {
                if (
                  list[firingIndex].apply(memory[0], memory[1]) === false &&
                  options.stopOnFalse
                ) {
                  firingIndex = list.length
                  memory = false
                }
              }
            }
            if (!options.memory) {
              memory = false
            }
            firing = false
            if (locked) {
              if (memory) {
                list = []
              } else {
                list = ''
              }
            }
          },
          self = {
            add: function() {
              if (list) {
                if (memory && !firing) {
                  firingIndex = list.length - 1
                  queue.push(memory)
                }
                ;(function add(args) {
                  jQuery.each(args, function(_, arg) {
                    if (jQuery.isFunction(arg)) {
                      if (!options.unique || !self.has(arg)) {
                        list.push(arg)
                      }
                    } else if (
                      arg &&
                      arg.length &&
                      jQuery.type(arg) !== 'string'
                    ) {
                      add(arg)
                    }
                  })
                })(arguments)
                if (memory && !firing) {
                  fire()
                }
              }
              return this
            },
            remove: function() {
              jQuery.each(arguments, function(_, arg) {
                var index
                while ((index = jQuery.inArray(arg, list, index)) > -1) {
                  list.splice(index, 1)
                  if (index <= firingIndex) {
                    firingIndex--
                  }
                }
              })
              return this
            },
            has: function(fn) {
              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0
            },
            empty: function() {
              if (list) {
                list = []
              }
              return this
            },
            disable: function() {
              locked = queue = []
              list = memory = ''
              return this
            },
            disabled: function() {
              return !list
            },
            lock: function() {
              locked = queue = []
              if (!memory && !firing) {
                list = memory = ''
              }
              return this
            },
            locked: function() {
              return !!locked
            },
            fireWith: function(context, args) {
              if (!locked) {
                args = args || []
                args = [context, args.slice ? args.slice() : args]
                queue.push(args)
                if (!firing) {
                  fire()
                }
              }
              return this
            },
            fire: function() {
              self.fireWith(this, arguments)
              return this
            },
            fired: function() {
              return !!fired
            }
          }
        return self
      }
      function Identity(v) {
        return v
      }
      function Thrower(ex) {
        throw ex
      }
      function adoptValue(value, resolve, reject, noValue) {
        var method
        try {
          if (value && jQuery.isFunction((method = value.promise))) {
            method
              .call(value)
              .done(resolve)
              .fail(reject)
          } else if (value && jQuery.isFunction((method = value.then))) {
            method.call(value, resolve, reject)
          } else {
            resolve.apply(undefined, [value].slice(noValue))
          }
        } catch (value) {
          reject.apply(undefined, [value])
        }
      }
      jQuery.extend({
        Deferred: function(func) {
          var tuples = [
              [
                'notify',
                'progress',
                jQuery.Callbacks('memory'),
                jQuery.Callbacks('memory'),
                2
              ],
              [
                'resolve',
                'done',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                0,
                'resolved'
              ],
              [
                'reject',
                'fail',
                jQuery.Callbacks('once memory'),
                jQuery.Callbacks('once memory'),
                1,
                'rejected'
              ]
            ],
            state = 'pending',
            promise = {
              state: function() {
                return state
              },
              always: function() {
                deferred.done(arguments).fail(arguments)
                return this
              },
              catch: function(fn) {
                return promise.then(null, fn)
              },
              pipe: function() {
                var fns = arguments
                return jQuery
                  .Deferred(function(newDefer) {
                    jQuery.each(tuples, function(i, tuple) {
                      var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]]
                      deferred[tuple[1]](function() {
                        var returned = fn && fn.apply(this, arguments)
                        if (returned && jQuery.isFunction(returned.promise)) {
                          returned
                            .promise()
                            .progress(newDefer.notify)
                            .done(newDefer.resolve)
                            .fail(newDefer.reject)
                        } else {
                          newDefer[tuple[0] + 'With'](
                            this,
                            fn ? [returned] : arguments
                          )
                        }
                      })
                    })
                    fns = null
                  })
                  .promise()
              },
              then: function(onFulfilled, onRejected, onProgress) {
                var maxDepth = 0
                function resolve(depth, deferred, handler, special) {
                  return function() {
                    var that = this,
                      args = arguments,
                      mightThrow = function() {
                        var returned, then
                        if (depth < maxDepth) {
                          return
                        }
                        returned = handler.apply(that, args)
                        if (returned === deferred.promise()) {
                          throw new TypeError('Thenable self-resolution')
                        }
                        then =
                          returned &&
                          (typeof returned === 'object' ||
                            typeof returned === 'function') &&
                          returned.then
                        if (jQuery.isFunction(then)) {
                          if (special) {
                            then.call(
                              returned,
                              resolve(maxDepth, deferred, Identity, special),
                              resolve(maxDepth, deferred, Thrower, special)
                            )
                          } else {
                            maxDepth++
                            then.call(
                              returned,
                              resolve(maxDepth, deferred, Identity, special),
                              resolve(maxDepth, deferred, Thrower, special),
                              resolve(
                                maxDepth,
                                deferred,
                                Identity,
                                deferred.notifyWith
                              )
                            )
                          }
                        } else {
                          if (handler !== Identity) {
                            that = undefined
                            args = [returned]
                          }
                          ;(special || deferred.resolveWith)(that, args)
                        }
                      },
                      process = special
                        ? mightThrow
                        : function() {
                            try {
                              mightThrow()
                            } catch (e) {
                              if (jQuery.Deferred.exceptionHook) {
                                jQuery.Deferred.exceptionHook(
                                  e,
                                  process.stackTrace
                                )
                              }
                              if (depth + 1 >= maxDepth) {
                                if (handler !== Thrower) {
                                  that = undefined
                                  args = [e]
                                }
                                deferred.rejectWith(that, args)
                              }
                            }
                          }
                    if (depth) {
                      process()
                    } else {
                      if (jQuery.Deferred.getStackHook) {
                        process.stackTrace = jQuery.Deferred.getStackHook()
                      }
                      window.setTimeout(process)
                    }
                  }
                }
                return jQuery
                  .Deferred(function(newDefer) {
                    tuples[0][3].add(
                      resolve(
                        0,
                        newDefer,
                        jQuery.isFunction(onProgress) ? onProgress : Identity,
                        newDefer.notifyWith
                      )
                    )
                    tuples[1][3].add(
                      resolve(
                        0,
                        newDefer,
                        jQuery.isFunction(onFulfilled) ? onFulfilled : Identity
                      )
                    )
                    tuples[2][3].add(
                      resolve(
                        0,
                        newDefer,
                        jQuery.isFunction(onRejected) ? onRejected : Thrower
                      )
                    )
                  })
                  .promise()
              },
              promise: function(obj) {
                return obj != null ? jQuery.extend(obj, promise) : promise
              }
            },
            deferred = {}
          jQuery.each(tuples, function(i, tuple) {
            var list = tuple[2],
              stateString = tuple[5]
            promise[tuple[1]] = list.add
            if (stateString) {
              list.add(
                function() {
                  state = stateString
                },
                tuples[3 - i][2].disable,
                tuples[0][2].lock
              )
            }
            list.add(tuple[3].fire)
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + 'With'](
                this === deferred ? undefined : this,
                arguments
              )
              return this
            }
            deferred[tuple[0] + 'With'] = list.fireWith
          })
          promise.promise(deferred)
          if (func) {
            func.call(deferred, deferred)
          }
          return deferred
        },
        when: function(singleValue) {
          var remaining = arguments.length,
            i = remaining,
            resolveContexts = Array(i),
            resolveValues = slice.call(arguments),
            master = jQuery.Deferred(),
            updateFunc = function(i) {
              return function(value) {
                resolveContexts[i] = this
                resolveValues[i] =
                  arguments.length > 1 ? slice.call(arguments) : value
                if (!--remaining) {
                  master.resolveWith(resolveContexts, resolveValues)
                }
              }
            }
          if (remaining <= 1) {
            adoptValue(
              singleValue,
              master.done(updateFunc(i)).resolve,
              master.reject,
              !remaining
            )
            if (
              master.state() === 'pending' ||
              jQuery.isFunction(resolveValues[i] && resolveValues[i].then)
            ) {
              return master.then()
            }
          }
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), master.reject)
          }
          return master.promise()
        }
      })
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/
      jQuery.Deferred.exceptionHook = function(error, stack) {
        if (
          window.console &&
          window.console.warn &&
          error &&
          rerrorNames.test(error.name)
        ) {
          window.console.warn(
            'jQuery.Deferred exception: ' + error.message,
            error.stack,
            stack
          )
        }
      }
      jQuery.readyException = function(error) {
        window.setTimeout(function() {
          throw error
        })
      }
      var readyList = jQuery.Deferred()
      jQuery.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
          jQuery.readyException(error)
        })
        return this
      }
      jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return
          }
          jQuery.isReady = true
          if (wait !== true && --jQuery.readyWait > 0) {
            return
          }
          readyList.resolveWith(document, [jQuery])
        }
      })
      jQuery.ready.then = readyList.then
      function completed() {
        document.removeEventListener('DOMContentLoaded', completed)
        window.removeEventListener('load', completed)
        jQuery.ready()
      }
      if (
        document.readyState === 'complete' ||
        (document.readyState !== 'loading' &&
          !document.documentElement.doScroll)
      ) {
        window.setTimeout(jQuery.ready)
      } else {
        document.addEventListener('DOMContentLoaded', completed)
        window.addEventListener('load', completed)
      }
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
          len = elems.length,
          bulk = key == null
        if (jQuery.type(key) === 'object') {
          chainable = true
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw)
          }
        } else if (value !== undefined) {
          chainable = true
          if (!jQuery.isFunction(value)) {
            raw = true
          }
          if (bulk) {
            if (raw) {
              fn.call(elems, value)
              fn = null
            } else {
              bulk = fn
              fn = function(elem, key, value) {
                return bulk.call(jQuery(elem), value)
              }
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(
                elems[i],
                key,
                raw ? value : value.call(elems[i], i, fn(elems[i], key))
              )
            }
          }
        }
        if (chainable) {
          return elems
        }
        if (bulk) {
          return fn.call(elems)
        }
        return len ? fn(elems[0], key) : emptyGet
      }
      var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
      }
      function Data() {
        this.expando = jQuery.expando + Data.uid++
      }
      Data.uid = 1
      Data.prototype = {
        cache: function(owner) {
          var value = owner[this.expando]
          if (!value) {
            value = {}
            if (acceptData(owner)) {
              if (owner.nodeType) {
                owner[this.expando] = value
              } else {
                Object.defineProperty(owner, this.expando, {
                  value: value,
                  configurable: true
                })
              }
            }
          }
          return value
        },
        set: function(owner, data, value) {
          var prop,
            cache = this.cache(owner)
          if (typeof data === 'string') {
            cache[jQuery.camelCase(data)] = value
          } else {
            for (prop in data) {
              cache[jQuery.camelCase(prop)] = data[prop]
            }
          }
          return cache
        },
        get: function(owner, key) {
          return key === undefined
            ? this.cache(owner)
            : owner[this.expando] && owner[this.expando][jQuery.camelCase(key)]
        },
        access: function(owner, key, value) {
          if (
            key === undefined ||
            (key && typeof key === 'string' && value === undefined)
          ) {
            return this.get(owner, key)
          }
          this.set(owner, key, value)
          return value !== undefined ? value : key
        },
        remove: function(owner, key) {
          var i,
            cache = owner[this.expando]
          if (cache === undefined) {
            return
          }
          if (key !== undefined) {
            if (Array.isArray(key)) {
              key = key.map(jQuery.camelCase)
            } else {
              key = jQuery.camelCase(key)
              key = key in cache ? [key] : key.match(rnothtmlwhite) || []
            }
            i = key.length
            while (i--) {
              delete cache[key[i]]
            }
          }
          if (key === undefined || jQuery.isEmptyObject(cache)) {
            if (owner.nodeType) {
              owner[this.expando] = undefined
            } else {
              delete owner[this.expando]
            }
          }
        },
        hasData: function(owner) {
          var cache = owner[this.expando]
          return cache !== undefined && !jQuery.isEmptyObject(cache)
        }
      }
      var dataPriv = new Data()
      var dataUser = new Data()
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g
      function getData(data) {
        if (data === 'true') {
          return true
        }
        if (data === 'false') {
          return false
        }
        if (data === 'null') {
          return null
        }
        if (data === +data + '') {
          return +data
        }
        if (rbrace.test(data)) {
          return JSON.parse(data)
        }
        return data
      }
      function dataAttr(elem, key, data) {
        var name
        if (data === undefined && elem.nodeType === 1) {
          name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase()
          data = elem.getAttribute(name)
          if (typeof data === 'string') {
            try {
              data = getData(data)
            } catch (e) {}
            dataUser.set(elem, key, data)
          } else {
            data = undefined
          }
        }
        return data
      }
      jQuery.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem)
        },
        data: function(elem, name, data) {
          return dataUser.access(elem, name, data)
        },
        removeData: function(elem, name) {
          dataUser.remove(elem, name)
        },
        _data: function(elem, name, data) {
          return dataPriv.access(elem, name, data)
        },
        _removeData: function(elem, name) {
          dataPriv.remove(elem, name)
        }
      })
      jQuery.fn.extend({
        data: function(key, value) {
          var i,
            name,
            data,
            elem = this[0],
            attrs = elem && elem.attributes
          if (key === undefined) {
            if (this.length) {
              data = dataUser.get(elem)
              if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                i = attrs.length
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name
                    if (name.indexOf('data-') === 0) {
                      name = jQuery.camelCase(name.slice(5))
                      dataAttr(elem, name, data[name])
                    }
                  }
                }
                dataPriv.set(elem, 'hasDataAttrs', true)
              }
            }
            return data
          }
          if (typeof key === 'object') {
            return this.each(function() {
              dataUser.set(this, key)
            })
          }
          return access(
            this,
            function(value) {
              var data
              if (elem && value === undefined) {
                data = dataUser.get(elem, key)
                if (data !== undefined) {
                  return data
                }
                data = dataAttr(elem, key)
                if (data !== undefined) {
                  return data
                }
                return
              }
              this.each(function() {
                dataUser.set(this, key, value)
              })
            },
            null,
            value,
            arguments.length > 1,
            null,
            true
          )
        },
        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key)
          })
        }
      })
      jQuery.extend({
        queue: function(elem, type, data) {
          var queue
          if (elem) {
            type = (type || 'fx') + 'queue'
            queue = dataPriv.get(elem, type)
            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data))
              } else {
                queue.push(data)
              }
            }
            return queue || []
          }
        },
        dequeue: function(elem, type) {
          type = type || 'fx'
          var queue = jQuery.queue(elem, type),
            startLength = queue.length,
            fn = queue.shift(),
            hooks = jQuery._queueHooks(elem, type),
            next = function() {
              jQuery.dequeue(elem, type)
            }
          if (fn === 'inprogress') {
            fn = queue.shift()
            startLength--
          }
          if (fn) {
            if (type === 'fx') {
              queue.unshift('inprogress')
            }
            delete hooks.stop
            fn.call(elem, next, hooks)
          }
          if (!startLength && hooks) {
            hooks.empty.fire()
          }
        },
        _queueHooks: function(elem, type) {
          var key = type + 'queueHooks'
          return (
            dataPriv.get(elem, key) ||
            dataPriv.access(elem, key, {
              empty: jQuery.Callbacks('once memory').add(function() {
                dataPriv.remove(elem, [type + 'queue', key])
              })
            })
          )
        }
      })
      jQuery.fn.extend({
        queue: function(type, data) {
          var setter = 2
          if (typeof type !== 'string') {
            data = type
            type = 'fx'
            setter--
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type)
          }
          return data === undefined
            ? this
            : this.each(function() {
                var queue = jQuery.queue(this, type, data)
                jQuery._queueHooks(this, type)
                if (type === 'fx' && queue[0] !== 'inprogress') {
                  jQuery.dequeue(this, type)
                }
              })
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type)
          })
        },
        clearQueue: function(type) {
          return this.queue(type || 'fx', [])
        },
        promise: function(type, obj) {
          var tmp,
            count = 1,
            defer = jQuery.Deferred(),
            elements = this,
            i = this.length,
            resolve = function() {
              if (!--count) {
                defer.resolveWith(elements, [elements])
              }
            }
          if (typeof type !== 'string') {
            obj = type
            type = undefined
          }
          type = type || 'fx'
          while (i--) {
            tmp = dataPriv.get(elements[i], type + 'queueHooks')
            if (tmp && tmp.empty) {
              count++
              tmp.empty.add(resolve)
            }
          }
          resolve()
          return defer.promise(obj)
        }
      })
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source
      var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i')
      var cssExpand = ['Top', 'Right', 'Bottom', 'Left']
      var isHiddenWithinTree = function(elem, el) {
        elem = el || elem
        return (
          elem.style.display === 'none' ||
          (elem.style.display === '' &&
            jQuery.contains(elem.ownerDocument, elem) &&
            jQuery.css(elem, 'display') === 'none')
        )
      }
      var swap = function(elem, options, callback, args) {
        var ret,
          name,
          old = {}
        for (name in options) {
          old[name] = elem.style[name]
          elem.style[name] = options[name]
        }
        ret = callback.apply(elem, args || [])
        for (name in options) {
          elem.style[name] = old[name]
        }
        return ret
      }
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
          scale = 1,
          maxIterations = 20,
          currentValue = tween
            ? function() {
                return tween.cur()
              }
            : function() {
                return jQuery.css(elem, prop, '')
              },
          initial = currentValue(),
          unit =
            (valueParts && valueParts[3]) ||
            (jQuery.cssNumber[prop] ? '' : 'px'),
          initialInUnit =
            (jQuery.cssNumber[prop] || (unit !== 'px' && +initial)) &&
            rcssNum.exec(jQuery.css(elem, prop))
        if (initialInUnit && initialInUnit[3] !== unit) {
          unit = unit || initialInUnit[3]
          valueParts = valueParts || []
          initialInUnit = +initial || 1
          do {
            scale = scale || '.5'
            initialInUnit = initialInUnit / scale
            jQuery.style(elem, prop, initialInUnit + unit)
          } while (
            scale !== (scale = currentValue() / initial) &&
            scale !== 1 &&
            --maxIterations
          )
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0
          adjusted = valueParts[1]
            ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
            : +valueParts[2]
          if (tween) {
            tween.unit = unit
            tween.start = initialInUnit
            tween.end = adjusted
          }
        }
        return adjusted
      }
      var defaultDisplayMap = {}
      function getDefaultDisplay(elem) {
        var temp,
          doc = elem.ownerDocument,
          nodeName = elem.nodeName,
          display = defaultDisplayMap[nodeName]
        if (display) {
          return display
        }
        temp = doc.body.appendChild(doc.createElement(nodeName))
        display = jQuery.css(temp, 'display')
        temp.parentNode.removeChild(temp)
        if (display === 'none') {
          display = 'block'
        }
        defaultDisplayMap[nodeName] = display
        return display
      }
      function showHide(elements, show) {
        var display,
          elem,
          values = [],
          index = 0,
          length = elements.length
        for (; index < length; index++) {
          elem = elements[index]
          if (!elem.style) {
            continue
          }
          display = elem.style.display
          if (show) {
            if (display === 'none') {
              values[index] = dataPriv.get(elem, 'display') || null
              if (!values[index]) {
                elem.style.display = ''
              }
            }
            if (elem.style.display === '' && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem)
            }
          } else {
            if (display !== 'none') {
              values[index] = 'none'
              dataPriv.set(elem, 'display', display)
            }
          }
        }
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index]
          }
        }
        return elements
      }
      jQuery.fn.extend({
        show: function() {
          return showHide(this, true)
        },
        hide: function() {
          return showHide(this)
        },
        toggle: function(state) {
          if (typeof state === 'boolean') {
            return state ? this.show() : this.hide()
          }
          return this.each(function() {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show()
            } else {
              jQuery(this).hide()
            }
          })
        }
      })
      var rcheckableType = /^(?:checkbox|radio)$/i
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i
      var rscriptType = /^$|\/(?:java|ecma)script/i
      var wrapMap = {
        option: [1, "<select multiple='multiple'>", '</select>'],
        thead: [1, '<table>', '</table>'],
        col: [2, '<table><colgroup>', '</colgroup></table>'],
        tr: [2, '<table><tbody>', '</tbody></table>'],
        td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
        _default: [0, '', '']
      }
      wrapMap.optgroup = wrapMap.option
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption =
        wrapMap.thead
      wrapMap.th = wrapMap.td
      function getAll(context, tag) {
        var ret
        if (typeof context.getElementsByTagName !== 'undefined') {
          ret = context.getElementsByTagName(tag || '*')
        } else if (typeof context.querySelectorAll !== 'undefined') {
          ret = context.querySelectorAll(tag || '*')
        } else {
          ret = []
        }
        if (tag === undefined || (tag && nodeName(context, tag))) {
          return jQuery.merge([context], ret)
        }
        return ret
      }
      function setGlobalEval(elems, refElements) {
        var i = 0,
          l = elems.length
        for (; i < l; i++) {
          dataPriv.set(
            elems[i],
            'globalEval',
            !refElements || dataPriv.get(refElements[i], 'globalEval')
          )
        }
      }
      var rhtml = /<|&#?\w+;/
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem,
          tmp,
          tag,
          wrap,
          contains,
          j,
          fragment = context.createDocumentFragment(),
          nodes = [],
          i = 0,
          l = elems.length
        for (; i < l; i++) {
          elem = elems[i]
          if (elem || elem === 0) {
            if (jQuery.type(elem) === 'object') {
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem)
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem))
            } else {
              tmp = tmp || fragment.appendChild(context.createElement('div'))
              tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase()
              wrap = wrapMap[tag] || wrapMap._default
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]
              j = wrap[0]
              while (j--) {
                tmp = tmp.lastChild
              }
              jQuery.merge(nodes, tmp.childNodes)
              tmp = fragment.firstChild
              tmp.textContent = ''
            }
          }
        }
        fragment.textContent = ''
        i = 0
        while ((elem = nodes[i++])) {
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem)
            }
            continue
          }
          contains = jQuery.contains(elem.ownerDocument, elem)
          tmp = getAll(fragment.appendChild(elem), 'script')
          if (contains) {
            setGlobalEval(tmp)
          }
          if (scripts) {
            j = 0
            while ((elem = tmp[j++])) {
              if (rscriptType.test(elem.type || '')) {
                scripts.push(elem)
              }
            }
          }
        }
        return fragment
      }
      ;(function() {
        var fragment = document.createDocumentFragment(),
          div = fragment.appendChild(document.createElement('div')),
          input = document.createElement('input')
        input.setAttribute('type', 'radio')
        input.setAttribute('checked', 'checked')
        input.setAttribute('name', 't')
        div.appendChild(input)
        support.checkClone = div
          .cloneNode(true)
          .cloneNode(true).lastChild.checked
        div.innerHTML = '<textarea>x</textarea>'
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
      })()
      var documentElement = document.documentElement
      var rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/
      function returnTrue() {
        return true
      }
      function returnFalse() {
        return false
      }
      function safeActiveElement() {
        try {
          return document.activeElement
        } catch (err) {}
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type
        if (typeof types === 'object') {
          if (typeof selector !== 'string') {
            data = data || selector
            selector = undefined
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one)
          }
          return elem
        }
        if (data == null && fn == null) {
          fn = selector
          data = selector = undefined
        } else if (fn == null) {
          if (typeof selector === 'string') {
            fn = data
            data = undefined
          } else {
            fn = data
            data = selector
            selector = undefined
          }
        }
        if (fn === false) {
          fn = returnFalse
        } else if (!fn) {
          return elem
        }
        if (one === 1) {
          origFn = fn
          fn = function(event) {
            jQuery().off(event)
            return origFn.apply(this, arguments)
          }
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
        }
        return elem.each(function() {
          jQuery.event.add(this, types, fn, data, selector)
        })
      }
      jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
          var handleObjIn,
            eventHandle,
            tmp,
            events,
            t,
            handleObj,
            special,
            handlers,
            type,
            namespaces,
            origType,
            elemData = dataPriv.get(elem)
          if (!elemData) {
            return
          }
          if (handler.handler) {
            handleObjIn = handler
            handler = handleObjIn.handler
            selector = handleObjIn.selector
          }
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector)
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++
          }
          if (!(events = elemData.events)) {
            events = elemData.events = {}
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {
              return typeof jQuery !== 'undefined' &&
                jQuery.event.triggered !== e.type
                ? jQuery.event.dispatch.apply(elem, arguments)
                : undefined
            }
          }
          types = (types || '').match(rnothtmlwhite) || ['']
          t = types.length
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || []
            type = origType = tmp[1]
            namespaces = (tmp[2] || '').split('.').sort()
            if (!type) {
              continue
            }
            special = jQuery.event.special[type] || {}
            type = (selector ? special.delegateType : special.bindType) || type
            special = jQuery.event.special[type] || {}
            handleObj = jQuery.extend(
              {
                type: type,
                origType: origType,
                data: data,
                handler: handler,
                guid: handler.guid,
                selector: selector,
                needsContext:
                  selector && jQuery.expr.match.needsContext.test(selector),
                namespace: namespaces.join('.')
              },
              handleObjIn
            )
            if (!(handlers = events[type])) {
              handlers = events[type] = []
              handlers.delegateCount = 0
              if (
                !special.setup ||
                special.setup.call(elem, data, namespaces, eventHandle) ===
                  false
              ) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle)
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj)
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj)
            } else {
              handlers.push(handleObj)
            }
            jQuery.event.global[type] = true
          }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j,
            origCount,
            tmp,
            events,
            t,
            handleObj,
            special,
            handlers,
            type,
            namespaces,
            origType,
            elemData = dataPriv.hasData(elem) && dataPriv.get(elem)
          if (!elemData || !(events = elemData.events)) {
            return
          }
          types = (types || '').match(rnothtmlwhite) || ['']
          t = types.length
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || []
            type = origType = tmp[1]
            namespaces = (tmp[2] || '').split('.').sort()
            if (!type) {
              for (type in events) {
                jQuery.event.remove(
                  elem,
                  type + types[t],
                  handler,
                  selector,
                  true
                )
              }
              continue
            }
            special = jQuery.event.special[type] || {}
            type = (selector ? special.delegateType : special.bindType) || type
            handlers = events[type] || []
            tmp =
              tmp[2] &&
              new RegExp(
                '(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)'
              )
            origCount = j = handlers.length
            while (j--) {
              handleObj = handlers[j]
              if (
                (mappedTypes || origType === handleObj.origType) &&
                (!handler || handler.guid === handleObj.guid) &&
                (!tmp || tmp.test(handleObj.namespace)) &&
                (!selector ||
                  selector === handleObj.selector ||
                  (selector === '**' && handleObj.selector))
              ) {
                handlers.splice(j, 1)
                if (handleObj.selector) {
                  handlers.delegateCount--
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj)
                }
              }
            }
            if (origCount && !handlers.length) {
              if (
                !special.teardown ||
                special.teardown.call(elem, namespaces, elemData.handle) ===
                  false
              ) {
                jQuery.removeEvent(elem, type, elemData.handle)
              }
              delete events[type]
            }
          }
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, 'handle events')
          }
        },
        dispatch: function(nativeEvent) {
          var event = jQuery.event.fix(nativeEvent)
          var i,
            j,
            ret,
            matched,
            handleObj,
            handlerQueue,
            args = new Array(arguments.length),
            handlers = (dataPriv.get(this, 'events') || {})[event.type] || [],
            special = jQuery.event.special[event.type] || {}
          args[0] = event
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i]
          }
          event.delegateTarget = this
          if (
            special.preDispatch &&
            special.preDispatch.call(this, event) === false
          ) {
            return
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers)
          i = 0
          while (
            (matched = handlerQueue[i++]) &&
            !event.isPropagationStopped()
          ) {
            event.currentTarget = matched.elem
            j = 0
            while (
              (handleObj = matched.handlers[j++]) &&
              !event.isImmediatePropagationStopped()
            ) {
              if (
                !event.rnamespace ||
                event.rnamespace.test(handleObj.namespace)
              ) {
                event.handleObj = handleObj
                event.data = handleObj.data
                ret = ((jQuery.event.special[handleObj.origType] || {})
                  .handle || handleObj.handler
                ).apply(matched.elem, args)
                if (ret !== undefined) {
                  if ((event.result = ret) === false) {
                    event.preventDefault()
                    event.stopPropagation()
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event)
          }
          return event.result
        },
        handlers: function(event, handlers) {
          var i,
            handleObj,
            sel,
            matchedHandlers,
            matchedSelectors,
            handlerQueue = [],
            delegateCount = handlers.delegateCount,
            cur = event.target
          if (
            delegateCount &&
            cur.nodeType &&
            !(event.type === 'click' && event.button >= 1)
          ) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (
                cur.nodeType === 1 &&
                !(event.type === 'click' && cur.disabled === true)
              ) {
                matchedHandlers = []
                matchedSelectors = {}
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i]
                  sel = handleObj.selector + ' '
                  if (matchedSelectors[sel] === undefined) {
                    matchedSelectors[sel] = handleObj.needsContext
                      ? jQuery(sel, this).index(cur) > -1
                      : jQuery.find(sel, this, null, [cur]).length
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj)
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: matchedHandlers
                  })
                }
              }
            }
          }
          cur = this
          if (delegateCount < handlers.length) {
            handlerQueue.push({
              elem: cur,
              handlers: handlers.slice(delegateCount)
            })
          }
          return handlerQueue
        },
        addProp: function(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: jQuery.isFunction(hook)
              ? function() {
                  if (this.originalEvent) {
                    return hook(this.originalEvent)
                  }
                }
              : function() {
                  if (this.originalEvent) {
                    return this.originalEvent[name]
                  }
                },
            set: function(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
              })
            }
          })
        },
        fix: function(originalEvent) {
          return originalEvent[jQuery.expando]
            ? originalEvent
            : new jQuery.Event(originalEvent)
        },
        special: {
          load: {
            noBubble: true
          },
          focus: {
            trigger: function() {
              if (this !== safeActiveElement() && this.focus) {
                this.focus()
                return false
              }
            },
            delegateType: 'focusin'
          },
          blur: {
            trigger: function() {
              if (this === safeActiveElement() && this.blur) {
                this.blur()
                return false
              }
            },
            delegateType: 'focusout'
          },
          click: {
            trigger: function() {
              if (
                this.type === 'checkbox' &&
                this.click &&
                nodeName(this, 'input')
              ) {
                this.click()
                return false
              }
            },
            _default: function(event) {
              return nodeName(event.target, 'a')
            }
          },
          beforeunload: {
            postDispatch: function(event) {
              if (event.result !== undefined && event.originalEvent) {
                event.originalEvent.returnValue = event.result
              }
            }
          }
        }
      }
      jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle)
        }
      }
      jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props)
        }
        if (src && src.type) {
          this.originalEvent = src
          this.type = src.type
          this.isDefaultPrevented =
            src.defaultPrevented ||
            (src.defaultPrevented === undefined && src.returnValue === false)
              ? returnTrue
              : returnFalse
          this.target =
            src.target && src.target.nodeType === 3
              ? src.target.parentNode
              : src.target
          this.currentTarget = src.currentTarget
          this.relatedTarget = src.relatedTarget
        } else {
          this.type = src
        }
        if (props) {
          jQuery.extend(this, props)
        }
        this.timeStamp = (src && src.timeStamp) || jQuery.now()
        this[jQuery.expando] = true
      }
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
          var e = this.originalEvent
          this.isDefaultPrevented = returnTrue
          if (e && !this.isSimulated) {
            e.preventDefault()
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent
          this.isPropagationStopped = returnTrue
          if (e && !this.isSimulated) {
            e.stopPropagation()
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent
          this.isImmediatePropagationStopped = returnTrue
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation()
          }
          this.stopPropagation()
        }
      }
      jQuery.each(
        {
          altKey: true,
          bubbles: true,
          cancelable: true,
          changedTouches: true,
          ctrlKey: true,
          detail: true,
          eventPhase: true,
          metaKey: true,
          pageX: true,
          pageY: true,
          shiftKey: true,
          view: true,
          char: true,
          charCode: true,
          key: true,
          keyCode: true,
          button: true,
          buttons: true,
          clientX: true,
          clientY: true,
          offsetX: true,
          offsetY: true,
          pointerId: true,
          pointerType: true,
          screenX: true,
          screenY: true,
          targetTouches: true,
          toElement: true,
          touches: true,
          which: function(event) {
            var button = event.button
            if (event.which == null && rkeyEvent.test(event.type)) {
              return event.charCode != null ? event.charCode : event.keyCode
            }
            if (
              !event.which &&
              button !== undefined &&
              rmouseEvent.test(event.type)
            ) {
              if (button & 1) {
                return 1
              }
              if (button & 2) {
                return 3
              }
              if (button & 4) {
                return 2
              }
              return 0
            }
            return event.which
          }
        },
        jQuery.event.addProp
      )
      jQuery.each(
        {
          mouseenter: 'mouseover',
          mouseleave: 'mouseout',
          pointerenter: 'pointerover',
          pointerleave: 'pointerout'
        },
        function(orig, fix) {
          jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function(event) {
              var ret,
                target = this,
                related = event.relatedTarget,
                handleObj = event.handleObj
              if (
                !related ||
                (related !== target && !jQuery.contains(target, related))
              ) {
                event.type = handleObj.origType
                ret = handleObj.handler.apply(this, arguments)
                event.type = fix
              }
              return ret
            }
          }
        }
      )
      jQuery.fn.extend({
        on: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn)
        },
        one: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1)
        },
        off: function(types, selector, fn) {
          var handleObj, type
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj
            jQuery(types.delegateTarget).off(
              handleObj.namespace
                ? handleObj.origType + '.' + handleObj.namespace
                : handleObj.origType,
              handleObj.selector,
              handleObj.handler
            )
            return this
          }
          if (typeof types === 'object') {
            for (type in types) {
              this.off(type, selector, types[type])
            }
            return this
          }
          if (selector === false || typeof selector === 'function') {
            fn = selector
            selector = undefined
          }
          if (fn === false) {
            fn = returnFalse
          }
          return this.each(function() {
            jQuery.event.remove(this, types, fn, selector)
          })
        }
      })
      var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        rnoInnerhtml = /<script|<style|<link/i,
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g
      function manipulationTarget(elem, content) {
        if (
          nodeName(elem, 'table') &&
          nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')
        ) {
          return jQuery('>tbody', elem)[0] || elem
        }
        return elem
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type
        return elem
      }
      function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type)
        if (match) {
          elem.type = match[1]
        } else {
          elem.removeAttribute('type')
        }
        return elem
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events
        if (dest.nodeType !== 1) {
          return
        }
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.access(src)
          pdataCur = dataPriv.set(dest, pdataOld)
          events = pdataOld.events
          if (events) {
            delete pdataCur.handle
            pdataCur.events = {}
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i])
              }
            }
          }
        }
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src)
          udataCur = jQuery.extend({}, udataOld)
          dataUser.set(dest, udataCur)
        }
      }
      function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase()
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
          dest.checked = src.checked
        } else if (nodeName === 'input' || nodeName === 'textarea') {
          dest.defaultValue = src.defaultValue
        }
      }
      function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args)
        var fragment,
          first,
          scripts,
          hasScripts,
          node,
          doc,
          i = 0,
          l = collection.length,
          iNoClone = l - 1,
          value = args[0],
          isFunction = jQuery.isFunction(value)
        if (
          isFunction ||
          (l > 1 &&
            typeof value === 'string' &&
            !support.checkClone &&
            rchecked.test(value))
        ) {
          return collection.each(function(index) {
            var self = collection.eq(index)
            if (isFunction) {
              args[0] = value.call(this, index, self.html())
            }
            domManip(self, args, callback, ignored)
          })
        }
        if (l) {
          fragment = buildFragment(
            args,
            collection[0].ownerDocument,
            false,
            collection,
            ignored
          )
          first = fragment.firstChild
          if (fragment.childNodes.length === 1) {
            fragment = first
          }
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, 'script'), disableScript)
            hasScripts = scripts.length
            for (; i < l; i++) {
              node = fragment
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true)
                if (hasScripts) {
                  jQuery.merge(scripts, getAll(node, 'script'))
                }
              }
              callback.call(collection[i], node, i)
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument
              jQuery.map(scripts, restoreScript)
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i]
                if (
                  rscriptType.test(node.type || '') &&
                  !dataPriv.access(node, 'globalEval') &&
                  jQuery.contains(doc, node)
                ) {
                  if (node.src) {
                    if (jQuery._evalUrl) {
                      jQuery._evalUrl(node.src)
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ''), doc)
                  }
                }
              }
            }
          }
        }
        return collection
      }
      function remove(elem, selector, keepData) {
        var node,
          nodes = selector ? jQuery.filter(selector, elem) : elem,
          i = 0
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node))
          }
          if (node.parentNode) {
            if (keepData && jQuery.contains(node.ownerDocument, node)) {
              setGlobalEval(getAll(node, 'script'))
            }
            node.parentNode.removeChild(node)
          }
        }
        return elem
      }
      jQuery.extend({
        htmlPrefilter: function(html) {
          return html.replace(rxhtmlTag, '<$1></$2>')
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i,
            l,
            srcElements,
            destElements,
            clone = elem.cloneNode(true),
            inPage = jQuery.contains(elem.ownerDocument, elem)
          if (
            !support.noCloneChecked &&
            (elem.nodeType === 1 || elem.nodeType === 11) &&
            !jQuery.isXMLDoc(elem)
          ) {
            destElements = getAll(clone)
            srcElements = getAll(elem)
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i])
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem)
              destElements = destElements || getAll(clone)
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i])
              }
            } else {
              cloneCopyEvent(elem, clone)
            }
          }
          destElements = getAll(clone, 'script')
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, 'script'))
          }
          return clone
        },
        cleanData: function(elems) {
          var data,
            elem,
            type,
            special = jQuery.event.special,
            i = 0
          for (; (elem = elems[i]) !== undefined; i++) {
            if (acceptData(elem)) {
              if ((data = elem[dataPriv.expando])) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type)
                    } else {
                      jQuery.removeEvent(elem, type, data.handle)
                    }
                  }
                }
                elem[dataPriv.expando] = undefined
              }
              if (elem[dataUser.expando]) {
                elem[dataUser.expando] = undefined
              }
            }
          }
        }
      })
      jQuery.fn.extend({
        detach: function(selector) {
          return remove(this, selector, true)
        },
        remove: function(selector) {
          return remove(this, selector)
        },
        text: function(value) {
          return access(
            this,
            function(value) {
              return value === undefined
                ? jQuery.text(this)
                : this.empty().each(function() {
                    if (
                      this.nodeType === 1 ||
                      this.nodeType === 11 ||
                      this.nodeType === 9
                    ) {
                      this.textContent = value
                    }
                  })
            },
            null,
            value,
            arguments.length
          )
        },
        append: function() {
          return domManip(this, arguments, function(elem) {
            if (
              this.nodeType === 1 ||
              this.nodeType === 11 ||
              this.nodeType === 9
            ) {
              var target = manipulationTarget(this, elem)
              target.appendChild(elem)
            }
          })
        },
        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (
              this.nodeType === 1 ||
              this.nodeType === 11 ||
              this.nodeType === 9
            ) {
              var target = manipulationTarget(this, elem)
              target.insertBefore(elem, target.firstChild)
            }
          })
        },
        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this)
            }
          })
        },
        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling)
            }
          })
        },
        empty: function() {
          var elem,
            i = 0
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false))
              elem.textContent = ''
            }
          }
          return this
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents
          deepDataAndEvents =
            deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents
          return this.map(function() {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
          })
        },
        html: function(value) {
          return access(
            this,
            function(value) {
              var elem = this[0] || {},
                i = 0,
                l = this.length
              if (value === undefined && elem.nodeType === 1) {
                return elem.innerHTML
              }
              if (
                typeof value === 'string' &&
                !rnoInnerhtml.test(value) &&
                !wrapMap[(rtagName.exec(value) || ['', ''])[1].toLowerCase()]
              ) {
                value = jQuery.htmlPrefilter(value)
                try {
                  for (; i < l; i++) {
                    elem = this[i] || {}
                    if (elem.nodeType === 1) {
                      jQuery.cleanData(getAll(elem, false))
                      elem.innerHTML = value
                    }
                  }
                  elem = 0
                } catch (e) {}
              }
              if (elem) {
                this.empty().append(value)
              }
            },
            null,
            value,
            arguments.length
          )
        },
        replaceWith: function() {
          var ignored = []
          return domManip(
            this,
            arguments,
            function(elem) {
              var parent = this.parentNode
              if (jQuery.inArray(this, ignored) < 0) {
                jQuery.cleanData(getAll(this))
                if (parent) {
                  parent.replaceChild(elem, this)
                }
              }
            },
            ignored
          )
        }
      })
      jQuery.each(
        {
          appendTo: 'append',
          prependTo: 'prepend',
          insertBefore: 'before',
          insertAfter: 'after',
          replaceAll: 'replaceWith'
        },
        function(name, original) {
          jQuery.fn[name] = function(selector) {
            var elems,
              ret = [],
              insert = jQuery(selector),
              last = insert.length - 1,
              i = 0
            for (; i <= last; i++) {
              elems = i === last ? this : this.clone(true)
              jQuery(insert[i])[original](elems)
              push.apply(ret, elems.get())
            }
            return this.pushStack(ret)
          }
        }
      )
      var rmargin = /^margin/
      var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i')
      var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView
        if (!view || !view.opener) {
          view = window
        }
        return view.getComputedStyle(elem)
      }
      ;(function() {
        function computeStyleTests() {
          if (!div) {
            return
          }
          div.style.cssText =
            'box-sizing:border-box;' +
            'position:relative;display:block;' +
            'margin:auto;border:1px;padding:1px;' +
            'top:1%;width:50%'
          div.innerHTML = ''
          documentElement.appendChild(container)
          var divStyle = window.getComputedStyle(div)
          pixelPositionVal = divStyle.top !== '1%'
          reliableMarginLeftVal = divStyle.marginLeft === '2px'
          boxSizingReliableVal = divStyle.width === '4px'
          div.style.marginRight = '50%'
          pixelMarginRightVal = divStyle.marginRight === '4px'
          documentElement.removeChild(container)
          div = null
        }
        var pixelPositionVal,
          boxSizingReliableVal,
          pixelMarginRightVal,
          reliableMarginLeftVal,
          container = document.createElement('div'),
          div = document.createElement('div')
        if (!div.style) {
          return
        }
        div.style.backgroundClip = 'content-box'
        div.cloneNode(true).style.backgroundClip = ''
        support.clearCloneStyle = div.style.backgroundClip === 'content-box'
        container.style.cssText =
          'border:0;width:8px;height:0;top:0;left:-9999px;' +
          'padding:0;margin-top:1px;position:absolute'
        container.appendChild(div)
        jQuery.extend(support, {
          pixelPosition: function() {
            computeStyleTests()
            return pixelPositionVal
          },
          boxSizingReliable: function() {
            computeStyleTests()
            return boxSizingReliableVal
          },
          pixelMarginRight: function() {
            computeStyleTests()
            return pixelMarginRightVal
          },
          reliableMarginLeft: function() {
            computeStyleTests()
            return reliableMarginLeftVal
          }
        })
      })()
      function curCSS(elem, name, computed) {
        var width,
          minWidth,
          maxWidth,
          ret,
          style = elem.style
        computed = computed || getStyles(elem)
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name]
          if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
            ret = jQuery.style(elem, name)
          }
          if (
            !support.pixelMarginRight() &&
            rnumnonpx.test(ret) &&
            rmargin.test(name)
          ) {
            width = style.width
            minWidth = style.minWidth
            maxWidth = style.maxWidth
            style.minWidth = style.maxWidth = style.width = ret
            ret = computed.width
            style.width = width
            style.minWidth = minWidth
            style.maxWidth = maxWidth
          }
        }
        return ret !== undefined ? ret + '' : ret
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function() {
            if (conditionFn()) {
              delete this.get
              return
            }
            return (this.get = hookFn).apply(this, arguments)
          }
        }
      }
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
        rcustomProp = /^--/,
        cssShow = {
          position: 'absolute',
          visibility: 'hidden',
          display: 'block'
        },
        cssNormalTransform = {
          letterSpacing: '0',
          fontWeight: '400'
        },
        cssPrefixes = ['Webkit', 'Moz', 'ms'],
        emptyStyle = document.createElement('div').style
      function vendorPropName(name) {
        if (name in emptyStyle) {
          return name
        }
        var capName = name[0].toUpperCase() + name.slice(1),
          i = cssPrefixes.length
        while (i--) {
          name = cssPrefixes[i] + capName
          if (name in emptyStyle) {
            return name
          }
        }
      }
      function finalPropName(name) {
        var ret = jQuery.cssProps[name]
        if (!ret) {
          ret = jQuery.cssProps[name] = vendorPropName(name) || name
        }
        return ret
      }
      function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value)
        return matches
          ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px')
          : value
      }
      function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i,
          val = 0
        if (extra === (isBorderBox ? 'border' : 'content')) {
          i = 4
        } else {
          i = name === 'width' ? 1 : 0
        }
        for (; i < 4; i += 2) {
          if (extra === 'margin') {
            val += jQuery.css(elem, extra + cssExpand[i], true, styles)
          }
          if (isBorderBox) {
            if (extra === 'content') {
              val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles)
            }
            if (extra !== 'margin') {
              val -= jQuery.css(
                elem,
                'border' + cssExpand[i] + 'Width',
                true,
                styles
              )
            }
          } else {
            val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles)
            if (extra !== 'padding') {
              val += jQuery.css(
                elem,
                'border' + cssExpand[i] + 'Width',
                true,
                styles
              )
            }
          }
        }
        return val
      }
      function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox,
          styles = getStyles(elem),
          val = curCSS(elem, name, styles),
          isBorderBox =
            jQuery.css(elem, 'boxSizing', false, styles) === 'border-box'
        if (rnumnonpx.test(val)) {
          return val
        }
        valueIsBorderBox =
          isBorderBox &&
          (support.boxSizingReliable() || val === elem.style[name])
        if (val === 'auto') {
          val = elem['offset' + name[0].toUpperCase() + name.slice(1)]
        }
        val = parseFloat(val) || 0
        return (
          val +
          augmentWidthOrHeight(
            elem,
            name,
            extra || (isBorderBox ? 'border' : 'content'),
            valueIsBorderBox,
            styles
          ) +
          'px'
        )
      }
      jQuery.extend({
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, 'opacity')
                return ret === '' ? '1' : ret
              }
            }
          }
        },
        cssNumber: {
          animationIterationCount: true,
          columnCount: true,
          fillOpacity: true,
          flexGrow: true,
          flexShrink: true,
          fontWeight: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          widows: true,
          zIndex: true,
          zoom: true
        },
        cssProps: {
          float: 'cssFloat'
        },
        style: function(elem, name, value, extra) {
          if (
            !elem ||
            elem.nodeType === 3 ||
            elem.nodeType === 8 ||
            !elem.style
          ) {
            return
          }
          var ret,
            type,
            hooks,
            origName = jQuery.camelCase(name),
            isCustomProp = rcustomProp.test(name),
            style = elem.style
          if (!isCustomProp) {
            name = finalPropName(origName)
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]
          if (value !== undefined) {
            type = typeof value
            if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret)
              type = 'number'
            }
            if (value == null || value !== value) {
              return
            }
            if (type === 'number') {
              value +=
                (ret && ret[3]) || (jQuery.cssNumber[origName] ? '' : 'px')
            }
            if (
              !support.clearCloneStyle &&
              value === '' &&
              name.indexOf('background') === 0
            ) {
              style[name] = 'inherit'
            }
            if (
              !hooks ||
              !('set' in hooks) ||
              (value = hooks.set(elem, value, extra)) !== undefined
            ) {
              if (isCustomProp) {
                style.setProperty(name, value)
              } else {
                style[name] = value
              }
            }
          } else {
            if (
              hooks &&
              'get' in hooks &&
              (ret = hooks.get(elem, false, extra)) !== undefined
            ) {
              return ret
            }
            return style[name]
          }
        },
        css: function(elem, name, extra, styles) {
          var val,
            num,
            hooks,
            origName = jQuery.camelCase(name),
            isCustomProp = rcustomProp.test(name)
          if (!isCustomProp) {
            name = finalPropName(origName)
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]
          if (hooks && 'get' in hooks) {
            val = hooks.get(elem, true, extra)
          }
          if (val === undefined) {
            val = curCSS(elem, name, styles)
          }
          if (val === 'normal' && name in cssNormalTransform) {
            val = cssNormalTransform[name]
          }
          if (extra === '' || extra) {
            num = parseFloat(val)
            return extra === true || isFinite(num) ? num || 0 : val
          }
          return val
        }
      })
      jQuery.each(['height', 'width'], function(i, name) {
        jQuery.cssHooks[name] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery.css(elem, 'display')) &&
                (!elem.getClientRects().length ||
                  !elem.getBoundingClientRect().width)
                ? swap(elem, cssShow, function() {
                    return getWidthOrHeight(elem, name, extra)
                  })
                : getWidthOrHeight(elem, name, extra)
            }
          },
          set: function(elem, value, extra) {
            var matches,
              styles = extra && getStyles(elem),
              subtract =
                extra &&
                augmentWidthOrHeight(
                  elem,
                  name,
                  extra,
                  jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
                  styles
                )
            if (
              subtract &&
              (matches = rcssNum.exec(value)) &&
              (matches[3] || 'px') !== 'px'
            ) {
              elem.style[name] = value
              value = jQuery.css(elem, name)
            }
            return setPositiveNumber(elem, value, subtract)
          }
        }
      })
      jQuery.cssHooks.marginLeft = addGetHookIf(
        support.reliableMarginLeft,
        function(elem, computed) {
          if (computed) {
            return (
              (parseFloat(curCSS(elem, 'marginLeft')) ||
                elem.getBoundingClientRect().left -
                  swap(
                    elem,
                    {
                      marginLeft: 0
                    },
                    function() {
                      return elem.getBoundingClientRect().left
                    }
                  )) + 'px'
            )
          }
        }
      )
      jQuery.each(
        {
          margin: '',
          padding: '',
          border: 'Width'
        },
        function(prefix, suffix) {
          jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
              var i = 0,
                expanded = {},
                parts = typeof value === 'string' ? value.split(' ') : [value]
              for (; i < 4; i++) {
                expanded[prefix + cssExpand[i] + suffix] =
                  parts[i] || parts[i - 2] || parts[0]
              }
              return expanded
            }
          }
          if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
          }
        }
      )
      jQuery.fn.extend({
        css: function(name, value) {
          return access(
            this,
            function(elem, name, value) {
              var styles,
                len,
                map = {},
                i = 0
              if (Array.isArray(name)) {
                styles = getStyles(elem)
                len = name.length
                for (; i < len; i++) {
                  map[name[i]] = jQuery.css(elem, name[i], false, styles)
                }
                return map
              }
              return value !== undefined
                ? jQuery.style(elem, name, value)
                : jQuery.css(elem, name)
            },
            name,
            value,
            arguments.length > 1
          )
        }
      })
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing)
      }
      jQuery.Tween = Tween
      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem
          this.prop = prop
          this.easing = easing || jQuery.easing._default
          this.options = options
          this.start = this.now = this.cur()
          this.end = end
          this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px')
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop]
          return hooks && hooks.get
            ? hooks.get(this)
            : Tween.propHooks._default.get(this)
        },
        run: function(percent) {
          var eased,
            hooks = Tween.propHooks[this.prop]
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](
              percent,
              this.options.duration * percent,
              0,
              1,
              this.options.duration
            )
          } else {
            this.pos = eased = percent
          }
          this.now = (this.end - this.start) * eased + this.start
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this)
          }
          if (hooks && hooks.set) {
            hooks.set(this)
          } else {
            Tween.propHooks._default.set(this)
          }
          return this
        }
      }
      Tween.prototype.init.prototype = Tween.prototype
      Tween.propHooks = {
        _default: {
          get: function(tween) {
            var result
            if (
              tween.elem.nodeType !== 1 ||
              (tween.elem[tween.prop] != null &&
                tween.elem.style[tween.prop] == null)
            ) {
              return tween.elem[tween.prop]
            }
            result = jQuery.css(tween.elem, tween.prop, '')
            return !result || result === 'auto' ? 0 : result
          },
          set: function(tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween)
            } else if (
              tween.elem.nodeType === 1 &&
              (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                jQuery.cssHooks[tween.prop])
            ) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
            } else {
              tween.elem[tween.prop] = tween.now
            }
          }
        }
      }
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now
          }
        }
      }
      jQuery.easing = {
        linear: function(p) {
          return p
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2
        },
        _default: 'swing'
      }
      jQuery.fx = Tween.prototype.init
      jQuery.fx.step = {}
      var fxNow,
        inProgress,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/
      function schedule() {
        if (inProgress) {
          if (document.hidden === false && window.requestAnimationFrame) {
            window.requestAnimationFrame(schedule)
          } else {
            window.setTimeout(schedule, jQuery.fx.interval)
          }
          jQuery.fx.tick()
        }
      }
      function createFxNow() {
        window.setTimeout(function() {
          fxNow = undefined
        })
        return (fxNow = jQuery.now())
      }
      function genFx(type, includeWidth) {
        var which,
          i = 0,
          attrs = {
            height: type
          }
        includeWidth = includeWidth ? 1 : 0
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i]
          attrs['margin' + which] = attrs['padding' + which] = type
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type
        }
        return attrs
      }
      function createTween(value, prop, animation) {
        var tween,
          collection = (Animation.tweeners[prop] || []).concat(
            Animation.tweeners['*']
          ),
          index = 0,
          length = collection.length
        for (; index < length; index++) {
          if ((tween = collection[index].call(animation, prop, value))) {
            return tween
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop,
          value,
          toggle,
          hooks,
          oldfire,
          propTween,
          restoreDisplay,
          display,
          isBox = 'width' in props || 'height' in props,
          anim = this,
          orig = {},
          style = elem.style,
          hidden = elem.nodeType && isHiddenWithinTree(elem),
          dataShow = dataPriv.get(elem, 'fxshow')
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, 'fx')
          if (hooks.unqueued == null) {
            hooks.unqueued = 0
            oldfire = hooks.empty.fire
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire()
              }
            }
          }
          hooks.unqueued++
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--
              if (!jQuery.queue(elem, 'fx').length) {
                hooks.empty.fire()
              }
            })
          })
        }
        for (prop in props) {
          value = props[prop]
          if (rfxtypes.test(value)) {
            delete props[prop]
            toggle = toggle || value === 'toggle'
            if (value === (hidden ? 'hide' : 'show')) {
              if (
                value === 'show' &&
                dataShow &&
                dataShow[prop] !== undefined
              ) {
                hidden = true
              } else {
                continue
              }
            }
            orig[prop] =
              (dataShow && dataShow[prop]) || jQuery.style(elem, prop)
          }
        }
        propTween = !jQuery.isEmptyObject(props)
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return
        }
        if (isBox && elem.nodeType === 1) {
          opts.overflow = [style.overflow, style.overflowX, style.overflowY]
          restoreDisplay = dataShow && dataShow.display
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, 'display')
          }
          display = jQuery.css(elem, 'display')
          if (display === 'none') {
            if (restoreDisplay) {
              display = restoreDisplay
            } else {
              showHide([elem], true)
              restoreDisplay = elem.style.display || restoreDisplay
              display = jQuery.css(elem, 'display')
              showHide([elem])
            }
          }
          if (
            display === 'inline' ||
            (display === 'inline-block' && restoreDisplay != null)
          ) {
            if (jQuery.css(elem, 'float') === 'none') {
              if (!propTween) {
                anim.done(function() {
                  style.display = restoreDisplay
                })
                if (restoreDisplay == null) {
                  display = style.display
                  restoreDisplay = display === 'none' ? '' : display
                }
              }
              style.display = 'inline-block'
            }
          }
        }
        if (opts.overflow) {
          style.overflow = 'hidden'
          anim.always(function() {
            style.overflow = opts.overflow[0]
            style.overflowX = opts.overflow[1]
            style.overflowY = opts.overflow[2]
          })
        }
        propTween = false
        for (prop in orig) {
          if (!propTween) {
            if (dataShow) {
              if ('hidden' in dataShow) {
                hidden = dataShow.hidden
              }
            } else {
              dataShow = dataPriv.access(elem, 'fxshow', {
                display: restoreDisplay
              })
            }
            if (toggle) {
              dataShow.hidden = !hidden
            }
            if (hidden) {
              showHide([elem], true)
            }
            anim.done(function() {
              if (!hidden) {
                showHide([elem])
              }
              dataPriv.remove(elem, 'fxshow')
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop])
              }
            })
          }
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim)
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start
            if (hidden) {
              propTween.end = propTween.start
              propTween.start = 0
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks
        for (index in props) {
          name = jQuery.camelCase(index)
          easing = specialEasing[name]
          value = props[index]
          if (Array.isArray(value)) {
            easing = value[1]
            value = props[index] = value[0]
          }
          if (index !== name) {
            props[name] = value
            delete props[index]
          }
          hooks = jQuery.cssHooks[name]
          if (hooks && 'expand' in hooks) {
            value = hooks.expand(value)
            delete props[name]
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index]
                specialEasing[index] = easing
              }
            }
          } else {
            specialEasing[name] = easing
          }
        }
      }
      function Animation(elem, properties, options) {
        var result,
          stopped,
          index = 0,
          length = Animation.prefilters.length,
          deferred = jQuery.Deferred().always(function() {
            delete tick.elem
          }),
          tick = function() {
            if (stopped) {
              return false
            }
            var currentTime = fxNow || createFxNow(),
              remaining = Math.max(
                0,
                animation.startTime + animation.duration - currentTime
              ),
              temp = remaining / animation.duration || 0,
              percent = 1 - temp,
              index = 0,
              length = animation.tweens.length
            for (; index < length; index++) {
              animation.tweens[index].run(percent)
            }
            deferred.notifyWith(elem, [animation, percent, remaining])
            if (percent < 1 && length) {
              return remaining
            }
            if (!length) {
              deferred.notifyWith(elem, [animation, 1, 0])
            }
            deferred.resolveWith(elem, [animation])
            return false
          },
          animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(
              true,
              {
                specialEasing: {},
                easing: jQuery.easing._default
              },
              options
            ),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function(prop, end) {
              var tween = jQuery.Tween(
                elem,
                animation.opts,
                prop,
                end,
                animation.opts.specialEasing[prop] || animation.opts.easing
              )
              animation.tweens.push(tween)
              return tween
            },
            stop: function(gotoEnd) {
              var index = 0,
                length = gotoEnd ? animation.tweens.length : 0
              if (stopped) {
                return this
              }
              stopped = true
              for (; index < length; index++) {
                animation.tweens[index].run(1)
              }
              if (gotoEnd) {
                deferred.notifyWith(elem, [animation, 1, 0])
                deferred.resolveWith(elem, [animation, gotoEnd])
              } else {
                deferred.rejectWith(elem, [animation, gotoEnd])
              }
              return this
            }
          }),
          props = animation.props
        propFilter(props, animation.opts.specialEasing)
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(
            animation,
            elem,
            props,
            animation.opts
          )
          if (result) {
            if (jQuery.isFunction(result.stop)) {
              jQuery._queueHooks(
                animation.elem,
                animation.opts.queue
              ).stop = jQuery.proxy(result.stop, result)
            }
            return result
          }
        }
        jQuery.map(props, createTween, animation)
        if (jQuery.isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation)
        }
        animation
          .progress(animation.opts.progress)
          .done(animation.opts.done, animation.opts.complete)
          .fail(animation.opts.fail)
          .always(animation.opts.always)
        jQuery.fx.timer(
          jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
          })
        )
        return animation
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          '*': [
            function(prop, value) {
              var tween = this.createTween(prop, value)
              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween)
              return tween
            }
          ]
        },
        tweener: function(props, callback) {
          if (jQuery.isFunction(props)) {
            callback = props
            props = ['*']
          } else {
            props = props.match(rnothtmlwhite)
          }
          var prop,
            index = 0,
            length = props.length
          for (; index < length; index++) {
            prop = props[index]
            Animation.tweeners[prop] = Animation.tweeners[prop] || []
            Animation.tweeners[prop].unshift(callback)
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback)
          } else {
            Animation.prefilters.push(callback)
          }
        }
      })
      jQuery.speed = function(speed, easing, fn) {
        var opt =
          speed && typeof speed === 'object'
            ? jQuery.extend({}, speed)
            : {
                complete:
                  fn || (!fn && easing) || (jQuery.isFunction(speed) && speed),
                duration: speed,
                easing:
                  (fn && easing) ||
                  (easing && !jQuery.isFunction(easing) && easing)
              }
        if (jQuery.fx.off) {
          opt.duration = 0
        } else {
          if (typeof opt.duration !== 'number') {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration]
            } else {
              opt.duration = jQuery.fx.speeds._default
            }
          }
        }
        if (opt.queue == null || opt.queue === true) {
          opt.queue = 'fx'
        }
        opt.old = opt.complete
        opt.complete = function() {
          if (jQuery.isFunction(opt.old)) {
            opt.old.call(this)
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue)
          }
        }
        return opt
      }
      jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHiddenWithinTree)
            .css('opacity', 0)
            .show()
            .end()
            .animate(
              {
                opacity: to
              },
              speed,
              easing,
              callback
            )
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop),
            optall = jQuery.speed(speed, easing, callback),
            doAnimation = function() {
              var anim = Animation(this, jQuery.extend({}, prop), optall)
              if (empty || dataPriv.get(this, 'finish')) {
                anim.stop(true)
              }
            }
          doAnimation.finish = doAnimation
          return empty || optall.queue === false
            ? this.each(doAnimation)
            : this.queue(optall.queue, doAnimation)
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop
            delete hooks.stop
            stop(gotoEnd)
          }
          if (typeof type !== 'string') {
            gotoEnd = clearQueue
            clearQueue = type
            type = undefined
          }
          if (clearQueue && type !== false) {
            this.queue(type || 'fx', [])
          }
          return this.each(function() {
            var dequeue = true,
              index = type != null && type + 'queueHooks',
              timers = jQuery.timers,
              data = dataPriv.get(this)
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index])
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index])
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (
                timers[index].elem === this &&
                (type == null || timers[index].queue === type)
              ) {
                timers[index].anim.stop(gotoEnd)
                dequeue = false
                timers.splice(index, 1)
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type)
            }
          })
        },
        finish: function(type) {
          if (type !== false) {
            type = type || 'fx'
          }
          return this.each(function() {
            var index,
              data = dataPriv.get(this),
              queue = data[type + 'queue'],
              hooks = data[type + 'queueHooks'],
              timers = jQuery.timers,
              length = queue ? queue.length : 0
            data.finish = true
            jQuery.queue(this, type, [])
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true)
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true)
                timers.splice(index, 1)
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this)
              }
            }
            delete data.finish
          })
        }
      })
      jQuery.each(['toggle', 'show', 'hide'], function(i, name) {
        var cssFn = jQuery.fn[name]
        jQuery.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === 'boolean'
            ? cssFn.apply(this, arguments)
            : this.animate(genFx(name, true), speed, easing, callback)
        }
      })
      jQuery.each(
        {
          slideDown: genFx('show'),
          slideUp: genFx('hide'),
          slideToggle: genFx('toggle'),
          fadeIn: {
            opacity: 'show'
          },
          fadeOut: {
            opacity: 'hide'
          },
          fadeToggle: {
            opacity: 'toggle'
          }
        },
        function(name, props) {
          jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback)
          }
        }
      )
      jQuery.timers = []
      jQuery.fx.tick = function() {
        var timer,
          i = 0,
          timers = jQuery.timers
        fxNow = jQuery.now()
        for (; i < timers.length; i++) {
          timer = timers[i]
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1)
          }
        }
        if (!timers.length) {
          jQuery.fx.stop()
        }
        fxNow = undefined
      }
      jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer)
        jQuery.fx.start()
      }
      jQuery.fx.interval = 13
      jQuery.fx.start = function() {
        if (inProgress) {
          return
        }
        inProgress = true
        schedule()
      }
      jQuery.fx.stop = function() {
        inProgress = null
      }
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      }
      jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time
        type = type || 'fx'
        return this.queue(type, function(next, hooks) {
          var timeout = window.setTimeout(next, time)
          hooks.stop = function() {
            window.clearTimeout(timeout)
          }
        })
      }
      ;(function() {
        var input = document.createElement('input'),
          select = document.createElement('select'),
          opt = select.appendChild(document.createElement('option'))
        input.type = 'checkbox'
        support.checkOn = input.value !== ''
        support.optSelected = opt.selected
        input = document.createElement('input')
        input.value = 't'
        input.type = 'radio'
        support.radioValue = input.value === 't'
      })()
      var boolHook,
        attrHandle = jQuery.expr.attrHandle
      jQuery.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1)
        },
        removeAttr: function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name)
          })
        }
      })
      jQuery.extend({
        attr: function(elem, name, value) {
          var ret,
            hooks,
            nType = elem.nodeType
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          if (typeof elem.getAttribute === 'undefined') {
            return jQuery.prop(elem, name, value)
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks =
              jQuery.attrHooks[name.toLowerCase()] ||
              (jQuery.expr.match.bool.test(name) ? boolHook : undefined)
          }
          if (value !== undefined) {
            if (value === null) {
              jQuery.removeAttr(elem, name)
              return
            }
            if (
              hooks &&
              'set' in hooks &&
              (ret = hooks.set(elem, value, name)) !== undefined
            ) {
              return ret
            }
            elem.setAttribute(name, value + '')
            return value
          }
          if (
            hooks &&
            'get' in hooks &&
            (ret = hooks.get(elem, name)) !== null
          ) {
            return ret
          }
          ret = jQuery.find.attr(elem, name)
          return ret == null ? undefined : ret
        },
        attrHooks: {
          type: {
            set: function(elem, value) {
              if (
                !support.radioValue &&
                value === 'radio' &&
                nodeName(elem, 'input')
              ) {
                var val = elem.value
                elem.setAttribute('type', value)
                if (val) {
                  elem.value = val
                }
                return value
              }
            }
          }
        },
        removeAttr: function(elem, value) {
          var name,
            i = 0,
            attrNames = value && value.match(rnothtmlwhite)
          if (attrNames && elem.nodeType === 1) {
            while ((name = attrNames[i++])) {
              elem.removeAttribute(name)
            }
          }
        }
      })
      boolHook = {
        set: function(elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name)
          } else {
            elem.setAttribute(name, name)
          }
          return name
        }
      }
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(
        i,
        name
      ) {
        var getter = attrHandle[name] || jQuery.find.attr
        attrHandle[name] = function(elem, name, isXML) {
          var ret,
            handle,
            lowercaseName = name.toLowerCase()
          if (!isXML) {
            handle = attrHandle[lowercaseName]
            attrHandle[lowercaseName] = ret
            ret = getter(elem, name, isXML) != null ? lowercaseName : null
            attrHandle[lowercaseName] = handle
          }
          return ret
        }
      })
      var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i
      jQuery.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1)
        },
        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name]
          })
        }
      })
      jQuery.extend({
        prop: function(elem, name, value) {
          var ret,
            hooks,
            nType = elem.nodeType
          if (nType === 3 || nType === 8 || nType === 2) {
            return
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = jQuery.propFix[name] || name
            hooks = jQuery.propHooks[name]
          }
          if (value !== undefined) {
            if (
              hooks &&
              'set' in hooks &&
              (ret = hooks.set(elem, value, name)) !== undefined
            ) {
              return ret
            }
            return (elem[name] = value)
          }
          if (
            hooks &&
            'get' in hooks &&
            (ret = hooks.get(elem, name)) !== null
          ) {
            return ret
          }
          return elem[name]
        },
        propHooks: {
          tabIndex: {
            get: function(elem) {
              var tabindex = jQuery.find.attr(elem, 'tabindex')
              if (tabindex) {
                return parseInt(tabindex, 10)
              }
              if (
                rfocusable.test(elem.nodeName) ||
                (rclickable.test(elem.nodeName) && elem.href)
              ) {
                return 0
              }
              return -1
            }
          }
        },
        propFix: {
          for: 'htmlFor',
          class: 'className'
        }
      })
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function(elem) {
            var parent = elem.parentNode
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex
            }
            return null
          },
          set: function(elem) {
            var parent = elem.parentNode
            if (parent) {
              parent.selectedIndex
              if (parent.parentNode) {
                parent.parentNode.selectedIndex
              }
            }
          }
        }
      }
      jQuery.each(
        [
          'tabIndex',
          'readOnly',
          'maxLength',
          'cellSpacing',
          'cellPadding',
          'rowSpan',
          'colSpan',
          'useMap',
          'frameBorder',
          'contentEditable'
        ],
        function() {
          jQuery.propFix[this.toLowerCase()] = this
        }
      )
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || []
        return tokens.join(' ')
      }
      function getClass(elem) {
        return (elem.getAttribute && elem.getAttribute('class')) || ''
      }
      jQuery.fn.extend({
        addClass: function(value) {
          var classes,
            elem,
            cur,
            curValue,
            clazz,
            j,
            finalValue,
            i = 0
          if (jQuery.isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)))
            })
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || []
            while ((elem = this[i++])) {
              curValue = getClass(elem)
              cur =
                elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' '
              if (cur) {
                j = 0
                while ((clazz = classes[j++])) {
                  if (cur.indexOf(' ' + clazz + ' ') < 0) {
                    cur += clazz + ' '
                  }
                }
                finalValue = stripAndCollapse(cur)
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        removeClass: function(value) {
          var classes,
            elem,
            cur,
            curValue,
            clazz,
            j,
            finalValue,
            i = 0
          if (jQuery.isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)))
            })
          }
          if (!arguments.length) {
            return this.attr('class', '')
          }
          if (typeof value === 'string' && value) {
            classes = value.match(rnothtmlwhite) || []
            while ((elem = this[i++])) {
              curValue = getClass(elem)
              cur =
                elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' '
              if (cur) {
                j = 0
                while ((clazz = classes[j++])) {
                  while (cur.indexOf(' ' + clazz + ' ') > -1) {
                    cur = cur.replace(' ' + clazz + ' ', ' ')
                  }
                }
                finalValue = stripAndCollapse(cur)
                if (curValue !== finalValue) {
                  elem.setAttribute('class', finalValue)
                }
              }
            }
          }
          return this
        },
        toggleClass: function(value, stateVal) {
          var type = typeof value
          if (typeof stateVal === 'boolean' && type === 'string') {
            return stateVal ? this.addClass(value) : this.removeClass(value)
          }
          if (jQuery.isFunction(value)) {
            return this.each(function(i) {
              jQuery(this).toggleClass(
                value.call(this, i, getClass(this), stateVal),
                stateVal
              )
            })
          }
          return this.each(function() {
            var className, i, self, classNames
            if (type === 'string') {
              i = 0
              self = jQuery(this)
              classNames = value.match(rnothtmlwhite) || []
              while ((className = classNames[i++])) {
                if (self.hasClass(className)) {
                  self.removeClass(className)
                } else {
                  self.addClass(className)
                }
              }
            } else if (value === undefined || type === 'boolean') {
              className = getClass(this)
              if (className) {
                dataPriv.set(this, '__className__', className)
              }
              if (this.setAttribute) {
                this.setAttribute(
                  'class',
                  className || value === false
                    ? ''
                    : dataPriv.get(this, '__className__') || ''
                )
              }
            }
          })
        },
        hasClass: function(selector) {
          var className,
            elem,
            i = 0
          className = ' ' + selector + ' '
          while ((elem = this[i++])) {
            if (
              elem.nodeType === 1 &&
              (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(
                className
              ) > -1
            ) {
              return true
            }
          }
          return false
        }
      })
      var rreturn = /\r/g
      jQuery.fn.extend({
        val: function(value) {
          var hooks,
            ret,
            isFunction,
            elem = this[0]
          if (!arguments.length) {
            if (elem) {
              hooks =
                jQuery.valHooks[elem.type] ||
                jQuery.valHooks[elem.nodeName.toLowerCase()]
              if (
                hooks &&
                'get' in hooks &&
                (ret = hooks.get(elem, 'value')) !== undefined
              ) {
                return ret
              }
              ret = elem.value
              if (typeof ret === 'string') {
                return ret.replace(rreturn, '')
              }
              return ret == null ? '' : ret
            }
            return
          }
          isFunction = jQuery.isFunction(value)
          return this.each(function(i) {
            var val
            if (this.nodeType !== 1) {
              return
            }
            if (isFunction) {
              val = value.call(this, i, jQuery(this).val())
            } else {
              val = value
            }
            if (val == null) {
              val = ''
            } else if (typeof val === 'number') {
              val += ''
            } else if (Array.isArray(val)) {
              val = jQuery.map(val, function(value) {
                return value == null ? '' : value + ''
              })
            }
            hooks =
              jQuery.valHooks[this.type] ||
              jQuery.valHooks[this.nodeName.toLowerCase()]
            if (
              !hooks ||
              !('set' in hooks) ||
              hooks.set(this, val, 'value') === undefined
            ) {
              this.value = val
            }
          })
        }
      })
      jQuery.extend({
        valHooks: {
          option: {
            get: function(elem) {
              var val = jQuery.find.attr(elem, 'value')
              return val != null ? val : stripAndCollapse(jQuery.text(elem))
            }
          },
          select: {
            get: function(elem) {
              var value,
                option,
                i,
                options = elem.options,
                index = elem.selectedIndex,
                one = elem.type === 'select-one',
                values = one ? null : [],
                max = one ? index + 1 : options.length
              if (index < 0) {
                i = max
              } else {
                i = one ? index : 0
              }
              for (; i < max; i++) {
                option = options[i]
                if (
                  (option.selected || i === index) &&
                  !option.disabled &&
                  (!option.parentNode.disabled ||
                    !nodeName(option.parentNode, 'optgroup'))
                ) {
                  value = jQuery(option).val()
                  if (one) {
                    return value
                  }
                  values.push(value)
                }
              }
              return values
            },
            set: function(elem, value) {
              var optionSet,
                option,
                options = elem.options,
                values = jQuery.makeArray(value),
                i = options.length
              while (i--) {
                option = options[i]
                if (
                  (option.selected =
                    jQuery.inArray(jQuery.valHooks.option.get(option), values) >
                    -1)
                ) {
                  optionSet = true
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1
              }
              return values
            }
          }
        }
      })
      jQuery.each(['radio', 'checkbox'], function() {
        jQuery.valHooks[this] = {
          set: function(elem, value) {
            if (Array.isArray(value)) {
              return (elem.checked =
                jQuery.inArray(jQuery(elem).val(), value) > -1)
            }
          }
        }
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute('value') === null ? 'on' : elem.value
          }
        }
      })
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/
      jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
          var i,
            cur,
            tmp,
            bubbleType,
            ontype,
            handle,
            special,
            eventPath = [elem || document],
            type = hasOwn.call(event, 'type') ? event.type : event,
            namespaces = hasOwn.call(event, 'namespace')
              ? event.namespace.split('.')
              : []
          cur = tmp = elem = elem || document
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return
          }
          if (type.indexOf('.') > -1) {
            namespaces = type.split('.')
            type = namespaces.shift()
            namespaces.sort()
          }
          ontype = type.indexOf(':') < 0 && 'on' + type
          event = event[jQuery.expando]
            ? event
            : new jQuery.Event(type, typeof event === 'object' && event)
          event.isTrigger = onlyHandlers ? 2 : 3
          event.namespace = namespaces.join('.')
          event.rnamespace = event.namespace
            ? new RegExp(
                '(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)'
              )
            : null
          event.result = undefined
          if (!event.target) {
            event.target = elem
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event])
          special = jQuery.event.special[type] || {}
          if (
            !onlyHandlers &&
            special.trigger &&
            special.trigger.apply(elem, data) === false
          ) {
            return
          }
          if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
            bubbleType = special.delegateType || type
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur)
              tmp = cur
            }
            if (tmp === (elem.ownerDocument || document)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window)
            }
          }
          i = 0
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            event.type = i > 1 ? bubbleType : special.bindType || type
            handle =
              (dataPriv.get(cur, 'events') || {})[event.type] &&
              dataPriv.get(cur, 'handle')
            if (handle) {
              handle.apply(cur, data)
            }
            handle = ontype && cur[ontype]
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data)
              if (event.result === false) {
                event.preventDefault()
              }
            }
          }
          event.type = type
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if (
              (!special._default ||
                special._default.apply(eventPath.pop(), data) === false) &&
              acceptData(elem)
            ) {
              if (
                ontype &&
                jQuery.isFunction(elem[type]) &&
                !jQuery.isWindow(elem)
              ) {
                tmp = elem[ontype]
                if (tmp) {
                  elem[ontype] = null
                }
                jQuery.event.triggered = type
                elem[type]()
                jQuery.event.triggered = undefined
                if (tmp) {
                  elem[ontype] = tmp
                }
              }
            }
          }
          return event.result
        },
        simulate: function(type, elem, event) {
          var e = jQuery.extend(new jQuery.Event(), event, {
            type: type,
            isSimulated: true
          })
          jQuery.event.trigger(e, null, elem)
        }
      })
      jQuery.fn.extend({
        trigger: function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this)
          })
        },
        triggerHandler: function(type, data) {
          var elem = this[0]
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true)
          }
        }
      })
      jQuery.each(
        ('blur focus focusin focusout resize scroll click dblclick ' +
          'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
          'change select submit keydown keypress keyup contextmenu'
        ).split(' '),
        function(i, name) {
          jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0
              ? this.on(name, null, data, fn)
              : this.trigger(name)
          }
        }
      )
      jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }
      })
      support.focusin = 'onfocusin' in window
      if (!support.focusin) {
        jQuery.each(
          {
            focus: 'focusin',
            blur: 'focusout'
          },
          function(orig, fix) {
            var handler = function(event) {
              jQuery.event.simulate(fix, event.target, jQuery.event.fix(event))
            }
            jQuery.event.special[fix] = {
              setup: function() {
                var doc = this.ownerDocument || this,
                  attaches = dataPriv.access(doc, fix)
                if (!attaches) {
                  doc.addEventListener(orig, handler, true)
                }
                dataPriv.access(doc, fix, (attaches || 0) + 1)
              },
              teardown: function() {
                var doc = this.ownerDocument || this,
                  attaches = dataPriv.access(doc, fix) - 1
                if (!attaches) {
                  doc.removeEventListener(orig, handler, true)
                  dataPriv.remove(doc, fix)
                } else {
                  dataPriv.access(doc, fix, attaches)
                }
              }
            }
          }
        )
      }
      var location = window.location
      var nonce = jQuery.now()
      var rquery = /\?/
      jQuery.parseXML = function(data) {
        var xml
        if (!data || typeof data !== 'string') {
          return null
        }
        try {
          xml = new window.DOMParser().parseFromString(data, 'text/xml')
        } catch (e) {
          xml = undefined
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
          jQuery.error('Invalid XML: ' + data)
        }
        return xml
      }
      var rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i
      function buildParams(prefix, obj, traditional, add) {
        var name
        if (Array.isArray(obj)) {
          jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v)
            } else {
              buildParams(
                prefix +
                  '[' +
                  (typeof v === 'object' && v != null ? i : '') +
                  ']',
                v,
                traditional,
                add
              )
            }
          })
        } else if (!traditional && jQuery.type(obj) === 'object') {
          for (name in obj) {
            buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
          }
        } else {
          add(prefix, obj)
        }
      }
      jQuery.param = function(a, traditional) {
        var prefix,
          s = [],
          add = function(key, valueOrFunction) {
            var value = jQuery.isFunction(valueOrFunction)
              ? valueOrFunction()
              : valueOrFunction
            s[s.length] =
              encodeURIComponent(key) +
              '=' +
              encodeURIComponent(value == null ? '' : value)
          }
        if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
          jQuery.each(a, function() {
            add(this.name, this.value)
          })
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add)
          }
        }
        return s.join('&')
      }
      jQuery.fn.extend({
        serialize: function() {
          return jQuery.param(this.serializeArray())
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery.prop(this, 'elements')
            return elements ? jQuery.makeArray(elements) : this
          })
            .filter(function() {
              var type = this.type
              return (
                this.name &&
                !jQuery(this).is(':disabled') &&
                rsubmittable.test(this.nodeName) &&
                !rsubmitterTypes.test(type) &&
                (this.checked || !rcheckableType.test(type))
              )
            })
            .map(function(i, elem) {
              var val = jQuery(this).val()
              if (val == null) {
                return null
              }
              if (Array.isArray(val)) {
                return jQuery.map(val, function(val) {
                  return {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                  }
                })
              }
              return {
                name: elem.name,
                value: val.replace(rCRLF, '\r\n')
              }
            })
            .get()
        }
      })
      var r20 = /%20/g,
        rhash = /#.*$/,
        rantiCache = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,
        prefilters = {},
        transports = {},
        allTypes = '*/'.concat('*'),
        originAnchor = document.createElement('a')
      originAnchor.href = location.href
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== 'string') {
            func = dataTypeExpression
            dataTypeExpression = '*'
          }
          var dataType,
            i = 0,
            dataTypes =
              dataTypeExpression.toLowerCase().match(rnothtmlwhite) || []
          if (jQuery.isFunction(func)) {
            while ((dataType = dataTypes[i++])) {
              if (dataType[0] === '+') {
                dataType = dataType.slice(1) || '*'
                ;(structure[dataType] = structure[dataType] || []).unshift(func)
              } else {
                ;(structure[dataType] = structure[dataType] || []).push(func)
              }
            }
          }
        }
      }
      function inspectPrefiltersOrTransports(
        structure,
        options,
        originalOptions,
        jqXHR
      ) {
        var inspected = {},
          seekingTransport = structure === transports
        function inspect(dataType) {
          var selected
          inspected[dataType] = true
          jQuery.each(structure[dataType] || [], function(
            _,
            prefilterOrFactory
          ) {
            var dataTypeOrTransport = prefilterOrFactory(
              options,
              originalOptions,
              jqXHR
            )
            if (
              typeof dataTypeOrTransport === 'string' &&
              !seekingTransport &&
              !inspected[dataTypeOrTransport]
            ) {
              options.dataTypes.unshift(dataTypeOrTransport)
              inspect(dataTypeOrTransport)
              return false
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport)
            }
          })
          return selected
        }
        return (
          inspect(options.dataTypes[0]) || (!inspected['*'] && inspect('*'))
        )
      }
      function ajaxExtend(target, src) {
        var key,
          deep,
          flatOptions = jQuery.ajaxSettings.flatOptions || {}
        for (key in src) {
          if (src[key] !== undefined) {
            ;(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep)
        }
        return target
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct,
          type,
          finalDataType,
          firstDataType,
          contents = s.contents,
          dataTypes = s.dataTypes
        while (dataTypes[0] === '*') {
          dataTypes.shift()
          if (ct === undefined) {
            ct = s.mimeType || jqXHR.getResponseHeader('Content-Type')
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type)
              break
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0]
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
              finalDataType = type
              break
            }
            if (!firstDataType) {
              firstDataType = type
            }
          }
          finalDataType = finalDataType || firstDataType
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType)
          }
          return responses[finalDataType]
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2,
          current,
          conv,
          tmp,
          prev,
          converters = {},
          dataTypes = s.dataTypes.slice()
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv]
          }
        }
        current = dataTypes.shift()
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType)
          }
          prev = current
          current = dataTypes.shift()
          if (current) {
            if (current === '*') {
              current = prev
            } else if (prev !== '*' && prev !== current) {
              conv =
                converters[prev + ' ' + current] || converters['* ' + current]
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(' ')
                  if (tmp[1] === current) {
                    conv =
                      converters[prev + ' ' + tmp[0]] ||
                      converters['* ' + tmp[0]]
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2]
                      } else if (converters[conv2] !== true) {
                        current = tmp[0]
                        dataTypes.unshift(tmp[1])
                      }
                      break
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s.throws) {
                  response = conv(response)
                } else {
                  try {
                    response = conv(response)
                  } catch (e) {
                    return {
                      state: 'parsererror',
                      error: conv
                        ? e
                        : 'No conversion from ' + prev + ' to ' + current
                    }
                  }
                }
              }
            }
          }
        }
        return {
          state: 'success',
          data: response
        }
      }
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: 'GET',
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          accepts: {
            '*': allTypes,
            text: 'text/plain',
            html: 'text/html',
            xml: 'application/xml, text/xml',
            json: 'application/json, text/javascript'
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: 'responseXML',
            text: 'responseText',
            json: 'responseJSON'
          },
          converters: {
            '* text': String,
            'text html': true,
            'text json': JSON.parse,
            'text xml': jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function(target, settings) {
          return settings
            ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
            : ajaxExtend(jQuery.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
          if (typeof url === 'object') {
            options = url
            url = undefined
          }
          options = options || {}
          var transport,
            cacheURL,
            responseHeadersString,
            responseHeaders,
            timeoutTimer,
            urlAnchor,
            completed,
            fireGlobals,
            i,
            uncached,
            s = jQuery.ajaxSetup({}, options),
            callbackContext = s.context || s,
            globalEventContext =
              s.context && (callbackContext.nodeType || callbackContext.jquery)
                ? jQuery(callbackContext)
                : jQuery.event,
            deferred = jQuery.Deferred(),
            completeDeferred = jQuery.Callbacks('once memory'),
            statusCode = s.statusCode || {},
            requestHeaders = {},
            requestHeadersNames = {},
            strAbort = 'canceled',
            jqXHR = {
              readyState: 0,
              getResponseHeader: function(key) {
                var match
                if (completed) {
                  if (!responseHeaders) {
                    responseHeaders = {}
                    while ((match = rheaders.exec(responseHeadersString))) {
                      responseHeaders[match[1].toLowerCase()] = match[2]
                    }
                  }
                  match = responseHeaders[key.toLowerCase()]
                }
                return match == null ? null : match
              },
              getAllResponseHeaders: function() {
                return completed ? responseHeadersString : null
              },
              setRequestHeader: function(name, value) {
                if (completed == null) {
                  name = requestHeadersNames[name.toLowerCase()] =
                    requestHeadersNames[name.toLowerCase()] || name
                  requestHeaders[name] = value
                }
                return this
              },
              overrideMimeType: function(type) {
                if (completed == null) {
                  s.mimeType = type
                }
                return this
              },
              statusCode: function(map) {
                var code
                if (map) {
                  if (completed) {
                    jqXHR.always(map[jqXHR.status])
                  } else {
                    for (code in map) {
                      statusCode[code] = [statusCode[code], map[code]]
                    }
                  }
                }
                return this
              },
              abort: function(statusText) {
                var finalText = statusText || strAbort
                if (transport) {
                  transport.abort(finalText)
                }
                done(0, finalText)
                return this
              }
            }
          deferred.promise(jqXHR)
          s.url = ((url || s.url || location.href) + '').replace(
            rprotocol,
            location.protocol + '//'
          )
          s.type = options.method || options.type || s.method || s.type
          s.dataTypes = (s.dataType || '*')
            .toLowerCase()
            .match(rnothtmlwhite) || ['']
          if (s.crossDomain == null) {
            urlAnchor = document.createElement('a')
            try {
              urlAnchor.href = s.url
              urlAnchor.href = urlAnchor.href
              s.crossDomain =
                originAnchor.protocol + '//' + originAnchor.host !==
                urlAnchor.protocol + '//' + urlAnchor.host
            } catch (e) {
              s.crossDomain = true
            }
          }
          if (s.data && s.processData && typeof s.data !== 'string') {
            s.data = jQuery.param(s.data, s.traditional)
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR)
          if (completed) {
            return jqXHR
          }
          fireGlobals = jQuery.event && s.global
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger('ajaxStart')
          }
          s.type = s.type.toUpperCase()
          s.hasContent = !rnoContent.test(s.type)
          cacheURL = s.url.replace(rhash, '')
          if (!s.hasContent) {
            uncached = s.url.slice(cacheURL.length)
            if (s.data) {
              cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data
              delete s.data
            }
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, '$1')
              uncached =
                (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached
            }
            s.url = cacheURL + uncached
          } else if (
            s.data &&
            s.processData &&
            (s.contentType || '').indexOf(
              'application/x-www-form-urlencoded'
            ) === 0
          ) {
            s.data = s.data.replace(r20, '+')
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader(
                'If-Modified-Since',
                jQuery.lastModified[cacheURL]
              )
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL])
            }
          }
          if (
            (s.data && s.hasContent && s.contentType !== false) ||
            options.contentType
          ) {
            jqXHR.setRequestHeader('Content-Type', s.contentType)
          }
          jqXHR.setRequestHeader(
            'Accept',
            s.dataTypes[0] && s.accepts[s.dataTypes[0]]
              ? s.accepts[s.dataTypes[0]] +
                (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '')
              : s.accepts['*']
          )
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i])
          }
          if (
            s.beforeSend &&
            (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
              completed)
          ) {
            return jqXHR.abort()
          }
          strAbort = 'abort'
          completeDeferred.add(s.complete)
          jqXHR.done(s.success)
          jqXHR.fail(s.error)
          transport = inspectPrefiltersOrTransports(
            transports,
            s,
            options,
            jqXHR
          )
          if (!transport) {
            done(-1, 'No Transport')
          } else {
            jqXHR.readyState = 1
            if (fireGlobals) {
              globalEventContext.trigger('ajaxSend', [jqXHR, s])
            }
            if (completed) {
              return jqXHR
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = window.setTimeout(function() {
                jqXHR.abort('timeout')
              }, s.timeout)
            }
            try {
              completed = false
              transport.send(requestHeaders, done)
            } catch (e) {
              if (completed) {
                throw e
              }
              done(-1, e)
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess,
              success,
              error,
              response,
              modified,
              statusText = nativeStatusText
            if (completed) {
              return
            }
            completed = true
            if (timeoutTimer) {
              window.clearTimeout(timeoutTimer)
            }
            transport = undefined
            responseHeadersString = headers || ''
            jqXHR.readyState = status > 0 ? 4 : 0
            isSuccess = (status >= 200 && status < 300) || status === 304
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses)
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess)
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader('Last-Modified')
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified
                }
                modified = jqXHR.getResponseHeader('etag')
                if (modified) {
                  jQuery.etag[cacheURL] = modified
                }
              }
              if (status === 204 || s.type === 'HEAD') {
                statusText = 'nocontent'
              } else if (status === 304) {
                statusText = 'notmodified'
              } else {
                statusText = response.state
                success = response.data
                error = response.error
                isSuccess = !error
              }
            } else {
              error = statusText
              if (status || !statusText) {
                statusText = 'error'
                if (status < 0) {
                  status = 0
                }
              }
            }
            jqXHR.status = status
            jqXHR.statusText = (nativeStatusText || statusText) + ''
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [
                success,
                statusText,
                jqXHR
              ])
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error])
            }
            jqXHR.statusCode(statusCode)
            statusCode = undefined
            if (fireGlobals) {
              globalEventContext.trigger(
                isSuccess ? 'ajaxSuccess' : 'ajaxError',
                [jqXHR, s, isSuccess ? success : error]
              )
            }
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText])
            if (fireGlobals) {
              globalEventContext.trigger('ajaxComplete', [jqXHR, s])
              if (!--jQuery.active) {
                jQuery.event.trigger('ajaxStop')
              }
            }
          }
          return jqXHR
        },
        getJSON: function(url, data, callback) {
          return jQuery.get(url, data, callback, 'json')
        },
        getScript: function(url, callback) {
          return jQuery.get(url, undefined, callback, 'script')
        }
      })
      jQuery.each(['get', 'post'], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {
          if (jQuery.isFunction(data)) {
            type = type || callback
            callback = data
            data = undefined
          }
          return jQuery.ajax(
            jQuery.extend(
              {
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
              },
              jQuery.isPlainObject(url) && url
            )
          )
        }
      })
      jQuery._evalUrl = function(url) {
        return jQuery.ajax({
          url: url,
          type: 'GET',
          dataType: 'script',
          cache: true,
          async: false,
          global: false,
          throws: true
        })
      }
      jQuery.fn.extend({
        wrapAll: function(html) {
          var wrap
          if (this[0]) {
            if (jQuery.isFunction(html)) {
              html = html.call(this[0])
            }
            wrap = jQuery(html, this[0].ownerDocument)
              .eq(0)
              .clone(true)
            if (this[0].parentNode) {
              wrap.insertBefore(this[0])
            }
            wrap
              .map(function() {
                var elem = this
                while (elem.firstElementChild) {
                  elem = elem.firstElementChild
                }
                return elem
              })
              .append(this)
          }
          return this
        },
        wrapInner: function(html) {
          if (jQuery.isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapInner(html.call(this, i))
            })
          }
          return this.each(function() {
            var self = jQuery(this),
              contents = self.contents()
            if (contents.length) {
              contents.wrapAll(html)
            } else {
              self.append(html)
            }
          })
        },
        wrap: function(html) {
          var isFunction = jQuery.isFunction(html)
          return this.each(function(i) {
            jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
          })
        },
        unwrap: function(selector) {
          this.parent(selector)
            .not('body')
            .each(function() {
              jQuery(this).replaceWith(this.childNodes)
            })
          return this
        }
      })
      jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem)
      }
      jQuery.expr.pseudos.visible = function(elem) {
        return !!(
          elem.offsetWidth ||
          elem.offsetHeight ||
          elem.getClientRects().length
        )
      }
      jQuery.ajaxSettings.xhr = function() {
        try {
          return new window.XMLHttpRequest()
        } catch (e) {}
      }
      var xhrSuccessStatus = {
          0: 200,
          1223: 204
        },
        xhrSupported = jQuery.ajaxSettings.xhr()
      support.cors = !!xhrSupported && 'withCredentials' in xhrSupported
      support.ajax = xhrSupported = !!xhrSupported
      jQuery.ajaxTransport(function(options) {
        var callback, errorCallback
        if (support.cors || (xhrSupported && !options.crossDomain)) {
          return {
            send: function(headers, complete) {
              var i,
                xhr = options.xhr()
              xhr.open(
                options.type,
                options.url,
                options.async,
                options.username,
                options.password
              )
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i]
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType)
              }
              if (!options.crossDomain && !headers['X-Requested-With']) {
                headers['X-Requested-With'] = 'XMLHttpRequest'
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i])
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null
                    if (type === 'abort') {
                      xhr.abort()
                    } else if (type === 'error') {
                      if (typeof xhr.status !== 'number') {
                        complete(0, 'error')
                      } else {
                        complete(xhr.status, xhr.statusText)
                      }
                    } else {
                      complete(
                        xhrSuccessStatus[xhr.status] || xhr.status,
                        xhr.statusText,
                        (xhr.responseType || 'text') !== 'text' ||
                        typeof xhr.responseText !== 'string'
                          ? {
                              binary: xhr.response
                            }
                          : {
                              text: xhr.responseText
                            },
                        xhr.getAllResponseHeaders()
                      )
                    }
                  }
                }
              }
              xhr.onload = callback()
              errorCallback = xhr.onerror = callback('error')
              if (xhr.onabort !== undefined) {
                xhr.onabort = errorCallback
              } else {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    window.setTimeout(function() {
                      if (callback) {
                        errorCallback()
                      }
                    })
                  }
                }
              }
              callback = callback('abort')
              try {
                xhr.send((options.hasContent && options.data) || null)
              } catch (e) {
                if (callback) {
                  throw e
                }
              }
            },
            abort: function() {
              if (callback) {
                callback()
              }
            }
          }
        }
      })
      jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
          s.contents.script = false
        }
      })
      jQuery.ajaxSetup({
        accepts: {
          script:
            'text/javascript, application/javascript, ' +
            'application/ecmascript, application/x-ecmascript'
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          'text script': function(text) {
            jQuery.globalEval(text)
            return text
          }
        }
      })
      jQuery.ajaxPrefilter('script', function(s) {
        if (s.cache === undefined) {
          s.cache = false
        }
        if (s.crossDomain) {
          s.type = 'GET'
        }
      })
      jQuery.ajaxTransport('script', function(s) {
        if (s.crossDomain) {
          var script, callback
          return {
            send: function(_, complete) {
              script = jQuery('<script>')
                .prop({
                  charset: s.scriptCharset,
                  src: s.url
                })
                .on(
                  'load error',
                  (callback = function(evt) {
                    script.remove()
                    callback = null
                    if (evt) {
                      complete(evt.type === 'error' ? 404 : 200, evt.type)
                    }
                  })
                )
              document.head.appendChild(script[0])
            },
            abort: function() {
              if (callback) {
                callback()
              }
            }
          }
        }
      })
      var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/
      jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++
          this[callback] = true
          return callback
        }
      })
      jQuery.ajaxPrefilter('json jsonp', function(s, originalSettings, jqXHR) {
        var callbackName,
          overwritten,
          responseContainer,
          jsonProp =
            s.jsonp !== false &&
            (rjsonp.test(s.url)
              ? 'url'
              : typeof s.data === 'string' &&
                (s.contentType || '').indexOf(
                  'application/x-www-form-urlencoded'
                ) === 0 &&
                rjsonp.test(s.data) &&
                'data')
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
          callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback)
            ? s.jsonpCallback()
            : s.jsonpCallback
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName)
          } else if (s.jsonp !== false) {
            s.url +=
              (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName
          }
          s.converters['script json'] = function() {
            if (!responseContainer) {
              jQuery.error(callbackName + ' was not called')
            }
            return responseContainer[0]
          }
          s.dataTypes[0] = 'json'
          overwritten = window[callbackName]
          window[callbackName] = function() {
            responseContainer = arguments
          }
          jqXHR.always(function() {
            if (overwritten === undefined) {
              jQuery(window).removeProp(callbackName)
            } else {
              window[callbackName] = overwritten
            }
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback
              oldCallbacks.push(callbackName)
            }
            if (responseContainer && jQuery.isFunction(overwritten)) {
              overwritten(responseContainer[0])
            }
            responseContainer = overwritten = undefined
          })
          return 'script'
        }
      })
      support.createHTMLDocument = (function() {
        var body = document.implementation.createHTMLDocument('').body
        body.innerHTML = '<form></form><form></form>'
        return body.childNodes.length === 2
      })()
      jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== 'string') {
          return []
        }
        if (typeof context === 'boolean') {
          keepScripts = context
          context = false
        }
        var base, parsed, scripts
        if (!context) {
          if (support.createHTMLDocument) {
            context = document.implementation.createHTMLDocument('')
            base = context.createElement('base')
            base.href = document.location.href
            context.head.appendChild(base)
          } else {
            context = document
          }
        }
        parsed = rsingleTag.exec(data)
        scripts = !keepScripts && []
        if (parsed) {
          return [context.createElement(parsed[1])]
        }
        parsed = buildFragment([data], context, scripts)
        if (scripts && scripts.length) {
          jQuery(scripts).remove()
        }
        return jQuery.merge([], parsed.childNodes)
      }
      jQuery.fn.load = function(url, params, callback) {
        var selector,
          type,
          response,
          self = this,
          off = url.indexOf(' ')
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off))
          url = url.slice(0, off)
        }
        if (jQuery.isFunction(params)) {
          callback = params
          params = undefined
        } else if (params && typeof params === 'object') {
          type = 'POST'
        }
        if (self.length > 0) {
          jQuery
            .ajax({
              url: url,
              type: type || 'GET',
              dataType: 'html',
              data: params
            })
            .done(function(responseText) {
              response = arguments
              self.html(
                selector
                  ? jQuery('<div>')
                      .append(jQuery.parseHTML(responseText))
                      .find(selector)
                  : responseText
              )
            })
            .always(
              callback &&
                function(jqXHR, status) {
                  self.each(function() {
                    callback.apply(
                      this,
                      response || [jqXHR.responseText, status, jqXHR]
                    )
                  })
                }
            )
        }
        return this
      }
      jQuery.each(
        [
          'ajaxStart',
          'ajaxStop',
          'ajaxComplete',
          'ajaxError',
          'ajaxSuccess',
          'ajaxSend'
        ],
        function(i, type) {
          jQuery.fn[type] = function(fn) {
            return this.on(type, fn)
          }
        }
      )
      jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem
        }).length
      }
      jQuery.offset = {
        setOffset: function(elem, options, i) {
          var curPosition,
            curLeft,
            curCSSTop,
            curTop,
            curOffset,
            curCSSLeft,
            calculatePosition,
            position = jQuery.css(elem, 'position'),
            curElem = jQuery(elem),
            props = {}
          if (position === 'static') {
            elem.style.position = 'relative'
          }
          curOffset = curElem.offset()
          curCSSTop = jQuery.css(elem, 'top')
          curCSSLeft = jQuery.css(elem, 'left')
          calculatePosition =
            (position === 'absolute' || position === 'fixed') &&
            (curCSSTop + curCSSLeft).indexOf('auto') > -1
          if (calculatePosition) {
            curPosition = curElem.position()
            curTop = curPosition.top
            curLeft = curPosition.left
          } else {
            curTop = parseFloat(curCSSTop) || 0
            curLeft = parseFloat(curCSSLeft) || 0
          }
          if (jQuery.isFunction(options)) {
            options = options.call(elem, i, jQuery.extend({}, curOffset))
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft
          }
          if ('using' in options) {
            options.using.call(elem, props)
          } else {
            curElem.css(props)
          }
        }
      }
      jQuery.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === undefined
              ? this
              : this.each(function(i) {
                  jQuery.offset.setOffset(this, options, i)
                })
          }
          var doc,
            docElem,
            rect,
            win,
            elem = this[0]
          if (!elem) {
            return
          }
          if (!elem.getClientRects().length) {
            return {
              top: 0,
              left: 0
            }
          }
          rect = elem.getBoundingClientRect()
          doc = elem.ownerDocument
          docElem = doc.documentElement
          win = doc.defaultView
          return {
            top: rect.top + win.pageYOffset - docElem.clientTop,
            left: rect.left + win.pageXOffset - docElem.clientLeft
          }
        },
        position: function() {
          if (!this[0]) {
            return
          }
          var offsetParent,
            offset,
            elem = this[0],
            parentOffset = {
              top: 0,
              left: 0
            }
          if (jQuery.css(elem, 'position') === 'fixed') {
            offset = elem.getBoundingClientRect()
          } else {
            offsetParent = this.offsetParent()
            offset = this.offset()
            if (!nodeName(offsetParent[0], 'html')) {
              parentOffset = offsetParent.offset()
            }
            parentOffset = {
              top:
                parentOffset.top +
                jQuery.css(offsetParent[0], 'borderTopWidth', true),
              left:
                parentOffset.left +
                jQuery.css(offsetParent[0], 'borderLeftWidth', true)
            }
          }
          return {
            top:
              offset.top -
              parentOffset.top -
              jQuery.css(elem, 'marginTop', true),
            left:
              offset.left -
              parentOffset.left -
              jQuery.css(elem, 'marginLeft', true)
          }
        },
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent
            while (
              offsetParent &&
              jQuery.css(offsetParent, 'position') === 'static'
            ) {
              offsetParent = offsetParent.offsetParent
            }
            return offsetParent || documentElement
          })
        }
      })
      jQuery.each(
        {
          scrollLeft: 'pageXOffset',
          scrollTop: 'pageYOffset'
        },
        function(method, prop) {
          var top = 'pageYOffset' === prop
          jQuery.fn[method] = function(val) {
            return access(
              this,
              function(elem, method, val) {
                var win
                if (jQuery.isWindow(elem)) {
                  win = elem
                } else if (elem.nodeType === 9) {
                  win = elem.defaultView
                }
                if (val === undefined) {
                  return win ? win[prop] : elem[method]
                }
                if (win) {
                  win.scrollTo(
                    !top ? val : win.pageXOffset,
                    top ? val : win.pageYOffset
                  )
                } else {
                  elem[method] = val
                }
              },
              method,
              val,
              arguments.length
            )
          }
        }
      )
      jQuery.each(['top', 'left'], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(
          elem,
          computed
        ) {
          if (computed) {
            computed = curCSS(elem, prop)
            return rnumnonpx.test(computed)
              ? jQuery(elem).position()[prop] + 'px'
              : computed
          }
        })
      })
      jQuery.each(
        {
          Height: 'height',
          Width: 'width'
        },
        function(name, type) {
          jQuery.each(
            {
              padding: 'inner' + name,
              content: type,
              '': 'outer' + name
            },
            function(defaultExtra, funcName) {
              jQuery.fn[funcName] = function(margin, value) {
                var chainable =
                    arguments.length &&
                    (defaultExtra || typeof margin !== 'boolean'),
                  extra =
                    defaultExtra ||
                    (margin === true || value === true ? 'margin' : 'border')
                return access(
                  this,
                  function(elem, type, value) {
                    var doc
                    if (jQuery.isWindow(elem)) {
                      return funcName.indexOf('outer') === 0
                        ? elem['inner' + name]
                        : elem.document.documentElement['client' + name]
                    }
                    if (elem.nodeType === 9) {
                      doc = elem.documentElement
                      return Math.max(
                        elem.body['scroll' + name],
                        doc['scroll' + name],
                        elem.body['offset' + name],
                        doc['offset' + name],
                        doc['client' + name]
                      )
                    }
                    return value === undefined
                      ? jQuery.css(elem, type, extra)
                      : jQuery.style(elem, type, value, extra)
                  },
                  type,
                  chainable ? margin : undefined,
                  chainable
                )
              }
            }
          )
        }
      )
      jQuery.fn.extend({
        bind: function(types, data, fn) {
          return this.on(types, null, data, fn)
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn)
        },
        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn)
        },
        undelegate: function(selector, types, fn) {
          return arguments.length === 1
            ? this.off(selector, '**')
            : this.off(types, selector || '**', fn)
        }
      })
      jQuery.holdReady = function(hold) {
        if (hold) {
          jQuery.readyWait++
        } else {
          jQuery.ready(true)
        }
      }
      jQuery.isArray = Array.isArray
      jQuery.parseJSON = JSON.parse
      jQuery.nodeName = nodeName
      if (true) {
        !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
        (__WEBPACK_AMD_DEFINE_RESULT__ = function() {
          return jQuery
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
          (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
      }
      var _jQuery = window.jQuery,
        _$ = window.$
      jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
          window.$ = _$
        }
        if (deep && window.jQuery === jQuery) {
          window.jQuery = _jQuery
        }
        return jQuery
      }
      if (!noGlobal) {
        window.jQuery = window.$ = jQuery
      }
      return jQuery
    })
  },
  function(module, exports) {
    var g
    g = (function() {
      return this
    })()
    try {
      g = g || Function('return this')() || (1, eval)('this')
    } catch (e) {
      if (typeof window === 'object') g = window
    }
    module.exports = g
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    var processNextTick = __webpack_require__(17)
    var objectKeys =
      Object.keys ||
      function(obj) {
        var keys = []
        for (var key in obj) {
          keys.push(key)
        }
        return keys
      }
    module.exports = Duplex
    var util = __webpack_require__(2)
    util.inherits = __webpack_require__(0)
    var Readable = __webpack_require__(32)
    var Writable = __webpack_require__(23)
    util.inherits(Duplex, Readable)
    var keys = objectKeys(Writable.prototype)
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v]
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method]
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options)
      Readable.call(this, options)
      Writable.call(this, options)
      if (options && options.readable === false) this.readable = false
      if (options && options.writable === false) this.writable = false
      this.allowHalfOpen = true
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false
      this.once('end', onend)
    }
    function onend() {
      if (this.allowHalfOpen || this._writableState.ended) return
      processNextTick(onEndNT, this)
    }
    function onEndNT(self) {
      self.end()
    }
    Object.defineProperty(Duplex.prototype, 'destroyed', {
      get: function() {
        if (
          this._readableState === undefined ||
          this._writableState === undefined
        ) {
          return false
        }
        return this._readableState.destroyed && this._writableState.destroyed
      },
      set: function(value) {
        if (
          this._readableState === undefined ||
          this._writableState === undefined
        ) {
          return
        }
        this._readableState.destroyed = value
        this._writableState.destroyed = value
      }
    })
    Duplex.prototype._destroy = function(err, cb) {
      this.push(null)
      this.end()
      processNextTick(cb, err)
    }
    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i)
      }
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    ;(function(global) {
      var base64 = __webpack_require__(58)
      var ieee754 = __webpack_require__(59)
      var isArray = __webpack_require__(27)
      exports.Buffer = Buffer
      exports.SlowBuffer = SlowBuffer
      exports.INSPECT_MAX_BYTES = 50
      Buffer.TYPED_ARRAY_SUPPORT =
        global.TYPED_ARRAY_SUPPORT !== undefined
          ? global.TYPED_ARRAY_SUPPORT
          : typedArraySupport()
      exports.kMaxLength = kMaxLength()
      function typedArraySupport() {
        try {
          var arr = new Uint8Array(1)
          arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
              return 42
            }
          }
          return (
            arr.foo() === 42 &&
            typeof arr.subarray === 'function' &&
            arr.subarray(1, 1).byteLength === 0
          )
        } catch (e) {
          return false
        }
      }
      function kMaxLength() {
        return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
      }
      function createBuffer(that, length) {
        if (kMaxLength() < length) {
          throw new RangeError('Invalid typed array length')
        }
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = new Uint8Array(length)
          that.__proto__ = Buffer.prototype
        } else {
          if (that === null) {
            that = new Buffer(length)
          }
          that.length = length
        }
        return that
      }
      function Buffer(arg, encodingOrOffset, length) {
        if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
          return new Buffer(arg, encodingOrOffset, length)
        }
        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new Error(
              'If encoding is specified then the first argument must be a string'
            )
          }
          return allocUnsafe(this, arg)
        }
        return from(this, arg, encodingOrOffset, length)
      }
      Buffer.poolSize = 8192
      Buffer._augment = function(arr) {
        arr.__proto__ = Buffer.prototype
        return arr
      }
      function from(that, value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('"value" argument must not be a number')
        }
        if (
          typeof ArrayBuffer !== 'undefined' &&
          value instanceof ArrayBuffer
        ) {
          return fromArrayBuffer(that, value, encodingOrOffset, length)
        }
        if (typeof value === 'string') {
          return fromString(that, value, encodingOrOffset)
        }
        return fromObject(that, value)
      }
      Buffer.from = function(value, encodingOrOffset, length) {
        return from(null, value, encodingOrOffset, length)
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        Buffer.prototype.__proto__ = Uint8Array.prototype
        Buffer.__proto__ = Uint8Array
        if (
          typeof Symbol !== 'undefined' &&
          Symbol.species &&
          Buffer[Symbol.species] === Buffer
        ) {
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true
          })
        }
      }
      function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be a number')
        } else if (size < 0) {
          throw new RangeError('"size" argument must not be negative')
        }
      }
      function alloc(that, size, fill, encoding) {
        assertSize(size)
        if (size <= 0) {
          return createBuffer(that, size)
        }
        if (fill !== undefined) {
          return typeof encoding === 'string'
            ? createBuffer(that, size).fill(fill, encoding)
            : createBuffer(that, size).fill(fill)
        }
        return createBuffer(that, size)
      }
      Buffer.alloc = function(size, fill, encoding) {
        return alloc(null, size, fill, encoding)
      }
      function allocUnsafe(that, size) {
        assertSize(size)
        that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
        if (!Buffer.TYPED_ARRAY_SUPPORT) {
          for (var i = 0; i < size; ++i) {
            that[i] = 0
          }
        }
        return that
      }
      Buffer.allocUnsafe = function(size) {
        return allocUnsafe(null, size)
      }
      Buffer.allocUnsafeSlow = function(size) {
        return allocUnsafe(null, size)
      }
      function fromString(that, string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8'
        }
        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding')
        }
        var length = byteLength(string, encoding) | 0
        that = createBuffer(that, length)
        var actual = that.write(string, encoding)
        if (actual !== length) {
          that = that.slice(0, actual)
        }
        return that
      }
      function fromArrayLike(that, array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0
        that = createBuffer(that, length)
        for (var i = 0; i < length; i += 1) {
          that[i] = array[i] & 255
        }
        return that
      }
      function fromArrayBuffer(that, array, byteOffset, length) {
        array.byteLength
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError("'offset' is out of bounds")
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError("'length' is out of bounds")
        }
        if (byteOffset === undefined && length === undefined) {
          array = new Uint8Array(array)
        } else if (length === undefined) {
          array = new Uint8Array(array, byteOffset)
        } else {
          array = new Uint8Array(array, byteOffset, length)
        }
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          that = array
          that.__proto__ = Buffer.prototype
        } else {
          that = fromArrayLike(that, array)
        }
        return that
      }
      function fromObject(that, obj) {
        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0
          that = createBuffer(that, len)
          if (that.length === 0) {
            return that
          }
          obj.copy(that, 0, 0, len)
          return that
        }
        if (obj) {
          if (
            (typeof ArrayBuffer !== 'undefined' &&
              obj.buffer instanceof ArrayBuffer) ||
            'length' in obj
          ) {
            if (typeof obj.length !== 'number' || isnan(obj.length)) {
              return createBuffer(that, 0)
            }
            return fromArrayLike(that, obj)
          }
          if (obj.type === 'Buffer' && isArray(obj.data)) {
            return fromArrayLike(that, obj.data)
          }
        }
        throw new TypeError(
          'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
        )
      }
      function checked(length) {
        if (length >= kMaxLength()) {
          throw new RangeError(
            'Attempt to allocate Buffer larger than maximum ' +
              'size: 0x' +
              kMaxLength().toString(16) +
              ' bytes'
          )
        }
        return length | 0
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0
        }
        return Buffer.alloc(+length)
      }
      Buffer.isBuffer = function isBuffer(b) {
        return !!(b != null && b._isBuffer)
      }
      Buffer.compare = function compare(a, b) {
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
          throw new TypeError('Arguments must be Buffers')
        }
        if (a === b) return 0
        var x = a.length
        var y = b.length
        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i]
            y = b[i]
            break
          }
        }
        if (x < y) return -1
        if (y < x) return 1
        return 0
      }
      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return true

          default:
            return false
        }
      }
      Buffer.concat = function concat(list, length) {
        if (!isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        if (list.length === 0) {
          return Buffer.alloc(0)
        }
        var i
        if (length === undefined) {
          length = 0
          for (i = 0; i < list.length; ++i) {
            length += list[i].length
          }
        }
        var buffer = Buffer.allocUnsafe(length)
        var pos = 0
        for (i = 0; i < list.length; ++i) {
          var buf = list[i]
          if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers')
          }
          buf.copy(buffer, pos)
          pos += buf.length
        }
        return buffer
      }
      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) {
          return string.length
        }
        if (
          typeof ArrayBuffer !== 'undefined' &&
          typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
        ) {
          return string.byteLength
        }
        if (typeof string !== 'string') {
          string = '' + string
        }
        var len = string.length
        if (len === 0) return 0
        var loweredCase = false
        for (;;) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
              return len

            case 'utf8':
            case 'utf-8':
            case undefined:
              return utf8ToBytes(string).length

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return len * 2

            case 'hex':
              return len >>> 1

            case 'base64':
              return base64ToBytes(string).length

            default:
              if (loweredCase) return utf8ToBytes(string).length
              encoding = ('' + encoding).toLowerCase()
              loweredCase = true
          }
        }
      }
      Buffer.byteLength = byteLength
      function slowToString(encoding, start, end) {
        var loweredCase = false
        if (start === undefined || start < 0) {
          start = 0
        }
        if (start > this.length) {
          return ''
        }
        if (end === undefined || end > this.length) {
          end = this.length
        }
        if (end <= 0) {
          return ''
        }
        end >>>= 0
        start >>>= 0
        if (end <= start) {
          return ''
        }
        if (!encoding) encoding = 'utf8'
        while (true) {
          switch (encoding) {
            case 'hex':
              return hexSlice(this, start, end)

            case 'utf8':
            case 'utf-8':
              return utf8Slice(this, start, end)

            case 'ascii':
              return asciiSlice(this, start, end)

            case 'latin1':
            case 'binary':
              return latin1Slice(this, start, end)

            case 'base64':
              return base64Slice(this, start, end)

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return utf16leSlice(this, start, end)

            default:
              if (loweredCase)
                throw new TypeError('Unknown encoding: ' + encoding)
              encoding = (encoding + '').toLowerCase()
              loweredCase = true
          }
        }
      }
      Buffer.prototype._isBuffer = true
      function swap(b, n, m) {
        var i = b[n]
        b[n] = b[m]
        b[m] = i
      }
      Buffer.prototype.swap16 = function swap16() {
        var len = this.length
        if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits')
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1)
        }
        return this
      }
      Buffer.prototype.swap32 = function swap32() {
        var len = this.length
        if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits')
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3)
          swap(this, i + 1, i + 2)
        }
        return this
      }
      Buffer.prototype.swap64 = function swap64() {
        var len = this.length
        if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits')
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7)
          swap(this, i + 1, i + 6)
          swap(this, i + 2, i + 5)
          swap(this, i + 3, i + 4)
        }
        return this
      }
      Buffer.prototype.toString = function toString() {
        var length = this.length | 0
        if (length === 0) return ''
        if (arguments.length === 0) return utf8Slice(this, 0, length)
        return slowToString.apply(this, arguments)
      }
      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b))
          throw new TypeError('Argument must be a Buffer')
        if (this === b) return true
        return Buffer.compare(this, b) === 0
      }
      Buffer.prototype.inspect = function inspect() {
        var str = ''
        var max = exports.INSPECT_MAX_BYTES
        if (this.length > 0) {
          str = this.toString('hex', 0, max)
            .match(/.{2}/g)
            .join(' ')
          if (this.length > max) str += ' ... '
        }
        return '<Buffer ' + str + '>'
      }
      Buffer.prototype.compare = function compare(
        target,
        start,
        end,
        thisStart,
        thisEnd
      ) {
        if (!Buffer.isBuffer(target)) {
          throw new TypeError('Argument must be a Buffer')
        }
        if (start === undefined) {
          start = 0
        }
        if (end === undefined) {
          end = target ? target.length : 0
        }
        if (thisStart === undefined) {
          thisStart = 0
        }
        if (thisEnd === undefined) {
          thisEnd = this.length
        }
        if (
          start < 0 ||
          end > target.length ||
          thisStart < 0 ||
          thisEnd > this.length
        ) {
          throw new RangeError('out of range index')
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0
        }
        if (thisStart >= thisEnd) {
          return -1
        }
        if (start >= end) {
          return 1
        }
        start >>>= 0
        end >>>= 0
        thisStart >>>= 0
        thisEnd >>>= 0
        if (this === target) return 0
        var x = thisEnd - thisStart
        var y = end - start
        var len = Math.min(x, y)
        var thisCopy = this.slice(thisStart, thisEnd)
        var targetCopy = target.slice(start, end)
        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i]
            y = targetCopy[i]
            break
          }
        }
        if (x < y) return -1
        if (y < x) return 1
        return 0
      }
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0) return -1
        if (typeof byteOffset === 'string') {
          encoding = byteOffset
          byteOffset = 0
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648
        }
        byteOffset = +byteOffset
        if (isNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1
        }
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset
        if (byteOffset >= buffer.length) {
          if (dir) return -1
          else byteOffset = buffer.length - 1
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0
          else return -1
        }
        if (typeof val === 'string') {
          val = Buffer.from(val, encoding)
        }
        if (Buffer.isBuffer(val)) {
          if (val.length === 0) {
            return -1
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
        } else if (typeof val === 'number') {
          val = val & 255
          if (
            Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function'
          ) {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
            } else {
              return Uint8Array.prototype.lastIndexOf.call(
                buffer,
                val,
                byteOffset
              )
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
        }
        throw new TypeError('val must be string, number or Buffer')
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1
        var arrLength = arr.length
        var valLength = val.length
        if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase()
          if (
            encoding === 'ucs2' ||
            encoding === 'ucs-2' ||
            encoding === 'utf16le' ||
            encoding === 'utf-16le'
          ) {
            if (arr.length < 2 || val.length < 2) {
              return -1
            }
            indexSize = 2
            arrLength /= 2
            valLength /= 2
            byteOffset /= 2
          }
        }
        function read(buf, i) {
          if (indexSize === 1) {
            return buf[i]
          } else {
            return buf.readUInt16BE(i * indexSize)
          }
        }
        var i
        if (dir) {
          var foundIndex = -1
          for (i = byteOffset; i < arrLength; i++) {
            if (
              read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)
            ) {
              if (foundIndex === -1) foundIndex = i
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize
            } else {
              if (foundIndex !== -1) i -= i - foundIndex
              foundIndex = -1
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength
          for (i = byteOffset; i >= 0; i--) {
            var found = true
            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false
                break
              }
            }
            if (found) return i
          }
        }
        return -1
      }
      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1
      }
      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
      }
      Buffer.prototype.lastIndexOf = function lastIndexOf(
        val,
        byteOffset,
        encoding
      ) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
      }
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0
        var remaining = buf.length - offset
        if (!length) {
          length = remaining
        } else {
          length = Number(length)
          if (length > remaining) {
            length = remaining
          }
        }
        var strLen = string.length
        if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
        if (length > strLen / 2) {
          length = strLen / 2
        }
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16)
          if (isNaN(parsed)) return i
          buf[offset + i] = parsed
        }
        return i
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(
          utf8ToBytes(string, buf.length - offset),
          buf,
          offset,
          length
        )
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length)
      }
      function latin1Write(buf, string, offset, length) {
        return asciiWrite(buf, string, offset, length)
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length)
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(
          utf16leToBytes(string, buf.length - offset),
          buf,
          offset,
          length
        )
      }
      Buffer.prototype.write = function write(
        string,
        offset,
        length,
        encoding
      ) {
        if (offset === undefined) {
          encoding = 'utf8'
          length = this.length
          offset = 0
        } else if (length === undefined && typeof offset === 'string') {
          encoding = offset
          length = this.length
          offset = 0
        } else if (isFinite(offset)) {
          offset = offset | 0
          if (isFinite(length)) {
            length = length | 0
            if (encoding === undefined) encoding = 'utf8'
          } else {
            encoding = length
            length = undefined
          }
        } else {
          throw new Error(
            'Buffer.write(string, encoding, offset[, length]) is no longer supported'
          )
        }
        var remaining = this.length - offset
        if (length === undefined || length > remaining) length = remaining
        if (
          (string.length > 0 && (length < 0 || offset < 0)) ||
          offset > this.length
        ) {
          throw new RangeError('Attempt to write outside buffer bounds')
        }
        if (!encoding) encoding = 'utf8'
        var loweredCase = false
        for (;;) {
          switch (encoding) {
            case 'hex':
              return hexWrite(this, string, offset, length)

            case 'utf8':
            case 'utf-8':
              return utf8Write(this, string, offset, length)

            case 'ascii':
              return asciiWrite(this, string, offset, length)

            case 'latin1':
            case 'binary':
              return latin1Write(this, string, offset, length)

            case 'base64':
              return base64Write(this, string, offset, length)

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return ucs2Write(this, string, offset, length)

            default:
              if (loweredCase)
                throw new TypeError('Unknown encoding: ' + encoding)
              encoding = ('' + encoding).toLowerCase()
              loweredCase = true
          }
        }
      }
      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0)
        }
      }
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf)
        } else {
          return base64.fromByteArray(buf.slice(start, end))
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end)
        var res = []
        var i = start
        while (i < end) {
          var firstByte = buf[i]
          var codePoint = null
          var bytesPerSequence =
            firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1
          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte
                }
                break

              case 2:
                secondByte = buf[i + 1]
                if ((secondByte & 192) === 128) {
                  tempCodePoint = ((firstByte & 31) << 6) | (secondByte & 63)
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint
                  }
                }
                break

              case 3:
                secondByte = buf[i + 1]
                thirdByte = buf[i + 2]
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint =
                    ((firstByte & 15) << 12) |
                    ((secondByte & 63) << 6) |
                    (thirdByte & 63)
                  if (
                    tempCodePoint > 2047 &&
                    (tempCodePoint < 55296 || tempCodePoint > 57343)
                  ) {
                    codePoint = tempCodePoint
                  }
                }
                break

              case 4:
                secondByte = buf[i + 1]
                thirdByte = buf[i + 2]
                fourthByte = buf[i + 3]
                if (
                  (secondByte & 192) === 128 &&
                  (thirdByte & 192) === 128 &&
                  (fourthByte & 192) === 128
                ) {
                  tempCodePoint =
                    ((firstByte & 15) << 18) |
                    ((secondByte & 63) << 12) |
                    ((thirdByte & 63) << 6) |
                    (fourthByte & 63)
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533
            bytesPerSequence = 1
          } else if (codePoint > 65535) {
            codePoint -= 65536
            res.push(((codePoint >>> 10) & 1023) | 55296)
            codePoint = 56320 | (codePoint & 1023)
          }
          res.push(codePoint)
          i += bytesPerSequence
        }
        return decodeCodePointsArray(res)
      }
      var MAX_ARGUMENTS_LENGTH = 4096
      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints)
        }
        var res = ''
        var i = 0
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
          )
        }
        return res
      }
      function asciiSlice(buf, start, end) {
        var ret = ''
        end = Math.min(buf.length, end)
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127)
        }
        return ret
      }
      function latin1Slice(buf, start, end) {
        var ret = ''
        end = Math.min(buf.length, end)
        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i])
        }
        return ret
      }
      function hexSlice(buf, start, end) {
        var len = buf.length
        if (!start || start < 0) start = 0
        if (!end || end < 0 || end > len) end = len
        var out = ''
        for (var i = start; i < end; ++i) {
          out += toHex(buf[i])
        }
        return out
      }
      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end)
        var res = ''
        for (var i = 0; i < bytes.length; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
        }
        return res
      }
      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length
        start = ~~start
        end = end === undefined ? len : ~~end
        if (start < 0) {
          start += len
          if (start < 0) start = 0
        } else if (start > len) {
          start = len
        }
        if (end < 0) {
          end += len
          if (end < 0) end = 0
        } else if (end > len) {
          end = len
        }
        if (end < start) end = start
        var newBuf
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          newBuf = this.subarray(start, end)
          newBuf.__proto__ = Buffer.prototype
        } else {
          var sliceLen = end - start
          newBuf = new Buffer(sliceLen, undefined)
          for (var i = 0; i < sliceLen; ++i) {
            newBuf[i] = this[i + start]
          }
        }
        return newBuf
      }
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError('offset is not uint')
        if (offset + ext > length)
          throw new RangeError('Trying to access beyond buffer length')
      }
      Buffer.prototype.readUIntLE = function readUIntLE(
        offset,
        byteLength,
        noAssert
      ) {
        offset = offset | 0
        byteLength = byteLength | 0
        if (!noAssert) checkOffset(offset, byteLength, this.length)
        var val = this[offset]
        var mul = 1
        var i = 0
        while (++i < byteLength && (mul *= 256)) {
          val += this[offset + i] * mul
        }
        return val
      }
      Buffer.prototype.readUIntBE = function readUIntBE(
        offset,
        byteLength,
        noAssert
      ) {
        offset = offset | 0
        byteLength = byteLength | 0
        if (!noAssert) {
          checkOffset(offset, byteLength, this.length)
        }
        var val = this[offset + --byteLength]
        var mul = 1
        while (byteLength > 0 && (mul *= 256)) {
          val += this[offset + --byteLength] * mul
        }
        return val
      }
      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length)
        return this[offset]
      }
      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length)
        return this[offset] | (this[offset + 1] << 8)
      }
      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length)
        return (this[offset] << 8) | this[offset + 1]
      }
      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length)
        return (
          (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +
          this[offset + 3] * 16777216
        )
      }
      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length)
        return (
          this[offset] * 16777216 +
          ((this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            this[offset + 3])
        )
      }
      Buffer.prototype.readIntLE = function readIntLE(
        offset,
        byteLength,
        noAssert
      ) {
        offset = offset | 0
        byteLength = byteLength | 0
        if (!noAssert) checkOffset(offset, byteLength, this.length)
        var val = this[offset]
        var mul = 1
        var i = 0
        while (++i < byteLength && (mul *= 256)) {
          val += this[offset + i] * mul
        }
        mul *= 128
        if (val >= mul) val -= Math.pow(2, 8 * byteLength)
        return val
      }
      Buffer.prototype.readIntBE = function readIntBE(
        offset,
        byteLength,
        noAssert
      ) {
        offset = offset | 0
        byteLength = byteLength | 0
        if (!noAssert) checkOffset(offset, byteLength, this.length)
        var i = byteLength
        var mul = 1
        var val = this[offset + --i]
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul
        }
        mul *= 128
        if (val >= mul) val -= Math.pow(2, 8 * byteLength)
        return val
      }
      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 1, this.length)
        if (!(this[offset] & 128)) return this[offset]
        return (255 - this[offset] + 1) * -1
      }
      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length)
        var val = this[offset] | (this[offset + 1] << 8)
        return val & 32768 ? val | 4294901760 : val
      }
      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 2, this.length)
        var val = this[offset + 1] | (this[offset] << 8)
        return val & 32768 ? val | 4294901760 : val
      }
      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length)
        return (
          this[offset] |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16) |
          (this[offset + 3] << 24)
        )
      }
      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length)
        return (
          (this[offset] << 24) |
          (this[offset + 1] << 16) |
          (this[offset + 2] << 8) |
          this[offset + 3]
        )
      }
      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length)
        return ieee754.read(this, offset, true, 23, 4)
      }
      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 4, this.length)
        return ieee754.read(this, offset, false, 23, 4)
      }
      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length)
        return ieee754.read(this, offset, true, 52, 8)
      }
      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        if (!noAssert) checkOffset(offset, 8, this.length)
        return ieee754.read(this, offset, false, 52, 8)
      }
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance')
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds')
        if (offset + ext > buf.length)
          throw new RangeError('Index out of range')
      }
      Buffer.prototype.writeUIntLE = function writeUIntLE(
        value,
        offset,
        byteLength,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        byteLength = byteLength | 0
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1
          checkInt(this, value, offset, byteLength, maxBytes, 0)
        }
        var mul = 1
        var i = 0
        this[offset] = value & 255
        while (++i < byteLength && (mul *= 256)) {
          this[offset + i] = (value / mul) & 255
        }
        return offset + byteLength
      }
      Buffer.prototype.writeUIntBE = function writeUIntBE(
        value,
        offset,
        byteLength,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        byteLength = byteLength | 0
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1
          checkInt(this, value, offset, byteLength, maxBytes, 0)
        }
        var i = byteLength - 1
        var mul = 1
        this[offset + i] = value & 255
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = (value / mul) & 255
        }
        return offset + byteLength
      }
      Buffer.prototype.writeUInt8 = function writeUInt8(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 1, 255, 0)
        if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
        this[offset] = value & 255
        return offset + 1
      }
      function objectWriteUInt16(buf, value, offset, littleEndian) {
        if (value < 0) value = 65535 + value + 1
        for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
          buf[offset + i] =
            (value & (255 << (8 * (littleEndian ? i : 1 - i)))) >>>
            ((littleEndian ? i : 1 - i) * 8)
        }
      }
      Buffer.prototype.writeUInt16LE = function writeUInt16LE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255
          this[offset + 1] = value >>> 8
        } else {
          objectWriteUInt16(this, value, offset, true)
        }
        return offset + 2
      }
      Buffer.prototype.writeUInt16BE = function writeUInt16BE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 2, 65535, 0)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8
          this[offset + 1] = value & 255
        } else {
          objectWriteUInt16(this, value, offset, false)
        }
        return offset + 2
      }
      function objectWriteUInt32(buf, value, offset, littleEndian) {
        if (value < 0) value = 4294967295 + value + 1
        for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
          buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 255
        }
      }
      Buffer.prototype.writeUInt32LE = function writeUInt32LE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset + 3] = value >>> 24
          this[offset + 2] = value >>> 16
          this[offset + 1] = value >>> 8
          this[offset] = value & 255
        } else {
          objectWriteUInt32(this, value, offset, true)
        }
        return offset + 4
      }
      Buffer.prototype.writeUInt32BE = function writeUInt32BE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24
          this[offset + 1] = value >>> 16
          this[offset + 2] = value >>> 8
          this[offset + 3] = value & 255
        } else {
          objectWriteUInt32(this, value, offset, false)
        }
        return offset + 4
      }
      Buffer.prototype.writeIntLE = function writeIntLE(
        value,
        offset,
        byteLength,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1)
          checkInt(this, value, offset, byteLength, limit - 1, -limit)
        }
        var i = 0
        var mul = 1
        var sub = 0
        this[offset] = value & 255
        while (++i < byteLength && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255
        }
        return offset + byteLength
      }
      Buffer.prototype.writeIntBE = function writeIntBE(
        value,
        offset,
        byteLength,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1)
          checkInt(this, value, offset, byteLength, limit - 1, -limit)
        }
        var i = byteLength - 1
        var mul = 1
        var sub = 0
        this[offset + i] = value & 255
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 255
        }
        return offset + byteLength
      }
      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 1, 127, -128)
        if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
        if (value < 0) value = 255 + value + 1
        this[offset] = value & 255
        return offset + 1
      }
      Buffer.prototype.writeInt16LE = function writeInt16LE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255
          this[offset + 1] = value >>> 8
        } else {
          objectWriteUInt16(this, value, offset, true)
        }
        return offset + 2
      }
      Buffer.prototype.writeInt16BE = function writeInt16BE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 8
          this[offset + 1] = value & 255
        } else {
          objectWriteUInt16(this, value, offset, false)
        }
        return offset + 2
      }
      Buffer.prototype.writeInt32LE = function writeInt32LE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648)
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value & 255
          this[offset + 1] = value >>> 8
          this[offset + 2] = value >>> 16
          this[offset + 3] = value >>> 24
        } else {
          objectWriteUInt32(this, value, offset, true)
        }
        return offset + 4
      }
      Buffer.prototype.writeInt32BE = function writeInt32BE(
        value,
        offset,
        noAssert
      ) {
        value = +value
        offset = offset | 0
        if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648)
        if (value < 0) value = 4294967295 + value + 1
        if (Buffer.TYPED_ARRAY_SUPPORT) {
          this[offset] = value >>> 24
          this[offset + 1] = value >>> 16
          this[offset + 2] = value >>> 8
          this[offset + 3] = value & 255
        } else {
          objectWriteUInt32(this, value, offset, false)
        }
        return offset + 4
      }
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError('Index out of range')
        if (offset < 0) throw new RangeError('Index out of range')
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            4,
            3.4028234663852886e38,
            -3.4028234663852886e38
          )
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4)
        return offset + 4
      }
      Buffer.prototype.writeFloatLE = function writeFloatLE(
        value,
        offset,
        noAssert
      ) {
        return writeFloat(this, value, offset, true, noAssert)
      }
      Buffer.prototype.writeFloatBE = function writeFloatBE(
        value,
        offset,
        noAssert
      ) {
        return writeFloat(this, value, offset, false, noAssert)
      }
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        if (!noAssert) {
          checkIEEE754(
            buf,
            value,
            offset,
            8,
            1.7976931348623157e308,
            -1.7976931348623157e308
          )
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8)
        return offset + 8
      }
      Buffer.prototype.writeDoubleLE = function writeDoubleLE(
        value,
        offset,
        noAssert
      ) {
        return writeDouble(this, value, offset, true, noAssert)
      }
      Buffer.prototype.writeDoubleBE = function writeDoubleBE(
        value,
        offset,
        noAssert
      ) {
        return writeDouble(this, value, offset, false, noAssert)
      }
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!start) start = 0
        if (!end && end !== 0) end = this.length
        if (targetStart >= target.length) targetStart = target.length
        if (!targetStart) targetStart = 0
        if (end > 0 && end < start) end = start
        if (end === start) return 0
        if (target.length === 0 || this.length === 0) return 0
        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds')
        }
        if (start < 0 || start >= this.length)
          throw new RangeError('sourceStart out of bounds')
        if (end < 0) throw new RangeError('sourceEnd out of bounds')
        if (end > this.length) end = this.length
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start
        }
        var len = end - start
        var i
        if (this === target && start < targetStart && targetStart < end) {
          for (i = len - 1; i >= 0; --i) {
            target[i + targetStart] = this[i + start]
          }
        } else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) {
          for (i = 0; i < len; ++i) {
            target[i + targetStart] = this[i + start]
          }
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, start + len),
            targetStart
          )
        }
        return len
      }
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start
            start = 0
            end = this.length
          } else if (typeof end === 'string') {
            encoding = end
            end = this.length
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0)
            if (code < 256) {
              val = code
            }
          }
          if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string')
          }
          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding)
          }
        } else if (typeof val === 'number') {
          val = val & 255
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index')
        }
        if (end <= start) {
          return this
        }
        start = start >>> 0
        end = end === undefined ? this.length : end >>> 0
        if (!val) val = 0
        var i
        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val
          }
        } else {
          var bytes = Buffer.isBuffer(val)
            ? val
            : utf8ToBytes(new Buffer(val, encoding).toString())
          var len = bytes.length
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len]
          }
        }
        return this
      }
      var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
      function base64clean(str) {
        str = stringtrim(str).replace(INVALID_BASE64_RE, '')
        if (str.length < 2) return ''
        while (str.length % 4 !== 0) {
          str = str + '='
        }
        return str
      }
      function stringtrim(str) {
        if (str.trim) return str.trim()
        return str.replace(/^\s+|\s+$/g, '')
      }
      function toHex(n) {
        if (n < 16) return '0' + n.toString(16)
        return n.toString(16)
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity
        var codePoint
        var length = string.length
        var leadSurrogate = null
        var bytes = []
        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i)
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189)
                continue
              } else if (i + 1 === length) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189)
                continue
              }
              leadSurrogate = codePoint
              continue
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189)
              leadSurrogate = codePoint
              continue
            }
            codePoint =
              (((leadSurrogate - 55296) << 10) | (codePoint - 56320)) + 65536
          } else if (leadSurrogate) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189)
          }
          leadSurrogate = null
          if (codePoint < 128) {
            if ((units -= 1) < 0) break
            bytes.push(codePoint)
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break
            bytes.push((codePoint >> 6) | 192, (codePoint & 63) | 128)
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break
            bytes.push(
              (codePoint >> 12) | 224,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128
            )
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break
            bytes.push(
              (codePoint >> 18) | 240,
              ((codePoint >> 12) & 63) | 128,
              ((codePoint >> 6) & 63) | 128,
              (codePoint & 63) | 128
            )
          } else {
            throw new Error('Invalid code point')
          }
        }
        return bytes
      }
      function asciiToBytes(str) {
        var byteArray = []
        for (var i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255)
        }
        return byteArray
      }
      function utf16leToBytes(str, units) {
        var c, hi, lo
        var byteArray = []
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break
          c = str.charCodeAt(i)
          hi = c >> 8
          lo = c % 256
          byteArray.push(lo)
          byteArray.push(hi)
        }
        return byteArray
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str))
      }
      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break
          dst[i + offset] = src[i]
        }
        return i
      }
      function isnan(val) {
        return val !== val
      }
    }.call(exports, __webpack_require__(5)))
  },
  function(module, exports, __webpack_require__) {
    var Parser = __webpack_require__(28),
      DomHandler = __webpack_require__(67)
    function defineProp(name, value) {
      delete module.exports[name]
      module.exports[name] = value
      return value
    }
    module.exports = {
      Parser: Parser,
      Tokenizer: __webpack_require__(29),
      ElementType: __webpack_require__(9),
      DomHandler: DomHandler,
      get FeedHandler() {
        return defineProp('FeedHandler', __webpack_require__(69))
      },
      get Stream() {
        return defineProp('Stream', __webpack_require__(70))
      },
      get WritableStream() {
        return defineProp('WritableStream', __webpack_require__(31))
      },
      get ProxyHandler() {
        return defineProp('ProxyHandler', __webpack_require__(85))
      },
      get DomUtils() {
        return defineProp('DomUtils', __webpack_require__(86))
      },
      get CollectingHandler() {
        return defineProp('CollectingHandler', __webpack_require__(99))
      },
      DefaultHandler: DomHandler,
      get RssHandler() {
        return defineProp('RssHandler', this.FeedHandler)
      },
      parseDOM: function(data, options) {
        var handler = new DomHandler(options)
        new Parser(handler, options).end(data)
        return handler.dom
      },
      parseFeed: function(feed, options) {
        var handler = new module.exports.FeedHandler(options)
        new Parser(handler, options).end(feed)
        return handler.dom
      },
      createDomStream: function(cb, options, elementCb) {
        var handler = new DomHandler(cb, options, elementCb)
        return new Parser(handler, options)
      },
      EVENTS: {
        attribute: 2,
        cdatastart: 0,
        cdataend: 0,
        text: 1,
        processinginstruction: 2,
        comment: 1,
        commentend: 0,
        closetag: 1,
        opentag: 2,
        opentagname: 1,
        error: 1,
        end: 0
      }
    }
  },
  function(module, exports) {
    module.exports = {
      Text: 'text',
      Directive: 'directive',
      Comment: 'comment',
      Script: 'script',
      Style: 'style',
      Tag: 'tag',
      CDATA: 'cdata',
      isTag: function(elem) {
        return (
          elem.type === 'tag' || elem.type === 'script' || elem.type === 'style'
        )
      }
    }
  },
  function(module, exports, __webpack_require__) {
    ;(function(process) {
      module.exports = Duplex
      var objectKeys =
        Object.keys ||
        function(obj) {
          var keys = []
          for (var key in obj) keys.push(key)
          return keys
        }
      var util = __webpack_require__(2)
      util.inherits = __webpack_require__(0)
      var Readable = __webpack_require__(36)
      var Writable = __webpack_require__(37)
      util.inherits(Duplex, Readable)
      forEach(objectKeys(Writable.prototype), function(method) {
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method]
      })
      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options)
        Readable.call(this, options)
        Writable.call(this, options)
        if (options && options.readable === false) this.readable = false
        if (options && options.writable === false) this.writable = false
        this.allowHalfOpen = true
        if (options && options.allowHalfOpen === false)
          this.allowHalfOpen = false
        this.once('end', onend)
      }
      function onend() {
        if (this.allowHalfOpen || this._writableState.ended) return
        process.nextTick(this.end.bind(this))
      }
      function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i)
        }
      }
    }.call(exports, __webpack_require__(1)))
  },
  function(module, exports) {
    function EventEmitter() {
      this._events = this._events || {}
      this._maxListeners = this._maxListeners || undefined
    }
    module.exports = EventEmitter
    EventEmitter.EventEmitter = EventEmitter
    EventEmitter.prototype._events = undefined
    EventEmitter.prototype._maxListeners = undefined
    EventEmitter.defaultMaxListeners = 10
    EventEmitter.prototype.setMaxListeners = function(n) {
      if (!isNumber(n) || n < 0 || isNaN(n))
        throw TypeError('n must be a positive number')
      this._maxListeners = n
      return this
    }
    EventEmitter.prototype.emit = function(type) {
      var er, handler, len, args, i, listeners
      if (!this._events) this._events = {}
      if (type === 'error') {
        if (
          !this._events.error ||
          (isObject(this._events.error) && !this._events.error.length)
        ) {
          er = arguments[1]
          if (er instanceof Error) {
            throw er
          } else {
            var err = new Error(
              'Uncaught, unspecified "error" event. (' + er + ')'
            )
            err.context = er
            throw err
          }
        }
      }
      handler = this._events[type]
      if (isUndefined(handler)) return false
      if (isFunction(handler)) {
        switch (arguments.length) {
          case 1:
            handler.call(this)
            break

          case 2:
            handler.call(this, arguments[1])
            break

          case 3:
            handler.call(this, arguments[1], arguments[2])
            break

          default:
            args = Array.prototype.slice.call(arguments, 1)
            handler.apply(this, args)
        }
      } else if (isObject(handler)) {
        args = Array.prototype.slice.call(arguments, 1)
        listeners = handler.slice()
        len = listeners.length
        for (i = 0; i < len; i++) listeners[i].apply(this, args)
      }
      return true
    }
    EventEmitter.prototype.addListener = function(type, listener) {
      var m
      if (!isFunction(listener)) throw TypeError('listener must be a function')
      if (!this._events) this._events = {}
      if (this._events.newListener)
        this.emit(
          'newListener',
          type,
          isFunction(listener.listener) ? listener.listener : listener
        )
      if (!this._events[type]) this._events[type] = listener
      else if (isObject(this._events[type])) this._events[type].push(listener)
      else this._events[type] = [this._events[type], listener]
      if (isObject(this._events[type]) && !this._events[type].warned) {
        if (!isUndefined(this._maxListeners)) {
          m = this._maxListeners
        } else {
          m = EventEmitter.defaultMaxListeners
        }
        if (m && m > 0 && this._events[type].length > m) {
          this._events[type].warned = true
          console.error(
            '(node) warning: possible EventEmitter memory ' +
              'leak detected. %d listeners added. ' +
              'Use emitter.setMaxListeners() to increase limit.',
            this._events[type].length
          )
          if (typeof console.trace === 'function') {
            console.trace()
          }
        }
      }
      return this
    }
    EventEmitter.prototype.on = EventEmitter.prototype.addListener
    EventEmitter.prototype.once = function(type, listener) {
      if (!isFunction(listener)) throw TypeError('listener must be a function')
      var fired = false
      function g() {
        this.removeListener(type, g)
        if (!fired) {
          fired = true
          listener.apply(this, arguments)
        }
      }
      g.listener = listener
      this.on(type, g)
      return this
    }
    EventEmitter.prototype.removeListener = function(type, listener) {
      var list, position, length, i
      if (!isFunction(listener)) throw TypeError('listener must be a function')
      if (!this._events || !this._events[type]) return this
      list = this._events[type]
      length = list.length
      position = -1
      if (
        list === listener ||
        (isFunction(list.listener) && list.listener === listener)
      ) {
        delete this._events[type]
        if (this._events.removeListener)
          this.emit('removeListener', type, listener)
      } else if (isObject(list)) {
        for (i = length; i-- > 0; ) {
          if (
            list[i] === listener ||
            (list[i].listener && list[i].listener === listener)
          ) {
            position = i
            break
          }
        }
        if (position < 0) return this
        if (list.length === 1) {
          list.length = 0
          delete this._events[type]
        } else {
          list.splice(position, 1)
        }
        if (this._events.removeListener)
          this.emit('removeListener', type, listener)
      }
      return this
    }
    EventEmitter.prototype.removeAllListeners = function(type) {
      var key, listeners
      if (!this._events) return this
      if (!this._events.removeListener) {
        if (arguments.length === 0) this._events = {}
        else if (this._events[type]) delete this._events[type]
        return this
      }
      if (arguments.length === 0) {
        for (key in this._events) {
          if (key === 'removeListener') continue
          this.removeAllListeners(key)
        }
        this.removeAllListeners('removeListener')
        this._events = {}
        return this
      }
      listeners = this._events[type]
      if (isFunction(listeners)) {
        this.removeListener(type, listeners)
      } else if (listeners) {
        while (listeners.length)
          this.removeListener(type, listeners[listeners.length - 1])
      }
      delete this._events[type]
      return this
    }
    EventEmitter.prototype.listeners = function(type) {
      var ret
      if (!this._events || !this._events[type]) ret = []
      else if (isFunction(this._events[type])) ret = [this._events[type]]
      else ret = this._events[type].slice()
      return ret
    }
    EventEmitter.prototype.listenerCount = function(type) {
      if (this._events) {
        var evlistener = this._events[type]
        if (isFunction(evlistener)) return 1
        else if (evlistener) return evlistener.length
      }
      return 0
    }
    EventEmitter.listenerCount = function(emitter, type) {
      return emitter.listenerCount(type)
    }
    function isFunction(arg) {
      return typeof arg === 'function'
    }
    function isNumber(arg) {
      return typeof arg === 'number'
    }
    function isObject(arg) {
      return typeof arg === 'object' && arg !== null
    }
    function isUndefined(arg) {
      return arg === void 0
    }
  },
  function(module, exports, __webpack_require__) {
    module.exports = Stream
    var EE = __webpack_require__(11).EventEmitter
    var inherits = __webpack_require__(0)
    inherits(Stream, EE)
    Stream.Readable = __webpack_require__(21)
    Stream.Writable = __webpack_require__(77)
    Stream.Duplex = __webpack_require__(78)
    Stream.Transform = __webpack_require__(79)
    Stream.PassThrough = __webpack_require__(80)
    Stream.Stream = Stream
    function Stream() {
      EE.call(this)
    }
    Stream.prototype.pipe = function(dest, options) {
      var source = this
      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause()
          }
        }
      }
      source.on('data', ondata)
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume()
        }
      }
      dest.on('drain', ondrain)
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend)
        source.on('close', onclose)
      }
      var didOnEnd = false
      function onend() {
        if (didOnEnd) return
        didOnEnd = true
        dest.end()
      }
      function onclose() {
        if (didOnEnd) return
        didOnEnd = true
        if (typeof dest.destroy === 'function') dest.destroy()
      }
      function onerror(er) {
        cleanup()
        if (EE.listenerCount(this, 'error') === 0) {
          throw er
        }
      }
      source.on('error', onerror)
      dest.on('error', onerror)
      function cleanup() {
        source.removeListener('data', ondata)
        dest.removeListener('drain', ondrain)
        source.removeListener('end', onend)
        source.removeListener('close', onclose)
        source.removeListener('error', onerror)
        dest.removeListener('error', onerror)
        source.removeListener('end', cleanup)
        source.removeListener('close', cleanup)
        dest.removeListener('close', cleanup)
      }
      source.on('end', cleanup)
      source.on('close', cleanup)
      dest.on('close', cleanup)
      dest.emit('pipe', source)
      return dest
    }
  },
  function(module, exports) {
    var tags = {
      tag: true,
      script: true,
      style: true
    }
    exports.isTag = function(type) {
      if (type.type) type = type.type
      return tags[type] || false
    }
    exports.camelCase = function(str) {
      return str.replace(/[_.-](\w|$)/g, function(_, x) {
        return x.toUpperCase()
      })
    }
    exports.cssCase = function(str) {
      return str.replace(/[A-Z]/g, '-$&').toLowerCase()
    }
    exports.domEach = function(cheerio, fn) {
      var i = 0,
        len = cheerio.length
      while (i < len && fn(i, cheerio[i]) !== false) ++i
      return cheerio
    }
  },
  function(module, exports, __webpack_require__) {
    var DomUtils = module.exports
    ;[
      __webpack_require__(103),
      __webpack_require__(104),
      __webpack_require__(105),
      __webpack_require__(106),
      __webpack_require__(107),
      __webpack_require__(108)
    ].forEach(function(ext) {
      Object.keys(ext).forEach(function(key) {
        DomUtils[key] = ext[key].bind(DomUtils)
      })
    })
  },
  function(module, exports) {
    module.exports = {
      trueFunc: function trueFunc() {
        return true
      },
      falseFunc: function falseFunc() {
        return false
      }
    }
  },
  function(module, exports, __webpack_require__) {
    ;(function(global, process) {
      var formatRegExp = /%[sdj%]/g
      exports.format = function(f) {
        if (!isString(f)) {
          var objects = []
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]))
          }
          return objects.join(' ')
        }
        var i = 1
        var args = arguments
        var len = args.length
        var str = String(f).replace(formatRegExp, function(x) {
          if (x === '%%') return '%'
          if (i >= len) return x
          switch (x) {
            case '%s':
              return String(args[i++])

            case '%d':
              return Number(args[i++])

            case '%j':
              try {
                return JSON.stringify(args[i++])
              } catch (_) {
                return '[Circular]'
              }

            default:
              return x
          }
        })
        for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += ' ' + x
          } else {
            str += ' ' + inspect(x)
          }
        }
        return str
      }
      exports.deprecate = function(fn, msg) {
        if (isUndefined(global.process)) {
          return function() {
            return exports.deprecate(fn, msg).apply(this, arguments)
          }
        }
        if (process.noDeprecation === true) {
          return fn
        }
        var warned = false
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg)
            } else if (process.traceDeprecation) {
              console.trace(msg)
            } else {
              console.error(msg)
            }
            warned = true
          }
          return fn.apply(this, arguments)
        }
        return deprecated
      }
      var debugs = {}
      var debugEnviron
      exports.debuglog = function(set) {
        if (isUndefined(debugEnviron))
          debugEnviron = process.env.NODE_DEBUG || ''
        set = set.toUpperCase()
        if (!debugs[set]) {
          if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
            var pid = process.pid
            debugs[set] = function() {
              var msg = exports.format.apply(exports, arguments)
              console.error('%s %d: %s', set, pid, msg)
            }
          } else {
            debugs[set] = function() {}
          }
        }
        return debugs[set]
      }
      function inspect(obj, opts) {
        var ctx = {
          seen: [],
          stylize: stylizeNoColor
        }
        if (arguments.length >= 3) ctx.depth = arguments[2]
        if (arguments.length >= 4) ctx.colors = arguments[3]
        if (isBoolean(opts)) {
          ctx.showHidden = opts
        } else if (opts) {
          exports._extend(ctx, opts)
        }
        if (isUndefined(ctx.showHidden)) ctx.showHidden = false
        if (isUndefined(ctx.depth)) ctx.depth = 2
        if (isUndefined(ctx.colors)) ctx.colors = false
        if (isUndefined(ctx.customInspect)) ctx.customInspect = true
        if (ctx.colors) ctx.stylize = stylizeWithColor
        return formatValue(ctx, obj, ctx.depth)
      }
      exports.inspect = inspect
      inspect.colors = {
        bold: [1, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        white: [37, 39],
        grey: [90, 39],
        black: [30, 39],
        blue: [34, 39],
        cyan: [36, 39],
        green: [32, 39],
        magenta: [35, 39],
        red: [31, 39],
        yellow: [33, 39]
      }
      inspect.styles = {
        special: 'cyan',
        number: 'yellow',
        boolean: 'yellow',
        undefined: 'grey',
        null: 'bold',
        string: 'green',
        date: 'magenta',
        regexp: 'red'
      }
      function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType]
        if (style) {
          return (
            '[' +
            inspect.colors[style][0] +
            'm' +
            str +
            '[' +
            inspect.colors[style][1] +
            'm'
          )
        } else {
          return str
        }
      }
      function stylizeNoColor(str, styleType) {
        return str
      }
      function arrayToHash(array) {
        var hash = {}
        array.forEach(function(val, idx) {
          hash[val] = true
        })
        return hash
      }
      function formatValue(ctx, value, recurseTimes) {
        if (
          ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          value.inspect !== exports.inspect &&
          !(value.constructor && value.constructor.prototype === value)
        ) {
          var ret = value.inspect(recurseTimes, ctx)
          if (!isString(ret)) {
            ret = formatValue(ctx, ret, recurseTimes)
          }
          return ret
        }
        var primitive = formatPrimitive(ctx, value)
        if (primitive) {
          return primitive
        }
        var keys = Object.keys(value)
        var visibleKeys = arrayToHash(keys)
        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value)
        }
        if (
          isError(value) &&
          (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)
        ) {
          return formatError(value)
        }
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ': ' + value.name : ''
            return ctx.stylize('[Function' + name + ']', 'special')
          }
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp')
          }
          if (isDate(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), 'date')
          }
          if (isError(value)) {
            return formatError(value)
          }
        }
        var base = '',
          array = false,
          braces = ['{', '}']
        if (isArray(value)) {
          array = true
          braces = ['[', ']']
        }
        if (isFunction(value)) {
          var n = value.name ? ': ' + value.name : ''
          base = ' [Function' + n + ']'
        }
        if (isRegExp(value)) {
          base = ' ' + RegExp.prototype.toString.call(value)
        }
        if (isDate(value)) {
          base = ' ' + Date.prototype.toUTCString.call(value)
        }
        if (isError(value)) {
          base = ' ' + formatError(value)
        }
        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1]
        }
        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp')
          } else {
            return ctx.stylize('[Object]', 'special')
          }
        }
        ctx.seen.push(value)
        var output
        if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys)
        } else {
          output = keys.map(function(key) {
            return formatProperty(
              ctx,
              value,
              recurseTimes,
              visibleKeys,
              key,
              array
            )
          })
        }
        ctx.seen.pop()
        return reduceToSingleString(output, base, braces)
      }
      function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize('undefined', 'undefined')
        if (isString(value)) {
          var simple =
            "'" +
            JSON.stringify(value)
              .replace(/^"|"$/g, '')
              .replace(/'/g, "\\'")
              .replace(/\\"/g, '"') +
            "'"
          return ctx.stylize(simple, 'string')
        }
        if (isNumber(value)) return ctx.stylize('' + value, 'number')
        if (isBoolean(value)) return ctx.stylize('' + value, 'boolean')
        if (isNull(value)) return ctx.stylize('null', 'null')
      }
      function formatError(value) {
        return '[' + Error.prototype.toString.call(value) + ']'
      }
      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = []
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(
              formatProperty(
                ctx,
                value,
                recurseTimes,
                visibleKeys,
                String(i),
                true
              )
            )
          } else {
            output.push('')
          }
        }
        keys.forEach(function(key) {
          if (!key.match(/^\d+$/)) {
            output.push(
              formatProperty(ctx, value, recurseTimes, visibleKeys, key, true)
            )
          }
        })
        return output
      }
      function formatProperty(
        ctx,
        value,
        recurseTimes,
        visibleKeys,
        key,
        array
      ) {
        var name, str, desc
        desc = Object.getOwnPropertyDescriptor(value, key) || {
          value: value[key]
        }
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize('[Getter/Setter]', 'special')
          } else {
            str = ctx.stylize('[Getter]', 'special')
          }
        } else {
          if (desc.set) {
            str = ctx.stylize('[Setter]', 'special')
          }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
          name = '[' + key + ']'
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null)
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1)
            }
            if (str.indexOf('\n') > -1) {
              if (array) {
                str = str
                  .split('\n')
                  .map(function(line) {
                    return '  ' + line
                  })
                  .join('\n')
                  .substr(2)
              } else {
                str =
                  '\n' +
                  str
                    .split('\n')
                    .map(function(line) {
                      return '   ' + line
                    })
                    .join('\n')
              }
            }
          } else {
            str = ctx.stylize('[Circular]', 'special')
          }
        }
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str
          }
          name = JSON.stringify('' + key)
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2)
            name = ctx.stylize(name, 'name')
          } else {
            name = name
              .replace(/'/g, "\\'")
              .replace(/\\"/g, '"')
              .replace(/(^"|"$)/g, "'")
            name = ctx.stylize(name, 'string')
          }
        }
        return name + ': ' + str
      }
      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0
        var length = output.reduce(function(prev, cur) {
          numLinesEst++
          if (cur.indexOf('\n') >= 0) numLinesEst++
          return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1
        }, 0)
        if (length > 60) {
          return (
            braces[0] +
            (base === '' ? '' : base + '\n ') +
            ' ' +
            output.join(',\n  ') +
            ' ' +
            braces[1]
          )
        }
        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1]
      }
      function isArray(ar) {
        return Array.isArray(ar)
      }
      exports.isArray = isArray
      function isBoolean(arg) {
        return typeof arg === 'boolean'
      }
      exports.isBoolean = isBoolean
      function isNull(arg) {
        return arg === null
      }
      exports.isNull = isNull
      function isNullOrUndefined(arg) {
        return arg == null
      }
      exports.isNullOrUndefined = isNullOrUndefined
      function isNumber(arg) {
        return typeof arg === 'number'
      }
      exports.isNumber = isNumber
      function isString(arg) {
        return typeof arg === 'string'
      }
      exports.isString = isString
      function isSymbol(arg) {
        return typeof arg === 'symbol'
      }
      exports.isSymbol = isSymbol
      function isUndefined(arg) {
        return arg === void 0
      }
      exports.isUndefined = isUndefined
      function isRegExp(re) {
        return isObject(re) && objectToString(re) === '[object RegExp]'
      }
      exports.isRegExp = isRegExp
      function isObject(arg) {
        return typeof arg === 'object' && arg !== null
      }
      exports.isObject = isObject
      function isDate(d) {
        return isObject(d) && objectToString(d) === '[object Date]'
      }
      exports.isDate = isDate
      function isError(e) {
        return (
          isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error)
        )
      }
      exports.isError = isError
      function isFunction(arg) {
        return typeof arg === 'function'
      }
      exports.isFunction = isFunction
      function isPrimitive(arg) {
        return (
          arg === null ||
          typeof arg === 'boolean' ||
          typeof arg === 'number' ||
          typeof arg === 'string' ||
          typeof arg === 'symbol' ||
          typeof arg === 'undefined'
        )
      }
      exports.isPrimitive = isPrimitive
      exports.isBuffer = __webpack_require__(65)
      function objectToString(o) {
        return Object.prototype.toString.call(o)
      }
      function pad(n) {
        return n < 10 ? '0' + n.toString(10) : n.toString(10)
      }
      var months = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
      ]
      function timestamp() {
        var d = new Date()
        var time = [
          pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())
        ].join(':')
        return [d.getDate(), months[d.getMonth()], time].join(' ')
      }
      exports.log = function() {
        console.log(
          '%s - %s',
          timestamp(),
          exports.format.apply(exports, arguments)
        )
      }
      exports.inherits = __webpack_require__(66)
      exports._extend = function(origin, add) {
        if (!add || !isObject(add)) return origin
        var keys = Object.keys(add)
        var i = keys.length
        while (i--) {
          origin[keys[i]] = add[keys[i]]
        }
        return origin
      }
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop)
      }
    }.call(exports, __webpack_require__(5), __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    ;(function(process) {
      if (
        !process.version ||
        process.version.indexOf('v0.') === 0 ||
        (process.version.indexOf('v1.') === 0 &&
          process.version.indexOf('v1.8.') !== 0)
      ) {
        module.exports = nextTick
      } else {
        module.exports = process.nextTick
      }
      function nextTick(fn, arg1, arg2, arg3) {
        if (typeof fn !== 'function') {
          throw new TypeError('"callback" argument must be a function')
        }
        var len = arguments.length
        var args, i
        switch (len) {
          case 0:
          case 1:
            return process.nextTick(fn)

          case 2:
            return process.nextTick(function afterTickOne() {
              fn.call(null, arg1)
            })

          case 3:
            return process.nextTick(function afterTickTwo() {
              fn.call(null, arg1, arg2)
            })

          case 4:
            return process.nextTick(function afterTickThree() {
              fn.call(null, arg1, arg2, arg3)
            })

          default:
            args = new Array(len - 1)
            i = 0
            while (i < args.length) {
              args[i++] = arguments[i]
            }
            return process.nextTick(function afterTick() {
              fn.apply(null, args)
            })
        }
      }
    }.call(exports, __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    var Buffer = __webpack_require__(7).Buffer
    var isBufferEncoding =
      Buffer.isEncoding ||
      function(encoding) {
        switch (encoding && encoding.toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
          case 'raw':
            return true

          default:
            return false
        }
      }
    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding)
      }
    }
    var StringDecoder = (exports.StringDecoder = function(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '')
      assertEncoding(encoding)
      switch (this.encoding) {
        case 'utf8':
          this.surrogateSize = 3
          break

        case 'ucs2':
        case 'utf16le':
          this.surrogateSize = 2
          this.detectIncompleteChar = utf16DetectIncompleteChar
          break

        case 'base64':
          this.surrogateSize = 3
          this.detectIncompleteChar = base64DetectIncompleteChar
          break

        default:
          this.write = passThroughWrite
          return
      }
      this.charBuffer = new Buffer(6)
      this.charReceived = 0
      this.charLength = 0
    })
    StringDecoder.prototype.write = function(buffer) {
      var charStr = ''
      while (this.charLength) {
        var available =
          buffer.length >= this.charLength - this.charReceived
            ? this.charLength - this.charReceived
            : buffer.length
        buffer.copy(this.charBuffer, this.charReceived, 0, available)
        this.charReceived += available
        if (this.charReceived < this.charLength) {
          return ''
        }
        buffer = buffer.slice(available, buffer.length)
        charStr = this.charBuffer
          .slice(0, this.charLength)
          .toString(this.encoding)
        var charCode = charStr.charCodeAt(charStr.length - 1)
        if (charCode >= 55296 && charCode <= 56319) {
          this.charLength += this.surrogateSize
          charStr = ''
          continue
        }
        this.charReceived = this.charLength = 0
        if (buffer.length === 0) {
          return charStr
        }
        break
      }
      this.detectIncompleteChar(buffer)
      var end = buffer.length
      if (this.charLength) {
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end)
        end -= this.charReceived
      }
      charStr += buffer.toString(this.encoding, 0, end)
      var end = charStr.length - 1
      var charCode = charStr.charCodeAt(end)
      if (charCode >= 55296 && charCode <= 56319) {
        var size = this.surrogateSize
        this.charLength += size
        this.charReceived += size
        this.charBuffer.copy(this.charBuffer, size, 0, size)
        buffer.copy(this.charBuffer, 0, 0, size)
        return charStr.substring(0, end)
      }
      return charStr
    }
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      var i = buffer.length >= 3 ? 3 : buffer.length
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i]
        if (i == 1 && c >> 5 == 6) {
          this.charLength = 2
          break
        }
        if (i <= 2 && c >> 4 == 14) {
          this.charLength = 3
          break
        }
        if (i <= 3 && c >> 3 == 30) {
          this.charLength = 4
          break
        }
      }
      this.charReceived = i
    }
    StringDecoder.prototype.end = function(buffer) {
      var res = ''
      if (buffer && buffer.length) res = this.write(buffer)
      if (this.charReceived) {
        var cr = this.charReceived
        var buf = this.charBuffer
        var enc = this.encoding
        res += buf.slice(0, cr).toString(enc)
      }
      return res
    }
    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding)
    }
    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2
      this.charLength = this.charReceived ? 2 : 0
    }
    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3
      this.charLength = this.charReceived ? 3 : 0
    }
  },
  function(module, exports, __webpack_require__) {
    var path = __webpack_require__(57),
      parse = __webpack_require__(20),
      _ = __webpack_require__(3)
    var api = [
      __webpack_require__(101),
      __webpack_require__(102),
      __webpack_require__(114),
      __webpack_require__(115)
    ]
    var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/
    var Cheerio = (module.exports = function(selector, context, root, options) {
      if (!(this instanceof Cheerio))
        return new Cheerio(selector, context, root, options)
      this.options = _.defaults(options || {}, this.options)
      if (!selector) return this
      if (root) {
        if (typeof root === 'string') root = parse(root, this.options)
        this._root = Cheerio.call(this, root)
      }
      if (selector.cheerio) return selector
      if (isNode(selector)) selector = [selector]
      if (Array.isArray(selector)) {
        _.forEach(
          selector,
          function(elem, idx) {
            this[idx] = elem
          },
          this
        )
        this.length = selector.length
        return this
      }
      if (typeof selector === 'string' && isHtml(selector)) {
        return Cheerio.call(this, parse(selector, this.options).children)
      }
      if (!context) {
        context = this._root
      } else if (typeof context === 'string') {
        if (isHtml(context)) {
          context = parse(context, this.options)
          context = Cheerio.call(this, context)
        } else {
          selector = [context, selector].join(' ')
          context = this._root
        }
      } else if (!context.cheerio) {
        context = Cheerio.call(this, context)
      }
      if (!context) return this
      return context.find(selector)
    })
    _.extend(Cheerio, __webpack_require__(44))
    Cheerio.prototype.cheerio = '[cheerio object]'
    Cheerio.prototype.options = {
      normalizeWhitespace: false,
      xmlMode: false,
      decodeEntities: true
    }
    Cheerio.prototype.length = 0
    Cheerio.prototype.splice = Array.prototype.splice
    var isHtml = function(str) {
      if (
        str.charAt(0) === '<' &&
        str.charAt(str.length - 1) === '>' &&
        str.length >= 3
      )
        return true
      var match = quickExpr.exec(str)
      return !!(match && match[1])
    }
    Cheerio.prototype._make = function(dom, context) {
      var cheerio = new Cheerio(dom, context, this._root, this.options)
      cheerio.prevObject = this
      return cheerio
    }
    Cheerio.prototype.toArray = function() {
      return this.get()
    }
    api.forEach(function(mod) {
      _.extend(Cheerio.prototype, mod)
    })
    var isNode = function(obj) {
      return obj.name || obj.type === 'text' || obj.type === 'comment'
    }
  },
  function(module, exports, __webpack_require__) {
    ;(function(Buffer) {
      var htmlparser = __webpack_require__(8),
        utils = __webpack_require__(13)
      exports = module.exports = function(content, options) {
        var dom = evaluate(content, options)
        var root = {
          type: 'root',
          name: 'root',
          parent: null,
          prev: null,
          next: null,
          children: []
        }
        update(dom, root)
        return root
      }
      var evaluate = (exports.evaluate = function(content, options) {
        var dom
        if (typeof content === 'string' || Buffer.isBuffer(content)) {
          dom = htmlparser.parseDOM(content, options)
        } else {
          dom = content
        }
        return dom
      })
      var update = (exports.update = function(arr, parent) {
        if (!Array.isArray(arr)) arr = [arr]
        if (parent) {
          parent.children = arr
        } else {
          parent = null
        }
        for (var i = 0; i < arr.length; i++) {
          var node = arr[i]
          var oldParent = node.parent || node.root,
            oldSiblings = oldParent && oldParent.children
          if (oldSiblings && oldSiblings !== arr) {
            oldSiblings.splice(oldSiblings.indexOf(node), 1)
            if (node.prev) {
              node.prev.next = node.next
            }
            if (node.next) {
              node.next.prev = node.prev
            }
          }
          if (parent) {
            node.prev = arr[i - 1] || null
            node.next = arr[i + 1] || null
          } else {
            node.prev = node.next = null
          }
          if (parent && parent.type === 'root') {
            node.root = parent
            node.parent = null
          } else {
            node.root = null
            node.parent = parent
          }
        }
        return parent
      })
    }.call(exports, __webpack_require__(7).Buffer))
  },
  function(module, exports, __webpack_require__) {
    exports = module.exports = __webpack_require__(32)
    exports.Stream = exports
    exports.Readable = exports
    exports.Writable = __webpack_require__(23)
    exports.Duplex = __webpack_require__(6)
    exports.Transform = __webpack_require__(35)
    exports.PassThrough = __webpack_require__(76)
  },
  function(module, exports, __webpack_require__) {
    var buffer = __webpack_require__(7)
    var Buffer = buffer.Buffer
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key]
      }
    }
    if (
      Buffer.from &&
      Buffer.alloc &&
      Buffer.allocUnsafe &&
      Buffer.allocUnsafeSlow
    ) {
      module.exports = buffer
    } else {
      copyProps(buffer, exports)
      exports.Buffer = SafeBuffer
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }
    copyProps(Buffer, SafeBuffer)
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    }
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size)
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
      } else {
        buf.fill(0)
      }
      return buf
    }
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    }
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    ;(function(process, setImmediate, global) {
      var processNextTick = __webpack_require__(17)
      module.exports = Writable
      function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk
        this.encoding = encoding
        this.callback = cb
        this.next = null
      }
      function CorkedRequest(state) {
        var _this = this
        this.next = null
        this.entry = null
        this.finish = function() {
          onCorkedFinish(_this, state)
        }
      }
      var asyncWrite =
        !process.browser &&
        ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1
          ? setImmediate
          : processNextTick
      var Duplex
      Writable.WritableState = WritableState
      var util = __webpack_require__(2)
      util.inherits = __webpack_require__(0)
      var internalUtil = {
        deprecate: __webpack_require__(75)
      }
      var Stream = __webpack_require__(33)
      var Buffer = __webpack_require__(22).Buffer
      var OurUint8Array = global.Uint8Array || function() {}
      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk)
      }
      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array
      }
      var destroyImpl = __webpack_require__(34)
      util.inherits(Writable, Stream)
      function nop() {}
      function WritableState(options, stream) {
        Duplex = Duplex || __webpack_require__(6)
        options = options || {}
        this.objectMode = !!options.objectMode
        if (stream instanceof Duplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode
        var hwm = options.highWaterMark
        var defaultHwm = this.objectMode ? 16 : 16 * 1024
        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm
        this.highWaterMark = Math.floor(this.highWaterMark)
        this.finalCalled = false
        this.needDrain = false
        this.ending = false
        this.ended = false
        this.finished = false
        this.destroyed = false
        var noDecode = options.decodeStrings === false
        this.decodeStrings = !noDecode
        this.defaultEncoding = options.defaultEncoding || 'utf8'
        this.length = 0
        this.writing = false
        this.corked = 0
        this.sync = true
        this.bufferProcessing = false
        this.onwrite = function(er) {
          onwrite(stream, er)
        }
        this.writecb = null
        this.writelen = 0
        this.bufferedRequest = null
        this.lastBufferedRequest = null
        this.pendingcb = 0
        this.prefinished = false
        this.errorEmitted = false
        this.bufferedRequestCount = 0
        this.corkedRequestsFree = new CorkedRequest(this)
      }
      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest
        var out = []
        while (current) {
          out.push(current)
          current = current.next
        }
        return out
      }
      ;(function() {
        try {
          Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(
              function() {
                return this.getBuffer()
              },
              '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
                'instead.',
              'DEP0003'
            )
          })
        } catch (_) {}
      })()
      var realHasInstance
      if (
        typeof Symbol === 'function' &&
        Symbol.hasInstance &&
        typeof Function.prototype[Symbol.hasInstance] === 'function'
      ) {
        realHasInstance = Function.prototype[Symbol.hasInstance]
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function(object) {
            if (realHasInstance.call(this, object)) return true
            return object && object._writableState instanceof WritableState
          }
        })
      } else {
        realHasInstance = function(object) {
          return object instanceof this
        }
      }
      function Writable(options) {
        Duplex = Duplex || __webpack_require__(6)
        if (
          !realHasInstance.call(Writable, this) &&
          !(this instanceof Duplex)
        ) {
          return new Writable(options)
        }
        this._writableState = new WritableState(options, this)
        this.writable = true
        if (options) {
          if (typeof options.write === 'function') this._write = options.write
          if (typeof options.writev === 'function')
            this._writev = options.writev
          if (typeof options.destroy === 'function')
            this._destroy = options.destroy
          if (typeof options.final === 'function') this._final = options.final
        }
        Stream.call(this)
      }
      Writable.prototype.pipe = function() {
        this.emit('error', new Error('Cannot pipe, not readable'))
      }
      function writeAfterEnd(stream, cb) {
        var er = new Error('write after end')
        stream.emit('error', er)
        processNextTick(cb, er)
      }
      function validChunk(stream, state, chunk, cb) {
        var valid = true
        var er = false
        if (chunk === null) {
          er = new TypeError('May not write null values to stream')
        } else if (
          typeof chunk !== 'string' &&
          chunk !== undefined &&
          !state.objectMode
        ) {
          er = new TypeError('Invalid non-string/buffer chunk')
        }
        if (er) {
          stream.emit('error', er)
          processNextTick(cb, er)
          valid = false
        }
        return valid
      }
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState
        var ret = false
        var isBuf = _isUint8Array(chunk) && !state.objectMode
        if (isBuf && !Buffer.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk)
        }
        if (typeof encoding === 'function') {
          cb = encoding
          encoding = null
        }
        if (isBuf) encoding = 'buffer'
        else if (!encoding) encoding = state.defaultEncoding
        if (typeof cb !== 'function') cb = nop
        if (state.ended) writeAfterEnd(this, cb)
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb)
        }
        return ret
      }
      Writable.prototype.cork = function() {
        var state = this._writableState
        state.corked++
      }
      Writable.prototype.uncork = function() {
        var state = this._writableState
        if (state.corked) {
          state.corked--
          if (
            !state.writing &&
            !state.corked &&
            !state.finished &&
            !state.bufferProcessing &&
            state.bufferedRequest
          )
            clearBuffer(this, state)
        }
      }
      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(
        encoding
      ) {
        if (typeof encoding === 'string') encoding = encoding.toLowerCase()
        if (
          !(
            [
              'hex',
              'utf8',
              'utf-8',
              'ascii',
              'binary',
              'base64',
              'ucs2',
              'ucs-2',
              'utf16le',
              'utf-16le',
              'raw'
            ].indexOf((encoding + '').toLowerCase()) > -1
          )
        )
          throw new TypeError('Unknown encoding: ' + encoding)
        this._writableState.defaultEncoding = encoding
        return this
      }
      function decodeChunk(state, chunk, encoding) {
        if (
          !state.objectMode &&
          state.decodeStrings !== false &&
          typeof chunk === 'string'
        ) {
          chunk = Buffer.from(chunk, encoding)
        }
        return chunk
      }
      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding)
          if (chunk !== newChunk) {
            isBuf = true
            encoding = 'buffer'
            chunk = newChunk
          }
        }
        var len = state.objectMode ? 1 : chunk.length
        state.length += len
        var ret = state.length < state.highWaterMark
        if (!ret) state.needDrain = true
        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest
          state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
          }
          if (last) {
            last.next = state.lastBufferedRequest
          } else {
            state.bufferedRequest = state.lastBufferedRequest
          }
          state.bufferedRequestCount += 1
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb)
        }
        return ret
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len
        state.writecb = cb
        state.writing = true
        state.sync = true
        if (writev) stream._writev(chunk, state.onwrite)
        else stream._write(chunk, encoding, state.onwrite)
        state.sync = false
      }
      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb
        if (sync) {
          processNextTick(cb, er)
          processNextTick(finishMaybe, stream, state)
          stream._writableState.errorEmitted = true
          stream.emit('error', er)
        } else {
          cb(er)
          stream._writableState.errorEmitted = true
          stream.emit('error', er)
          finishMaybe(stream, state)
        }
      }
      function onwriteStateUpdate(state) {
        state.writing = false
        state.writecb = null
        state.length -= state.writelen
        state.writelen = 0
      }
      function onwrite(stream, er) {
        var state = stream._writableState
        var sync = state.sync
        var cb = state.writecb
        onwriteStateUpdate(state)
        if (er) onwriteError(stream, state, sync, er, cb)
        else {
          var finished = needFinish(state)
          if (
            !finished &&
            !state.corked &&
            !state.bufferProcessing &&
            state.bufferedRequest
          ) {
            clearBuffer(stream, state)
          }
          if (sync) {
            asyncWrite(afterWrite, stream, state, finished, cb)
          } else {
            afterWrite(stream, state, finished, cb)
          }
        }
      }
      function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state)
        state.pendingcb--
        cb()
        finishMaybe(stream, state)
      }
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false
          stream.emit('drain')
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true
        var entry = state.bufferedRequest
        if (stream._writev && entry && entry.next) {
          var l = state.bufferedRequestCount
          var buffer = new Array(l)
          var holder = state.corkedRequestsFree
          holder.entry = entry
          var count = 0
          var allBuffers = true
          while (entry) {
            buffer[count] = entry
            if (!entry.isBuf) allBuffers = false
            entry = entry.next
            count += 1
          }
          buffer.allBuffers = allBuffers
          doWrite(stream, state, true, state.length, buffer, '', holder.finish)
          state.pendingcb++
          state.lastBufferedRequest = null
          if (holder.next) {
            state.corkedRequestsFree = holder.next
            holder.next = null
          } else {
            state.corkedRequestsFree = new CorkedRequest(state)
          }
        } else {
          while (entry) {
            var chunk = entry.chunk
            var encoding = entry.encoding
            var cb = entry.callback
            var len = state.objectMode ? 1 : chunk.length
            doWrite(stream, state, false, len, chunk, encoding, cb)
            entry = entry.next
            if (state.writing) {
              break
            }
          }
          if (entry === null) state.lastBufferedRequest = null
        }
        state.bufferedRequestCount = 0
        state.bufferedRequest = entry
        state.bufferProcessing = false
      }
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new Error('_write() is not implemented'))
      }
      Writable.prototype._writev = null
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState
        if (typeof chunk === 'function') {
          cb = chunk
          chunk = null
          encoding = null
        } else if (typeof encoding === 'function') {
          cb = encoding
          encoding = null
        }
        if (chunk !== null && chunk !== undefined) this.write(chunk, encoding)
        if (state.corked) {
          state.corked = 1
          this.uncork()
        }
        if (!state.ending && !state.finished) endWritable(this, state, cb)
      }
      function needFinish(state) {
        return (
          state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing
        )
      }
      function callFinal(stream, state) {
        stream._final(function(err) {
          state.pendingcb--
          if (err) {
            stream.emit('error', err)
          }
          state.prefinished = true
          stream.emit('prefinish')
          finishMaybe(stream, state)
        })
      }
      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === 'function') {
            state.pendingcb++
            state.finalCalled = true
            processNextTick(callFinal, stream, state)
          } else {
            state.prefinished = true
            stream.emit('prefinish')
          }
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(state)
        if (need) {
          prefinish(stream, state)
          if (state.pendingcb === 0) {
            state.finished = true
            stream.emit('finish')
          }
        }
        return need
      }
      function endWritable(stream, state, cb) {
        state.ending = true
        finishMaybe(stream, state)
        if (cb) {
          if (state.finished) processNextTick(cb)
          else stream.once('finish', cb)
        }
        state.ended = true
        stream.writable = false
      }
      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry
        corkReq.entry = null
        while (entry) {
          var cb = entry.callback
          state.pendingcb--
          cb(err)
          entry = entry.next
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = corkReq
        } else {
          state.corkedRequestsFree = corkReq
        }
      }
      Object.defineProperty(Writable.prototype, 'destroyed', {
        get: function() {
          if (this._writableState === undefined) {
            return false
          }
          return this._writableState.destroyed
        },
        set: function(value) {
          if (!this._writableState) {
            return
          }
          this._writableState.destroyed = value
        }
      })
      Writable.prototype.destroy = destroyImpl.destroy
      Writable.prototype._undestroy = destroyImpl.undestroy
      Writable.prototype._destroy = function(err, cb) {
        this.end()
        cb(err)
      }
    }.call(
      exports,
      __webpack_require__(1),
      __webpack_require__(73).setImmediate,
      __webpack_require__(5)
    ))
  },
  function(module, exports, __webpack_require__) {
    var DomUtils = __webpack_require__(14),
      isTag = DomUtils.isTag,
      getText = DomUtils.getText,
      getParent = DomUtils.getParent,
      getChildren = DomUtils.getChildren,
      getSiblings = DomUtils.getSiblings,
      hasAttrib = DomUtils.hasAttrib,
      getName = DomUtils.getName,
      getAttribute = DomUtils.getAttributeValue,
      getNCheck = __webpack_require__(109),
      checkAttrib = __webpack_require__(43).rules.equals,
      BaseFuncs = __webpack_require__(15),
      trueFunc = BaseFuncs.trueFunc,
      falseFunc = BaseFuncs.falseFunc
    function getFirstElement(elems) {
      for (var i = 0; elems && i < elems.length; i++) {
        if (isTag(elems[i])) return elems[i]
      }
    }
    function getAttribFunc(name, value) {
      var data = {
        name: name,
        value: value
      }
      return function attribFunc(next) {
        return checkAttrib(next, data)
      }
    }
    function getChildFunc(next) {
      return function(elem) {
        return !!getParent(elem) && next(elem)
      }
    }
    var filters = {
      contains: function(next, text) {
        if (
          (text.charAt(0) === '"' || text.charAt(0) === "'") &&
          text.charAt(0) === text.substr(-1)
        ) {
          text = text.slice(1, -1)
        }
        return function contains(elem) {
          return getText(elem).indexOf(text) >= 0 && next(elem)
        }
      },
      'first-child': function(next) {
        return function firstChild(elem) {
          return getFirstElement(getSiblings(elem)) === elem && next(elem)
        }
      },
      'last-child': function(next) {
        return function lastChild(elem) {
          var siblings = getSiblings(elem)
          for (var i = siblings.length - 1; i >= 0; i--) {
            if (siblings[i] === elem) return next(elem)
            if (isTag(siblings[i])) break
          }
          return false
        }
      },
      'first-of-type': function(next) {
        return function firstOfType(elem) {
          var siblings = getSiblings(elem)
          for (var i = 0; i < siblings.length; i++) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) return next(elem)
              if (getName(siblings[i]) === getName(elem)) break
            }
          }
          return false
        }
      },
      'last-of-type': function(next) {
        return function lastOfType(elem) {
          var siblings = getSiblings(elem)
          for (var i = siblings.length - 1; i >= 0; i--) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) return next(elem)
              if (getName(siblings[i]) === getName(elem)) break
            }
          }
          return false
        }
      },
      'only-of-type': function(next) {
        return function onlyOfType(elem) {
          var siblings = getSiblings(elem)
          for (var i = 0, j = siblings.length; i < j; i++) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) continue
              if (getName(siblings[i]) === getName(elem)) return false
            }
          }
          return next(elem)
        }
      },
      'only-child': function(next) {
        return function onlyChild(elem) {
          var siblings = getSiblings(elem)
          for (var i = 0; i < siblings.length; i++) {
            if (isTag(siblings[i]) && siblings[i] !== elem) return false
          }
          return next(elem)
        }
      },
      'nth-child': function(next, rule) {
        var func = getNCheck(rule)
        if (func === falseFunc) return func
        if (func === trueFunc) return getChildFunc(next)
        return function nthChild(elem) {
          var siblings = getSiblings(elem)
          for (var i = 0, pos = 0; i < siblings.length; i++) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) break
              else pos++
            }
          }
          return func(pos) && next(elem)
        }
      },
      'nth-last-child': function(next, rule) {
        var func = getNCheck(rule)
        if (func === falseFunc) return func
        if (func === trueFunc) return getChildFunc(next)
        return function nthLastChild(elem) {
          var siblings = getSiblings(elem)
          for (var pos = 0, i = siblings.length - 1; i >= 0; i--) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) break
              else pos++
            }
          }
          return func(pos) && next(elem)
        }
      },
      'nth-of-type': function(next, rule) {
        var func = getNCheck(rule)
        if (func === falseFunc) return func
        if (func === trueFunc) return getChildFunc(next)
        return function nthOfType(elem) {
          var siblings = getSiblings(elem)
          for (var pos = 0, i = 0; i < siblings.length; i++) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) break
              if (getName(siblings[i]) === getName(elem)) pos++
            }
          }
          return func(pos) && next(elem)
        }
      },
      'nth-last-of-type': function(next, rule) {
        var func = getNCheck(rule)
        if (func === falseFunc) return func
        if (func === trueFunc) return getChildFunc(next)
        return function nthLastOfType(elem) {
          var siblings = getSiblings(elem)
          for (var pos = 0, i = siblings.length - 1; i >= 0; i--) {
            if (siblings[i] === elem) break
            if (getName(siblings[i]) === getName(elem)) pos++
          }
          return func(pos) && next(elem)
        }
      },
      checkbox: getAttribFunc('type', 'checkbox'),
      file: getAttribFunc('type', 'file'),
      password: getAttribFunc('type', 'password'),
      radio: getAttribFunc('type', 'radio'),
      reset: getAttribFunc('type', 'reset'),
      image: getAttribFunc('type', 'image'),
      submit: getAttribFunc('type', 'submit')
    }
    var pseudos = {
      root: function(elem) {
        return !getParent(elem)
      },
      empty: function(elem) {
        return !getChildren(elem).some(function(elem) {
          return isTag(elem) || elem.type === 'text'
        })
      },
      selected: function(elem) {
        if (hasAttrib(elem, 'selected')) return true
        else if (getName(elem) !== 'option') return false
        var parent = getParent(elem)
        if (!parent || getName(parent) !== 'select') return false
        var siblings = getChildren(parent),
          sawElem = false
        for (var i = 0; i < siblings.length; i++) {
          if (isTag(siblings[i])) {
            if (siblings[i] === elem) {
              sawElem = true
            } else if (!sawElem) {
              return false
            } else if (hasAttrib(siblings[i], 'selected')) {
              return false
            }
          }
        }
        return sawElem
      },
      disabled: function(elem) {
        return hasAttrib(elem, 'disabled')
      },
      enabled: function(elem) {
        return !hasAttrib(elem, 'disabled')
      },
      checked: function(elem) {
        return hasAttrib(elem, 'checked') || pseudos.selected(elem)
      },
      parent: function(elem) {
        return !pseudos.empty(elem)
      },
      header: function(elem) {
        var name = getName(elem)
        return (
          name === 'h1' ||
          name === 'h2' ||
          name === 'h3' ||
          name === 'h4' ||
          name === 'h5' ||
          name === 'h6'
        )
      },
      button: function(elem) {
        var name = getName(elem)
        return (
          name === 'button' ||
          (name === 'input' && getAttribute(elem, 'type') === 'button')
        )
      },
      input: function(elem) {
        var name = getName(elem)
        return (
          name === 'input' ||
          name === 'textarea' ||
          name === 'select' ||
          name === 'button'
        )
      },
      text: function(elem) {
        var attr
        return (
          getName(elem) === 'input' &&
          (!(attr = getAttribute(elem, 'type')) ||
            attr.toLowerCase() === 'text')
        )
      }
    }
    function verifyArgs(func, name, subselect) {
      if (subselect === null) {
        if (func.length > 1) {
          throw new SyntaxError(
            'pseudo-selector :' + name + ' requires an argument'
          )
        }
      } else {
        if (func.length === 1) {
          throw new SyntaxError(
            'pseudo-selector :' + name + " doesn't have any arguments"
          )
        }
      }
    }
    module.exports = {
      compile: function(next, data) {
        var name = data.name,
          subselect = data.data
        if (typeof filters[name] === 'function') {
          verifyArgs(filters[name], name, subselect)
          return filters[name](next, subselect)
        } else if (typeof pseudos[name] === 'function') {
          var func = pseudos[name]
          verifyArgs(func, name, subselect)
          return function pseudoArgs(elem) {
            return func(elem, subselect) && next(elem)
          }
        } else {
          throw new SyntaxError('unmatched pseudo-class :' + name)
        }
      },
      filters: filters,
      pseudos: pseudos
    }
  },
  function(module, exports) {
    module.exports = {
      Text: 'text',
      Directive: 'directive',
      Comment: 'comment',
      Script: 'script',
      Style: 'style',
      Tag: 'tag',
      CDATA: 'cdata',
      Doctype: 'doctype',
      isTag: function(elem) {
        return (
          elem.type === 'tag' || elem.type === 'script' || elem.type === 'style'
        )
      }
    }
  },
  function(module, exports, __webpack_require__) {
    var __WEBPACK_AMD_DEFINE_FACTORY__,
      __WEBPACK_AMD_DEFINE_ARRAY__,
      __WEBPACK_AMD_DEFINE_RESULT__
    ;(function(factory) {
      if (true) {
        !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
        (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
        (__WEBPACK_AMD_DEFINE_RESULT__ =
          typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function'
            ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                exports,
                __WEBPACK_AMD_DEFINE_ARRAY__
              )
            : __WEBPACK_AMD_DEFINE_FACTORY__),
        __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
          (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        window.noUiSlider = factory()
      }
    })(function() {
      'use strict'
      var VERSION = '9.2.1'
      var document = document
      function addNodeTo(target, className) {
        var div = document.createElement('div')
        addClass(div, className)
        target.appendChild(div)
        return div
      }
      function unique(array) {
        return array.filter(function(a) {
          return !this[a] ? (this[a] = true) : false
        }, {})
      }
      function closest(value, to) {
        return Math.round(value / to) * to
      }
      function offset(elem, orientation) {
        var rect = elem.getBoundingClientRect(),
          doc = elem.ownerDocument,
          docElem = doc.documentElement,
          pageOffset = getPageOffset()
        if (/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)) {
          pageOffset.x = 0
        }
        return orientation
          ? rect.top + pageOffset.y - docElem.clientTop
          : rect.left + pageOffset.x - docElem.clientLeft
      }
      function isNumeric(a) {
        return typeof a === 'number' && !isNaN(a) && isFinite(a)
      }
      function addClassFor(element, className, duration) {
        if (duration > 0) {
          addClass(element, className)
          setTimeout(function() {
            removeClass(element, className)
          }, duration)
        }
      }
      function limit(a) {
        return Math.max(Math.min(a, 100), 0)
      }
      function asArray(a) {
        return Array.isArray(a) ? a : [a]
      }
      function countDecimals(numStr) {
        numStr = String(numStr)
        var pieces = numStr.split('.')
        return pieces.length > 1 ? pieces[1].length : 0
      }
      function addClass(el, className) {
        if (el.classList) {
          el.classList.add(className)
        } else {
          el.className += ' ' + className
        }
      }
      function removeClass(el, className) {
        if (el.classList) {
          el.classList.remove(className)
        } else {
          el.className = el.className.replace(
            new RegExp(
              '(^|\\b)' + className.split(' ').join('|') + '(\\b|$)',
              'gi'
            ),
            ' '
          )
        }
      }
      function hasClass(el, className) {
        return el.classList
          ? el.classList.contains(className)
          : new RegExp('\\b' + className + '\\b').test(el.className)
      }
      function getPageOffset() {
        var supportPageOffset = window.pageXOffset !== undefined,
          isCSS1Compat = (document.compatMode || '') === 'CSS1Compat',
          x = supportPageOffset
            ? window.pageXOffset
            : isCSS1Compat
              ? document.documentElement.scrollLeft
              : document.body.scrollLeft,
          y = supportPageOffset
            ? window.pageYOffset
            : isCSS1Compat
              ? document.documentElement.scrollTop
              : document.body.scrollTop
        return {
          x: x,
          y: y
        }
      }
      function getActions() {
        return window.navigator.pointerEnabled
          ? {
              start: 'pointerdown',
              move: 'pointermove',
              end: 'pointerup'
            }
          : window.navigator.msPointerEnabled
            ? {
                start: 'MSPointerDown',
                move: 'MSPointerMove',
                end: 'MSPointerUp'
              }
            : {
                start: 'mousedown touchstart',
                move: 'mousemove touchmove',
                end: 'mouseup touchend'
              }
      }
      function subRangeRatio(pa, pb) {
        return 100 / (pb - pa)
      }
      function fromPercentage(range, value) {
        return value * 100 / (range[1] - range[0])
      }
      function toPercentage(range, value) {
        return fromPercentage(
          range,
          range[0] < 0 ? value + Math.abs(range[0]) : value - range[0]
        )
      }
      function isPercentage(range, value) {
        return value * (range[1] - range[0]) / 100 + range[0]
      }
      function getJ(value, arr) {
        var j = 1
        while (value >= arr[j]) {
          j += 1
        }
        return j
      }
      function toStepping(xVal, xPct, value) {
        if (value >= xVal.slice(-1)[0]) {
          return 100
        }
        var j = getJ(value, xVal),
          va,
          vb,
          pa,
          pb
        va = xVal[j - 1]
        vb = xVal[j]
        pa = xPct[j - 1]
        pb = xPct[j]
        return pa + toPercentage([va, vb], value) / subRangeRatio(pa, pb)
      }
      function fromStepping(xVal, xPct, value) {
        if (value >= 100) {
          return xVal.slice(-1)[0]
        }
        var j = getJ(value, xPct),
          va,
          vb,
          pa,
          pb
        va = xVal[j - 1]
        vb = xVal[j]
        pa = xPct[j - 1]
        pb = xPct[j]
        return isPercentage([va, vb], (value - pa) * subRangeRatio(pa, pb))
      }
      function getStep(xPct, xSteps, snap, value) {
        if (value === 100) {
          return value
        }
        var j = getJ(value, xPct),
          a,
          b
        if (snap) {
          a = xPct[j - 1]
          b = xPct[j]
          if (value - a > (b - a) / 2) {
            return b
          }
          return a
        }
        if (!xSteps[j - 1]) {
          return value
        }
        return xPct[j - 1] + closest(value - xPct[j - 1], xSteps[j - 1])
      }
      function handleEntryPoint(index, value, that) {
        var percentage
        if (typeof value === 'number') {
          value = [value]
        }
        if (Object.prototype.toString.call(value) !== '[object Array]') {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'range' contains invalid value."
          )
        }
        if (index === 'min') {
          percentage = 0
        } else if (index === 'max') {
          percentage = 100
        } else {
          percentage = parseFloat(index)
        }
        if (!isNumeric(percentage) || !isNumeric(value[0])) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'range' value isn't numeric."
          )
        }
        that.xPct.push(percentage)
        that.xVal.push(value[0])
        if (!percentage) {
          if (!isNaN(value[1])) {
            that.xSteps[0] = value[1]
          }
        } else {
          that.xSteps.push(isNaN(value[1]) ? false : value[1])
        }
        that.xHighestCompleteStep.push(0)
      }
      function handleStepPoint(i, n, that) {
        if (!n) {
          return true
        }
        that.xSteps[i] =
          fromPercentage([that.xVal[i], that.xVal[i + 1]], n) /
          subRangeRatio(that.xPct[i], that.xPct[i + 1])
        var totalSteps = (that.xVal[i + 1] - that.xVal[i]) / that.xNumSteps[i]
        var highestStep = Math.ceil(Number(totalSteps.toFixed(3)) - 1)
        var step = that.xVal[i] + that.xNumSteps[i] * highestStep
        that.xHighestCompleteStep[i] = step
      }
      function Spectrum(entry, snap, direction, singleStep) {
        this.xPct = []
        this.xVal = []
        this.xSteps = [singleStep || false]
        this.xNumSteps = [false]
        this.xHighestCompleteStep = []
        this.snap = snap
        this.direction = direction
        var index,
          ordered = []
        for (index in entry) {
          if (entry.hasOwnProperty(index)) {
            ordered.push([entry[index], index])
          }
        }
        if (ordered.length && typeof ordered[0][0] === 'object') {
          ordered.sort(function(a, b) {
            return a[0][0] - b[0][0]
          })
        } else {
          ordered.sort(function(a, b) {
            return a[0] - b[0]
          })
        }
        for (index = 0; index < ordered.length; index++) {
          handleEntryPoint(ordered[index][1], ordered[index][0], this)
        }
        this.xNumSteps = this.xSteps.slice(0)
        for (index = 0; index < this.xNumSteps.length; index++) {
          handleStepPoint(index, this.xNumSteps[index], this)
        }
      }
      Spectrum.prototype.getMargin = function(value) {
        var step = this.xNumSteps[0]
        if (step && (value / step) % 1 !== 0) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'limit', 'margin' and 'padding' must be divisible by step."
          )
        }
        return this.xPct.length === 2 ? fromPercentage(this.xVal, value) : false
      }
      Spectrum.prototype.toStepping = function(value) {
        value = toStepping(this.xVal, this.xPct, value)
        return value
      }
      Spectrum.prototype.fromStepping = function(value) {
        return fromStepping(this.xVal, this.xPct, value)
      }
      Spectrum.prototype.getStep = function(value) {
        value = getStep(this.xPct, this.xSteps, this.snap, value)
        return value
      }
      Spectrum.prototype.getNearbySteps = function(value) {
        var j = getJ(value, this.xPct)
        return {
          stepBefore: {
            startValue: this.xVal[j - 2],
            step: this.xNumSteps[j - 2],
            highestStep: this.xHighestCompleteStep[j - 2]
          },
          thisStep: {
            startValue: this.xVal[j - 1],
            step: this.xNumSteps[j - 1],
            highestStep: this.xHighestCompleteStep[j - 1]
          },
          stepAfter: {
            startValue: this.xVal[j - 0],
            step: this.xNumSteps[j - 0],
            highestStep: this.xHighestCompleteStep[j - 0]
          }
        }
      }
      Spectrum.prototype.countStepDecimals = function() {
        var stepDecimals = this.xNumSteps.map(countDecimals)
        return Math.max.apply(null, stepDecimals)
      }
      Spectrum.prototype.convert = function(value) {
        return this.getStep(this.toStepping(value))
      }
      var defaultFormatter = {
        to: function(value) {
          return value !== undefined && value.toFixed(2)
        },
        from: Number
      }
      function testStep(parsed, entry) {
        if (!isNumeric(entry)) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'step' is not numeric."
          )
        }
        parsed.singleStep = entry
      }
      function testRange(parsed, entry) {
        if (typeof entry !== 'object' || Array.isArray(entry)) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'range' is not an object."
          )
        }
        if (entry.min === undefined || entry.max === undefined) {
          throw new Error(
            'noUiSlider (' + VERSION + "): Missing 'min' or 'max' in 'range'."
          )
        }
        if (entry.min === entry.max) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'range' 'min' and 'max' cannot be equal."
          )
        }
        parsed.spectrum = new Spectrum(
          entry,
          parsed.snap,
          parsed.dir,
          parsed.singleStep
        )
      }
      function testStart(parsed, entry) {
        entry = asArray(entry)
        if (!Array.isArray(entry) || !entry.length) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'start' option is incorrect."
          )
        }
        parsed.handles = entry.length
        parsed.start = entry
      }
      function testSnap(parsed, entry) {
        parsed.snap = entry
        if (typeof entry !== 'boolean') {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'snap' option must be a boolean."
          )
        }
      }
      function testAnimate(parsed, entry) {
        parsed.animate = entry
        if (typeof entry !== 'boolean') {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'animate' option must be a boolean."
          )
        }
      }
      function testAnimationDuration(parsed, entry) {
        parsed.animationDuration = entry
        if (typeof entry !== 'number') {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'animationDuration' option must be a number."
          )
        }
      }
      function testConnect(parsed, entry) {
        var connect = [false]
        var i
        if (entry === 'lower') {
          entry = [true, false]
        } else if (entry === 'upper') {
          entry = [false, true]
        }
        if (entry === true || entry === false) {
          for (i = 1; i < parsed.handles; i++) {
            connect.push(entry)
          }
          connect.push(false)
        } else if (
          !Array.isArray(entry) ||
          !entry.length ||
          entry.length !== parsed.handles + 1
        ) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'connect' option doesn't match handle count."
          )
        } else {
          connect = entry
        }
        parsed.connect = connect
      }
      function testOrientation(parsed, entry) {
        switch (entry) {
          case 'horizontal':
            parsed.ort = 0
            break

          case 'vertical':
            parsed.ort = 1
            break

          default:
            throw new Error(
              'noUiSlider (' + VERSION + "): 'orientation' option is invalid."
            )
        }
      }
      function testMargin(parsed, entry) {
        if (!isNumeric(entry)) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'margin' option must be numeric."
          )
        }
        if (entry === 0) {
          return
        }
        parsed.margin = parsed.spectrum.getMargin(entry)
        if (!parsed.margin) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'margin' option is only supported on linear sliders."
          )
        }
      }
      function testLimit(parsed, entry) {
        if (!isNumeric(entry)) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'limit' option must be numeric."
          )
        }
        parsed.limit = parsed.spectrum.getMargin(entry)
        if (!parsed.limit || parsed.handles < 2) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'limit' option is only supported on linear sliders with 2 or more handles."
          )
        }
      }
      function testPadding(parsed, entry) {
        if (!isNumeric(entry)) {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'padding' option must be numeric."
          )
        }
        if (entry === 0) {
          return
        }
        parsed.padding = parsed.spectrum.getMargin(entry)
        if (!parsed.padding) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'padding' option is only supported on linear sliders."
          )
        }
        if (parsed.padding < 0) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'padding' option must be a positive number."
          )
        }
        if (parsed.padding >= 50) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'padding' option must be less than half the range."
          )
        }
      }
      function testDirection(parsed, entry) {
        switch (entry) {
          case 'ltr':
            parsed.dir = 0
            break

          case 'rtl':
            parsed.dir = 1
            break

          default:
            throw new Error(
              'noUiSlider (' +
                VERSION +
                "): 'direction' option was not recognized."
            )
        }
      }
      function testBehaviour(parsed, entry) {
        if (typeof entry !== 'string') {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'behaviour' must be a string containing options."
          )
        }
        var tap = entry.indexOf('tap') >= 0
        var drag = entry.indexOf('drag') >= 0
        var fixed = entry.indexOf('fixed') >= 0
        var snap = entry.indexOf('snap') >= 0
        var hover = entry.indexOf('hover') >= 0
        if (fixed) {
          if (parsed.handles !== 2) {
            throw new Error(
              'noUiSlider (' +
                VERSION +
                "): 'fixed' behaviour must be used with 2 handles"
            )
          }
          testMargin(parsed, parsed.start[1] - parsed.start[0])
        }
        parsed.events = {
          tap: tap || snap,
          drag: drag,
          fixed: fixed,
          snap: snap,
          hover: hover
        }
      }
      function testTooltips(parsed, entry) {
        if (entry === false) {
          return
        } else if (entry === true) {
          parsed.tooltips = []
          for (var i = 0; i < parsed.handles; i++) {
            parsed.tooltips.push(true)
          }
        } else {
          parsed.tooltips = asArray(entry)
          if (parsed.tooltips.length !== parsed.handles) {
            throw new Error(
              'noUiSlider (' +
                VERSION +
                '): must pass a formatter for all handles.'
            )
          }
          parsed.tooltips.forEach(function(formatter) {
            if (
              typeof formatter !== 'boolean' &&
              (typeof formatter !== 'object' ||
                typeof formatter.to !== 'function')
            ) {
              throw new Error(
                'noUiSlider (' +
                  VERSION +
                  "): 'tooltips' must be passed a formatter or 'false'."
              )
            }
          })
        }
      }
      function testFormat(parsed, entry) {
        parsed.format = entry
        if (
          typeof entry.to === 'function' &&
          typeof entry.from === 'function'
        ) {
          return true
        }
        throw new Error(
          'noUiSlider (' +
            VERSION +
            "): 'format' requires 'to' and 'from' methods."
        )
      }
      function testCssPrefix(parsed, entry) {
        if (
          entry !== undefined &&
          typeof entry !== 'string' &&
          entry !== false
        ) {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'cssPrefix' must be a string or `false`."
          )
        }
        parsed.cssPrefix = entry
      }
      function testCssClasses(parsed, entry) {
        if (entry !== undefined && typeof entry !== 'object') {
          throw new Error(
            'noUiSlider (' + VERSION + "): 'cssClasses' must be an object."
          )
        }
        if (typeof parsed.cssPrefix === 'string') {
          parsed.cssClasses = {}
          for (var key in entry) {
            if (!entry.hasOwnProperty(key)) {
              continue
            }
            parsed.cssClasses[key] = parsed.cssPrefix + entry[key]
          }
        } else {
          parsed.cssClasses = entry
        }
      }
      function testUseRaf(parsed, entry) {
        if (entry === true || entry === false) {
          parsed.useRequestAnimationFrame = entry
        } else {
          throw new Error(
            'noUiSlider (' +
              VERSION +
              "): 'useRequestAnimationFrame' option should be true (default) or false."
          )
        }
      }
      function testOptions(options) {
        var parsed = {
          margin: 0,
          limit: 0,
          padding: 0,
          animate: true,
          animationDuration: 300,
          format: defaultFormatter
        }
        var tests = {
          step: {
            r: false,
            t: testStep
          },
          start: {
            r: true,
            t: testStart
          },
          connect: {
            r: true,
            t: testConnect
          },
          direction: {
            r: true,
            t: testDirection
          },
          snap: {
            r: false,
            t: testSnap
          },
          animate: {
            r: false,
            t: testAnimate
          },
          animationDuration: {
            r: false,
            t: testAnimationDuration
          },
          range: {
            r: true,
            t: testRange
          },
          orientation: {
            r: false,
            t: testOrientation
          },
          margin: {
            r: false,
            t: testMargin
          },
          limit: {
            r: false,
            t: testLimit
          },
          padding: {
            r: false,
            t: testPadding
          },
          behaviour: {
            r: true,
            t: testBehaviour
          },
          format: {
            r: false,
            t: testFormat
          },
          tooltips: {
            r: false,
            t: testTooltips
          },
          cssPrefix: {
            r: false,
            t: testCssPrefix
          },
          cssClasses: {
            r: false,
            t: testCssClasses
          },
          useRequestAnimationFrame: {
            r: false,
            t: testUseRaf
          }
        }
        var defaults = {
          connect: false,
          direction: 'ltr',
          behaviour: 'tap',
          orientation: 'horizontal',
          cssPrefix: 'noUi-',
          cssClasses: {
            target: 'target',
            base: 'base',
            origin: 'origin',
            handle: 'handle',
            handleLower: 'handle-lower',
            handleUpper: 'handle-upper',
            horizontal: 'horizontal',
            vertical: 'vertical',
            background: 'background',
            connect: 'connect',
            ltr: 'ltr',
            rtl: 'rtl',
            draggable: 'draggable',
            drag: 'state-drag',
            tap: 'state-tap',
            active: 'active',
            tooltip: 'tooltip',
            pips: 'pips',
            pipsHorizontal: 'pips-horizontal',
            pipsVertical: 'pips-vertical',
            marker: 'marker',
            markerHorizontal: 'marker-horizontal',
            markerVertical: 'marker-vertical',
            markerNormal: 'marker-normal',
            markerLarge: 'marker-large',
            markerSub: 'marker-sub',
            value: 'value',
            valueHorizontal: 'value-horizontal',
            valueVertical: 'value-vertical',
            valueNormal: 'value-normal',
            valueLarge: 'value-large',
            valueSub: 'value-sub'
          },
          useRequestAnimationFrame: true
        }
        Object.keys(tests).forEach(function(name) {
          if (options[name] === undefined && defaults[name] === undefined) {
            if (tests[name].r) {
              throw new Error(
                'noUiSlider (' + VERSION + "): '" + name + "' is required."
              )
            }
            return true
          }
          tests[name].t(
            parsed,
            options[name] === undefined ? defaults[name] : options[name]
          )
        })
        parsed.pips = options.pips
        var styles = [['left', 'top'], ['right', 'bottom']]
        parsed.style = styles[parsed.dir][parsed.ort]
        parsed.styleOposite = styles[parsed.dir ? 0 : 1][parsed.ort]
        return parsed
      }
      function closure(target, options, originalOptions) {
        var actions = getActions()
        var scope_Target = target
        var scope_Locations = []
        var scope_Base
        var scope_Handles
        var scope_HandleNumbers = []
        var scope_ActiveHandle = false
        var scope_Connects
        var scope_Spectrum = options.spectrum
        var scope_Values = []
        var scope_Events = {}
        var scope_Self
        function addOrigin(base, handleNumber) {
          var origin = addNodeTo(base, options.cssClasses.origin)
          var handle = addNodeTo(origin, options.cssClasses.handle)
          handle.setAttribute('data-handle', handleNumber)
          if (handleNumber === 0) {
            addClass(handle, options.cssClasses.handleLower)
          } else if (handleNumber === options.handles - 1) {
            addClass(handle, options.cssClasses.handleUpper)
          }
          return origin
        }
        function addConnect(base, add) {
          if (!add) {
            return false
          }
          return addNodeTo(base, options.cssClasses.connect)
        }
        function addElements(connectOptions, base) {
          scope_Handles = []
          scope_Connects = []
          scope_Connects.push(addConnect(base, connectOptions[0]))
          for (var i = 0; i < options.handles; i++) {
            scope_Handles.push(addOrigin(base, i))
            scope_HandleNumbers[i] = i
            scope_Connects.push(addConnect(base, connectOptions[i + 1]))
          }
        }
        function addSlider(target) {
          addClass(target, options.cssClasses.target)
          if (options.dir === 0) {
            addClass(target, options.cssClasses.ltr)
          } else {
            addClass(target, options.cssClasses.rtl)
          }
          if (options.ort === 0) {
            addClass(target, options.cssClasses.horizontal)
          } else {
            addClass(target, options.cssClasses.vertical)
          }
          scope_Base = addNodeTo(target, options.cssClasses.base)
        }
        function addTooltip(handle, handleNumber) {
          if (!options.tooltips[handleNumber]) {
            return false
          }
          return addNodeTo(handle.firstChild, options.cssClasses.tooltip)
        }
        function tooltips() {
          var tips = scope_Handles.map(addTooltip)
          bindEvent('update', function(values, handleNumber, unencoded) {
            if (!tips[handleNumber]) {
              return
            }
            var formattedValue = values[handleNumber]
            if (options.tooltips[handleNumber] !== true) {
              formattedValue = options.tooltips[handleNumber].to(
                unencoded[handleNumber]
              )
            }
            tips[handleNumber].innerHTML = formattedValue
          })
        }
        function getGroup(mode, values, stepped) {
          if (mode === 'range' || mode === 'steps') {
            return scope_Spectrum.xVal
          }
          if (mode === 'count') {
            if (!values) {
              throw new Error(
                'noUiSlider (' +
                  VERSION +
                  "): 'values' required for mode 'count'."
              )
            }
            var spread = 100 / (values - 1)
            var v
            var i = 0
            values = []
            while ((v = i++ * spread) <= 100) {
              values.push(v)
            }
            mode = 'positions'
          }
          if (mode === 'positions') {
            return values.map(function(value) {
              return scope_Spectrum.fromStepping(
                stepped ? scope_Spectrum.getStep(value) : value
              )
            })
          }
          if (mode === 'values') {
            if (stepped) {
              return values.map(function(value) {
                return scope_Spectrum.fromStepping(
                  scope_Spectrum.getStep(scope_Spectrum.toStepping(value))
                )
              })
            }
            return values
          }
        }
        function generateSpread(density, mode, group) {
          function safeIncrement(value, increment) {
            return (value + increment).toFixed(7) / 1
          }
          var indexes = {}
          var firstInRange = scope_Spectrum.xVal[0]
          var lastInRange = scope_Spectrum.xVal[scope_Spectrum.xVal.length - 1]
          var ignoreFirst = false
          var ignoreLast = false
          var prevPct = 0
          group = unique(
            group.slice().sort(function(a, b) {
              return a - b
            })
          )
          if (group[0] !== firstInRange) {
            group.unshift(firstInRange)
            ignoreFirst = true
          }
          if (group[group.length - 1] !== lastInRange) {
            group.push(lastInRange)
            ignoreLast = true
          }
          group.forEach(function(current, index) {
            var step
            var i
            var q
            var low = current
            var high = group[index + 1]
            var newPct
            var pctDifference
            var pctPos
            var type
            var steps
            var realSteps
            var stepsize
            if (mode === 'steps') {
              step = scope_Spectrum.xNumSteps[index]
            }
            if (!step) {
              step = high - low
            }
            if (low === false || high === undefined) {
              return
            }
            step = Math.max(step, 1e-7)
            for (i = low; i <= high; i = safeIncrement(i, step)) {
              newPct = scope_Spectrum.toStepping(i)
              pctDifference = newPct - prevPct
              steps = pctDifference / density
              realSteps = Math.round(steps)
              stepsize = pctDifference / realSteps
              for (q = 1; q <= realSteps; q += 1) {
                pctPos = prevPct + q * stepsize
                indexes[pctPos.toFixed(5)] = ['x', 0]
              }
              type = group.indexOf(i) > -1 ? 1 : mode === 'steps' ? 2 : 0
              if (!index && ignoreFirst) {
                type = 0
              }
              if (!(i === high && ignoreLast)) {
                indexes[newPct.toFixed(5)] = [i, type]
              }
              prevPct = newPct
            }
          })
          return indexes
        }
        function addMarking(spread, filterFunc, formatter) {
          var element = document.createElement('div')
          var out = ''
          var valueSizeClasses = [
            options.cssClasses.valueNormal,
            options.cssClasses.valueLarge,
            options.cssClasses.valueSub
          ]
          var markerSizeClasses = [
            options.cssClasses.markerNormal,
            options.cssClasses.markerLarge,
            options.cssClasses.markerSub
          ]
          var valueOrientationClasses = [
            options.cssClasses.valueHorizontal,
            options.cssClasses.valueVertical
          ]
          var markerOrientationClasses = [
            options.cssClasses.markerHorizontal,
            options.cssClasses.markerVertical
          ]
          addClass(element, options.cssClasses.pips)
          addClass(
            element,
            options.ort === 0
              ? options.cssClasses.pipsHorizontal
              : options.cssClasses.pipsVertical
          )
          function getClasses(type, source) {
            var a = source === options.cssClasses.value
            var orientationClasses = a
              ? valueOrientationClasses
              : markerOrientationClasses
            var sizeClasses = a ? valueSizeClasses : markerSizeClasses
            return (
              source +
              ' ' +
              orientationClasses[options.ort] +
              ' ' +
              sizeClasses[type]
            )
          }
          function getTags(offset, source, values) {
            return (
              'class="' +
              getClasses(values[1], source) +
              '" style="' +
              options.style +
              ': ' +
              offset +
              '%"'
            )
          }
          function addSpread(offset, values) {
            values[1] =
              values[1] && filterFunc
                ? filterFunc(values[0], values[1])
                : values[1]
            out +=
              '<div ' +
              getTags(offset, options.cssClasses.marker, values) +
              '></div>'
            if (values[1]) {
              out +=
                '<div ' +
                getTags(offset, options.cssClasses.value, values) +
                '>' +
                formatter.to(values[0]) +
                '</div>'
            }
          }
          Object.keys(spread).forEach(function(a) {
            addSpread(a, spread[a])
          })
          element.innerHTML = out
          return element
        }
        function pips(grid) {
          var mode = grid.mode
          var density = grid.density || 1
          var filter = grid.filter || false
          var values = grid.values || false
          var stepped = grid.stepped || false
          var group = getGroup(mode, values, stepped)
          var spread = generateSpread(density, mode, group)
          var format = grid.format || {
            to: Math.round
          }
          return scope_Target.appendChild(addMarking(spread, filter, format))
        }
        function baseSize() {
          var rect = scope_Base.getBoundingClientRect(),
            alt = 'offset' + ['Width', 'Height'][options.ort]
          return options.ort === 0
            ? rect.width || scope_Base[alt]
            : rect.height || scope_Base[alt]
        }
        function attachEvent(events, element, callback, data) {
          var method = function(e) {
            if (scope_Target.hasAttribute('disabled')) {
              return false
            }
            if (hasClass(scope_Target, options.cssClasses.tap)) {
              return false
            }
            e = fixEvent(e, data.pageOffset)
            if (!e) {
              return false
            }
            if (
              events === actions.start &&
              e.buttons !== undefined &&
              e.buttons > 1
            ) {
              return false
            }
            if (data.hover && e.buttons) {
              return false
            }
            e.calcPoint = e.points[options.ort]
            callback(e, data)
          }
          var methods = []
          events.split(' ').forEach(function(eventName) {
            element.addEventListener(eventName, method, false)
            methods.push([eventName, method])
          })
          return methods
        }
        function fixEvent(e, pageOffset) {
          e.preventDefault()
          var touch = e.type.indexOf('touch') === 0
          var mouse = e.type.indexOf('mouse') === 0
          var pointer = e.type.indexOf('pointer') === 0
          var x
          var y
          if (e.type.indexOf('MSPointer') === 0) {
            pointer = true
          }
          if (touch) {
            if (e.touches.length > 1) {
              return false
            }
            x = e.changedTouches[0].pageX
            y = e.changedTouches[0].pageY
          }
          pageOffset = pageOffset || getPageOffset()
          if (mouse || pointer) {
            x = e.clientX + pageOffset.x
            y = e.clientY + pageOffset.y
          }
          e.pageOffset = pageOffset
          e.points = [x, y]
          e.cursor = mouse || pointer
          return e
        }
        function calcPointToPercentage(calcPoint) {
          var location = calcPoint - offset(scope_Base, options.ort)
          var proposal = location * 100 / baseSize()
          return options.dir ? 100 - proposal : proposal
        }
        function getClosestHandle(proposal) {
          var closest = 100
          var handleNumber = false
          scope_Handles.forEach(function(handle, index) {
            if (handle.hasAttribute('disabled')) {
              return
            }
            var pos = Math.abs(scope_Locations[index] - proposal)
            if (pos < closest) {
              handleNumber = index
              closest = pos
            }
          })
          return handleNumber
        }
        function moveHandles(upward, proposal, locations, handleNumbers) {
          var proposals = locations.slice()
          var b = [!upward, upward]
          var f = [upward, !upward]
          handleNumbers = handleNumbers.slice()
          if (upward) {
            handleNumbers.reverse()
          }
          if (handleNumbers.length > 1) {
            handleNumbers.forEach(function(handleNumber, o) {
              var to = checkHandlePosition(
                proposals,
                handleNumber,
                proposals[handleNumber] + proposal,
                b[o],
                f[o]
              )
              if (to === false) {
                proposal = 0
              } else {
                proposal = to - proposals[handleNumber]
                proposals[handleNumber] = to
              }
            })
          } else {
            b = f = [true]
          }
          var state = false
          handleNumbers.forEach(function(handleNumber, o) {
            state =
              setHandle(
                handleNumber,
                locations[handleNumber] + proposal,
                b[o],
                f[o]
              ) || state
          })
          if (state) {
            handleNumbers.forEach(function(handleNumber) {
              fireEvent('update', handleNumber)
              fireEvent('slide', handleNumber)
            })
          }
        }
        function fireEvent(eventName, handleNumber, tap) {
          Object.keys(scope_Events).forEach(function(targetEvent) {
            var eventType = targetEvent.split('.')[0]
            if (eventName === eventType) {
              scope_Events[targetEvent].forEach(function(callback) {
                callback.call(
                  scope_Self,
                  scope_Values.map(options.format.to),
                  handleNumber,
                  scope_Values.slice(),
                  tap || false,
                  scope_Locations.slice()
                )
              })
            }
          })
        }
        function documentLeave(event, data) {
          if (
            event.type === 'mouseout' &&
            event.target.nodeName === 'HTML' &&
            event.relatedTarget === null
          ) {
            eventEnd(event, data)
          }
        }
        function eventMove(event, data) {
          if (
            navigator.appVersion.indexOf('MSIE 9') === -1 &&
            event.buttons === 0 &&
            data.buttonsProperty !== 0
          ) {
            return eventEnd(event, data)
          }
          var movement =
            (options.dir ? -1 : 1) * (event.calcPoint - data.startCalcPoint)
          var proposal = movement * 100 / data.baseSize
          moveHandles(
            movement > 0,
            proposal,
            data.locations,
            data.handleNumbers
          )
        }
        function eventEnd(event, data) {
          if (scope_ActiveHandle) {
            removeClass(scope_ActiveHandle, options.cssClasses.active)
            scope_ActiveHandle = false
          }
          if (event.cursor) {
            document.body.style.cursor = ''
            document.body.removeEventListener(
              'selectstart',
              document.body.noUiListener
            )
          }
          document.documentElement.noUiListeners.forEach(function(c) {
            document.documentElement.removeEventListener(c[0], c[1])
          })
          removeClass(scope_Target, options.cssClasses.drag)
          setZindex()
          data.handleNumbers.forEach(function(handleNumber) {
            fireEvent('set', handleNumber)
            fireEvent('change', handleNumber)
            fireEvent('end', handleNumber)
          })
        }
        function eventStart(event, data) {
          if (data.handleNumbers.length === 1) {
            var handle = scope_Handles[data.handleNumbers[0]]
            if (handle.hasAttribute('disabled')) {
              return false
            }
            scope_ActiveHandle = handle.children[0]
            addClass(scope_ActiveHandle, options.cssClasses.active)
          }
          event.preventDefault()
          event.stopPropagation()
          var moveEvent = attachEvent(
            actions.move,
            document.documentElement,
            eventMove,
            {
              startCalcPoint: event.calcPoint,
              baseSize: baseSize(),
              pageOffset: event.pageOffset,
              handleNumbers: data.handleNumbers,
              buttonsProperty: event.buttons,
              locations: scope_Locations.slice()
            }
          )
          var endEvent = attachEvent(
            actions.end,
            document.documentElement,
            eventEnd,
            {
              handleNumbers: data.handleNumbers
            }
          )
          var outEvent = attachEvent(
            'mouseout',
            document.documentElement,
            documentLeave,
            {
              handleNumbers: data.handleNumbers
            }
          )
          document.documentElement.noUiListeners = moveEvent.concat(
            endEvent,
            outEvent
          )
          if (event.cursor) {
            document.body.style.cursor = getComputedStyle(event.target).cursor
            if (scope_Handles.length > 1) {
              addClass(scope_Target, options.cssClasses.drag)
            }
            var f = function() {
              return false
            }
            document.body.noUiListener = f
            document.body.addEventListener('selectstart', f, false)
          }
          data.handleNumbers.forEach(function(handleNumber) {
            fireEvent('start', handleNumber)
          })
        }
        function eventTap(event) {
          event.stopPropagation()
          var proposal = calcPointToPercentage(event.calcPoint)
          var handleNumber = getClosestHandle(proposal)
          if (handleNumber === false) {
            return false
          }
          if (!options.events.snap) {
            addClassFor(
              scope_Target,
              options.cssClasses.tap,
              options.animationDuration
            )
          }
          setHandle(handleNumber, proposal, true, true)
          setZindex()
          fireEvent('slide', handleNumber, true)
          fireEvent('set', handleNumber, true)
          fireEvent('change', handleNumber, true)
          fireEvent('update', handleNumber, true)
          if (options.events.snap) {
            eventStart(event, {
              handleNumbers: [handleNumber]
            })
          }
        }
        function eventHover(event) {
          var proposal = calcPointToPercentage(event.calcPoint)
          var to = scope_Spectrum.getStep(proposal)
          var value = scope_Spectrum.fromStepping(to)
          Object.keys(scope_Events).forEach(function(targetEvent) {
            if ('hover' === targetEvent.split('.')[0]) {
              scope_Events[targetEvent].forEach(function(callback) {
                callback.call(scope_Self, value)
              })
            }
          })
        }
        function bindSliderEvents(behaviour) {
          if (!behaviour.fixed) {
            scope_Handles.forEach(function(handle, index) {
              attachEvent(actions.start, handle.children[0], eventStart, {
                handleNumbers: [index]
              })
            })
          }
          if (behaviour.tap) {
            attachEvent(actions.start, scope_Base, eventTap, {})
          }
          if (behaviour.hover) {
            attachEvent(actions.move, scope_Base, eventHover, {
              hover: true
            })
          }
          if (behaviour.drag) {
            scope_Connects.forEach(function(connect, index) {
              if (
                connect === false ||
                index === 0 ||
                index === scope_Connects.length - 1
              ) {
                return
              }
              var handleBefore = scope_Handles[index - 1]
              var handleAfter = scope_Handles[index]
              var eventHolders = [connect]
              addClass(connect, options.cssClasses.draggable)
              if (behaviour.fixed) {
                eventHolders.push(handleBefore.children[0])
                eventHolders.push(handleAfter.children[0])
              }
              eventHolders.forEach(function(eventHolder) {
                attachEvent(actions.start, eventHolder, eventStart, {
                  handles: [handleBefore, handleAfter],
                  handleNumbers: [index - 1, index]
                })
              })
            })
          }
        }
        function checkHandlePosition(
          reference,
          handleNumber,
          to,
          lookBackward,
          lookForward
        ) {
          if (scope_Handles.length > 1) {
            if (lookBackward && handleNumber > 0) {
              to = Math.max(to, reference[handleNumber - 1] + options.margin)
            }
            if (lookForward && handleNumber < scope_Handles.length - 1) {
              to = Math.min(to, reference[handleNumber + 1] - options.margin)
            }
          }
          if (scope_Handles.length > 1 && options.limit) {
            if (lookBackward && handleNumber > 0) {
              to = Math.min(to, reference[handleNumber - 1] + options.limit)
            }
            if (lookForward && handleNumber < scope_Handles.length - 1) {
              to = Math.max(to, reference[handleNumber + 1] - options.limit)
            }
          }
          if (options.padding) {
            if (handleNumber === 0) {
              to = Math.max(to, options.padding)
            }
            if (handleNumber === scope_Handles.length - 1) {
              to = Math.min(to, 100 - options.padding)
            }
          }
          to = scope_Spectrum.getStep(to)
          to = limit(to)
          if (to === reference[handleNumber]) {
            return false
          }
          return to
        }
        function toPct(pct) {
          return pct + '%'
        }
        function updateHandlePosition(handleNumber, to) {
          scope_Locations[handleNumber] = to
          scope_Values[handleNumber] = scope_Spectrum.fromStepping(to)
          var stateUpdate = function() {
            scope_Handles[handleNumber].style[options.style] = toPct(to)
            updateConnect(handleNumber)
            updateConnect(handleNumber + 1)
          }
          if (
            window.requestAnimationFrame &&
            options.useRequestAnimationFrame
          ) {
            window.requestAnimationFrame(stateUpdate)
          } else {
            stateUpdate()
          }
        }
        function setZindex() {
          scope_HandleNumbers.forEach(function(handleNumber) {
            var dir = scope_Locations[handleNumber] > 50 ? -1 : 1
            var zIndex = 3 + (scope_Handles.length + dir * handleNumber)
            scope_Handles[handleNumber].childNodes[0].style.zIndex = zIndex
          })
        }
        function setHandle(handleNumber, to, lookBackward, lookForward) {
          to = checkHandlePosition(
            scope_Locations,
            handleNumber,
            to,
            lookBackward,
            lookForward
          )
          if (to === false) {
            return false
          }
          updateHandlePosition(handleNumber, to)
          return true
        }
        function updateConnect(index) {
          if (!scope_Connects[index]) {
            return
          }
          var l = 0
          var h = 100
          if (index !== 0) {
            l = scope_Locations[index - 1]
          }
          if (index !== scope_Connects.length - 1) {
            h = scope_Locations[index]
          }
          scope_Connects[index].style[options.style] = toPct(l)
          scope_Connects[index].style[options.styleOposite] = toPct(100 - h)
        }
        function setValue(to, handleNumber) {
          if (to === null || to === false) {
            return
          }
          if (typeof to === 'number') {
            to = String(to)
          }
          to = options.format.from(to)
          if (to !== false && !isNaN(to)) {
            setHandle(handleNumber, scope_Spectrum.toStepping(to), false, false)
          }
        }
        function valueSet(input, fireSetEvent) {
          var values = asArray(input)
          var isInit = scope_Locations[0] === undefined
          fireSetEvent = fireSetEvent === undefined ? true : !!fireSetEvent
          values.forEach(setValue)
          if (options.animate && !isInit) {
            addClassFor(
              scope_Target,
              options.cssClasses.tap,
              options.animationDuration
            )
          }
          scope_HandleNumbers.forEach(function(handleNumber) {
            setHandle(handleNumber, scope_Locations[handleNumber], true, false)
          })
          setZindex()
          scope_HandleNumbers.forEach(function(handleNumber) {
            fireEvent('update', handleNumber)
            if (values[handleNumber] !== null && fireSetEvent) {
              fireEvent('set', handleNumber)
            }
          })
        }
        function valueReset(fireSetEvent) {
          valueSet(options.start, fireSetEvent)
        }
        function valueGet() {
          var values = scope_Values.map(options.format.to)
          if (values.length === 1) {
            return values[0]
          }
          return values
        }
        function destroy() {
          for (var key in options.cssClasses) {
            if (!options.cssClasses.hasOwnProperty(key)) {
              continue
            }
            removeClass(scope_Target, options.cssClasses[key])
          }
          while (scope_Target.firstChild) {
            scope_Target.removeChild(scope_Target.firstChild)
          }
          delete scope_Target.noUiSlider
        }
        function getCurrentStep() {
          return scope_Locations.map(function(location, index) {
            var nearbySteps = scope_Spectrum.getNearbySteps(location)
            var value = scope_Values[index]
            var increment = nearbySteps.thisStep.step
            var decrement = null
            if (increment !== false) {
              if (value + increment > nearbySteps.stepAfter.startValue) {
                increment = nearbySteps.stepAfter.startValue - value
              }
            }
            if (value > nearbySteps.thisStep.startValue) {
              decrement = nearbySteps.thisStep.step
            } else if (nearbySteps.stepBefore.step === false) {
              decrement = false
            } else {
              decrement = value - nearbySteps.stepBefore.highestStep
            }
            if (location === 100) {
              increment = null
            } else if (location === 0) {
              decrement = null
            }
            var stepDecimals = scope_Spectrum.countStepDecimals()
            if (increment !== null && increment !== false) {
              increment = Number(increment.toFixed(stepDecimals))
            }
            if (decrement !== null && decrement !== false) {
              decrement = Number(decrement.toFixed(stepDecimals))
            }
            return [decrement, increment]
          })
        }
        function bindEvent(namespacedEvent, callback) {
          scope_Events[namespacedEvent] = scope_Events[namespacedEvent] || []
          scope_Events[namespacedEvent].push(callback)
          if (namespacedEvent.split('.')[0] === 'update') {
            scope_Handles.forEach(function(a, index) {
              fireEvent('update', index)
            })
          }
        }
        function removeEvent(namespacedEvent) {
          var event = namespacedEvent && namespacedEvent.split('.')[0]
          var namespace = event && namespacedEvent.substring(event.length)
          Object.keys(scope_Events).forEach(function(bind) {
            var tEvent = bind.split('.')[0],
              tNamespace = bind.substring(tEvent.length)
            if (
              (!event || event === tEvent) &&
              (!namespace || namespace === tNamespace)
            ) {
              delete scope_Events[bind]
            }
          })
        }
        function updateOptions(optionsToUpdate, fireSetEvent) {
          var v = valueGet()
          var updateAble = [
            'margin',
            'limit',
            'padding',
            'range',
            'animate',
            'snap',
            'step',
            'format'
          ]
          updateAble.forEach(function(name) {
            if (optionsToUpdate[name] !== undefined) {
              originalOptions[name] = optionsToUpdate[name]
            }
          })
          var newOptions = testOptions(originalOptions)
          updateAble.forEach(function(name) {
            if (optionsToUpdate[name] !== undefined) {
              options[name] = newOptions[name]
            }
          })
          newOptions.spectrum.direction = scope_Spectrum.direction
          scope_Spectrum = newOptions.spectrum
          options.margin = newOptions.margin
          options.limit = newOptions.limit
          options.padding = newOptions.padding
          scope_Locations = []
          valueSet(optionsToUpdate.start || v, fireSetEvent)
        }
        if (scope_Target.noUiSlider) {
          throw new Error(
            'noUiSlider (' + VERSION + '): Slider was already initialized.'
          )
        }
        addSlider(scope_Target)
        addElements(options.connect, scope_Base)
        scope_Self = {
          destroy: destroy,
          steps: getCurrentStep,
          on: bindEvent,
          off: removeEvent,
          get: valueGet,
          set: valueSet,
          reset: valueReset,
          __moveHandles: function(a, b, c) {
            moveHandles(a, b, scope_Locations, c)
          },
          options: originalOptions,
          updateOptions: updateOptions,
          target: scope_Target,
          pips: pips
        }
        bindSliderEvents(options.events)
        valueSet(options.start)
        if (options.pips) {
          pips(options.pips)
        }
        if (options.tooltips) {
          tooltips()
        }
        return scope_Self
      }
      function initialize(target, originalOptions) {
        document = target.ownerDocument
        if (!target.nodeName) {
          throw new Error(
            'noUiSlider (' + VERSION + '): create requires a single element.'
          )
        }
        var options = testOptions(originalOptions, target)
        var api = closure(target, options, originalOptions)
        target.noUiSlider = api
        return api
      }
      return {
        version: VERSION,
        create: initialize
      }
    })
  },
  function(module, exports) {
    var toString = {}.toString
    module.exports =
      Array.isArray ||
      function(arr) {
        return toString.call(arr) == '[object Array]'
      }
  },
  function(module, exports, __webpack_require__) {
    var Tokenizer = __webpack_require__(29)
    var formTags = {
      input: true,
      option: true,
      optgroup: true,
      select: true,
      button: true,
      datalist: true,
      textarea: true
    }
    var openImpliesClose = {
      tr: {
        tr: true,
        th: true,
        td: true
      },
      th: {
        th: true
      },
      td: {
        thead: true,
        td: true
      },
      body: {
        head: true,
        link: true,
        script: true
      },
      li: {
        li: true
      },
      p: {
        p: true
      },
      select: formTags,
      input: formTags,
      output: formTags,
      button: formTags,
      datalist: formTags,
      textarea: formTags,
      option: {
        option: true
      },
      optgroup: {
        optgroup: true
      }
    }
    var voidElements = {
      __proto__: null,
      area: true,
      base: true,
      basefont: true,
      br: true,
      col: true,
      command: true,
      embed: true,
      frame: true,
      hr: true,
      img: true,
      input: true,
      isindex: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true,
      path: true,
      circle: true,
      ellipse: true,
      line: true,
      rect: true,
      use: true
    }
    var re_nameEnd = /\s|\//
    function Parser(cbs, options) {
      this._options = options || {}
      this._cbs = cbs || {}
      this._tagname = ''
      this._attribname = ''
      this._attribvalue = ''
      this._attribs = null
      this._stack = []
      this.startIndex = 0
      this.endIndex = null
      this._lowerCaseTagNames =
        'lowerCaseTags' in this._options
          ? !!this._options.lowerCaseTags
          : !this._options.xmlMode
      this._lowerCaseAttributeNames =
        'lowerCaseAttributeNames' in this._options
          ? !!this._options.lowerCaseAttributeNames
          : !this._options.xmlMode
      this._tokenizer = new Tokenizer(this._options, this)
    }
    __webpack_require__(16).inherits(
      Parser,
      __webpack_require__(11).EventEmitter
    )
    Parser.prototype._updatePosition = function(initialOffset) {
      if (this.endIndex === null) {
        if (this._tokenizer._sectionStart <= initialOffset) {
          this.startIndex = 0
        } else {
          this.startIndex = this._tokenizer._sectionStart - initialOffset
        }
      } else this.startIndex = this.endIndex + 1
      this.endIndex = this._tokenizer._index
    }
    Parser.prototype.ontext = function(data) {
      this._updatePosition(1)
      this.endIndex--
      if (this._cbs.ontext) this._cbs.ontext(data)
    }
    Parser.prototype.onopentagname = function(name) {
      if (this._lowerCaseTagNames) {
        name = name.toLowerCase()
      }
      this._tagname = name
      if (!this._options.xmlMode && name in openImpliesClose) {
        for (
          var el;
          (el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
          this.onclosetag(el)
        );
      }
      if (this._options.xmlMode || !(name in voidElements)) {
        this._stack.push(name)
      }
      if (this._cbs.onopentagname) this._cbs.onopentagname(name)
      if (this._cbs.onopentag) this._attribs = {}
    }
    Parser.prototype.onopentagend = function() {
      this._updatePosition(1)
      if (this._attribs) {
        if (this._cbs.onopentag)
          this._cbs.onopentag(this._tagname, this._attribs)
        this._attribs = null
      }
      if (
        !this._options.xmlMode &&
        this._cbs.onclosetag &&
        this._tagname in voidElements
      ) {
        this._cbs.onclosetag(this._tagname)
      }
      this._tagname = ''
    }
    Parser.prototype.onclosetag = function(name) {
      this._updatePosition(1)
      if (this._lowerCaseTagNames) {
        name = name.toLowerCase()
      }
      if (
        this._stack.length &&
        (!(name in voidElements) || this._options.xmlMode)
      ) {
        var pos = this._stack.lastIndexOf(name)
        if (pos !== -1) {
          if (this._cbs.onclosetag) {
            pos = this._stack.length - pos
            while (pos--) this._cbs.onclosetag(this._stack.pop())
          } else this._stack.length = pos
        } else if (name === 'p' && !this._options.xmlMode) {
          this.onopentagname(name)
          this._closeCurrentTag()
        }
      } else if (!this._options.xmlMode && (name === 'br' || name === 'p')) {
        this.onopentagname(name)
        this._closeCurrentTag()
      }
    }
    Parser.prototype.onselfclosingtag = function() {
      if (this._options.xmlMode || this._options.recognizeSelfClosing) {
        this._closeCurrentTag()
      } else {
        this.onopentagend()
      }
    }
    Parser.prototype._closeCurrentTag = function() {
      var name = this._tagname
      this.onopentagend()
      if (this._stack[this._stack.length - 1] === name) {
        if (this._cbs.onclosetag) {
          this._cbs.onclosetag(name)
        }
        this._stack.pop()
      }
    }
    Parser.prototype.onattribname = function(name) {
      if (this._lowerCaseAttributeNames) {
        name = name.toLowerCase()
      }
      this._attribname = name
    }
    Parser.prototype.onattribdata = function(value) {
      this._attribvalue += value
    }
    Parser.prototype.onattribend = function() {
      if (this._cbs.onattribute)
        this._cbs.onattribute(this._attribname, this._attribvalue)
      if (
        this._attribs &&
        !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
      ) {
        this._attribs[this._attribname] = this._attribvalue
      }
      this._attribname = ''
      this._attribvalue = ''
    }
    Parser.prototype._getInstructionName = function(value) {
      var idx = value.search(re_nameEnd),
        name = idx < 0 ? value : value.substr(0, idx)
      if (this._lowerCaseTagNames) {
        name = name.toLowerCase()
      }
      return name
    }
    Parser.prototype.ondeclaration = function(value) {
      if (this._cbs.onprocessinginstruction) {
        var name = this._getInstructionName(value)
        this._cbs.onprocessinginstruction('!' + name, '!' + value)
      }
    }
    Parser.prototype.onprocessinginstruction = function(value) {
      if (this._cbs.onprocessinginstruction) {
        var name = this._getInstructionName(value)
        this._cbs.onprocessinginstruction('?' + name, '?' + value)
      }
    }
    Parser.prototype.oncomment = function(value) {
      this._updatePosition(4)
      if (this._cbs.oncomment) this._cbs.oncomment(value)
      if (this._cbs.oncommentend) this._cbs.oncommentend()
    }
    Parser.prototype.oncdata = function(value) {
      this._updatePosition(1)
      if (this._options.xmlMode || this._options.recognizeCDATA) {
        if (this._cbs.oncdatastart) this._cbs.oncdatastart()
        if (this._cbs.ontext) this._cbs.ontext(value)
        if (this._cbs.oncdataend) this._cbs.oncdataend()
      } else {
        this.oncomment('[CDATA[' + value + ']]')
      }
    }
    Parser.prototype.onerror = function(err) {
      if (this._cbs.onerror) this._cbs.onerror(err)
    }
    Parser.prototype.onend = function() {
      if (this._cbs.onclosetag) {
        for (
          var i = this._stack.length;
          i > 0;
          this._cbs.onclosetag(this._stack[--i])
        );
      }
      if (this._cbs.onend) this._cbs.onend()
    }
    Parser.prototype.reset = function() {
      if (this._cbs.onreset) this._cbs.onreset()
      this._tokenizer.reset()
      this._tagname = ''
      this._attribname = ''
      this._attribs = null
      this._stack = []
    }
    Parser.prototype.parseComplete = function(data) {
      this.reset()
      this.end(data)
    }
    Parser.prototype.write = function(chunk) {
      this._tokenizer.write(chunk)
    }
    Parser.prototype.end = function(chunk) {
      this._tokenizer.end(chunk)
    }
    Parser.prototype.pause = function() {
      this._tokenizer.pause()
    }
    Parser.prototype.resume = function() {
      this._tokenizer.resume()
    }
    Parser.prototype.parseChunk = Parser.prototype.write
    Parser.prototype.done = Parser.prototype.end
    module.exports = Parser
  },
  function(module, exports, __webpack_require__) {
    module.exports = Tokenizer
    var decodeCodePoint = __webpack_require__(60),
      entityMap = __webpack_require__(62),
      legacyMap = __webpack_require__(63),
      xmlMap = __webpack_require__(64),
      i = 0,
      TEXT = i++,
      BEFORE_TAG_NAME = i++,
      IN_TAG_NAME = i++,
      IN_SELF_CLOSING_TAG = i++,
      BEFORE_CLOSING_TAG_NAME = i++,
      IN_CLOSING_TAG_NAME = i++,
      AFTER_CLOSING_TAG_NAME = i++,
      BEFORE_ATTRIBUTE_NAME = i++,
      IN_ATTRIBUTE_NAME = i++,
      AFTER_ATTRIBUTE_NAME = i++,
      BEFORE_ATTRIBUTE_VALUE = i++,
      IN_ATTRIBUTE_VALUE_DQ = i++,
      IN_ATTRIBUTE_VALUE_SQ = i++,
      IN_ATTRIBUTE_VALUE_NQ = i++,
      BEFORE_DECLARATION = i++,
      IN_DECLARATION = i++,
      IN_PROCESSING_INSTRUCTION = i++,
      BEFORE_COMMENT = i++,
      IN_COMMENT = i++,
      AFTER_COMMENT_1 = i++,
      AFTER_COMMENT_2 = i++,
      BEFORE_CDATA_1 = i++,
      BEFORE_CDATA_2 = i++,
      BEFORE_CDATA_3 = i++,
      BEFORE_CDATA_4 = i++,
      BEFORE_CDATA_5 = i++,
      BEFORE_CDATA_6 = i++,
      IN_CDATA = i++,
      AFTER_CDATA_1 = i++,
      AFTER_CDATA_2 = i++,
      BEFORE_SPECIAL = i++,
      BEFORE_SPECIAL_END = i++,
      BEFORE_SCRIPT_1 = i++,
      BEFORE_SCRIPT_2 = i++,
      BEFORE_SCRIPT_3 = i++,
      BEFORE_SCRIPT_4 = i++,
      BEFORE_SCRIPT_5 = i++,
      AFTER_SCRIPT_1 = i++,
      AFTER_SCRIPT_2 = i++,
      AFTER_SCRIPT_3 = i++,
      AFTER_SCRIPT_4 = i++,
      AFTER_SCRIPT_5 = i++,
      BEFORE_STYLE_1 = i++,
      BEFORE_STYLE_2 = i++,
      BEFORE_STYLE_3 = i++,
      BEFORE_STYLE_4 = i++,
      AFTER_STYLE_1 = i++,
      AFTER_STYLE_2 = i++,
      AFTER_STYLE_3 = i++,
      AFTER_STYLE_4 = i++,
      BEFORE_ENTITY = i++,
      BEFORE_NUMERIC_ENTITY = i++,
      IN_NAMED_ENTITY = i++,
      IN_NUMERIC_ENTITY = i++,
      IN_HEX_ENTITY = i++,
      j = 0,
      SPECIAL_NONE = j++,
      SPECIAL_SCRIPT = j++,
      SPECIAL_STYLE = j++
    function whitespace(c) {
      return c === ' ' || c === '\n' || c === '\t' || c === '\f' || c === '\r'
    }
    function characterState(char, SUCCESS) {
      return function(c) {
        if (c === char) this._state = SUCCESS
      }
    }
    function ifElseState(upper, SUCCESS, FAILURE) {
      var lower = upper.toLowerCase()
      if (upper === lower) {
        return function(c) {
          if (c === lower) {
            this._state = SUCCESS
          } else {
            this._state = FAILURE
            this._index--
          }
        }
      } else {
        return function(c) {
          if (c === lower || c === upper) {
            this._state = SUCCESS
          } else {
            this._state = FAILURE
            this._index--
          }
        }
      }
    }
    function consumeSpecialNameChar(upper, NEXT_STATE) {
      var lower = upper.toLowerCase()
      return function(c) {
        if (c === lower || c === upper) {
          this._state = NEXT_STATE
        } else {
          this._state = IN_TAG_NAME
          this._index--
        }
      }
    }
    function Tokenizer(options, cbs) {
      this._state = TEXT
      this._buffer = ''
      this._sectionStart = 0
      this._index = 0
      this._baseState = TEXT
      this._special = SPECIAL_NONE
      this._cbs = cbs
      this._running = true
      this._ended = false
      this._xmlMode = !!(options && options.xmlMode)
      this._decodeEntities = !!(options && options.decodeEntities)
    }
    Tokenizer.prototype._stateText = function(c) {
      if (c === '<') {
        if (this._index > this._sectionStart) {
          this._cbs.ontext(this._getSection())
        }
        this._state = BEFORE_TAG_NAME
        this._sectionStart = this._index
      } else if (
        this._decodeEntities &&
        this._special === SPECIAL_NONE &&
        c === '&'
      ) {
        if (this._index > this._sectionStart) {
          this._cbs.ontext(this._getSection())
        }
        this._baseState = TEXT
        this._state = BEFORE_ENTITY
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateBeforeTagName = function(c) {
      if (c === '/') {
        this._state = BEFORE_CLOSING_TAG_NAME
      } else if (c === '>' || this._special !== SPECIAL_NONE || whitespace(c)) {
        this._state = TEXT
      } else if (c === '!') {
        this._state = BEFORE_DECLARATION
        this._sectionStart = this._index + 1
      } else if (c === '?') {
        this._state = IN_PROCESSING_INSTRUCTION
        this._sectionStart = this._index + 1
      } else if (c === '<') {
        this._cbs.ontext(this._getSection())
        this._sectionStart = this._index
      } else {
        this._state =
          !this._xmlMode && (c === 's' || c === 'S')
            ? BEFORE_SPECIAL
            : IN_TAG_NAME
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateInTagName = function(c) {
      if (c === '/' || c === '>' || whitespace(c)) {
        this._emitToken('onopentagname')
        this._state = BEFORE_ATTRIBUTE_NAME
        this._index--
      }
    }
    Tokenizer.prototype._stateBeforeCloseingTagName = function(c) {
      if (whitespace(c));
      else if (c === '>') {
        this._state = TEXT
      } else if (this._special !== SPECIAL_NONE) {
        if (c === 's' || c === 'S') {
          this._state = BEFORE_SPECIAL_END
        } else {
          this._state = TEXT
          this._index--
        }
      } else {
        this._state = IN_CLOSING_TAG_NAME
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateInCloseingTagName = function(c) {
      if (c === '>' || whitespace(c)) {
        this._emitToken('onclosetag')
        this._state = AFTER_CLOSING_TAG_NAME
        this._index--
      }
    }
    Tokenizer.prototype._stateAfterCloseingTagName = function(c) {
      if (c === '>') {
        this._state = TEXT
        this._sectionStart = this._index + 1
      }
    }
    Tokenizer.prototype._stateBeforeAttributeName = function(c) {
      if (c === '>') {
        this._cbs.onopentagend()
        this._state = TEXT
        this._sectionStart = this._index + 1
      } else if (c === '/') {
        this._state = IN_SELF_CLOSING_TAG
      } else if (!whitespace(c)) {
        this._state = IN_ATTRIBUTE_NAME
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateInSelfClosingTag = function(c) {
      if (c === '>') {
        this._cbs.onselfclosingtag()
        this._state = TEXT
        this._sectionStart = this._index + 1
      } else if (!whitespace(c)) {
        this._state = BEFORE_ATTRIBUTE_NAME
        this._index--
      }
    }
    Tokenizer.prototype._stateInAttributeName = function(c) {
      if (c === '=' || c === '/' || c === '>' || whitespace(c)) {
        this._cbs.onattribname(this._getSection())
        this._sectionStart = -1
        this._state = AFTER_ATTRIBUTE_NAME
        this._index--
      }
    }
    Tokenizer.prototype._stateAfterAttributeName = function(c) {
      if (c === '=') {
        this._state = BEFORE_ATTRIBUTE_VALUE
      } else if (c === '/' || c === '>') {
        this._cbs.onattribend()
        this._state = BEFORE_ATTRIBUTE_NAME
        this._index--
      } else if (!whitespace(c)) {
        this._cbs.onattribend()
        this._state = IN_ATTRIBUTE_NAME
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateBeforeAttributeValue = function(c) {
      if (c === '"') {
        this._state = IN_ATTRIBUTE_VALUE_DQ
        this._sectionStart = this._index + 1
      } else if (c === "'") {
        this._state = IN_ATTRIBUTE_VALUE_SQ
        this._sectionStart = this._index + 1
      } else if (!whitespace(c)) {
        this._state = IN_ATTRIBUTE_VALUE_NQ
        this._sectionStart = this._index
        this._index--
      }
    }
    Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {
      if (c === '"') {
        this._emitToken('onattribdata')
        this._cbs.onattribend()
        this._state = BEFORE_ATTRIBUTE_NAME
      } else if (this._decodeEntities && c === '&') {
        this._emitToken('onattribdata')
        this._baseState = this._state
        this._state = BEFORE_ENTITY
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {
      if (c === "'") {
        this._emitToken('onattribdata')
        this._cbs.onattribend()
        this._state = BEFORE_ATTRIBUTE_NAME
      } else if (this._decodeEntities && c === '&') {
        this._emitToken('onattribdata')
        this._baseState = this._state
        this._state = BEFORE_ENTITY
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {
      if (whitespace(c) || c === '>') {
        this._emitToken('onattribdata')
        this._cbs.onattribend()
        this._state = BEFORE_ATTRIBUTE_NAME
        this._index--
      } else if (this._decodeEntities && c === '&') {
        this._emitToken('onattribdata')
        this._baseState = this._state
        this._state = BEFORE_ENTITY
        this._sectionStart = this._index
      }
    }
    Tokenizer.prototype._stateBeforeDeclaration = function(c) {
      this._state =
        c === '[' ? BEFORE_CDATA_1 : c === '-' ? BEFORE_COMMENT : IN_DECLARATION
    }
    Tokenizer.prototype._stateInDeclaration = function(c) {
      if (c === '>') {
        this._cbs.ondeclaration(this._getSection())
        this._state = TEXT
        this._sectionStart = this._index + 1
      }
    }
    Tokenizer.prototype._stateInProcessingInstruction = function(c) {
      if (c === '>') {
        this._cbs.onprocessinginstruction(this._getSection())
        this._state = TEXT
        this._sectionStart = this._index + 1
      }
    }
    Tokenizer.prototype._stateBeforeComment = function(c) {
      if (c === '-') {
        this._state = IN_COMMENT
        this._sectionStart = this._index + 1
      } else {
        this._state = IN_DECLARATION
      }
    }
    Tokenizer.prototype._stateInComment = function(c) {
      if (c === '-') this._state = AFTER_COMMENT_1
    }
    Tokenizer.prototype._stateAfterComment1 = function(c) {
      if (c === '-') {
        this._state = AFTER_COMMENT_2
      } else {
        this._state = IN_COMMENT
      }
    }
    Tokenizer.prototype._stateAfterComment2 = function(c) {
      if (c === '>') {
        this._cbs.oncomment(
          this._buffer.substring(this._sectionStart, this._index - 2)
        )
        this._state = TEXT
        this._sectionStart = this._index + 1
      } else if (c !== '-') {
        this._state = IN_COMMENT
      }
    }
    Tokenizer.prototype._stateBeforeCdata1 = ifElseState(
      'C',
      BEFORE_CDATA_2,
      IN_DECLARATION
    )
    Tokenizer.prototype._stateBeforeCdata2 = ifElseState(
      'D',
      BEFORE_CDATA_3,
      IN_DECLARATION
    )
    Tokenizer.prototype._stateBeforeCdata3 = ifElseState(
      'A',
      BEFORE_CDATA_4,
      IN_DECLARATION
    )
    Tokenizer.prototype._stateBeforeCdata4 = ifElseState(
      'T',
      BEFORE_CDATA_5,
      IN_DECLARATION
    )
    Tokenizer.prototype._stateBeforeCdata5 = ifElseState(
      'A',
      BEFORE_CDATA_6,
      IN_DECLARATION
    )
    Tokenizer.prototype._stateBeforeCdata6 = function(c) {
      if (c === '[') {
        this._state = IN_CDATA
        this._sectionStart = this._index + 1
      } else {
        this._state = IN_DECLARATION
        this._index--
      }
    }
    Tokenizer.prototype._stateInCdata = function(c) {
      if (c === ']') this._state = AFTER_CDATA_1
    }
    Tokenizer.prototype._stateAfterCdata1 = characterState(']', AFTER_CDATA_2)
    Tokenizer.prototype._stateAfterCdata2 = function(c) {
      if (c === '>') {
        this._cbs.oncdata(
          this._buffer.substring(this._sectionStart, this._index - 2)
        )
        this._state = TEXT
        this._sectionStart = this._index + 1
      } else if (c !== ']') {
        this._state = IN_CDATA
      }
    }
    Tokenizer.prototype._stateBeforeSpecial = function(c) {
      if (c === 'c' || c === 'C') {
        this._state = BEFORE_SCRIPT_1
      } else if (c === 't' || c === 'T') {
        this._state = BEFORE_STYLE_1
      } else {
        this._state = IN_TAG_NAME
        this._index--
      }
    }
    Tokenizer.prototype._stateBeforeSpecialEnd = function(c) {
      if (this._special === SPECIAL_SCRIPT && (c === 'c' || c === 'C')) {
        this._state = AFTER_SCRIPT_1
      } else if (this._special === SPECIAL_STYLE && (c === 't' || c === 'T')) {
        this._state = AFTER_STYLE_1
      } else this._state = TEXT
    }
    Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(
      'R',
      BEFORE_SCRIPT_2
    )
    Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(
      'I',
      BEFORE_SCRIPT_3
    )
    Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(
      'P',
      BEFORE_SCRIPT_4
    )
    Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(
      'T',
      BEFORE_SCRIPT_5
    )
    Tokenizer.prototype._stateBeforeScript5 = function(c) {
      if (c === '/' || c === '>' || whitespace(c)) {
        this._special = SPECIAL_SCRIPT
      }
      this._state = IN_TAG_NAME
      this._index--
    }
    Tokenizer.prototype._stateAfterScript1 = ifElseState(
      'R',
      AFTER_SCRIPT_2,
      TEXT
    )
    Tokenizer.prototype._stateAfterScript2 = ifElseState(
      'I',
      AFTER_SCRIPT_3,
      TEXT
    )
    Tokenizer.prototype._stateAfterScript3 = ifElseState(
      'P',
      AFTER_SCRIPT_4,
      TEXT
    )
    Tokenizer.prototype._stateAfterScript4 = ifElseState(
      'T',
      AFTER_SCRIPT_5,
      TEXT
    )
    Tokenizer.prototype._stateAfterScript5 = function(c) {
      if (c === '>' || whitespace(c)) {
        this._special = SPECIAL_NONE
        this._state = IN_CLOSING_TAG_NAME
        this._sectionStart = this._index - 6
        this._index--
      } else this._state = TEXT
    }
    Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(
      'Y',
      BEFORE_STYLE_2
    )
    Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(
      'L',
      BEFORE_STYLE_3
    )
    Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(
      'E',
      BEFORE_STYLE_4
    )
    Tokenizer.prototype._stateBeforeStyle4 = function(c) {
      if (c === '/' || c === '>' || whitespace(c)) {
        this._special = SPECIAL_STYLE
      }
      this._state = IN_TAG_NAME
      this._index--
    }
    Tokenizer.prototype._stateAfterStyle1 = ifElseState(
      'Y',
      AFTER_STYLE_2,
      TEXT
    )
    Tokenizer.prototype._stateAfterStyle2 = ifElseState(
      'L',
      AFTER_STYLE_3,
      TEXT
    )
    Tokenizer.prototype._stateAfterStyle3 = ifElseState(
      'E',
      AFTER_STYLE_4,
      TEXT
    )
    Tokenizer.prototype._stateAfterStyle4 = function(c) {
      if (c === '>' || whitespace(c)) {
        this._special = SPECIAL_NONE
        this._state = IN_CLOSING_TAG_NAME
        this._sectionStart = this._index - 5
        this._index--
      } else this._state = TEXT
    }
    Tokenizer.prototype._stateBeforeEntity = ifElseState(
      '#',
      BEFORE_NUMERIC_ENTITY,
      IN_NAMED_ENTITY
    )
    Tokenizer.prototype._stateBeforeNumericEntity = ifElseState(
      'X',
      IN_HEX_ENTITY,
      IN_NUMERIC_ENTITY
    )
    Tokenizer.prototype._parseNamedEntityStrict = function() {
      if (this._sectionStart + 1 < this._index) {
        var entity = this._buffer.substring(
            this._sectionStart + 1,
            this._index
          ),
          map = this._xmlMode ? xmlMap : entityMap
        if (map.hasOwnProperty(entity)) {
          this._emitPartial(map[entity])
          this._sectionStart = this._index + 1
        }
      }
    }
    Tokenizer.prototype._parseLegacyEntity = function() {
      var start = this._sectionStart + 1,
        limit = this._index - start
      if (limit > 6) limit = 6
      while (limit >= 2) {
        var entity = this._buffer.substr(start, limit)
        if (legacyMap.hasOwnProperty(entity)) {
          this._emitPartial(legacyMap[entity])
          this._sectionStart += limit + 1
          return
        } else {
          limit--
        }
      }
    }
    Tokenizer.prototype._stateInNamedEntity = function(c) {
      if (c === ';') {
        this._parseNamedEntityStrict()
        if (this._sectionStart + 1 < this._index && !this._xmlMode) {
          this._parseLegacyEntity()
        }
        this._state = this._baseState
      } else if (
        (c < 'a' || c > 'z') &&
        (c < 'A' || c > 'Z') &&
        (c < '0' || c > '9')
      ) {
        if (this._xmlMode);
        else if (this._sectionStart + 1 === this._index);
        else if (this._baseState !== TEXT) {
          if (c !== '=') {
            this._parseNamedEntityStrict()
          }
        } else {
          this._parseLegacyEntity()
        }
        this._state = this._baseState
        this._index--
      }
    }
    Tokenizer.prototype._decodeNumericEntity = function(offset, base) {
      var sectionStart = this._sectionStart + offset
      if (sectionStart !== this._index) {
        var entity = this._buffer.substring(sectionStart, this._index)
        var parsed = parseInt(entity, base)
        this._emitPartial(decodeCodePoint(parsed))
        this._sectionStart = this._index
      } else {
        this._sectionStart--
      }
      this._state = this._baseState
    }
    Tokenizer.prototype._stateInNumericEntity = function(c) {
      if (c === ';') {
        this._decodeNumericEntity(2, 10)
        this._sectionStart++
      } else if (c < '0' || c > '9') {
        if (!this._xmlMode) {
          this._decodeNumericEntity(2, 10)
        } else {
          this._state = this._baseState
        }
        this._index--
      }
    }
    Tokenizer.prototype._stateInHexEntity = function(c) {
      if (c === ';') {
        this._decodeNumericEntity(3, 16)
        this._sectionStart++
      } else if (
        (c < 'a' || c > 'f') &&
        (c < 'A' || c > 'F') &&
        (c < '0' || c > '9')
      ) {
        if (!this._xmlMode) {
          this._decodeNumericEntity(3, 16)
        } else {
          this._state = this._baseState
        }
        this._index--
      }
    }
    Tokenizer.prototype._cleanup = function() {
      if (this._sectionStart < 0) {
        this._buffer = ''
        this._index = 0
      } else if (this._running) {
        if (this._state === TEXT) {
          if (this._sectionStart !== this._index) {
            this._cbs.ontext(this._buffer.substr(this._sectionStart))
          }
          this._buffer = ''
          this._index = 0
        } else if (this._sectionStart === this._index) {
          this._buffer = ''
          this._index = 0
        } else {
          this._buffer = this._buffer.substr(this._sectionStart)
          this._index -= this._sectionStart
        }
        this._sectionStart = 0
      }
    }
    Tokenizer.prototype.write = function(chunk) {
      if (this._ended) this._cbs.onerror(Error('.write() after done!'))
      this._buffer += chunk
      this._parse()
    }
    Tokenizer.prototype._parse = function() {
      while (this._index < this._buffer.length && this._running) {
        var c = this._buffer.charAt(this._index)
        if (this._state === TEXT) {
          this._stateText(c)
        } else if (this._state === BEFORE_TAG_NAME) {
          this._stateBeforeTagName(c)
        } else if (this._state === IN_TAG_NAME) {
          this._stateInTagName(c)
        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
          this._stateBeforeCloseingTagName(c)
        } else if (this._state === IN_CLOSING_TAG_NAME) {
          this._stateInCloseingTagName(c)
        } else if (this._state === AFTER_CLOSING_TAG_NAME) {
          this._stateAfterCloseingTagName(c)
        } else if (this._state === IN_SELF_CLOSING_TAG) {
          this._stateInSelfClosingTag(c)
        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {
          this._stateBeforeAttributeName(c)
        } else if (this._state === IN_ATTRIBUTE_NAME) {
          this._stateInAttributeName(c)
        } else if (this._state === AFTER_ATTRIBUTE_NAME) {
          this._stateAfterAttributeName(c)
        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
          this._stateBeforeAttributeValue(c)
        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
          this._stateInAttributeValueDoubleQuotes(c)
        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
          this._stateInAttributeValueSingleQuotes(c)
        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
          this._stateInAttributeValueNoQuotes(c)
        } else if (this._state === BEFORE_DECLARATION) {
          this._stateBeforeDeclaration(c)
        } else if (this._state === IN_DECLARATION) {
          this._stateInDeclaration(c)
        } else if (this._state === IN_PROCESSING_INSTRUCTION) {
          this._stateInProcessingInstruction(c)
        } else if (this._state === BEFORE_COMMENT) {
          this._stateBeforeComment(c)
        } else if (this._state === IN_COMMENT) {
          this._stateInComment(c)
        } else if (this._state === AFTER_COMMENT_1) {
          this._stateAfterComment1(c)
        } else if (this._state === AFTER_COMMENT_2) {
          this._stateAfterComment2(c)
        } else if (this._state === BEFORE_CDATA_1) {
          this._stateBeforeCdata1(c)
        } else if (this._state === BEFORE_CDATA_2) {
          this._stateBeforeCdata2(c)
        } else if (this._state === BEFORE_CDATA_3) {
          this._stateBeforeCdata3(c)
        } else if (this._state === BEFORE_CDATA_4) {
          this._stateBeforeCdata4(c)
        } else if (this._state === BEFORE_CDATA_5) {
          this._stateBeforeCdata5(c)
        } else if (this._state === BEFORE_CDATA_6) {
          this._stateBeforeCdata6(c)
        } else if (this._state === IN_CDATA) {
          this._stateInCdata(c)
        } else if (this._state === AFTER_CDATA_1) {
          this._stateAfterCdata1(c)
        } else if (this._state === AFTER_CDATA_2) {
          this._stateAfterCdata2(c)
        } else if (this._state === BEFORE_SPECIAL) {
          this._stateBeforeSpecial(c)
        } else if (this._state === BEFORE_SPECIAL_END) {
          this._stateBeforeSpecialEnd(c)
        } else if (this._state === BEFORE_SCRIPT_1) {
          this._stateBeforeScript1(c)
        } else if (this._state === BEFORE_SCRIPT_2) {
          this._stateBeforeScript2(c)
        } else if (this._state === BEFORE_SCRIPT_3) {
          this._stateBeforeScript3(c)
        } else if (this._state === BEFORE_SCRIPT_4) {
          this._stateBeforeScript4(c)
        } else if (this._state === BEFORE_SCRIPT_5) {
          this._stateBeforeScript5(c)
        } else if (this._state === AFTER_SCRIPT_1) {
          this._stateAfterScript1(c)
        } else if (this._state === AFTER_SCRIPT_2) {
          this._stateAfterScript2(c)
        } else if (this._state === AFTER_SCRIPT_3) {
          this._stateAfterScript3(c)
        } else if (this._state === AFTER_SCRIPT_4) {
          this._stateAfterScript4(c)
        } else if (this._state === AFTER_SCRIPT_5) {
          this._stateAfterScript5(c)
        } else if (this._state === BEFORE_STYLE_1) {
          this._stateBeforeStyle1(c)
        } else if (this._state === BEFORE_STYLE_2) {
          this._stateBeforeStyle2(c)
        } else if (this._state === BEFORE_STYLE_3) {
          this._stateBeforeStyle3(c)
        } else if (this._state === BEFORE_STYLE_4) {
          this._stateBeforeStyle4(c)
        } else if (this._state === AFTER_STYLE_1) {
          this._stateAfterStyle1(c)
        } else if (this._state === AFTER_STYLE_2) {
          this._stateAfterStyle2(c)
        } else if (this._state === AFTER_STYLE_3) {
          this._stateAfterStyle3(c)
        } else if (this._state === AFTER_STYLE_4) {
          this._stateAfterStyle4(c)
        } else if (this._state === BEFORE_ENTITY) {
          this._stateBeforeEntity(c)
        } else if (this._state === BEFORE_NUMERIC_ENTITY) {
          this._stateBeforeNumericEntity(c)
        } else if (this._state === IN_NAMED_ENTITY) {
          this._stateInNamedEntity(c)
        } else if (this._state === IN_NUMERIC_ENTITY) {
          this._stateInNumericEntity(c)
        } else if (this._state === IN_HEX_ENTITY) {
          this._stateInHexEntity(c)
        } else {
          this._cbs.onerror(Error('unknown _state'), this._state)
        }
        this._index++
      }
      this._cleanup()
    }
    Tokenizer.prototype.pause = function() {
      this._running = false
    }
    Tokenizer.prototype.resume = function() {
      this._running = true
      if (this._index < this._buffer.length) {
        this._parse()
      }
      if (this._ended) {
        this._finish()
      }
    }
    Tokenizer.prototype.end = function(chunk) {
      if (this._ended) this._cbs.onerror(Error('.end() after done!'))
      if (chunk) this.write(chunk)
      this._ended = true
      if (this._running) this._finish()
    }
    Tokenizer.prototype._finish = function() {
      if (this._sectionStart < this._index) {
        this._handleTrailingData()
      }
      this._cbs.onend()
    }
    Tokenizer.prototype._handleTrailingData = function() {
      var data = this._buffer.substr(this._sectionStart)
      if (
        this._state === IN_CDATA ||
        this._state === AFTER_CDATA_1 ||
        this._state === AFTER_CDATA_2
      ) {
        this._cbs.oncdata(data)
      } else if (
        this._state === IN_COMMENT ||
        this._state === AFTER_COMMENT_1 ||
        this._state === AFTER_COMMENT_2
      ) {
        this._cbs.oncomment(data)
      } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
        this._parseLegacyEntity()
        if (this._sectionStart < this._index) {
          this._state = this._baseState
          this._handleTrailingData()
        }
      } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
        this._decodeNumericEntity(2, 10)
        if (this._sectionStart < this._index) {
          this._state = this._baseState
          this._handleTrailingData()
        }
      } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
        this._decodeNumericEntity(3, 16)
        if (this._sectionStart < this._index) {
          this._state = this._baseState
          this._handleTrailingData()
        }
      } else if (
        this._state !== IN_TAG_NAME &&
        this._state !== BEFORE_ATTRIBUTE_NAME &&
        this._state !== BEFORE_ATTRIBUTE_VALUE &&
        this._state !== AFTER_ATTRIBUTE_NAME &&
        this._state !== IN_ATTRIBUTE_NAME &&
        this._state !== IN_ATTRIBUTE_VALUE_SQ &&
        this._state !== IN_ATTRIBUTE_VALUE_DQ &&
        this._state !== IN_ATTRIBUTE_VALUE_NQ &&
        this._state !== IN_CLOSING_TAG_NAME
      ) {
        this._cbs.ontext(data)
      }
    }
    Tokenizer.prototype.reset = function() {
      Tokenizer.call(
        this,
        {
          xmlMode: this._xmlMode,
          decodeEntities: this._decodeEntities
        },
        this._cbs
      )
    }
    Tokenizer.prototype._getSection = function() {
      return this._buffer.substring(this._sectionStart, this._index)
    }
    Tokenizer.prototype._emitToken = function(name) {
      this._cbs[name](this._getSection())
      this._sectionStart = -1
    }
    Tokenizer.prototype._emitPartial = function(value) {
      if (this._baseState !== TEXT) {
        this._cbs.onattribdata(value)
      } else {
        this._cbs.ontext(value)
      }
    }
  },
  function(module, exports) {
    var NodePrototype = (module.exports = {
      get firstChild() {
        var children = this.children
        return (children && children[0]) || null
      },
      get lastChild() {
        var children = this.children
        return (children && children[children.length - 1]) || null
      },
      get nodeType() {
        return nodeTypes[this.type] || nodeTypes.element
      }
    })
    var domLvl1 = {
      tagName: 'name',
      childNodes: 'children',
      parentNode: 'parent',
      previousSibling: 'prev',
      nextSibling: 'next',
      nodeValue: 'data'
    }
    var nodeTypes = {
      element: 1,
      text: 3,
      cdata: 4,
      comment: 8
    }
    Object.keys(domLvl1).forEach(function(key) {
      var shorthand = domLvl1[key]
      Object.defineProperty(NodePrototype, key, {
        get: function() {
          return this[shorthand] || null
        },
        set: function(val) {
          this[shorthand] = val
          return val
        }
      })
    })
  },
  function(module, exports, __webpack_require__) {
    module.exports = Stream
    var Parser = __webpack_require__(28),
      WritableStream =
        __webpack_require__(12).Writable || __webpack_require__(81).Writable
    function Stream(cbs, options) {
      var parser = (this._parser = new Parser(cbs, options))
      WritableStream.call(this, {
        decodeStrings: false
      })
      this.once('finish', function() {
        parser.end()
      })
    }
    __webpack_require__(16).inherits(Stream, WritableStream)
    WritableStream.prototype._write = function(chunk, encoding, cb) {
      this._parser.write(chunk)
      cb()
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    ;(function(global, process) {
      var processNextTick = __webpack_require__(17)
      module.exports = Readable
      var isArray = __webpack_require__(27)
      var Duplex
      Readable.ReadableState = ReadableState
      var EE = __webpack_require__(11).EventEmitter
      var EElistenerCount = function(emitter, type) {
        return emitter.listeners(type).length
      }
      var Stream = __webpack_require__(33)
      var Buffer = __webpack_require__(22).Buffer
      var OurUint8Array = global.Uint8Array || function() {}
      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk)
      }
      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array
      }
      var util = __webpack_require__(2)
      util.inherits = __webpack_require__(0)
      var debugUtil = __webpack_require__(71)
      var debug = void 0
      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog('stream')
      } else {
        debug = function() {}
      }
      var BufferList = __webpack_require__(72)
      var destroyImpl = __webpack_require__(34)
      var StringDecoder
      util.inherits(Readable, Stream)
      var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume']
      function prependListener(emitter, event, fn) {
        if (typeof emitter.prependListener === 'function') {
          return emitter.prependListener(event, fn)
        } else {
          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn)
          else if (isArray(emitter._events[event]))
            emitter._events[event].unshift(fn)
          else emitter._events[event] = [fn, emitter._events[event]]
        }
      }
      function ReadableState(options, stream) {
        Duplex = Duplex || __webpack_require__(6)
        options = options || {}
        this.objectMode = !!options.objectMode
        if (stream instanceof Duplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode
        var hwm = options.highWaterMark
        var defaultHwm = this.objectMode ? 16 : 16 * 1024
        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm
        this.highWaterMark = Math.floor(this.highWaterMark)
        this.buffer = new BufferList()
        this.length = 0
        this.pipes = null
        this.pipesCount = 0
        this.flowing = null
        this.ended = false
        this.endEmitted = false
        this.reading = false
        this.sync = true
        this.needReadable = false
        this.emittedReadable = false
        this.readableListening = false
        this.resumeScheduled = false
        this.destroyed = false
        this.defaultEncoding = options.defaultEncoding || 'utf8'
        this.awaitDrain = 0
        this.readingMore = false
        this.decoder = null
        this.encoding = null
        if (options.encoding) {
          if (!StringDecoder)
            StringDecoder = __webpack_require__(18).StringDecoder
          this.decoder = new StringDecoder(options.encoding)
          this.encoding = options.encoding
        }
      }
      function Readable(options) {
        Duplex = Duplex || __webpack_require__(6)
        if (!(this instanceof Readable)) return new Readable(options)
        this._readableState = new ReadableState(options, this)
        this.readable = true
        if (options) {
          if (typeof options.read === 'function') this._read = options.read
          if (typeof options.destroy === 'function')
            this._destroy = options.destroy
        }
        Stream.call(this)
      }
      Object.defineProperty(Readable.prototype, 'destroyed', {
        get: function() {
          if (this._readableState === undefined) {
            return false
          }
          return this._readableState.destroyed
        },
        set: function(value) {
          if (!this._readableState) {
            return
          }
          this._readableState.destroyed = value
        }
      })
      Readable.prototype.destroy = destroyImpl.destroy
      Readable.prototype._undestroy = destroyImpl.undestroy
      Readable.prototype._destroy = function(err, cb) {
        this.push(null)
        cb(err)
      }
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState
        var skipChunkCheck
        if (!state.objectMode) {
          if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding
            if (encoding !== state.encoding) {
              chunk = Buffer.from(chunk, encoding)
              encoding = ''
            }
            skipChunkCheck = true
          }
        } else {
          skipChunkCheck = true
        }
        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck)
      }
      Readable.prototype.unshift = function(chunk) {
        return readableAddChunk(this, chunk, null, true, false)
      }
      function readableAddChunk(
        stream,
        chunk,
        encoding,
        addToFront,
        skipChunkCheck
      ) {
        var state = stream._readableState
        if (chunk === null) {
          state.reading = false
          onEofChunk(stream, state)
        } else {
          var er
          if (!skipChunkCheck) er = chunkInvalid(state, chunk)
          if (er) {
            stream.emit('error', er)
          } else if (state.objectMode || (chunk && chunk.length > 0)) {
            if (
              typeof chunk !== 'string' &&
              !state.objectMode &&
              Object.getPrototypeOf(chunk) !== Buffer.prototype
            ) {
              chunk = _uint8ArrayToBuffer(chunk)
            }
            if (addToFront) {
              if (state.endEmitted)
                stream.emit(
                  'error',
                  new Error('stream.unshift() after end event')
                )
              else addChunk(stream, state, chunk, true)
            } else if (state.ended) {
              stream.emit('error', new Error('stream.push() after EOF'))
            } else {
              state.reading = false
              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk)
                if (state.objectMode || chunk.length !== 0)
                  addChunk(stream, state, chunk, false)
                else maybeReadMore(stream, state)
              } else {
                addChunk(stream, state, chunk, false)
              }
            }
          } else if (!addToFront) {
            state.reading = false
          }
        }
        return needMoreData(state)
      }
      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk)
          stream.read(0)
        } else {
          state.length += state.objectMode ? 1 : chunk.length
          if (addToFront) state.buffer.unshift(chunk)
          else state.buffer.push(chunk)
          if (state.needReadable) emitReadable(stream)
        }
        maybeReadMore(stream, state)
      }
      function chunkInvalid(state, chunk) {
        var er
        if (
          !_isUint8Array(chunk) &&
          typeof chunk !== 'string' &&
          chunk !== undefined &&
          !state.objectMode
        ) {
          er = new TypeError('Invalid non-string/buffer chunk')
        }
        return er
      }
      function needMoreData(state) {
        return (
          !state.ended &&
          (state.needReadable ||
            state.length < state.highWaterMark ||
            state.length === 0)
        )
      }
      Readable.prototype.isPaused = function() {
        return this._readableState.flowing === false
      }
      Readable.prototype.setEncoding = function(enc) {
        if (!StringDecoder)
          StringDecoder = __webpack_require__(18).StringDecoder
        this._readableState.decoder = new StringDecoder(enc)
        this._readableState.encoding = enc
        return this
      }
      var MAX_HWM = 8388608
      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM
        } else {
          n--
          n |= n >>> 1
          n |= n >>> 2
          n |= n >>> 4
          n |= n >>> 8
          n |= n >>> 16
          n++
        }
        return n
      }
      function howMuchToRead(n, state) {
        if (n <= 0 || (state.length === 0 && state.ended)) return 0
        if (state.objectMode) return 1
        if (n !== n) {
          if (state.flowing && state.length)
            return state.buffer.head.data.length
          else return state.length
        }
        if (n > state.highWaterMark)
          state.highWaterMark = computeNewHighWaterMark(n)
        if (n <= state.length) return n
        if (!state.ended) {
          state.needReadable = true
          return 0
        }
        return state.length
      }
      Readable.prototype.read = function(n) {
        debug('read', n)
        n = parseInt(n, 10)
        var state = this._readableState
        var nOrig = n
        if (n !== 0) state.emittedReadable = false
        if (
          n === 0 &&
          state.needReadable &&
          (state.length >= state.highWaterMark || state.ended)
        ) {
          debug('read: emitReadable', state.length, state.ended)
          if (state.length === 0 && state.ended) endReadable(this)
          else emitReadable(this)
          return null
        }
        n = howMuchToRead(n, state)
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this)
          return null
        }
        var doRead = state.needReadable
        debug('need readable', doRead)
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true
          debug('length less than watermark', doRead)
        }
        if (state.ended || state.reading) {
          doRead = false
          debug('reading or ended', doRead)
        } else if (doRead) {
          debug('do read')
          state.reading = true
          state.sync = true
          if (state.length === 0) state.needReadable = true
          this._read(state.highWaterMark)
          state.sync = false
          if (!state.reading) n = howMuchToRead(nOrig, state)
        }
        var ret
        if (n > 0) ret = fromList(n, state)
        else ret = null
        if (ret === null) {
          state.needReadable = true
          n = 0
        } else {
          state.length -= n
        }
        if (state.length === 0) {
          if (!state.ended) state.needReadable = true
          if (nOrig !== n && state.ended) endReadable(this)
        }
        if (ret !== null) this.emit('data', ret)
        return ret
      }
      function onEofChunk(stream, state) {
        if (state.ended) return
        if (state.decoder) {
          var chunk = state.decoder.end()
          if (chunk && chunk.length) {
            state.buffer.push(chunk)
            state.length += state.objectMode ? 1 : chunk.length
          }
        }
        state.ended = true
        emitReadable(stream)
      }
      function emitReadable(stream) {
        var state = stream._readableState
        state.needReadable = false
        if (!state.emittedReadable) {
          debug('emitReadable', state.flowing)
          state.emittedReadable = true
          if (state.sync) processNextTick(emitReadable_, stream)
          else emitReadable_(stream)
        }
      }
      function emitReadable_(stream) {
        debug('emit readable')
        stream.emit('readable')
        flow(stream)
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true
          processNextTick(maybeReadMore_, stream, state)
        }
      }
      function maybeReadMore_(stream, state) {
        var len = state.length
        while (
          !state.reading &&
          !state.flowing &&
          !state.ended &&
          state.length < state.highWaterMark
        ) {
          debug('maybeReadMore read 0')
          stream.read(0)
          if (len === state.length) break
          else len = state.length
        }
        state.readingMore = false
      }
      Readable.prototype._read = function(n) {
        this.emit('error', new Error('_read() is not implemented'))
      }
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this
        var state = this._readableState
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest
            break

          case 1:
            state.pipes = [state.pipes, dest]
            break

          default:
            state.pipes.push(dest)
            break
        }
        state.pipesCount += 1
        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts)
        var doEnd =
          (!pipeOpts || pipeOpts.end !== false) &&
          dest !== process.stdout &&
          dest !== process.stderr
        var endFn = doEnd ? onend : unpipe
        if (state.endEmitted) processNextTick(endFn)
        else src.once('end', endFn)
        dest.on('unpipe', onunpipe)
        function onunpipe(readable, unpipeInfo) {
          debug('onunpipe')
          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true
              cleanup()
            }
          }
        }
        function onend() {
          debug('onend')
          dest.end()
        }
        var ondrain = pipeOnDrain(src)
        dest.on('drain', ondrain)
        var cleanedUp = false
        function cleanup() {
          debug('cleanup')
          dest.removeListener('close', onclose)
          dest.removeListener('finish', onfinish)
          dest.removeListener('drain', ondrain)
          dest.removeListener('error', onerror)
          dest.removeListener('unpipe', onunpipe)
          src.removeListener('end', onend)
          src.removeListener('end', unpipe)
          src.removeListener('data', ondata)
          cleanedUp = true
          if (
            state.awaitDrain &&
            (!dest._writableState || dest._writableState.needDrain)
          )
            ondrain()
        }
        var increasedAwaitDrain = false
        src.on('data', ondata)
        function ondata(chunk) {
          debug('ondata')
          increasedAwaitDrain = false
          var ret = dest.write(chunk)
          if (false === ret && !increasedAwaitDrain) {
            if (
              ((state.pipesCount === 1 && state.pipes === dest) ||
                (state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1)) &&
              !cleanedUp
            ) {
              debug(
                'false write response, pause',
                src._readableState.awaitDrain
              )
              src._readableState.awaitDrain++
              increasedAwaitDrain = true
            }
            src.pause()
          }
        }
        function onerror(er) {
          debug('onerror', er)
          unpipe()
          dest.removeListener('error', onerror)
          if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er)
        }
        prependListener(dest, 'error', onerror)
        function onclose() {
          dest.removeListener('finish', onfinish)
          unpipe()
        }
        dest.once('close', onclose)
        function onfinish() {
          debug('onfinish')
          dest.removeListener('close', onclose)
          unpipe()
        }
        dest.once('finish', onfinish)
        function unpipe() {
          debug('unpipe')
          src.unpipe(dest)
        }
        dest.emit('pipe', src)
        if (!state.flowing) {
          debug('pipe resume')
          src.resume()
        }
        return dest
      }
      function pipeOnDrain(src) {
        return function() {
          var state = src._readableState
          debug('pipeOnDrain', state.awaitDrain)
          if (state.awaitDrain) state.awaitDrain--
          if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true
            flow(src)
          }
        }
      }
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState
        var unpipeInfo = {
          hasUnpiped: false
        }
        if (state.pipesCount === 0) return this
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this
          if (!dest) dest = state.pipes
          state.pipes = null
          state.pipesCount = 0
          state.flowing = false
          if (dest) dest.emit('unpipe', this, unpipeInfo)
          return this
        }
        if (!dest) {
          var dests = state.pipes
          var len = state.pipesCount
          state.pipes = null
          state.pipesCount = 0
          state.flowing = false
          for (var i = 0; i < len; i++) {
            dests[i].emit('unpipe', this, unpipeInfo)
          }
          return this
        }
        var index = indexOf(state.pipes, dest)
        if (index === -1) return this
        state.pipes.splice(index, 1)
        state.pipesCount -= 1
        if (state.pipesCount === 1) state.pipes = state.pipes[0]
        dest.emit('unpipe', this, unpipeInfo)
        return this
      }
      Readable.prototype.on = function(ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn)
        if (ev === 'data') {
          if (this._readableState.flowing !== false) this.resume()
        } else if (ev === 'readable') {
          var state = this._readableState
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true
            state.emittedReadable = false
            if (!state.reading) {
              processNextTick(nReadingNextTick, this)
            } else if (state.length) {
              emitReadable(this)
            }
          }
        }
        return res
      }
      Readable.prototype.addListener = Readable.prototype.on
      function nReadingNextTick(self) {
        debug('readable nexttick read 0')
        self.read(0)
      }
      Readable.prototype.resume = function() {
        var state = this._readableState
        if (!state.flowing) {
          debug('resume')
          state.flowing = true
          resume(this, state)
        }
        return this
      }
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true
          processNextTick(resume_, stream, state)
        }
      }
      function resume_(stream, state) {
        if (!state.reading) {
          debug('resume read 0')
          stream.read(0)
        }
        state.resumeScheduled = false
        state.awaitDrain = 0
        stream.emit('resume')
        flow(stream)
        if (state.flowing && !state.reading) stream.read(0)
      }
      Readable.prototype.pause = function() {
        debug('call pause flowing=%j', this._readableState.flowing)
        if (false !== this._readableState.flowing) {
          debug('pause')
          this._readableState.flowing = false
          this.emit('pause')
        }
        return this
      }
      function flow(stream) {
        var state = stream._readableState
        debug('flow', state.flowing)
        while (state.flowing && stream.read() !== null) {}
      }
      Readable.prototype.wrap = function(stream) {
        var state = this._readableState
        var paused = false
        var self = this
        stream.on('end', function() {
          debug('wrapped end')
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end()
            if (chunk && chunk.length) self.push(chunk)
          }
          self.push(null)
        })
        stream.on('data', function(chunk) {
          debug('wrapped data')
          if (state.decoder) chunk = state.decoder.write(chunk)
          if (state.objectMode && (chunk === null || chunk === undefined))
            return
          else if (!state.objectMode && (!chunk || !chunk.length)) return
          var ret = self.push(chunk)
          if (!ret) {
            paused = true
            stream.pause()
          }
        })
        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === 'function') {
            this[i] = (function(method) {
              return function() {
                return stream[method].apply(stream, arguments)
              }
            })(i)
          }
        }
        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]))
        }
        self._read = function(n) {
          debug('wrapped _read', n)
          if (paused) {
            paused = false
            stream.resume()
          }
        }
        return self
      }
      Readable._fromList = fromList
      function fromList(n, state) {
        if (state.length === 0) return null
        var ret
        if (state.objectMode) ret = state.buffer.shift()
        else if (!n || n >= state.length) {
          if (state.decoder) ret = state.buffer.join('')
          else if (state.buffer.length === 1) ret = state.buffer.head.data
          else ret = state.buffer.concat(state.length)
          state.buffer.clear()
        } else {
          ret = fromListPartial(n, state.buffer, state.decoder)
        }
        return ret
      }
      function fromListPartial(n, list, hasStrings) {
        var ret
        if (n < list.head.data.length) {
          ret = list.head.data.slice(0, n)
          list.head.data = list.head.data.slice(n)
        } else if (n === list.head.data.length) {
          ret = list.shift()
        } else {
          ret = hasStrings
            ? copyFromBufferString(n, list)
            : copyFromBuffer(n, list)
        }
        return ret
      }
      function copyFromBufferString(n, list) {
        var p = list.head
        var c = 1
        var ret = p.data
        n -= ret.length
        while ((p = p.next)) {
          var str = p.data
          var nb = n > str.length ? str.length : n
          if (nb === str.length) ret += str
          else ret += str.slice(0, n)
          n -= nb
          if (n === 0) {
            if (nb === str.length) {
              ++c
              if (p.next) list.head = p.next
              else list.head = list.tail = null
            } else {
              list.head = p
              p.data = str.slice(nb)
            }
            break
          }
          ++c
        }
        list.length -= c
        return ret
      }
      function copyFromBuffer(n, list) {
        var ret = Buffer.allocUnsafe(n)
        var p = list.head
        var c = 1
        p.data.copy(ret)
        n -= p.data.length
        while ((p = p.next)) {
          var buf = p.data
          var nb = n > buf.length ? buf.length : n
          buf.copy(ret, ret.length - n, 0, nb)
          n -= nb
          if (n === 0) {
            if (nb === buf.length) {
              ++c
              if (p.next) list.head = p.next
              else list.head = list.tail = null
            } else {
              list.head = p
              p.data = buf.slice(nb)
            }
            break
          }
          ++c
        }
        list.length -= c
        return ret
      }
      function endReadable(stream) {
        var state = stream._readableState
        if (state.length > 0)
          throw new Error('"endReadable()" called on non-empty stream')
        if (!state.endEmitted) {
          state.ended = true
          processNextTick(endReadableNT, state, stream)
        }
      }
      function endReadableNT(state, stream) {
        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true
          stream.readable = false
          stream.emit('end')
        }
      }
      function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i)
        }
      }
      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i
        }
        return -1
      }
    }.call(exports, __webpack_require__(5), __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(11).EventEmitter
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    var processNextTick = __webpack_require__(17)
    function destroy(err, cb) {
      var _this = this
      var readableDestroyed =
        this._readableState && this._readableState.destroyed
      var writableDestroyed =
        this._writableState && this._writableState.destroyed
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err)
        } else if (
          err &&
          (!this._writableState || !this._writableState.errorEmitted)
        ) {
          processNextTick(emitErrorNT, this, err)
        }
        return
      }
      if (this._readableState) {
        this._readableState.destroyed = true
      }
      if (this._writableState) {
        this._writableState.destroyed = true
      }
      this._destroy(err || null, function(err) {
        if (!cb && err) {
          processNextTick(emitErrorNT, _this, err)
          if (_this._writableState) {
            _this._writableState.errorEmitted = true
          }
        } else if (cb) {
          cb(err)
        }
      })
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false
        this._readableState.reading = false
        this._readableState.ended = false
        this._readableState.endEmitted = false
      }
      if (this._writableState) {
        this._writableState.destroyed = false
        this._writableState.ended = false
        this._writableState.ending = false
        this._writableState.finished = false
        this._writableState.errorEmitted = false
      }
    }
    function emitErrorNT(self, err) {
      self.emit('error', err)
    }
    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    module.exports = Transform
    var Duplex = __webpack_require__(6)
    var util = __webpack_require__(2)
    util.inherits = __webpack_require__(0)
    util.inherits(Transform, Duplex)
    function TransformState(stream) {
      this.afterTransform = function(er, data) {
        return afterTransform(stream, er, data)
      }
      this.needTransform = false
      this.transforming = false
      this.writecb = null
      this.writechunk = null
      this.writeencoding = null
    }
    function afterTransform(stream, er, data) {
      var ts = stream._transformState
      ts.transforming = false
      var cb = ts.writecb
      if (!cb) {
        return stream.emit(
          'error',
          new Error('write callback called multiple times')
        )
      }
      ts.writechunk = null
      ts.writecb = null
      if (data !== null && data !== undefined) stream.push(data)
      cb(er)
      var rs = stream._readableState
      rs.reading = false
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark)
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options)
      Duplex.call(this, options)
      this._transformState = new TransformState(this)
      var stream = this
      this._readableState.needReadable = true
      this._readableState.sync = false
      if (options) {
        if (typeof options.transform === 'function')
          this._transform = options.transform
        if (typeof options.flush === 'function') this._flush = options.flush
      }
      this.once('prefinish', function() {
        if (typeof this._flush === 'function')
          this._flush(function(er, data) {
            done(stream, er, data)
          })
        else done(stream)
      })
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false
      return Duplex.prototype.push.call(this, chunk, encoding)
    }
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error('_transform() is not implemented')
    }
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState
      ts.writecb = cb
      ts.writechunk = chunk
      ts.writeencoding = encoding
      if (!ts.transforming) {
        var rs = this._readableState
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark)
      }
    }
    Transform.prototype._read = function(n) {
      var ts = this._transformState
      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform)
      } else {
        ts.needTransform = true
      }
    }
    Transform.prototype._destroy = function(err, cb) {
      var _this = this
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2)
        _this.emit('close')
      })
    }
    function done(stream, er, data) {
      if (er) return stream.emit('error', er)
      if (data !== null && data !== undefined) stream.push(data)
      var ws = stream._writableState
      var ts = stream._transformState
      if (ws.length)
        throw new Error('Calling transform done when ws.length != 0')
      if (ts.transforming)
        throw new Error('Calling transform done when still transforming')
      return stream.push(null)
    }
  },
  function(module, exports, __webpack_require__) {
    ;(function(process) {
      module.exports = Readable
      var isArray = __webpack_require__(82)
      var Buffer = __webpack_require__(7).Buffer
      Readable.ReadableState = ReadableState
      var EE = __webpack_require__(11).EventEmitter
      if (!EE.listenerCount)
        EE.listenerCount = function(emitter, type) {
          return emitter.listeners(type).length
        }
      var Stream = __webpack_require__(12)
      var util = __webpack_require__(2)
      util.inherits = __webpack_require__(0)
      var StringDecoder
      var debug = __webpack_require__(83)
      if (debug && debug.debuglog) {
        debug = debug.debuglog('stream')
      } else {
        debug = function() {}
      }
      util.inherits(Readable, Stream)
      function ReadableState(options, stream) {
        var Duplex = __webpack_require__(10)
        options = options || {}
        var hwm = options.highWaterMark
        var defaultHwm = options.objectMode ? 16 : 16 * 1024
        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm
        this.highWaterMark = ~~this.highWaterMark
        this.buffer = []
        this.length = 0
        this.pipes = null
        this.pipesCount = 0
        this.flowing = null
        this.ended = false
        this.endEmitted = false
        this.reading = false
        this.sync = true
        this.needReadable = false
        this.emittedReadable = false
        this.readableListening = false
        this.objectMode = !!options.objectMode
        if (stream instanceof Duplex)
          this.objectMode = this.objectMode || !!options.readableObjectMode
        this.defaultEncoding = options.defaultEncoding || 'utf8'
        this.ranOut = false
        this.awaitDrain = 0
        this.readingMore = false
        this.decoder = null
        this.encoding = null
        if (options.encoding) {
          if (!StringDecoder)
            StringDecoder = __webpack_require__(18).StringDecoder
          this.decoder = new StringDecoder(options.encoding)
          this.encoding = options.encoding
        }
      }
      function Readable(options) {
        var Duplex = __webpack_require__(10)
        if (!(this instanceof Readable)) return new Readable(options)
        this._readableState = new ReadableState(options, this)
        this.readable = true
        Stream.call(this)
      }
      Readable.prototype.push = function(chunk, encoding) {
        var state = this._readableState
        if (util.isString(chunk) && !state.objectMode) {
          encoding = encoding || state.defaultEncoding
          if (encoding !== state.encoding) {
            chunk = new Buffer(chunk, encoding)
            encoding = ''
          }
        }
        return readableAddChunk(this, state, chunk, encoding, false)
      }
      Readable.prototype.unshift = function(chunk) {
        var state = this._readableState
        return readableAddChunk(this, state, chunk, '', true)
      }
      function readableAddChunk(stream, state, chunk, encoding, addToFront) {
        var er = chunkInvalid(state, chunk)
        if (er) {
          stream.emit('error', er)
        } else if (util.isNullOrUndefined(chunk)) {
          state.reading = false
          if (!state.ended) onEofChunk(stream, state)
        } else if (state.objectMode || (chunk && chunk.length > 0)) {
          if (state.ended && !addToFront) {
            var e = new Error('stream.push() after EOF')
            stream.emit('error', e)
          } else if (state.endEmitted && addToFront) {
            var e = new Error('stream.unshift() after end event')
            stream.emit('error', e)
          } else {
            if (state.decoder && !addToFront && !encoding)
              chunk = state.decoder.write(chunk)
            if (!addToFront) state.reading = false
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk)
              stream.read(0)
            } else {
              state.length += state.objectMode ? 1 : chunk.length
              if (addToFront) state.buffer.unshift(chunk)
              else state.buffer.push(chunk)
              if (state.needReadable) emitReadable(stream)
            }
            maybeReadMore(stream, state)
          }
        } else if (!addToFront) {
          state.reading = false
        }
        return needMoreData(state)
      }
      function needMoreData(state) {
        return (
          !state.ended &&
          (state.needReadable ||
            state.length < state.highWaterMark ||
            state.length === 0)
        )
      }
      Readable.prototype.setEncoding = function(enc) {
        if (!StringDecoder)
          StringDecoder = __webpack_require__(18).StringDecoder
        this._readableState.decoder = new StringDecoder(enc)
        this._readableState.encoding = enc
        return this
      }
      var MAX_HWM = 8388608
      function roundUpToNextPowerOf2(n) {
        if (n >= MAX_HWM) {
          n = MAX_HWM
        } else {
          n--
          for (var p = 1; p < 32; p <<= 1) n |= n >> p
          n++
        }
        return n
      }
      function howMuchToRead(n, state) {
        if (state.length === 0 && state.ended) return 0
        if (state.objectMode) return n === 0 ? 0 : 1
        if (isNaN(n) || util.isNull(n)) {
          if (state.flowing && state.buffer.length)
            return state.buffer[0].length
          else return state.length
        }
        if (n <= 0) return 0
        if (n > state.highWaterMark)
          state.highWaterMark = roundUpToNextPowerOf2(n)
        if (n > state.length) {
          if (!state.ended) {
            state.needReadable = true
            return 0
          } else return state.length
        }
        return n
      }
      Readable.prototype.read = function(n) {
        debug('read', n)
        var state = this._readableState
        var nOrig = n
        if (!util.isNumber(n) || n > 0) state.emittedReadable = false
        if (
          n === 0 &&
          state.needReadable &&
          (state.length >= state.highWaterMark || state.ended)
        ) {
          debug('read: emitReadable', state.length, state.ended)
          if (state.length === 0 && state.ended) endReadable(this)
          else emitReadable(this)
          return null
        }
        n = howMuchToRead(n, state)
        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this)
          return null
        }
        var doRead = state.needReadable
        debug('need readable', doRead)
        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true
          debug('length less than watermark', doRead)
        }
        if (state.ended || state.reading) {
          doRead = false
          debug('reading or ended', doRead)
        }
        if (doRead) {
          debug('do read')
          state.reading = true
          state.sync = true
          if (state.length === 0) state.needReadable = true
          this._read(state.highWaterMark)
          state.sync = false
        }
        if (doRead && !state.reading) n = howMuchToRead(nOrig, state)
        var ret
        if (n > 0) ret = fromList(n, state)
        else ret = null
        if (util.isNull(ret)) {
          state.needReadable = true
          n = 0
        }
        state.length -= n
        if (state.length === 0 && !state.ended) state.needReadable = true
        if (nOrig !== n && state.ended && state.length === 0) endReadable(this)
        if (!util.isNull(ret)) this.emit('data', ret)
        return ret
      }
      function chunkInvalid(state, chunk) {
        var er = null
        if (
          !util.isBuffer(chunk) &&
          !util.isString(chunk) &&
          !util.isNullOrUndefined(chunk) &&
          !state.objectMode
        ) {
          er = new TypeError('Invalid non-string/buffer chunk')
        }
        return er
      }
      function onEofChunk(stream, state) {
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end()
          if (chunk && chunk.length) {
            state.buffer.push(chunk)
            state.length += state.objectMode ? 1 : chunk.length
          }
        }
        state.ended = true
        emitReadable(stream)
      }
      function emitReadable(stream) {
        var state = stream._readableState
        state.needReadable = false
        if (!state.emittedReadable) {
          debug('emitReadable', state.flowing)
          state.emittedReadable = true
          if (state.sync)
            process.nextTick(function() {
              emitReadable_(stream)
            })
          else emitReadable_(stream)
        }
      }
      function emitReadable_(stream) {
        debug('emit readable')
        stream.emit('readable')
        flow(stream)
      }
      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true
          process.nextTick(function() {
            maybeReadMore_(stream, state)
          })
        }
      }
      function maybeReadMore_(stream, state) {
        var len = state.length
        while (
          !state.reading &&
          !state.flowing &&
          !state.ended &&
          state.length < state.highWaterMark
        ) {
          debug('maybeReadMore read 0')
          stream.read(0)
          if (len === state.length) break
          else len = state.length
        }
        state.readingMore = false
      }
      Readable.prototype._read = function(n) {
        this.emit('error', new Error('not implemented'))
      }
      Readable.prototype.pipe = function(dest, pipeOpts) {
        var src = this
        var state = this._readableState
        switch (state.pipesCount) {
          case 0:
            state.pipes = dest
            break

          case 1:
            state.pipes = [state.pipes, dest]
            break

          default:
            state.pipes.push(dest)
            break
        }
        state.pipesCount += 1
        debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts)
        var doEnd =
          (!pipeOpts || pipeOpts.end !== false) &&
          dest !== process.stdout &&
          dest !== process.stderr
        var endFn = doEnd ? onend : cleanup
        if (state.endEmitted) process.nextTick(endFn)
        else src.once('end', endFn)
        dest.on('unpipe', onunpipe)
        function onunpipe(readable) {
          debug('onunpipe')
          if (readable === src) {
            cleanup()
          }
        }
        function onend() {
          debug('onend')
          dest.end()
        }
        var ondrain = pipeOnDrain(src)
        dest.on('drain', ondrain)
        function cleanup() {
          debug('cleanup')
          dest.removeListener('close', onclose)
          dest.removeListener('finish', onfinish)
          dest.removeListener('drain', ondrain)
          dest.removeListener('error', onerror)
          dest.removeListener('unpipe', onunpipe)
          src.removeListener('end', onend)
          src.removeListener('end', cleanup)
          src.removeListener('data', ondata)
          if (
            state.awaitDrain &&
            (!dest._writableState || dest._writableState.needDrain)
          )
            ondrain()
        }
        src.on('data', ondata)
        function ondata(chunk) {
          debug('ondata')
          var ret = dest.write(chunk)
          if (false === ret) {
            debug('false write response, pause', src._readableState.awaitDrain)
            src._readableState.awaitDrain++
            src.pause()
          }
        }
        function onerror(er) {
          debug('onerror', er)
          unpipe()
          dest.removeListener('error', onerror)
          if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er)
        }
        if (!dest._events || !dest._events.error) dest.on('error', onerror)
        else if (isArray(dest._events.error))
          dest._events.error.unshift(onerror)
        else dest._events.error = [onerror, dest._events.error]
        function onclose() {
          dest.removeListener('finish', onfinish)
          unpipe()
        }
        dest.once('close', onclose)
        function onfinish() {
          debug('onfinish')
          dest.removeListener('close', onclose)
          unpipe()
        }
        dest.once('finish', onfinish)
        function unpipe() {
          debug('unpipe')
          src.unpipe(dest)
        }
        dest.emit('pipe', src)
        if (!state.flowing) {
          debug('pipe resume')
          src.resume()
        }
        return dest
      }
      function pipeOnDrain(src) {
        return function() {
          var state = src._readableState
          debug('pipeOnDrain', state.awaitDrain)
          if (state.awaitDrain) state.awaitDrain--
          if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
            state.flowing = true
            flow(src)
          }
        }
      }
      Readable.prototype.unpipe = function(dest) {
        var state = this._readableState
        if (state.pipesCount === 0) return this
        if (state.pipesCount === 1) {
          if (dest && dest !== state.pipes) return this
          if (!dest) dest = state.pipes
          state.pipes = null
          state.pipesCount = 0
          state.flowing = false
          if (dest) dest.emit('unpipe', this)
          return this
        }
        if (!dest) {
          var dests = state.pipes
          var len = state.pipesCount
          state.pipes = null
          state.pipesCount = 0
          state.flowing = false
          for (var i = 0; i < len; i++) dests[i].emit('unpipe', this)
          return this
        }
        var i = indexOf(state.pipes, dest)
        if (i === -1) return this
        state.pipes.splice(i, 1)
        state.pipesCount -= 1
        if (state.pipesCount === 1) state.pipes = state.pipes[0]
        dest.emit('unpipe', this)
        return this
      }
      Readable.prototype.on = function(ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn)
        if (ev === 'data' && false !== this._readableState.flowing) {
          this.resume()
        }
        if (ev === 'readable' && this.readable) {
          var state = this._readableState
          if (!state.readableListening) {
            state.readableListening = true
            state.emittedReadable = false
            state.needReadable = true
            if (!state.reading) {
              var self = this
              process.nextTick(function() {
                debug('readable nexttick read 0')
                self.read(0)
              })
            } else if (state.length) {
              emitReadable(this, state)
            }
          }
        }
        return res
      }
      Readable.prototype.addListener = Readable.prototype.on
      Readable.prototype.resume = function() {
        var state = this._readableState
        if (!state.flowing) {
          debug('resume')
          state.flowing = true
          if (!state.reading) {
            debug('resume read 0')
            this.read(0)
          }
          resume(this, state)
        }
        return this
      }
      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true
          process.nextTick(function() {
            resume_(stream, state)
          })
        }
      }
      function resume_(stream, state) {
        state.resumeScheduled = false
        stream.emit('resume')
        flow(stream)
        if (state.flowing && !state.reading) stream.read(0)
      }
      Readable.prototype.pause = function() {
        debug('call pause flowing=%j', this._readableState.flowing)
        if (false !== this._readableState.flowing) {
          debug('pause')
          this._readableState.flowing = false
          this.emit('pause')
        }
        return this
      }
      function flow(stream) {
        var state = stream._readableState
        debug('flow', state.flowing)
        if (state.flowing) {
          do {
            var chunk = stream.read()
          } while (null !== chunk && state.flowing)
        }
      }
      Readable.prototype.wrap = function(stream) {
        var state = this._readableState
        var paused = false
        var self = this
        stream.on('end', function() {
          debug('wrapped end')
          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end()
            if (chunk && chunk.length) self.push(chunk)
          }
          self.push(null)
        })
        stream.on('data', function(chunk) {
          debug('wrapped data')
          if (state.decoder) chunk = state.decoder.write(chunk)
          if (!chunk || (!state.objectMode && !chunk.length)) return
          var ret = self.push(chunk)
          if (!ret) {
            paused = true
            stream.pause()
          }
        })
        for (var i in stream) {
          if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
            this[i] = (function(method) {
              return function() {
                return stream[method].apply(stream, arguments)
              }
            })(i)
          }
        }
        var events = ['error', 'close', 'destroy', 'pause', 'resume']
        forEach(events, function(ev) {
          stream.on(ev, self.emit.bind(self, ev))
        })
        self._read = function(n) {
          debug('wrapped _read', n)
          if (paused) {
            paused = false
            stream.resume()
          }
        }
        return self
      }
      Readable._fromList = fromList
      function fromList(n, state) {
        var list = state.buffer
        var length = state.length
        var stringMode = !!state.decoder
        var objectMode = !!state.objectMode
        var ret
        if (list.length === 0) return null
        if (length === 0) ret = null
        else if (objectMode) ret = list.shift()
        else if (!n || n >= length) {
          if (stringMode) ret = list.join('')
          else ret = Buffer.concat(list, length)
          list.length = 0
        } else {
          if (n < list[0].length) {
            var buf = list[0]
            ret = buf.slice(0, n)
            list[0] = buf.slice(n)
          } else if (n === list[0].length) {
            ret = list.shift()
          } else {
            if (stringMode) ret = ''
            else ret = new Buffer(n)
            var c = 0
            for (var i = 0, l = list.length; i < l && c < n; i++) {
              var buf = list[0]
              var cpy = Math.min(n - c, buf.length)
              if (stringMode) ret += buf.slice(0, cpy)
              else buf.copy(ret, c, 0, cpy)
              if (cpy < buf.length) list[0] = buf.slice(cpy)
              else list.shift()
              c += cpy
            }
          }
        }
        return ret
      }
      function endReadable(stream) {
        var state = stream._readableState
        if (state.length > 0)
          throw new Error('endReadable called on non-empty stream')
        if (!state.endEmitted) {
          state.ended = true
          process.nextTick(function() {
            if (!state.endEmitted && state.length === 0) {
              state.endEmitted = true
              stream.readable = false
              stream.emit('end')
            }
          })
        }
      }
      function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i)
        }
      }
      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i
        }
        return -1
      }
    }.call(exports, __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    ;(function(process) {
      module.exports = Writable
      var Buffer = __webpack_require__(7).Buffer
      Writable.WritableState = WritableState
      var util = __webpack_require__(2)
      util.inherits = __webpack_require__(0)
      var Stream = __webpack_require__(12)
      util.inherits(Writable, Stream)
      function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk
        this.encoding = encoding
        this.callback = cb
      }
      function WritableState(options, stream) {
        var Duplex = __webpack_require__(10)
        options = options || {}
        var hwm = options.highWaterMark
        var defaultHwm = options.objectMode ? 16 : 16 * 1024
        this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm
        this.objectMode = !!options.objectMode
        if (stream instanceof Duplex)
          this.objectMode = this.objectMode || !!options.writableObjectMode
        this.highWaterMark = ~~this.highWaterMark
        this.needDrain = false
        this.ending = false
        this.ended = false
        this.finished = false
        var noDecode = options.decodeStrings === false
        this.decodeStrings = !noDecode
        this.defaultEncoding = options.defaultEncoding || 'utf8'
        this.length = 0
        this.writing = false
        this.corked = 0
        this.sync = true
        this.bufferProcessing = false
        this.onwrite = function(er) {
          onwrite(stream, er)
        }
        this.writecb = null
        this.writelen = 0
        this.buffer = []
        this.pendingcb = 0
        this.prefinished = false
        this.errorEmitted = false
      }
      function Writable(options) {
        var Duplex = __webpack_require__(10)
        if (!(this instanceof Writable) && !(this instanceof Duplex))
          return new Writable(options)
        this._writableState = new WritableState(options, this)
        this.writable = true
        Stream.call(this)
      }
      Writable.prototype.pipe = function() {
        this.emit('error', new Error('Cannot pipe. Not readable.'))
      }
      function writeAfterEnd(stream, state, cb) {
        var er = new Error('write after end')
        stream.emit('error', er)
        process.nextTick(function() {
          cb(er)
        })
      }
      function validChunk(stream, state, chunk, cb) {
        var valid = true
        if (
          !util.isBuffer(chunk) &&
          !util.isString(chunk) &&
          !util.isNullOrUndefined(chunk) &&
          !state.objectMode
        ) {
          var er = new TypeError('Invalid non-string/buffer chunk')
          stream.emit('error', er)
          process.nextTick(function() {
            cb(er)
          })
          valid = false
        }
        return valid
      }
      Writable.prototype.write = function(chunk, encoding, cb) {
        var state = this._writableState
        var ret = false
        if (util.isFunction(encoding)) {
          cb = encoding
          encoding = null
        }
        if (util.isBuffer(chunk)) encoding = 'buffer'
        else if (!encoding) encoding = state.defaultEncoding
        if (!util.isFunction(cb)) cb = function() {}
        if (state.ended) writeAfterEnd(this, state, cb)
        else if (validChunk(this, state, chunk, cb)) {
          state.pendingcb++
          ret = writeOrBuffer(this, state, chunk, encoding, cb)
        }
        return ret
      }
      Writable.prototype.cork = function() {
        var state = this._writableState
        state.corked++
      }
      Writable.prototype.uncork = function() {
        var state = this._writableState
        if (state.corked) {
          state.corked--
          if (
            !state.writing &&
            !state.corked &&
            !state.finished &&
            !state.bufferProcessing &&
            state.buffer.length
          )
            clearBuffer(this, state)
        }
      }
      function decodeChunk(state, chunk, encoding) {
        if (
          !state.objectMode &&
          state.decodeStrings !== false &&
          util.isString(chunk)
        ) {
          chunk = new Buffer(chunk, encoding)
        }
        return chunk
      }
      function writeOrBuffer(stream, state, chunk, encoding, cb) {
        chunk = decodeChunk(state, chunk, encoding)
        if (util.isBuffer(chunk)) encoding = 'buffer'
        var len = state.objectMode ? 1 : chunk.length
        state.length += len
        var ret = state.length < state.highWaterMark
        if (!ret) state.needDrain = true
        if (state.writing || state.corked)
          state.buffer.push(new WriteReq(chunk, encoding, cb))
        else doWrite(stream, state, false, len, chunk, encoding, cb)
        return ret
      }
      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len
        state.writecb = cb
        state.writing = true
        state.sync = true
        if (writev) stream._writev(chunk, state.onwrite)
        else stream._write(chunk, encoding, state.onwrite)
        state.sync = false
      }
      function onwriteError(stream, state, sync, er, cb) {
        if (sync)
          process.nextTick(function() {
            state.pendingcb--
            cb(er)
          })
        else {
          state.pendingcb--
          cb(er)
        }
        stream._writableState.errorEmitted = true
        stream.emit('error', er)
      }
      function onwriteStateUpdate(state) {
        state.writing = false
        state.writecb = null
        state.length -= state.writelen
        state.writelen = 0
      }
      function onwrite(stream, er) {
        var state = stream._writableState
        var sync = state.sync
        var cb = state.writecb
        onwriteStateUpdate(state)
        if (er) onwriteError(stream, state, sync, er, cb)
        else {
          var finished = needFinish(stream, state)
          if (
            !finished &&
            !state.corked &&
            !state.bufferProcessing &&
            state.buffer.length
          ) {
            clearBuffer(stream, state)
          }
          if (sync) {
            process.nextTick(function() {
              afterWrite(stream, state, finished, cb)
            })
          } else {
            afterWrite(stream, state, finished, cb)
          }
        }
      }
      function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state)
        state.pendingcb--
        cb()
        finishMaybe(stream, state)
      }
      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false
          stream.emit('drain')
        }
      }
      function clearBuffer(stream, state) {
        state.bufferProcessing = true
        if (stream._writev && state.buffer.length > 1) {
          var cbs = []
          for (var c = 0; c < state.buffer.length; c++)
            cbs.push(state.buffer[c].callback)
          state.pendingcb++
          doWrite(stream, state, true, state.length, state.buffer, '', function(
            err
          ) {
            for (var i = 0; i < cbs.length; i++) {
              state.pendingcb--
              cbs[i](err)
            }
          })
          state.buffer = []
        } else {
          for (var c = 0; c < state.buffer.length; c++) {
            var entry = state.buffer[c]
            var chunk = entry.chunk
            var encoding = entry.encoding
            var cb = entry.callback
            var len = state.objectMode ? 1 : chunk.length
            doWrite(stream, state, false, len, chunk, encoding, cb)
            if (state.writing) {
              c++
              break
            }
          }
          if (c < state.buffer.length) state.buffer = state.buffer.slice(c)
          else state.buffer.length = 0
        }
        state.bufferProcessing = false
      }
      Writable.prototype._write = function(chunk, encoding, cb) {
        cb(new Error('not implemented'))
      }
      Writable.prototype._writev = null
      Writable.prototype.end = function(chunk, encoding, cb) {
        var state = this._writableState
        if (util.isFunction(chunk)) {
          cb = chunk
          chunk = null
          encoding = null
        } else if (util.isFunction(encoding)) {
          cb = encoding
          encoding = null
        }
        if (!util.isNullOrUndefined(chunk)) this.write(chunk, encoding)
        if (state.corked) {
          state.corked = 1
          this.uncork()
        }
        if (!state.ending && !state.finished) endWritable(this, state, cb)
      }
      function needFinish(stream, state) {
        return (
          state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing
        )
      }
      function prefinish(stream, state) {
        if (!state.prefinished) {
          state.prefinished = true
          stream.emit('prefinish')
        }
      }
      function finishMaybe(stream, state) {
        var need = needFinish(stream, state)
        if (need) {
          if (state.pendingcb === 0) {
            prefinish(stream, state)
            state.finished = true
            stream.emit('finish')
          } else prefinish(stream, state)
        }
        return need
      }
      function endWritable(stream, state, cb) {
        state.ending = true
        finishMaybe(stream, state)
        if (cb) {
          if (state.finished) process.nextTick(cb)
          else stream.once('finish', cb)
        }
        state.ended = true
      }
    }.call(exports, __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    module.exports = Transform
    var Duplex = __webpack_require__(10)
    var util = __webpack_require__(2)
    util.inherits = __webpack_require__(0)
    util.inherits(Transform, Duplex)
    function TransformState(options, stream) {
      this.afterTransform = function(er, data) {
        return afterTransform(stream, er, data)
      }
      this.needTransform = false
      this.transforming = false
      this.writecb = null
      this.writechunk = null
    }
    function afterTransform(stream, er, data) {
      var ts = stream._transformState
      ts.transforming = false
      var cb = ts.writecb
      if (!cb)
        return stream.emit('error', new Error('no writecb in Transform class'))
      ts.writechunk = null
      ts.writecb = null
      if (!util.isNullOrUndefined(data)) stream.push(data)
      if (cb) cb(er)
      var rs = stream._readableState
      rs.reading = false
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark)
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options)
      Duplex.call(this, options)
      this._transformState = new TransformState(options, this)
      var stream = this
      this._readableState.needReadable = true
      this._readableState.sync = false
      this.once('prefinish', function() {
        if (util.isFunction(this._flush))
          this._flush(function(er) {
            done(stream, er)
          })
        else done(stream)
      })
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false
      return Duplex.prototype.push.call(this, chunk, encoding)
    }
    Transform.prototype._transform = function(chunk, encoding, cb) {
      throw new Error('not implemented')
    }
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState
      ts.writecb = cb
      ts.writechunk = chunk
      ts.writeencoding = encoding
      if (!ts.transforming) {
        var rs = this._readableState
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark)
      }
    }
    Transform.prototype._read = function(n) {
      var ts = this._transformState
      if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
        ts.transforming = true
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform)
      } else {
        ts.needTransform = true
      }
    }
    function done(stream, er) {
      if (er) return stream.emit('error', er)
      var ws = stream._writableState
      var ts = stream._transformState
      if (ws.length)
        throw new Error('calling transform done when ws.length != 0')
      if (ts.transforming)
        throw new Error('calling transform done when still transforming')
      return stream.push(null)
    }
  },
  function(module, exports, __webpack_require__) {
    var ElementType = __webpack_require__(9)
    var entities = __webpack_require__(88)
    var booleanAttributes = {
      __proto__: null,
      allowfullscreen: true,
      async: true,
      autofocus: true,
      autoplay: true,
      checked: true,
      controls: true,
      default: true,
      defer: true,
      disabled: true,
      hidden: true,
      ismap: true,
      loop: true,
      multiple: true,
      muted: true,
      open: true,
      readonly: true,
      required: true,
      reversed: true,
      scoped: true,
      seamless: true,
      selected: true,
      typemustmatch: true
    }
    var unencodedElements = {
      __proto__: null,
      style: true,
      script: true,
      xmp: true,
      iframe: true,
      noembed: true,
      noframes: true,
      plaintext: true,
      noscript: true
    }
    function formatAttrs(attributes, opts) {
      if (!attributes) return
      var output = '',
        value
      for (var key in attributes) {
        value = attributes[key]
        if (output) {
          output += ' '
        }
        if (!value && booleanAttributes[key]) {
          output += key
        } else {
          output +=
            key +
            '="' +
            (opts.decodeEntities ? entities.encodeXML(value) : value) +
            '"'
        }
      }
      return output
    }
    var singleTag = {
      __proto__: null,
      area: true,
      base: true,
      basefont: true,
      br: true,
      col: true,
      command: true,
      embed: true,
      frame: true,
      hr: true,
      img: true,
      input: true,
      isindex: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true,
      path: true,
      circle: true,
      ellipse: true,
      line: true,
      rect: true,
      use: true
    }
    var render = (module.exports = function(dom, opts) {
      if (!Array.isArray(dom) && !dom.cheerio) dom = [dom]
      opts = opts || {}
      var output = ''
      for (var i = 0; i < dom.length; i++) {
        var elem = dom[i]
        if (elem.type === 'root') output += render(elem.children, opts)
        else if (ElementType.isTag(elem)) output += renderTag(elem, opts)
        else if (elem.type === ElementType.Directive)
          output += renderDirective(elem)
        else if (elem.type === ElementType.Comment)
          output += renderComment(elem)
        else if (elem.type === ElementType.CDATA) output += renderCdata(elem)
        else output += renderText(elem, opts)
      }
      return output
    })
    function renderTag(elem, opts) {
      var tag = '<' + elem.name,
        attribs = formatAttrs(elem.attribs, opts)
      if (attribs) {
        tag += ' ' + attribs
      }
      if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {
        tag += '/>'
      } else {
        tag += '>'
        tag += render(elem.children, opts)
        if (!singleTag[elem.name] || opts.xmlMode) {
          tag += '</' + elem.name + '>'
        }
      }
      return tag
    }
    function renderDirective(elem) {
      return '<' + elem.data + '>'
    }
    function renderText(elem, opts) {
      var data = elem.data || ''
      if (
        opts.decodeEntities &&
        !(elem.parent && elem.parent.name in unencodedElements)
      ) {
        data = entities.encodeXML(data)
      }
      return data
    }
    function renderCdata(elem) {
      return '<![CDATA[' + elem.children[0].data + ']]>'
    }
    function renderComment(elem) {
      return '\x3c!--' + elem.data + '--\x3e'
    }
  },
  function(module, exports) {
    module.exports = {
      amp: '&',
      apos: "'",
      gt: '>',
      lt: '<',
      quot: '"'
    }
  },
  function(module, exports) {
    module.exports = {
      Aacute: 'Á',
      aacute: 'á',
      Abreve: 'Ă',
      abreve: 'ă',
      ac: '∾',
      acd: '∿',
      acE: '∾̳',
      Acirc: 'Â',
      acirc: 'â',
      acute: '´',
      Acy: 'А',
      acy: 'а',
      AElig: 'Æ',
      aelig: 'æ',
      af: '⁡',
      Afr: '𝔄',
      afr: '𝔞',
      Agrave: 'À',
      agrave: 'à',
      alefsym: 'ℵ',
      aleph: 'ℵ',
      Alpha: 'Α',
      alpha: 'α',
      Amacr: 'Ā',
      amacr: 'ā',
      amalg: '⨿',
      amp: '&',
      AMP: '&',
      andand: '⩕',
      And: '⩓',
      and: '∧',
      andd: '⩜',
      andslope: '⩘',
      andv: '⩚',
      ang: '∠',
      ange: '⦤',
      angle: '∠',
      angmsdaa: '⦨',
      angmsdab: '⦩',
      angmsdac: '⦪',
      angmsdad: '⦫',
      angmsdae: '⦬',
      angmsdaf: '⦭',
      angmsdag: '⦮',
      angmsdah: '⦯',
      angmsd: '∡',
      angrt: '∟',
      angrtvb: '⊾',
      angrtvbd: '⦝',
      angsph: '∢',
      angst: 'Å',
      angzarr: '⍼',
      Aogon: 'Ą',
      aogon: 'ą',
      Aopf: '𝔸',
      aopf: '𝕒',
      apacir: '⩯',
      ap: '≈',
      apE: '⩰',
      ape: '≊',
      apid: '≋',
      apos: "'",
      ApplyFunction: '⁡',
      approx: '≈',
      approxeq: '≊',
      Aring: 'Å',
      aring: 'å',
      Ascr: '𝒜',
      ascr: '𝒶',
      Assign: '≔',
      ast: '*',
      asymp: '≈',
      asympeq: '≍',
      Atilde: 'Ã',
      atilde: 'ã',
      Auml: 'Ä',
      auml: 'ä',
      awconint: '∳',
      awint: '⨑',
      backcong: '≌',
      backepsilon: '϶',
      backprime: '‵',
      backsim: '∽',
      backsimeq: '⋍',
      Backslash: '∖',
      Barv: '⫧',
      barvee: '⊽',
      barwed: '⌅',
      Barwed: '⌆',
      barwedge: '⌅',
      bbrk: '⎵',
      bbrktbrk: '⎶',
      bcong: '≌',
      Bcy: 'Б',
      bcy: 'б',
      bdquo: '„',
      becaus: '∵',
      because: '∵',
      Because: '∵',
      bemptyv: '⦰',
      bepsi: '϶',
      bernou: 'ℬ',
      Bernoullis: 'ℬ',
      Beta: 'Β',
      beta: 'β',
      beth: 'ℶ',
      between: '≬',
      Bfr: '𝔅',
      bfr: '𝔟',
      bigcap: '⋂',
      bigcirc: '◯',
      bigcup: '⋃',
      bigodot: '⨀',
      bigoplus: '⨁',
      bigotimes: '⨂',
      bigsqcup: '⨆',
      bigstar: '★',
      bigtriangledown: '▽',
      bigtriangleup: '△',
      biguplus: '⨄',
      bigvee: '⋁',
      bigwedge: '⋀',
      bkarow: '⤍',
      blacklozenge: '⧫',
      blacksquare: '▪',
      blacktriangle: '▴',
      blacktriangledown: '▾',
      blacktriangleleft: '◂',
      blacktriangleright: '▸',
      blank: '␣',
      blk12: '▒',
      blk14: '░',
      blk34: '▓',
      block: '█',
      bne: '=⃥',
      bnequiv: '≡⃥',
      bNot: '⫭',
      bnot: '⌐',
      Bopf: '𝔹',
      bopf: '𝕓',
      bot: '⊥',
      bottom: '⊥',
      bowtie: '⋈',
      boxbox: '⧉',
      boxdl: '┐',
      boxdL: '╕',
      boxDl: '╖',
      boxDL: '╗',
      boxdr: '┌',
      boxdR: '╒',
      boxDr: '╓',
      boxDR: '╔',
      boxh: '─',
      boxH: '═',
      boxhd: '┬',
      boxHd: '╤',
      boxhD: '╥',
      boxHD: '╦',
      boxhu: '┴',
      boxHu: '╧',
      boxhU: '╨',
      boxHU: '╩',
      boxminus: '⊟',
      boxplus: '⊞',
      boxtimes: '⊠',
      boxul: '┘',
      boxuL: '╛',
      boxUl: '╜',
      boxUL: '╝',
      boxur: '└',
      boxuR: '╘',
      boxUr: '╙',
      boxUR: '╚',
      boxv: '│',
      boxV: '║',
      boxvh: '┼',
      boxvH: '╪',
      boxVh: '╫',
      boxVH: '╬',
      boxvl: '┤',
      boxvL: '╡',
      boxVl: '╢',
      boxVL: '╣',
      boxvr: '├',
      boxvR: '╞',
      boxVr: '╟',
      boxVR: '╠',
      bprime: '‵',
      breve: '˘',
      Breve: '˘',
      brvbar: '¦',
      bscr: '𝒷',
      Bscr: 'ℬ',
      bsemi: '⁏',
      bsim: '∽',
      bsime: '⋍',
      bsolb: '⧅',
      bsol: '\\',
      bsolhsub: '⟈',
      bull: '•',
      bullet: '•',
      bump: '≎',
      bumpE: '⪮',
      bumpe: '≏',
      Bumpeq: '≎',
      bumpeq: '≏',
      Cacute: 'Ć',
      cacute: 'ć',
      capand: '⩄',
      capbrcup: '⩉',
      capcap: '⩋',
      cap: '∩',
      Cap: '⋒',
      capcup: '⩇',
      capdot: '⩀',
      CapitalDifferentialD: 'ⅅ',
      caps: '∩︀',
      caret: '⁁',
      caron: 'ˇ',
      Cayleys: 'ℭ',
      ccaps: '⩍',
      Ccaron: 'Č',
      ccaron: 'č',
      Ccedil: 'Ç',
      ccedil: 'ç',
      Ccirc: 'Ĉ',
      ccirc: 'ĉ',
      Cconint: '∰',
      ccups: '⩌',
      ccupssm: '⩐',
      Cdot: 'Ċ',
      cdot: 'ċ',
      cedil: '¸',
      Cedilla: '¸',
      cemptyv: '⦲',
      cent: '¢',
      centerdot: '·',
      CenterDot: '·',
      cfr: '𝔠',
      Cfr: 'ℭ',
      CHcy: 'Ч',
      chcy: 'ч',
      check: '✓',
      checkmark: '✓',
      Chi: 'Χ',
      chi: 'χ',
      circ: 'ˆ',
      circeq: '≗',
      circlearrowleft: '↺',
      circlearrowright: '↻',
      circledast: '⊛',
      circledcirc: '⊚',
      circleddash: '⊝',
      CircleDot: '⊙',
      circledR: '®',
      circledS: 'Ⓢ',
      CircleMinus: '⊖',
      CirclePlus: '⊕',
      CircleTimes: '⊗',
      cir: '○',
      cirE: '⧃',
      cire: '≗',
      cirfnint: '⨐',
      cirmid: '⫯',
      cirscir: '⧂',
      ClockwiseContourIntegral: '∲',
      CloseCurlyDoubleQuote: '”',
      CloseCurlyQuote: '’',
      clubs: '♣',
      clubsuit: '♣',
      colon: ':',
      Colon: '∷',
      Colone: '⩴',
      colone: '≔',
      coloneq: '≔',
      comma: ',',
      commat: '@',
      comp: '∁',
      compfn: '∘',
      complement: '∁',
      complexes: 'ℂ',
      cong: '≅',
      congdot: '⩭',
      Congruent: '≡',
      conint: '∮',
      Conint: '∯',
      ContourIntegral: '∮',
      copf: '𝕔',
      Copf: 'ℂ',
      coprod: '∐',
      Coproduct: '∐',
      copy: '©',
      COPY: '©',
      copysr: '℗',
      CounterClockwiseContourIntegral: '∳',
      crarr: '↵',
      cross: '✗',
      Cross: '⨯',
      Cscr: '𝒞',
      cscr: '𝒸',
      csub: '⫏',
      csube: '⫑',
      csup: '⫐',
      csupe: '⫒',
      ctdot: '⋯',
      cudarrl: '⤸',
      cudarrr: '⤵',
      cuepr: '⋞',
      cuesc: '⋟',
      cularr: '↶',
      cularrp: '⤽',
      cupbrcap: '⩈',
      cupcap: '⩆',
      CupCap: '≍',
      cup: '∪',
      Cup: '⋓',
      cupcup: '⩊',
      cupdot: '⊍',
      cupor: '⩅',
      cups: '∪︀',
      curarr: '↷',
      curarrm: '⤼',
      curlyeqprec: '⋞',
      curlyeqsucc: '⋟',
      curlyvee: '⋎',
      curlywedge: '⋏',
      curren: '¤',
      curvearrowleft: '↶',
      curvearrowright: '↷',
      cuvee: '⋎',
      cuwed: '⋏',
      cwconint: '∲',
      cwint: '∱',
      cylcty: '⌭',
      dagger: '†',
      Dagger: '‡',
      daleth: 'ℸ',
      darr: '↓',
      Darr: '↡',
      dArr: '⇓',
      dash: '‐',
      Dashv: '⫤',
      dashv: '⊣',
      dbkarow: '⤏',
      dblac: '˝',
      Dcaron: 'Ď',
      dcaron: 'ď',
      Dcy: 'Д',
      dcy: 'д',
      ddagger: '‡',
      ddarr: '⇊',
      DD: 'ⅅ',
      dd: 'ⅆ',
      DDotrahd: '⤑',
      ddotseq: '⩷',
      deg: '°',
      Del: '∇',
      Delta: 'Δ',
      delta: 'δ',
      demptyv: '⦱',
      dfisht: '⥿',
      Dfr: '𝔇',
      dfr: '𝔡',
      dHar: '⥥',
      dharl: '⇃',
      dharr: '⇂',
      DiacriticalAcute: '´',
      DiacriticalDot: '˙',
      DiacriticalDoubleAcute: '˝',
      DiacriticalGrave: '`',
      DiacriticalTilde: '˜',
      diam: '⋄',
      diamond: '⋄',
      Diamond: '⋄',
      diamondsuit: '♦',
      diams: '♦',
      die: '¨',
      DifferentialD: 'ⅆ',
      digamma: 'ϝ',
      disin: '⋲',
      div: '÷',
      divide: '÷',
      divideontimes: '⋇',
      divonx: '⋇',
      DJcy: 'Ђ',
      djcy: 'ђ',
      dlcorn: '⌞',
      dlcrop: '⌍',
      dollar: '$',
      Dopf: '𝔻',
      dopf: '𝕕',
      Dot: '¨',
      dot: '˙',
      DotDot: '⃜',
      doteq: '≐',
      doteqdot: '≑',
      DotEqual: '≐',
      dotminus: '∸',
      dotplus: '∔',
      dotsquare: '⊡',
      doublebarwedge: '⌆',
      DoubleContourIntegral: '∯',
      DoubleDot: '¨',
      DoubleDownArrow: '⇓',
      DoubleLeftArrow: '⇐',
      DoubleLeftRightArrow: '⇔',
      DoubleLeftTee: '⫤',
      DoubleLongLeftArrow: '⟸',
      DoubleLongLeftRightArrow: '⟺',
      DoubleLongRightArrow: '⟹',
      DoubleRightArrow: '⇒',
      DoubleRightTee: '⊨',
      DoubleUpArrow: '⇑',
      DoubleUpDownArrow: '⇕',
      DoubleVerticalBar: '∥',
      DownArrowBar: '⤓',
      downarrow: '↓',
      DownArrow: '↓',
      Downarrow: '⇓',
      DownArrowUpArrow: '⇵',
      DownBreve: '̑',
      downdownarrows: '⇊',
      downharpoonleft: '⇃',
      downharpoonright: '⇂',
      DownLeftRightVector: '⥐',
      DownLeftTeeVector: '⥞',
      DownLeftVectorBar: '⥖',
      DownLeftVector: '↽',
      DownRightTeeVector: '⥟',
      DownRightVectorBar: '⥗',
      DownRightVector: '⇁',
      DownTeeArrow: '↧',
      DownTee: '⊤',
      drbkarow: '⤐',
      drcorn: '⌟',
      drcrop: '⌌',
      Dscr: '𝒟',
      dscr: '𝒹',
      DScy: 'Ѕ',
      dscy: 'ѕ',
      dsol: '⧶',
      Dstrok: 'Đ',
      dstrok: 'đ',
      dtdot: '⋱',
      dtri: '▿',
      dtrif: '▾',
      duarr: '⇵',
      duhar: '⥯',
      dwangle: '⦦',
      DZcy: 'Џ',
      dzcy: 'џ',
      dzigrarr: '⟿',
      Eacute: 'É',
      eacute: 'é',
      easter: '⩮',
      Ecaron: 'Ě',
      ecaron: 'ě',
      Ecirc: 'Ê',
      ecirc: 'ê',
      ecir: '≖',
      ecolon: '≕',
      Ecy: 'Э',
      ecy: 'э',
      eDDot: '⩷',
      Edot: 'Ė',
      edot: 'ė',
      eDot: '≑',
      ee: 'ⅇ',
      efDot: '≒',
      Efr: '𝔈',
      efr: '𝔢',
      eg: '⪚',
      Egrave: 'È',
      egrave: 'è',
      egs: '⪖',
      egsdot: '⪘',
      el: '⪙',
      Element: '∈',
      elinters: '⏧',
      ell: 'ℓ',
      els: '⪕',
      elsdot: '⪗',
      Emacr: 'Ē',
      emacr: 'ē',
      empty: '∅',
      emptyset: '∅',
      EmptySmallSquare: '◻',
      emptyv: '∅',
      EmptyVerySmallSquare: '▫',
      emsp13: ' ',
      emsp14: ' ',
      emsp: ' ',
      ENG: 'Ŋ',
      eng: 'ŋ',
      ensp: ' ',
      Eogon: 'Ę',
      eogon: 'ę',
      Eopf: '𝔼',
      eopf: '𝕖',
      epar: '⋕',
      eparsl: '⧣',
      eplus: '⩱',
      epsi: 'ε',
      Epsilon: 'Ε',
      epsilon: 'ε',
      epsiv: 'ϵ',
      eqcirc: '≖',
      eqcolon: '≕',
      eqsim: '≂',
      eqslantgtr: '⪖',
      eqslantless: '⪕',
      Equal: '⩵',
      equals: '=',
      EqualTilde: '≂',
      equest: '≟',
      Equilibrium: '⇌',
      equiv: '≡',
      equivDD: '⩸',
      eqvparsl: '⧥',
      erarr: '⥱',
      erDot: '≓',
      escr: 'ℯ',
      Escr: 'ℰ',
      esdot: '≐',
      Esim: '⩳',
      esim: '≂',
      Eta: 'Η',
      eta: 'η',
      ETH: 'Ð',
      eth: 'ð',
      Euml: 'Ë',
      euml: 'ë',
      euro: '€',
      excl: '!',
      exist: '∃',
      Exists: '∃',
      expectation: 'ℰ',
      exponentiale: 'ⅇ',
      ExponentialE: 'ⅇ',
      fallingdotseq: '≒',
      Fcy: 'Ф',
      fcy: 'ф',
      female: '♀',
      ffilig: 'ﬃ',
      fflig: 'ﬀ',
      ffllig: 'ﬄ',
      Ffr: '𝔉',
      ffr: '𝔣',
      filig: 'ﬁ',
      FilledSmallSquare: '◼',
      FilledVerySmallSquare: '▪',
      fjlig: 'fj',
      flat: '♭',
      fllig: 'ﬂ',
      fltns: '▱',
      fnof: 'ƒ',
      Fopf: '𝔽',
      fopf: '𝕗',
      forall: '∀',
      ForAll: '∀',
      fork: '⋔',
      forkv: '⫙',
      Fouriertrf: 'ℱ',
      fpartint: '⨍',
      frac12: '½',
      frac13: '⅓',
      frac14: '¼',
      frac15: '⅕',
      frac16: '⅙',
      frac18: '⅛',
      frac23: '⅔',
      frac25: '⅖',
      frac34: '¾',
      frac35: '⅗',
      frac38: '⅜',
      frac45: '⅘',
      frac56: '⅚',
      frac58: '⅝',
      frac78: '⅞',
      frasl: '⁄',
      frown: '⌢',
      fscr: '𝒻',
      Fscr: 'ℱ',
      gacute: 'ǵ',
      Gamma: 'Γ',
      gamma: 'γ',
      Gammad: 'Ϝ',
      gammad: 'ϝ',
      gap: '⪆',
      Gbreve: 'Ğ',
      gbreve: 'ğ',
      Gcedil: 'Ģ',
      Gcirc: 'Ĝ',
      gcirc: 'ĝ',
      Gcy: 'Г',
      gcy: 'г',
      Gdot: 'Ġ',
      gdot: 'ġ',
      ge: '≥',
      gE: '≧',
      gEl: '⪌',
      gel: '⋛',
      geq: '≥',
      geqq: '≧',
      geqslant: '⩾',
      gescc: '⪩',
      ges: '⩾',
      gesdot: '⪀',
      gesdoto: '⪂',
      gesdotol: '⪄',
      gesl: '⋛︀',
      gesles: '⪔',
      Gfr: '𝔊',
      gfr: '𝔤',
      gg: '≫',
      Gg: '⋙',
      ggg: '⋙',
      gimel: 'ℷ',
      GJcy: 'Ѓ',
      gjcy: 'ѓ',
      gla: '⪥',
      gl: '≷',
      glE: '⪒',
      glj: '⪤',
      gnap: '⪊',
      gnapprox: '⪊',
      gne: '⪈',
      gnE: '≩',
      gneq: '⪈',
      gneqq: '≩',
      gnsim: '⋧',
      Gopf: '𝔾',
      gopf: '𝕘',
      grave: '`',
      GreaterEqual: '≥',
      GreaterEqualLess: '⋛',
      GreaterFullEqual: '≧',
      GreaterGreater: '⪢',
      GreaterLess: '≷',
      GreaterSlantEqual: '⩾',
      GreaterTilde: '≳',
      Gscr: '𝒢',
      gscr: 'ℊ',
      gsim: '≳',
      gsime: '⪎',
      gsiml: '⪐',
      gtcc: '⪧',
      gtcir: '⩺',
      gt: '>',
      GT: '>',
      Gt: '≫',
      gtdot: '⋗',
      gtlPar: '⦕',
      gtquest: '⩼',
      gtrapprox: '⪆',
      gtrarr: '⥸',
      gtrdot: '⋗',
      gtreqless: '⋛',
      gtreqqless: '⪌',
      gtrless: '≷',
      gtrsim: '≳',
      gvertneqq: '≩︀',
      gvnE: '≩︀',
      Hacek: 'ˇ',
      hairsp: ' ',
      half: '½',
      hamilt: 'ℋ',
      HARDcy: 'Ъ',
      hardcy: 'ъ',
      harrcir: '⥈',
      harr: '↔',
      hArr: '⇔',
      harrw: '↭',
      Hat: '^',
      hbar: 'ℏ',
      Hcirc: 'Ĥ',
      hcirc: 'ĥ',
      hearts: '♥',
      heartsuit: '♥',
      hellip: '…',
      hercon: '⊹',
      hfr: '𝔥',
      Hfr: 'ℌ',
      HilbertSpace: 'ℋ',
      hksearow: '⤥',
      hkswarow: '⤦',
      hoarr: '⇿',
      homtht: '∻',
      hookleftarrow: '↩',
      hookrightarrow: '↪',
      hopf: '𝕙',
      Hopf: 'ℍ',
      horbar: '―',
      HorizontalLine: '─',
      hscr: '𝒽',
      Hscr: 'ℋ',
      hslash: 'ℏ',
      Hstrok: 'Ħ',
      hstrok: 'ħ',
      HumpDownHump: '≎',
      HumpEqual: '≏',
      hybull: '⁃',
      hyphen: '‐',
      Iacute: 'Í',
      iacute: 'í',
      ic: '⁣',
      Icirc: 'Î',
      icirc: 'î',
      Icy: 'И',
      icy: 'и',
      Idot: 'İ',
      IEcy: 'Е',
      iecy: 'е',
      iexcl: '¡',
      iff: '⇔',
      ifr: '𝔦',
      Ifr: 'ℑ',
      Igrave: 'Ì',
      igrave: 'ì',
      ii: 'ⅈ',
      iiiint: '⨌',
      iiint: '∭',
      iinfin: '⧜',
      iiota: '℩',
      IJlig: 'Ĳ',
      ijlig: 'ĳ',
      Imacr: 'Ī',
      imacr: 'ī',
      image: 'ℑ',
      ImaginaryI: 'ⅈ',
      imagline: 'ℐ',
      imagpart: 'ℑ',
      imath: 'ı',
      Im: 'ℑ',
      imof: '⊷',
      imped: 'Ƶ',
      Implies: '⇒',
      incare: '℅',
      in: '∈',
      infin: '∞',
      infintie: '⧝',
      inodot: 'ı',
      intcal: '⊺',
      int: '∫',
      Int: '∬',
      integers: 'ℤ',
      Integral: '∫',
      intercal: '⊺',
      Intersection: '⋂',
      intlarhk: '⨗',
      intprod: '⨼',
      InvisibleComma: '⁣',
      InvisibleTimes: '⁢',
      IOcy: 'Ё',
      iocy: 'ё',
      Iogon: 'Į',
      iogon: 'į',
      Iopf: '𝕀',
      iopf: '𝕚',
      Iota: 'Ι',
      iota: 'ι',
      iprod: '⨼',
      iquest: '¿',
      iscr: '𝒾',
      Iscr: 'ℐ',
      isin: '∈',
      isindot: '⋵',
      isinE: '⋹',
      isins: '⋴',
      isinsv: '⋳',
      isinv: '∈',
      it: '⁢',
      Itilde: 'Ĩ',
      itilde: 'ĩ',
      Iukcy: 'І',
      iukcy: 'і',
      Iuml: 'Ï',
      iuml: 'ï',
      Jcirc: 'Ĵ',
      jcirc: 'ĵ',
      Jcy: 'Й',
      jcy: 'й',
      Jfr: '𝔍',
      jfr: '𝔧',
      jmath: 'ȷ',
      Jopf: '𝕁',
      jopf: '𝕛',
      Jscr: '𝒥',
      jscr: '𝒿',
      Jsercy: 'Ј',
      jsercy: 'ј',
      Jukcy: 'Є',
      jukcy: 'є',
      Kappa: 'Κ',
      kappa: 'κ',
      kappav: 'ϰ',
      Kcedil: 'Ķ',
      kcedil: 'ķ',
      Kcy: 'К',
      kcy: 'к',
      Kfr: '𝔎',
      kfr: '𝔨',
      kgreen: 'ĸ',
      KHcy: 'Х',
      khcy: 'х',
      KJcy: 'Ќ',
      kjcy: 'ќ',
      Kopf: '𝕂',
      kopf: '𝕜',
      Kscr: '𝒦',
      kscr: '𝓀',
      lAarr: '⇚',
      Lacute: 'Ĺ',
      lacute: 'ĺ',
      laemptyv: '⦴',
      lagran: 'ℒ',
      Lambda: 'Λ',
      lambda: 'λ',
      lang: '⟨',
      Lang: '⟪',
      langd: '⦑',
      langle: '⟨',
      lap: '⪅',
      Laplacetrf: 'ℒ',
      laquo: '«',
      larrb: '⇤',
      larrbfs: '⤟',
      larr: '←',
      Larr: '↞',
      lArr: '⇐',
      larrfs: '⤝',
      larrhk: '↩',
      larrlp: '↫',
      larrpl: '⤹',
      larrsim: '⥳',
      larrtl: '↢',
      latail: '⤙',
      lAtail: '⤛',
      lat: '⪫',
      late: '⪭',
      lates: '⪭︀',
      lbarr: '⤌',
      lBarr: '⤎',
      lbbrk: '❲',
      lbrace: '{',
      lbrack: '[',
      lbrke: '⦋',
      lbrksld: '⦏',
      lbrkslu: '⦍',
      Lcaron: 'Ľ',
      lcaron: 'ľ',
      Lcedil: 'Ļ',
      lcedil: 'ļ',
      lceil: '⌈',
      lcub: '{',
      Lcy: 'Л',
      lcy: 'л',
      ldca: '⤶',
      ldquo: '“',
      ldquor: '„',
      ldrdhar: '⥧',
      ldrushar: '⥋',
      ldsh: '↲',
      le: '≤',
      lE: '≦',
      LeftAngleBracket: '⟨',
      LeftArrowBar: '⇤',
      leftarrow: '←',
      LeftArrow: '←',
      Leftarrow: '⇐',
      LeftArrowRightArrow: '⇆',
      leftarrowtail: '↢',
      LeftCeiling: '⌈',
      LeftDoubleBracket: '⟦',
      LeftDownTeeVector: '⥡',
      LeftDownVectorBar: '⥙',
      LeftDownVector: '⇃',
      LeftFloor: '⌊',
      leftharpoondown: '↽',
      leftharpoonup: '↼',
      leftleftarrows: '⇇',
      leftrightarrow: '↔',
      LeftRightArrow: '↔',
      Leftrightarrow: '⇔',
      leftrightarrows: '⇆',
      leftrightharpoons: '⇋',
      leftrightsquigarrow: '↭',
      LeftRightVector: '⥎',
      LeftTeeArrow: '↤',
      LeftTee: '⊣',
      LeftTeeVector: '⥚',
      leftthreetimes: '⋋',
      LeftTriangleBar: '⧏',
      LeftTriangle: '⊲',
      LeftTriangleEqual: '⊴',
      LeftUpDownVector: '⥑',
      LeftUpTeeVector: '⥠',
      LeftUpVectorBar: '⥘',
      LeftUpVector: '↿',
      LeftVectorBar: '⥒',
      LeftVector: '↼',
      lEg: '⪋',
      leg: '⋚',
      leq: '≤',
      leqq: '≦',
      leqslant: '⩽',
      lescc: '⪨',
      les: '⩽',
      lesdot: '⩿',
      lesdoto: '⪁',
      lesdotor: '⪃',
      lesg: '⋚︀',
      lesges: '⪓',
      lessapprox: '⪅',
      lessdot: '⋖',
      lesseqgtr: '⋚',
      lesseqqgtr: '⪋',
      LessEqualGreater: '⋚',
      LessFullEqual: '≦',
      LessGreater: '≶',
      lessgtr: '≶',
      LessLess: '⪡',
      lesssim: '≲',
      LessSlantEqual: '⩽',
      LessTilde: '≲',
      lfisht: '⥼',
      lfloor: '⌊',
      Lfr: '𝔏',
      lfr: '𝔩',
      lg: '≶',
      lgE: '⪑',
      lHar: '⥢',
      lhard: '↽',
      lharu: '↼',
      lharul: '⥪',
      lhblk: '▄',
      LJcy: 'Љ',
      ljcy: 'љ',
      llarr: '⇇',
      ll: '≪',
      Ll: '⋘',
      llcorner: '⌞',
      Lleftarrow: '⇚',
      llhard: '⥫',
      lltri: '◺',
      Lmidot: 'Ŀ',
      lmidot: 'ŀ',
      lmoustache: '⎰',
      lmoust: '⎰',
      lnap: '⪉',
      lnapprox: '⪉',
      lne: '⪇',
      lnE: '≨',
      lneq: '⪇',
      lneqq: '≨',
      lnsim: '⋦',
      loang: '⟬',
      loarr: '⇽',
      lobrk: '⟦',
      longleftarrow: '⟵',
      LongLeftArrow: '⟵',
      Longleftarrow: '⟸',
      longleftrightarrow: '⟷',
      LongLeftRightArrow: '⟷',
      Longleftrightarrow: '⟺',
      longmapsto: '⟼',
      longrightarrow: '⟶',
      LongRightArrow: '⟶',
      Longrightarrow: '⟹',
      looparrowleft: '↫',
      looparrowright: '↬',
      lopar: '⦅',
      Lopf: '𝕃',
      lopf: '𝕝',
      loplus: '⨭',
      lotimes: '⨴',
      lowast: '∗',
      lowbar: '_',
      LowerLeftArrow: '↙',
      LowerRightArrow: '↘',
      loz: '◊',
      lozenge: '◊',
      lozf: '⧫',
      lpar: '(',
      lparlt: '⦓',
      lrarr: '⇆',
      lrcorner: '⌟',
      lrhar: '⇋',
      lrhard: '⥭',
      lrm: '‎',
      lrtri: '⊿',
      lsaquo: '‹',
      lscr: '𝓁',
      Lscr: 'ℒ',
      lsh: '↰',
      Lsh: '↰',
      lsim: '≲',
      lsime: '⪍',
      lsimg: '⪏',
      lsqb: '[',
      lsquo: '‘',
      lsquor: '‚',
      Lstrok: 'Ł',
      lstrok: 'ł',
      ltcc: '⪦',
      ltcir: '⩹',
      lt: '<',
      LT: '<',
      Lt: '≪',
      ltdot: '⋖',
      lthree: '⋋',
      ltimes: '⋉',
      ltlarr: '⥶',
      ltquest: '⩻',
      ltri: '◃',
      ltrie: '⊴',
      ltrif: '◂',
      ltrPar: '⦖',
      lurdshar: '⥊',
      luruhar: '⥦',
      lvertneqq: '≨︀',
      lvnE: '≨︀',
      macr: '¯',
      male: '♂',
      malt: '✠',
      maltese: '✠',
      Map: '⤅',
      map: '↦',
      mapsto: '↦',
      mapstodown: '↧',
      mapstoleft: '↤',
      mapstoup: '↥',
      marker: '▮',
      mcomma: '⨩',
      Mcy: 'М',
      mcy: 'м',
      mdash: '—',
      mDDot: '∺',
      measuredangle: '∡',
      MediumSpace: ' ',
      Mellintrf: 'ℳ',
      Mfr: '𝔐',
      mfr: '𝔪',
      mho: '℧',
      micro: 'µ',
      midast: '*',
      midcir: '⫰',
      mid: '∣',
      middot: '·',
      minusb: '⊟',
      minus: '−',
      minusd: '∸',
      minusdu: '⨪',
      MinusPlus: '∓',
      mlcp: '⫛',
      mldr: '…',
      mnplus: '∓',
      models: '⊧',
      Mopf: '𝕄',
      mopf: '𝕞',
      mp: '∓',
      mscr: '𝓂',
      Mscr: 'ℳ',
      mstpos: '∾',
      Mu: 'Μ',
      mu: 'μ',
      multimap: '⊸',
      mumap: '⊸',
      nabla: '∇',
      Nacute: 'Ń',
      nacute: 'ń',
      nang: '∠⃒',
      nap: '≉',
      napE: '⩰̸',
      napid: '≋̸',
      napos: 'ŉ',
      napprox: '≉',
      natural: '♮',
      naturals: 'ℕ',
      natur: '♮',
      nbsp: ' ',
      nbump: '≎̸',
      nbumpe: '≏̸',
      ncap: '⩃',
      Ncaron: 'Ň',
      ncaron: 'ň',
      Ncedil: 'Ņ',
      ncedil: 'ņ',
      ncong: '≇',
      ncongdot: '⩭̸',
      ncup: '⩂',
      Ncy: 'Н',
      ncy: 'н',
      ndash: '–',
      nearhk: '⤤',
      nearr: '↗',
      neArr: '⇗',
      nearrow: '↗',
      ne: '≠',
      nedot: '≐̸',
      NegativeMediumSpace: '​',
      NegativeThickSpace: '​',
      NegativeThinSpace: '​',
      NegativeVeryThinSpace: '​',
      nequiv: '≢',
      nesear: '⤨',
      nesim: '≂̸',
      NestedGreaterGreater: '≫',
      NestedLessLess: '≪',
      NewLine: '\n',
      nexist: '∄',
      nexists: '∄',
      Nfr: '𝔑',
      nfr: '𝔫',
      ngE: '≧̸',
      nge: '≱',
      ngeq: '≱',
      ngeqq: '≧̸',
      ngeqslant: '⩾̸',
      nges: '⩾̸',
      nGg: '⋙̸',
      ngsim: '≵',
      nGt: '≫⃒',
      ngt: '≯',
      ngtr: '≯',
      nGtv: '≫̸',
      nharr: '↮',
      nhArr: '⇎',
      nhpar: '⫲',
      ni: '∋',
      nis: '⋼',
      nisd: '⋺',
      niv: '∋',
      NJcy: 'Њ',
      njcy: 'њ',
      nlarr: '↚',
      nlArr: '⇍',
      nldr: '‥',
      nlE: '≦̸',
      nle: '≰',
      nleftarrow: '↚',
      nLeftarrow: '⇍',
      nleftrightarrow: '↮',
      nLeftrightarrow: '⇎',
      nleq: '≰',
      nleqq: '≦̸',
      nleqslant: '⩽̸',
      nles: '⩽̸',
      nless: '≮',
      nLl: '⋘̸',
      nlsim: '≴',
      nLt: '≪⃒',
      nlt: '≮',
      nltri: '⋪',
      nltrie: '⋬',
      nLtv: '≪̸',
      nmid: '∤',
      NoBreak: '⁠',
      NonBreakingSpace: ' ',
      nopf: '𝕟',
      Nopf: 'ℕ',
      Not: '⫬',
      not: '¬',
      NotCongruent: '≢',
      NotCupCap: '≭',
      NotDoubleVerticalBar: '∦',
      NotElement: '∉',
      NotEqual: '≠',
      NotEqualTilde: '≂̸',
      NotExists: '∄',
      NotGreater: '≯',
      NotGreaterEqual: '≱',
      NotGreaterFullEqual: '≧̸',
      NotGreaterGreater: '≫̸',
      NotGreaterLess: '≹',
      NotGreaterSlantEqual: '⩾̸',
      NotGreaterTilde: '≵',
      NotHumpDownHump: '≎̸',
      NotHumpEqual: '≏̸',
      notin: '∉',
      notindot: '⋵̸',
      notinE: '⋹̸',
      notinva: '∉',
      notinvb: '⋷',
      notinvc: '⋶',
      NotLeftTriangleBar: '⧏̸',
      NotLeftTriangle: '⋪',
      NotLeftTriangleEqual: '⋬',
      NotLess: '≮',
      NotLessEqual: '≰',
      NotLessGreater: '≸',
      NotLessLess: '≪̸',
      NotLessSlantEqual: '⩽̸',
      NotLessTilde: '≴',
      NotNestedGreaterGreater: '⪢̸',
      NotNestedLessLess: '⪡̸',
      notni: '∌',
      notniva: '∌',
      notnivb: '⋾',
      notnivc: '⋽',
      NotPrecedes: '⊀',
      NotPrecedesEqual: '⪯̸',
      NotPrecedesSlantEqual: '⋠',
      NotReverseElement: '∌',
      NotRightTriangleBar: '⧐̸',
      NotRightTriangle: '⋫',
      NotRightTriangleEqual: '⋭',
      NotSquareSubset: '⊏̸',
      NotSquareSubsetEqual: '⋢',
      NotSquareSuperset: '⊐̸',
      NotSquareSupersetEqual: '⋣',
      NotSubset: '⊂⃒',
      NotSubsetEqual: '⊈',
      NotSucceeds: '⊁',
      NotSucceedsEqual: '⪰̸',
      NotSucceedsSlantEqual: '⋡',
      NotSucceedsTilde: '≿̸',
      NotSuperset: '⊃⃒',
      NotSupersetEqual: '⊉',
      NotTilde: '≁',
      NotTildeEqual: '≄',
      NotTildeFullEqual: '≇',
      NotTildeTilde: '≉',
      NotVerticalBar: '∤',
      nparallel: '∦',
      npar: '∦',
      nparsl: '⫽⃥',
      npart: '∂̸',
      npolint: '⨔',
      npr: '⊀',
      nprcue: '⋠',
      nprec: '⊀',
      npreceq: '⪯̸',
      npre: '⪯̸',
      nrarrc: '⤳̸',
      nrarr: '↛',
      nrArr: '⇏',
      nrarrw: '↝̸',
      nrightarrow: '↛',
      nRightarrow: '⇏',
      nrtri: '⋫',
      nrtrie: '⋭',
      nsc: '⊁',
      nsccue: '⋡',
      nsce: '⪰̸',
      Nscr: '𝒩',
      nscr: '𝓃',
      nshortmid: '∤',
      nshortparallel: '∦',
      nsim: '≁',
      nsime: '≄',
      nsimeq: '≄',
      nsmid: '∤',
      nspar: '∦',
      nsqsube: '⋢',
      nsqsupe: '⋣',
      nsub: '⊄',
      nsubE: '⫅̸',
      nsube: '⊈',
      nsubset: '⊂⃒',
      nsubseteq: '⊈',
      nsubseteqq: '⫅̸',
      nsucc: '⊁',
      nsucceq: '⪰̸',
      nsup: '⊅',
      nsupE: '⫆̸',
      nsupe: '⊉',
      nsupset: '⊃⃒',
      nsupseteq: '⊉',
      nsupseteqq: '⫆̸',
      ntgl: '≹',
      Ntilde: 'Ñ',
      ntilde: 'ñ',
      ntlg: '≸',
      ntriangleleft: '⋪',
      ntrianglelefteq: '⋬',
      ntriangleright: '⋫',
      ntrianglerighteq: '⋭',
      Nu: 'Ν',
      nu: 'ν',
      num: '#',
      numero: '№',
      numsp: ' ',
      nvap: '≍⃒',
      nvdash: '⊬',
      nvDash: '⊭',
      nVdash: '⊮',
      nVDash: '⊯',
      nvge: '≥⃒',
      nvgt: '>⃒',
      nvHarr: '⤄',
      nvinfin: '⧞',
      nvlArr: '⤂',
      nvle: '≤⃒',
      nvlt: '<⃒',
      nvltrie: '⊴⃒',
      nvrArr: '⤃',
      nvrtrie: '⊵⃒',
      nvsim: '∼⃒',
      nwarhk: '⤣',
      nwarr: '↖',
      nwArr: '⇖',
      nwarrow: '↖',
      nwnear: '⤧',
      Oacute: 'Ó',
      oacute: 'ó',
      oast: '⊛',
      Ocirc: 'Ô',
      ocirc: 'ô',
      ocir: '⊚',
      Ocy: 'О',
      ocy: 'о',
      odash: '⊝',
      Odblac: 'Ő',
      odblac: 'ő',
      odiv: '⨸',
      odot: '⊙',
      odsold: '⦼',
      OElig: 'Œ',
      oelig: 'œ',
      ofcir: '⦿',
      Ofr: '𝔒',
      ofr: '𝔬',
      ogon: '˛',
      Ograve: 'Ò',
      ograve: 'ò',
      ogt: '⧁',
      ohbar: '⦵',
      ohm: 'Ω',
      oint: '∮',
      olarr: '↺',
      olcir: '⦾',
      olcross: '⦻',
      oline: '‾',
      olt: '⧀',
      Omacr: 'Ō',
      omacr: 'ō',
      Omega: 'Ω',
      omega: 'ω',
      Omicron: 'Ο',
      omicron: 'ο',
      omid: '⦶',
      ominus: '⊖',
      Oopf: '𝕆',
      oopf: '𝕠',
      opar: '⦷',
      OpenCurlyDoubleQuote: '“',
      OpenCurlyQuote: '‘',
      operp: '⦹',
      oplus: '⊕',
      orarr: '↻',
      Or: '⩔',
      or: '∨',
      ord: '⩝',
      order: 'ℴ',
      orderof: 'ℴ',
      ordf: 'ª',
      ordm: 'º',
      origof: '⊶',
      oror: '⩖',
      orslope: '⩗',
      orv: '⩛',
      oS: 'Ⓢ',
      Oscr: '𝒪',
      oscr: 'ℴ',
      Oslash: 'Ø',
      oslash: 'ø',
      osol: '⊘',
      Otilde: 'Õ',
      otilde: 'õ',
      otimesas: '⨶',
      Otimes: '⨷',
      otimes: '⊗',
      Ouml: 'Ö',
      ouml: 'ö',
      ovbar: '⌽',
      OverBar: '‾',
      OverBrace: '⏞',
      OverBracket: '⎴',
      OverParenthesis: '⏜',
      para: '¶',
      parallel: '∥',
      par: '∥',
      parsim: '⫳',
      parsl: '⫽',
      part: '∂',
      PartialD: '∂',
      Pcy: 'П',
      pcy: 'п',
      percnt: '%',
      period: '.',
      permil: '‰',
      perp: '⊥',
      pertenk: '‱',
      Pfr: '𝔓',
      pfr: '𝔭',
      Phi: 'Φ',
      phi: 'φ',
      phiv: 'ϕ',
      phmmat: 'ℳ',
      phone: '☎',
      Pi: 'Π',
      pi: 'π',
      pitchfork: '⋔',
      piv: 'ϖ',
      planck: 'ℏ',
      planckh: 'ℎ',
      plankv: 'ℏ',
      plusacir: '⨣',
      plusb: '⊞',
      pluscir: '⨢',
      plus: '+',
      plusdo: '∔',
      plusdu: '⨥',
      pluse: '⩲',
      PlusMinus: '±',
      plusmn: '±',
      plussim: '⨦',
      plustwo: '⨧',
      pm: '±',
      Poincareplane: 'ℌ',
      pointint: '⨕',
      popf: '𝕡',
      Popf: 'ℙ',
      pound: '£',
      prap: '⪷',
      Pr: '⪻',
      pr: '≺',
      prcue: '≼',
      precapprox: '⪷',
      prec: '≺',
      preccurlyeq: '≼',
      Precedes: '≺',
      PrecedesEqual: '⪯',
      PrecedesSlantEqual: '≼',
      PrecedesTilde: '≾',
      preceq: '⪯',
      precnapprox: '⪹',
      precneqq: '⪵',
      precnsim: '⋨',
      pre: '⪯',
      prE: '⪳',
      precsim: '≾',
      prime: '′',
      Prime: '″',
      primes: 'ℙ',
      prnap: '⪹',
      prnE: '⪵',
      prnsim: '⋨',
      prod: '∏',
      Product: '∏',
      profalar: '⌮',
      profline: '⌒',
      profsurf: '⌓',
      prop: '∝',
      Proportional: '∝',
      Proportion: '∷',
      propto: '∝',
      prsim: '≾',
      prurel: '⊰',
      Pscr: '𝒫',
      pscr: '𝓅',
      Psi: 'Ψ',
      psi: 'ψ',
      puncsp: ' ',
      Qfr: '𝔔',
      qfr: '𝔮',
      qint: '⨌',
      qopf: '𝕢',
      Qopf: 'ℚ',
      qprime: '⁗',
      Qscr: '𝒬',
      qscr: '𝓆',
      quaternions: 'ℍ',
      quatint: '⨖',
      quest: '?',
      questeq: '≟',
      quot: '"',
      QUOT: '"',
      rAarr: '⇛',
      race: '∽̱',
      Racute: 'Ŕ',
      racute: 'ŕ',
      radic: '√',
      raemptyv: '⦳',
      rang: '⟩',
      Rang: '⟫',
      rangd: '⦒',
      range: '⦥',
      rangle: '⟩',
      raquo: '»',
      rarrap: '⥵',
      rarrb: '⇥',
      rarrbfs: '⤠',
      rarrc: '⤳',
      rarr: '→',
      Rarr: '↠',
      rArr: '⇒',
      rarrfs: '⤞',
      rarrhk: '↪',
      rarrlp: '↬',
      rarrpl: '⥅',
      rarrsim: '⥴',
      Rarrtl: '⤖',
      rarrtl: '↣',
      rarrw: '↝',
      ratail: '⤚',
      rAtail: '⤜',
      ratio: '∶',
      rationals: 'ℚ',
      rbarr: '⤍',
      rBarr: '⤏',
      RBarr: '⤐',
      rbbrk: '❳',
      rbrace: '}',
      rbrack: ']',
      rbrke: '⦌',
      rbrksld: '⦎',
      rbrkslu: '⦐',
      Rcaron: 'Ř',
      rcaron: 'ř',
      Rcedil: 'Ŗ',
      rcedil: 'ŗ',
      rceil: '⌉',
      rcub: '}',
      Rcy: 'Р',
      rcy: 'р',
      rdca: '⤷',
      rdldhar: '⥩',
      rdquo: '”',
      rdquor: '”',
      rdsh: '↳',
      real: 'ℜ',
      realine: 'ℛ',
      realpart: 'ℜ',
      reals: 'ℝ',
      Re: 'ℜ',
      rect: '▭',
      reg: '®',
      REG: '®',
      ReverseElement: '∋',
      ReverseEquilibrium: '⇋',
      ReverseUpEquilibrium: '⥯',
      rfisht: '⥽',
      rfloor: '⌋',
      rfr: '𝔯',
      Rfr: 'ℜ',
      rHar: '⥤',
      rhard: '⇁',
      rharu: '⇀',
      rharul: '⥬',
      Rho: 'Ρ',
      rho: 'ρ',
      rhov: 'ϱ',
      RightAngleBracket: '⟩',
      RightArrowBar: '⇥',
      rightarrow: '→',
      RightArrow: '→',
      Rightarrow: '⇒',
      RightArrowLeftArrow: '⇄',
      rightarrowtail: '↣',
      RightCeiling: '⌉',
      RightDoubleBracket: '⟧',
      RightDownTeeVector: '⥝',
      RightDownVectorBar: '⥕',
      RightDownVector: '⇂',
      RightFloor: '⌋',
      rightharpoondown: '⇁',
      rightharpoonup: '⇀',
      rightleftarrows: '⇄',
      rightleftharpoons: '⇌',
      rightrightarrows: '⇉',
      rightsquigarrow: '↝',
      RightTeeArrow: '↦',
      RightTee: '⊢',
      RightTeeVector: '⥛',
      rightthreetimes: '⋌',
      RightTriangleBar: '⧐',
      RightTriangle: '⊳',
      RightTriangleEqual: '⊵',
      RightUpDownVector: '⥏',
      RightUpTeeVector: '⥜',
      RightUpVectorBar: '⥔',
      RightUpVector: '↾',
      RightVectorBar: '⥓',
      RightVector: '⇀',
      ring: '˚',
      risingdotseq: '≓',
      rlarr: '⇄',
      rlhar: '⇌',
      rlm: '‏',
      rmoustache: '⎱',
      rmoust: '⎱',
      rnmid: '⫮',
      roang: '⟭',
      roarr: '⇾',
      robrk: '⟧',
      ropar: '⦆',
      ropf: '𝕣',
      Ropf: 'ℝ',
      roplus: '⨮',
      rotimes: '⨵',
      RoundImplies: '⥰',
      rpar: ')',
      rpargt: '⦔',
      rppolint: '⨒',
      rrarr: '⇉',
      Rrightarrow: '⇛',
      rsaquo: '›',
      rscr: '𝓇',
      Rscr: 'ℛ',
      rsh: '↱',
      Rsh: '↱',
      rsqb: ']',
      rsquo: '’',
      rsquor: '’',
      rthree: '⋌',
      rtimes: '⋊',
      rtri: '▹',
      rtrie: '⊵',
      rtrif: '▸',
      rtriltri: '⧎',
      RuleDelayed: '⧴',
      ruluhar: '⥨',
      rx: '℞',
      Sacute: 'Ś',
      sacute: 'ś',
      sbquo: '‚',
      scap: '⪸',
      Scaron: 'Š',
      scaron: 'š',
      Sc: '⪼',
      sc: '≻',
      sccue: '≽',
      sce: '⪰',
      scE: '⪴',
      Scedil: 'Ş',
      scedil: 'ş',
      Scirc: 'Ŝ',
      scirc: 'ŝ',
      scnap: '⪺',
      scnE: '⪶',
      scnsim: '⋩',
      scpolint: '⨓',
      scsim: '≿',
      Scy: 'С',
      scy: 'с',
      sdotb: '⊡',
      sdot: '⋅',
      sdote: '⩦',
      searhk: '⤥',
      searr: '↘',
      seArr: '⇘',
      searrow: '↘',
      sect: '§',
      semi: ';',
      seswar: '⤩',
      setminus: '∖',
      setmn: '∖',
      sext: '✶',
      Sfr: '𝔖',
      sfr: '𝔰',
      sfrown: '⌢',
      sharp: '♯',
      SHCHcy: 'Щ',
      shchcy: 'щ',
      SHcy: 'Ш',
      shcy: 'ш',
      ShortDownArrow: '↓',
      ShortLeftArrow: '←',
      shortmid: '∣',
      shortparallel: '∥',
      ShortRightArrow: '→',
      ShortUpArrow: '↑',
      shy: '­',
      Sigma: 'Σ',
      sigma: 'σ',
      sigmaf: 'ς',
      sigmav: 'ς',
      sim: '∼',
      simdot: '⩪',
      sime: '≃',
      simeq: '≃',
      simg: '⪞',
      simgE: '⪠',
      siml: '⪝',
      simlE: '⪟',
      simne: '≆',
      simplus: '⨤',
      simrarr: '⥲',
      slarr: '←',
      SmallCircle: '∘',
      smallsetminus: '∖',
      smashp: '⨳',
      smeparsl: '⧤',
      smid: '∣',
      smile: '⌣',
      smt: '⪪',
      smte: '⪬',
      smtes: '⪬︀',
      SOFTcy: 'Ь',
      softcy: 'ь',
      solbar: '⌿',
      solb: '⧄',
      sol: '/',
      Sopf: '𝕊',
      sopf: '𝕤',
      spades: '♠',
      spadesuit: '♠',
      spar: '∥',
      sqcap: '⊓',
      sqcaps: '⊓︀',
      sqcup: '⊔',
      sqcups: '⊔︀',
      Sqrt: '√',
      sqsub: '⊏',
      sqsube: '⊑',
      sqsubset: '⊏',
      sqsubseteq: '⊑',
      sqsup: '⊐',
      sqsupe: '⊒',
      sqsupset: '⊐',
      sqsupseteq: '⊒',
      square: '□',
      Square: '□',
      SquareIntersection: '⊓',
      SquareSubset: '⊏',
      SquareSubsetEqual: '⊑',
      SquareSuperset: '⊐',
      SquareSupersetEqual: '⊒',
      SquareUnion: '⊔',
      squarf: '▪',
      squ: '□',
      squf: '▪',
      srarr: '→',
      Sscr: '𝒮',
      sscr: '𝓈',
      ssetmn: '∖',
      ssmile: '⌣',
      sstarf: '⋆',
      Star: '⋆',
      star: '☆',
      starf: '★',
      straightepsilon: 'ϵ',
      straightphi: 'ϕ',
      strns: '¯',
      sub: '⊂',
      Sub: '⋐',
      subdot: '⪽',
      subE: '⫅',
      sube: '⊆',
      subedot: '⫃',
      submult: '⫁',
      subnE: '⫋',
      subne: '⊊',
      subplus: '⪿',
      subrarr: '⥹',
      subset: '⊂',
      Subset: '⋐',
      subseteq: '⊆',
      subseteqq: '⫅',
      SubsetEqual: '⊆',
      subsetneq: '⊊',
      subsetneqq: '⫋',
      subsim: '⫇',
      subsub: '⫕',
      subsup: '⫓',
      succapprox: '⪸',
      succ: '≻',
      succcurlyeq: '≽',
      Succeeds: '≻',
      SucceedsEqual: '⪰',
      SucceedsSlantEqual: '≽',
      SucceedsTilde: '≿',
      succeq: '⪰',
      succnapprox: '⪺',
      succneqq: '⪶',
      succnsim: '⋩',
      succsim: '≿',
      SuchThat: '∋',
      sum: '∑',
      Sum: '∑',
      sung: '♪',
      sup1: '¹',
      sup2: '²',
      sup3: '³',
      sup: '⊃',
      Sup: '⋑',
      supdot: '⪾',
      supdsub: '⫘',
      supE: '⫆',
      supe: '⊇',
      supedot: '⫄',
      Superset: '⊃',
      SupersetEqual: '⊇',
      suphsol: '⟉',
      suphsub: '⫗',
      suplarr: '⥻',
      supmult: '⫂',
      supnE: '⫌',
      supne: '⊋',
      supplus: '⫀',
      supset: '⊃',
      Supset: '⋑',
      supseteq: '⊇',
      supseteqq: '⫆',
      supsetneq: '⊋',
      supsetneqq: '⫌',
      supsim: '⫈',
      supsub: '⫔',
      supsup: '⫖',
      swarhk: '⤦',
      swarr: '↙',
      swArr: '⇙',
      swarrow: '↙',
      swnwar: '⤪',
      szlig: 'ß',
      Tab: '\t',
      target: '⌖',
      Tau: 'Τ',
      tau: 'τ',
      tbrk: '⎴',
      Tcaron: 'Ť',
      tcaron: 'ť',
      Tcedil: 'Ţ',
      tcedil: 'ţ',
      Tcy: 'Т',
      tcy: 'т',
      tdot: '⃛',
      telrec: '⌕',
      Tfr: '𝔗',
      tfr: '𝔱',
      there4: '∴',
      therefore: '∴',
      Therefore: '∴',
      Theta: 'Θ',
      theta: 'θ',
      thetasym: 'ϑ',
      thetav: 'ϑ',
      thickapprox: '≈',
      thicksim: '∼',
      ThickSpace: '  ',
      ThinSpace: ' ',
      thinsp: ' ',
      thkap: '≈',
      thksim: '∼',
      THORN: 'Þ',
      thorn: 'þ',
      tilde: '˜',
      Tilde: '∼',
      TildeEqual: '≃',
      TildeFullEqual: '≅',
      TildeTilde: '≈',
      timesbar: '⨱',
      timesb: '⊠',
      times: '×',
      timesd: '⨰',
      tint: '∭',
      toea: '⤨',
      topbot: '⌶',
      topcir: '⫱',
      top: '⊤',
      Topf: '𝕋',
      topf: '𝕥',
      topfork: '⫚',
      tosa: '⤩',
      tprime: '‴',
      trade: '™',
      TRADE: '™',
      triangle: '▵',
      triangledown: '▿',
      triangleleft: '◃',
      trianglelefteq: '⊴',
      triangleq: '≜',
      triangleright: '▹',
      trianglerighteq: '⊵',
      tridot: '◬',
      trie: '≜',
      triminus: '⨺',
      TripleDot: '⃛',
      triplus: '⨹',
      trisb: '⧍',
      tritime: '⨻',
      trpezium: '⏢',
      Tscr: '𝒯',
      tscr: '𝓉',
      TScy: 'Ц',
      tscy: 'ц',
      TSHcy: 'Ћ',
      tshcy: 'ћ',
      Tstrok: 'Ŧ',
      tstrok: 'ŧ',
      twixt: '≬',
      twoheadleftarrow: '↞',
      twoheadrightarrow: '↠',
      Uacute: 'Ú',
      uacute: 'ú',
      uarr: '↑',
      Uarr: '↟',
      uArr: '⇑',
      Uarrocir: '⥉',
      Ubrcy: 'Ў',
      ubrcy: 'ў',
      Ubreve: 'Ŭ',
      ubreve: 'ŭ',
      Ucirc: 'Û',
      ucirc: 'û',
      Ucy: 'У',
      ucy: 'у',
      udarr: '⇅',
      Udblac: 'Ű',
      udblac: 'ű',
      udhar: '⥮',
      ufisht: '⥾',
      Ufr: '𝔘',
      ufr: '𝔲',
      Ugrave: 'Ù',
      ugrave: 'ù',
      uHar: '⥣',
      uharl: '↿',
      uharr: '↾',
      uhblk: '▀',
      ulcorn: '⌜',
      ulcorner: '⌜',
      ulcrop: '⌏',
      ultri: '◸',
      Umacr: 'Ū',
      umacr: 'ū',
      uml: '¨',
      UnderBar: '_',
      UnderBrace: '⏟',
      UnderBracket: '⎵',
      UnderParenthesis: '⏝',
      Union: '⋃',
      UnionPlus: '⊎',
      Uogon: 'Ų',
      uogon: 'ų',
      Uopf: '𝕌',
      uopf: '𝕦',
      UpArrowBar: '⤒',
      uparrow: '↑',
      UpArrow: '↑',
      Uparrow: '⇑',
      UpArrowDownArrow: '⇅',
      updownarrow: '↕',
      UpDownArrow: '↕',
      Updownarrow: '⇕',
      UpEquilibrium: '⥮',
      upharpoonleft: '↿',
      upharpoonright: '↾',
      uplus: '⊎',
      UpperLeftArrow: '↖',
      UpperRightArrow: '↗',
      upsi: 'υ',
      Upsi: 'ϒ',
      upsih: 'ϒ',
      Upsilon: 'Υ',
      upsilon: 'υ',
      UpTeeArrow: '↥',
      UpTee: '⊥',
      upuparrows: '⇈',
      urcorn: '⌝',
      urcorner: '⌝',
      urcrop: '⌎',
      Uring: 'Ů',
      uring: 'ů',
      urtri: '◹',
      Uscr: '𝒰',
      uscr: '𝓊',
      utdot: '⋰',
      Utilde: 'Ũ',
      utilde: 'ũ',
      utri: '▵',
      utrif: '▴',
      uuarr: '⇈',
      Uuml: 'Ü',
      uuml: 'ü',
      uwangle: '⦧',
      vangrt: '⦜',
      varepsilon: 'ϵ',
      varkappa: 'ϰ',
      varnothing: '∅',
      varphi: 'ϕ',
      varpi: 'ϖ',
      varpropto: '∝',
      varr: '↕',
      vArr: '⇕',
      varrho: 'ϱ',
      varsigma: 'ς',
      varsubsetneq: '⊊︀',
      varsubsetneqq: '⫋︀',
      varsupsetneq: '⊋︀',
      varsupsetneqq: '⫌︀',
      vartheta: 'ϑ',
      vartriangleleft: '⊲',
      vartriangleright: '⊳',
      vBar: '⫨',
      Vbar: '⫫',
      vBarv: '⫩',
      Vcy: 'В',
      vcy: 'в',
      vdash: '⊢',
      vDash: '⊨',
      Vdash: '⊩',
      VDash: '⊫',
      Vdashl: '⫦',
      veebar: '⊻',
      vee: '∨',
      Vee: '⋁',
      veeeq: '≚',
      vellip: '⋮',
      verbar: '|',
      Verbar: '‖',
      vert: '|',
      Vert: '‖',
      VerticalBar: '∣',
      VerticalLine: '|',
      VerticalSeparator: '❘',
      VerticalTilde: '≀',
      VeryThinSpace: ' ',
      Vfr: '𝔙',
      vfr: '𝔳',
      vltri: '⊲',
      vnsub: '⊂⃒',
      vnsup: '⊃⃒',
      Vopf: '𝕍',
      vopf: '𝕧',
      vprop: '∝',
      vrtri: '⊳',
      Vscr: '𝒱',
      vscr: '𝓋',
      vsubnE: '⫋︀',
      vsubne: '⊊︀',
      vsupnE: '⫌︀',
      vsupne: '⊋︀',
      Vvdash: '⊪',
      vzigzag: '⦚',
      Wcirc: 'Ŵ',
      wcirc: 'ŵ',
      wedbar: '⩟',
      wedge: '∧',
      Wedge: '⋀',
      wedgeq: '≙',
      weierp: '℘',
      Wfr: '𝔚',
      wfr: '𝔴',
      Wopf: '𝕎',
      wopf: '𝕨',
      wp: '℘',
      wr: '≀',
      wreath: '≀',
      Wscr: '𝒲',
      wscr: '𝓌',
      xcap: '⋂',
      xcirc: '◯',
      xcup: '⋃',
      xdtri: '▽',
      Xfr: '𝔛',
      xfr: '𝔵',
      xharr: '⟷',
      xhArr: '⟺',
      Xi: 'Ξ',
      xi: 'ξ',
      xlarr: '⟵',
      xlArr: '⟸',
      xmap: '⟼',
      xnis: '⋻',
      xodot: '⨀',
      Xopf: '𝕏',
      xopf: '𝕩',
      xoplus: '⨁',
      xotime: '⨂',
      xrarr: '⟶',
      xrArr: '⟹',
      Xscr: '𝒳',
      xscr: '𝓍',
      xsqcup: '⨆',
      xuplus: '⨄',
      xutri: '△',
      xvee: '⋁',
      xwedge: '⋀',
      Yacute: 'Ý',
      yacute: 'ý',
      YAcy: 'Я',
      yacy: 'я',
      Ycirc: 'Ŷ',
      ycirc: 'ŷ',
      Ycy: 'Ы',
      ycy: 'ы',
      yen: '¥',
      Yfr: '𝔜',
      yfr: '𝔶',
      YIcy: 'Ї',
      yicy: 'ї',
      Yopf: '𝕐',
      yopf: '𝕪',
      Yscr: '𝒴',
      yscr: '𝓎',
      YUcy: 'Ю',
      yucy: 'ю',
      yuml: 'ÿ',
      Yuml: 'Ÿ',
      Zacute: 'Ź',
      zacute: 'ź',
      Zcaron: 'Ž',
      zcaron: 'ž',
      Zcy: 'З',
      zcy: 'з',
      Zdot: 'Ż',
      zdot: 'ż',
      zeetrf: 'ℨ',
      ZeroWidthSpace: '​',
      Zeta: 'Ζ',
      zeta: 'ζ',
      zfr: '𝔷',
      Zfr: 'ℨ',
      ZHcy: 'Ж',
      zhcy: 'ж',
      zigrarr: '⇝',
      zopf: '𝕫',
      Zopf: 'ℤ',
      Zscr: '𝒵',
      zscr: '𝓏',
      zwj: '‍',
      zwnj: '‌'
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    module.exports = CSSselect
    var Pseudos = __webpack_require__(24),
      DomUtils = __webpack_require__(14),
      findOne = DomUtils.findOne,
      findAll = DomUtils.findAll,
      getChildren = DomUtils.getChildren,
      removeSubsets = DomUtils.removeSubsets,
      falseFunc = __webpack_require__(15).falseFunc,
      compile = __webpack_require__(110),
      compileUnsafe = compile.compileUnsafe
    function getSelectorFunc(searchFunc) {
      return function select(query, elems, options) {
        if (typeof query !== 'function') query = compileUnsafe(query, options)
        if (!Array.isArray(elems)) elems = getChildren(elems)
        else elems = removeSubsets(elems)
        return searchFunc(query, elems)
      }
    }
    var selectAll = getSelectorFunc(function selectAll(query, elems) {
      return query === falseFunc || !elems || elems.length === 0
        ? []
        : findAll(query, elems)
    })
    var selectOne = getSelectorFunc(function selectOne(query, elems) {
      return query === falseFunc || !elems || elems.length === 0
        ? null
        : findOne(query, elems)
    })
    function is(elem, query, options) {
      return (typeof query === 'function' ? query : compile(query, options))(
        elem
      )
    }
    function CSSselect(query, elems, options) {
      return selectAll(query, elems, options)
    }
    CSSselect.compile = compile
    CSSselect.filters = Pseudos.filters
    CSSselect.pseudos = Pseudos.pseudos
    CSSselect.selectAll = selectAll
    CSSselect.selectOne = selectOne
    CSSselect.is = is
    CSSselect.parse = compile
    CSSselect.iterate = selectAll
  },
  function(module, exports, __webpack_require__) {
    var DomUtils = __webpack_require__(14),
      hasAttrib = DomUtils.hasAttrib,
      getAttributeValue = DomUtils.getAttributeValue,
      falseFunc = __webpack_require__(15).falseFunc
    var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g
    var attributeRules = {
      __proto__: null,
      equals: function(next, data) {
        var name = data.name,
          value = data.value
        if (data.ignoreCase) {
          value = value.toLowerCase()
          return function equalsIC(elem) {
            var attr = getAttributeValue(elem, name)
            return attr != null && attr.toLowerCase() === value && next(elem)
          }
        }
        return function equals(elem) {
          return getAttributeValue(elem, name) === value && next(elem)
        }
      },
      hyphen: function(next, data) {
        var name = data.name,
          value = data.value,
          len = value.length
        if (data.ignoreCase) {
          value = value.toLowerCase()
          return function hyphenIC(elem) {
            var attr = getAttributeValue(elem, name)
            return (
              attr != null &&
              (attr.length === len || attr.charAt(len) === '-') &&
              attr.substr(0, len).toLowerCase() === value &&
              next(elem)
            )
          }
        }
        return function hyphen(elem) {
          var attr = getAttributeValue(elem, name)
          return (
            attr != null &&
            attr.substr(0, len) === value &&
            (attr.length === len || attr.charAt(len) === '-') &&
            next(elem)
          )
        }
      },
      element: function(next, data) {
        var name = data.name,
          value = data.value
        if (/\s/.test(value)) {
          return falseFunc
        }
        value = value.replace(reChars, '\\$&')
        var pattern = '(?:^|\\s)' + value + '(?:$|\\s)',
          flags = data.ignoreCase ? 'i' : '',
          regex = new RegExp(pattern, flags)
        return function element(elem) {
          var attr = getAttributeValue(elem, name)
          return attr != null && regex.test(attr) && next(elem)
        }
      },
      exists: function(next, data) {
        var name = data.name
        return function exists(elem) {
          return hasAttrib(elem, name) && next(elem)
        }
      },
      start: function(next, data) {
        var name = data.name,
          value = data.value,
          len = value.length
        if (len === 0) {
          return falseFunc
        }
        if (data.ignoreCase) {
          value = value.toLowerCase()
          return function startIC(elem) {
            var attr = getAttributeValue(elem, name)
            return (
              attr != null &&
              attr.substr(0, len).toLowerCase() === value &&
              next(elem)
            )
          }
        }
        return function start(elem) {
          var attr = getAttributeValue(elem, name)
          return attr != null && attr.substr(0, len) === value && next(elem)
        }
      },
      end: function(next, data) {
        var name = data.name,
          value = data.value,
          len = -value.length
        if (len === 0) {
          return falseFunc
        }
        if (data.ignoreCase) {
          value = value.toLowerCase()
          return function endIC(elem) {
            var attr = getAttributeValue(elem, name)
            return (
              attr != null &&
              attr.substr(len).toLowerCase() === value &&
              next(elem)
            )
          }
        }
        return function end(elem) {
          var attr = getAttributeValue(elem, name)
          return attr != null && attr.substr(len) === value && next(elem)
        }
      },
      any: function(next, data) {
        var name = data.name,
          value = data.value
        if (value === '') {
          return falseFunc
        }
        if (data.ignoreCase) {
          var regex = new RegExp(value.replace(reChars, '\\$&'), 'i')
          return function anyIC(elem) {
            var attr = getAttributeValue(elem, name)
            return attr != null && regex.test(attr) && next(elem)
          }
        }
        return function any(elem) {
          var attr = getAttributeValue(elem, name)
          return attr != null && attr.indexOf(value) >= 0 && next(elem)
        }
      },
      not: function(next, data) {
        var name = data.name,
          value = data.value
        if (value === '') {
          return function notEmpty(elem) {
            return !!getAttributeValue(elem, name) && next(elem)
          }
        } else if (data.ignoreCase) {
          value = value.toLowerCase()
          return function notIC(elem) {
            var attr = getAttributeValue(elem, name)
            return attr != null && attr.toLowerCase() !== value && next(elem)
          }
        }
        return function not(elem) {
          return getAttributeValue(elem, name) !== value && next(elem)
        }
      }
    }
    module.exports = {
      compile: function(next, data) {
        return attributeRules[data.action](next, data)
      },
      rules: attributeRules
    }
  },
  function(module, exports, __webpack_require__) {
    var select = __webpack_require__(42),
      parse = __webpack_require__(20),
      render = __webpack_require__(39),
      _ = __webpack_require__(3)
    var load = (exports.load = function(content, options) {
      var Cheerio = __webpack_require__(19)
      options = _.defaults(options || {}, Cheerio.prototype.options)
      var root = parse(content, options)
      var initialize = function(selector, context, r, opts) {
        opts = _.defaults(opts || {}, options)
        return new Cheerio(selector, context, r || root, opts)
      }
      initialize.__proto__ = exports
      initialize._root = root
      initialize._options = options
      return initialize
    })
    var html = (exports.html = function(dom, options) {
      var Cheerio = __webpack_require__(19)
      if (
        Object.prototype.toString.call(dom) === '[object Object]' &&
        !options &&
        !('length' in dom) &&
        !('type' in dom)
      ) {
        options = dom
        dom = undefined
      }
      options = _.defaults(
        options || {},
        this._options,
        Cheerio.prototype.options
      )
      if (dom) {
        dom = typeof dom === 'string' ? select(dom, this._root, options) : dom
        return render(dom, options)
      } else if (this._root && this._root.children) {
        return render(this._root.children, options)
      } else {
        return ''
      }
    })
    var xml = (exports.xml = function(dom) {
      if (dom) {
        dom =
          typeof dom === 'string' ? select(dom, this._root, this.options) : dom
        return render(dom, {
          xmlMode: true
        })
      } else if (this._root && this._root.children) {
        return render(this._root.children, {
          xmlMode: true
        })
      } else {
        return ''
      }
    })
    var text = (exports.text = function(elems) {
      if (!elems) return ''
      var ret = '',
        len = elems.length,
        elem
      for (var i = 0; i < len; i++) {
        elem = elems[i]
        if (elem.type === 'text') ret += elem.data
        else if (elem.children && elem.type !== 'comment') {
          ret += text(elem.children)
        }
      }
      return ret
    })
    var parseHTML = (exports.parseHTML = function(data, context, keepScripts) {
      var parsed
      if (!data || typeof data !== 'string') {
        return null
      }
      if (typeof context === 'boolean') {
        keepScripts = context
      }
      parsed = this.load(data)
      if (!keepScripts) {
        parsed('script').remove()
      }
      return parsed.root()[0].children
    })
    var root = (exports.root = function() {
      return this(this._root)
    })
    var contains = (exports.contains = function(container, contained) {
      if (contained === container) {
        return false
      }
      while (contained && contained !== contained.parent) {
        contained = contained.parent
        if (contained === container) {
          return true
        }
      }
      return false
    })
  },
  function(module, exports, __webpack_require__) {
    void function() {
      var _, cache, candiateWords, removePunctuation, stopwords, stopwordsData
      _ = __webpack_require__(3)
      stopwordsData = __webpack_require__(118)
      cache = {}
      module.exports = stopwords = function(content, language) {
        var count, overlappingStopwords, stopWords, strippedInput, words
        if (null == language) language = 'en'
        stopWords = stopwordsData[language]
        if (!stopWords) {
          console.error(
            "WARNING: No stopwords file found for '" +
              language +
              "' - defaulting to English!"
          )
          stopWords = stopwordsData.en
        }
        if (cache.hasOwnProperty(language)) {
          stopWords = cache[language]
        } else {
          cache[language] = stopWords
        }
        strippedInput = removePunctuation(content)
        words = candiateWords(strippedInput)
        overlappingStopwords = []
        count = 0
        _.each(words, function(w) {
          count += 1
          if (stopWords.indexOf(w.toLowerCase()) > -1)
            return overlappingStopwords.push(w.toLowerCase())
        })
        return {
          wordCount: count,
          stopwordCount: overlappingStopwords.length,
          stopWords: overlappingStopwords
        }
      }
      removePunctuation = function(content) {
        return content.replace(
          /[\|\@\<\>\[\]\"\'\.,-\/#\?!$%\^&\*\+;:{}=\-_`~()]/g,
          ''
        )
      }
      candiateWords = function(strippedInput) {
        return strippedInput.split(' ')
      }
    }.call(this)
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    const $$1 = __webpack_require__(4)
    const $$2 = __webpack_require__(4)
    const franc = __webpack_require__(47)
    const langCodes = __webpack_require__(54)
    const unfluff = __webpack_require__(55)
    const sbd = __webpack_require__(122)
    const $$3 = __webpack_require__(4)
    const $$4 = __webpack_require__(4)
    const coreCSSstr = __webpack_require__(126)
    const nouiCSSstr = __webpack_require__(127)
    const $$5 = __webpack_require__(4)
    const noUiSlider = __webpack_require__(26)
    const playbackCSSstr = __webpack_require__(128)
    const $$6 = __webpack_require__(4)
    const settingsCSSstr = __webpack_require__(129)
    const $$7 = __webpack_require__(4)
    const noUiSlider$1 = __webpack_require__(26)
    const $$8 = __webpack_require__(4)
    const noUiSlider$2 = __webpack_require__(26)
    const $ = __webpack_require__(4)
    const browser = chrome || browser
    document.body.style.border = '10px solid red'
    browser.extension.onMessage.addListener(onMessage)
    function onMessage(message, sender, sendResponse) {}
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    var utilities = __webpack_require__(48)
    var expressions = __webpack_require__(52)
    var data = __webpack_require__(53)
    detect.all = detectAll
    module.exports = detect
    var MAX_LENGTH = 2048
    var MIN_LENGTH = 10
    var MAX_DIFFERENCE = 300
    ;(function() {
      var languages
      var name
      var trigrams
      var model
      var script
      var weight
      for (script in data) {
        languages = data[script]
        for (name in languages) {
          model = languages[name].split('|')
          weight = model.length
          trigrams = {}
          while (weight--) {
            trigrams[model[weight]] = weight
          }
          languages[name] = trigrams
        }
      }
    })()
    function detect(value, options) {
      return detectAll(value, options)[0][0]
    }
    function detectAll(value, options) {
      var settings = options || {}
      var minLength = MIN_LENGTH
      var script
      if (settings.minLength !== null && settings.minLength !== undefined) {
        minLength = settings.minLength
      }
      if (!value || value.length < minLength) {
        return und()
      }
      value = value.substr(0, MAX_LENGTH)
      script = getTopScript(value, expressions)
      if (!(script[0] in data)) {
        return script[1] === 0 ? und() : singleLanguageTuples(script[0])
      }
      return normalize(
        value,
        getDistances(utilities.asTuples(value), data[script[0]], settings)
      )
    }
    function normalize(value, distances) {
      var min = distances[0][1]
      var max = value.length * MAX_DIFFERENCE - min
      var index = -1
      var length = distances.length
      while (++index < length) {
        distances[index][1] = 1 - (distances[index][1] - min) / max || 0
      }
      return distances
    }
    function getTopScript(value, scripts) {
      var topCount = -1
      var topScript
      var script
      var count
      for (script in scripts) {
        count = getOccurrence(value, scripts[script])
        if (count > topCount) {
          topCount = count
          topScript = script
        }
      }
      return [topScript, topCount]
    }
    function getOccurrence(value, expression) {
      var count = value.match(expression)
      return (count ? count.length : 0) / value.length || 0
    }
    function getDistances(trigrams, languages, options) {
      var distances = []
      var whitelist = options.whitelist || []
      var blacklist = options.blacklist || []
      var language
      languages = filterLanguages(languages, whitelist, blacklist)
      for (language in languages) {
        distances.push([language, getDistance(trigrams, languages[language])])
      }
      return distances.length ? distances.sort(sort) : und()
    }
    function getDistance(trigrams, model) {
      var distance = 0
      var index = -1
      var length = trigrams.length
      var trigram
      var difference
      while (++index < length) {
        trigram = trigrams[index]
        if (trigram[0] in model) {
          difference = trigram[1] - model[trigram[0]] - 1
          if (difference < 0) {
            difference = -difference
          }
        } else {
          difference = MAX_DIFFERENCE
        }
        distance += difference
      }
      return distance
    }
    function filterLanguages(languages, whitelist, blacklist) {
      var filteredLanguages
      var language
      if (whitelist.length === 0 && blacklist.length === 0) {
        return languages
      }
      filteredLanguages = {}
      for (language in languages) {
        if (
          (whitelist.length === 0 || whitelist.indexOf(language) !== -1) &&
          blacklist.indexOf(language) === -1
        ) {
          filteredLanguages[language] = languages[language]
        }
      }
      return filteredLanguages
    }
    function und() {
      return singleLanguageTuples('und')
    }
    function singleLanguageTuples(language) {
      return [[language, 1]]
    }
    function sort(a, b) {
      return a[1] - b[1]
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    var trigram = __webpack_require__(49).trigram
    var collapse = __webpack_require__(50)
    var trim = __webpack_require__(51)
    var has = {}.hasOwnProperty
    exports.clean = clean
    exports.trigrams = getCleanTrigrams
    exports.asDictionary = getCleanTrigramsAsDictionary
    exports.asTuples = getCleanTrigramsAsTuples
    exports.tuplesAsDictionary = getCleanTrigramTuplesAsDictionary
    function clean(value) {
      if (value === null || value === undefined) {
        return ''
      }
      return trim(
        collapse(String(value).replace(/[\u0021-\u0040]+/g, ' '))
      ).toLowerCase()
    }
    function getCleanTrigrams(value) {
      return trigram(' ' + clean(value) + ' ')
    }
    function getCleanTrigramsAsDictionary(value) {
      var trigrams = getCleanTrigrams(value)
      var index = trigrams.length
      var dictionary = {}
      var trigram
      while (index--) {
        trigram = trigrams[index]
        if (has.call(dictionary, trigram)) {
          dictionary[trigram]++
        } else {
          dictionary[trigram] = 1
        }
      }
      return dictionary
    }
    function getCleanTrigramsAsTuples(value) {
      var dictionary = getCleanTrigramsAsDictionary(value)
      var tuples = []
      var trigram
      for (trigram in dictionary) {
        tuples.push([trigram, dictionary[trigram]])
      }
      tuples.sort(sort)
      return tuples
    }
    function getCleanTrigramTuplesAsDictionary(tuples) {
      var index = tuples.length
      var dictionary = {}
      var tuple
      while (index--) {
        tuple = tuples[index]
        dictionary[tuple[0]] = tuple[1]
      }
      return dictionary
    }
    function sort(a, b) {
      return a[1] - b[1]
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    module.exports = exports = nGram
    exports.bigram = nGram(2)
    exports.trigram = nGram(3)
    function nGram(n) {
      if (typeof n !== 'number' || isNaN(n) || n < 1 || n === Infinity) {
        throw new Error('`' + n + '` is not a valid argument for n-gram')
      }
      return grams
      function grams(value) {
        var nGrams = []
        var index
        if (value === null || value === undefined) {
          return nGrams
        }
        value = String(value)
        index = value.length - n + 1
        if (index < 1) {
          return nGrams
        }
        while (index--) {
          nGrams[index] = value.substr(index, n)
        }
        return nGrams
      }
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    module.exports = collapse
    function collapse(value) {
      return String(value).replace(/\s+/g, ' ')
    }
  },
  function(module, exports) {
    exports = module.exports = trim
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function(str) {
      return str.replace(/^\s*/, '')
    }
    exports.right = function(str) {
      return str.replace(/\s*$/, '')
    }
  },
  function(module, exports) {
    module.exports = {
      cmn: /[\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FCC\uF900-\uFA6D\uFA70-\uFAD9]|[\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/g,
      Latin: /[A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A]/g,
      Cyrillic: /[\u0400-\u0484\u0487-\u052F\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69D\uA69F]/g,
      Arabic: /[\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061E\u0620-\u063F\u0641-\u064A\u0656-\u065F\u066A-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B2\u08E4-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC]|\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]/g,
      ben: /[\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FB]/g,
      Devanagari: /[\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FB]/g,
      jpn: /[\u3041-\u3096\u309D-\u309F]|\uD82C\uDC01|\uD83C\uDE00|[\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D]|\uD82C\uDC00/g,
      kor: /[\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/g,
      tel: /[\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F]/g,
      tam: /[\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA]/g,
      guj: /[\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1]/g,
      kan: /[\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2]/g,
      mal: /[\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D75\u0D79-\u0D7F]/g,
      Myanmar: /[\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F]/g,
      ori: /[\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77]/g,
      pan: /[\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75]/g,
      Ethiopic: /[\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E]/g,
      tha: /[\u0E01-\u0E3A\u0E40-\u0E5B]/g,
      sin: /[\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4]|\uD804[\uDDE1-\uDDF4]/g,
      ell: /[\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65]|\uD800[\uDD40-\uDD8C\uDDA0]|\uD834[\uDE00-\uDE45]/g,
      khm: /[\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF]/g,
      hye: /[\u0531-\u0556\u0559-\u055F\u0561-\u0587\u058A\u058D-\u058F\uFB13-\uFB17]/g,
      sat: /[\u1C50-\u1C7F]/g,
      bod: /[\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA]/g,
      Hebrew: /[\u0591-\u05C7\u05D0-\u05EA\u05F0-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F]/g,
      kat: /[\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u2D00-\u2D25\u2D27\u2D2D]/g,
      lao: /[\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF]/g,
      zgh: /[\u2D30-\u2D67\u2D6F\u2D70\u2D7F]/g,
      iii: /[\uA000-\uA48C\uA490-\uA4C6]/g,
      aii: /[\u0700-\u070D\u070F-\u074A\u074D-\u074F]/g
    }
  },
  function(module, exports) {
    module.exports = {
      Latin: {
        spa:
          ' de|os |de | la|la | y | a |es |ón |ión|rec|ere|der| co|e l|el |en |ien|cho|ent|ech|ció|aci|o a|a p| el|a l|al |as |e d| en|na |ona|s d|da |nte| to|ad |ene|con| pr| su|tod| se|ho |los| pe|per|ers| lo|o d| ti|cia|n d|cio| es|ida|res|a t|tie|ion|rso|te |do | in|son| re| li|to |dad|tad|e s|est|pro|que|men| po|a e|oda|nci| qu| un|ue |ne |n e|s y|lib|su | na|s e|nac|ia |e e|tra| pa|or |ado|a d|nes|ra |se |ual|a c|er |por|com|nal|rta|a s|ber| o |one|s p|dos|rá |sta|les|des|ibe|ser|era|ar |ert|ter| di|ale|l d|nto|hos|del|ica|a a|s n|n c|oci|imi|io |o e|re |y l|e c|ant|cci| as|las|par|ame| cu|ici|ara|enc|s t|ndi| so|o s|mie|tos|una|bre|dic|cla|s l|e a|l p|pre|ntr|o t|ial|y a|nid|n p|a y|man|omo|so |n l| al|ali|s a|no | ig|s s|e p|nta|uma|ten|gua|ade|y e|soc|mo | fu|igu|o p|n t|hum|d d|ran|ria|y d|ada|tiv|l e|cas| ca|vid|l t|s c|ido|das|dis|s i| hu|s o|nad|fun| ma|rac|nda|eli|sar|und| ac|uni|mbr|a u|die|e i|qui|a i| ha|lar| tr|odo|ca |tic|o y|cti|lid|ori|ndo|ari| me|ta |ind|esa|cua|un |ier|tal|esp|seg|ele|ons|ito|ont|iva|s h|d y|nos|ist|rse| le|cie|ide|edi|ecc|ios|l m|r e|med|tor|sti|n a|rim|uie|ple|tri|ibr|sus|lo |ect|pen|y c|an |e h|n s|ern|tar|l y|egu|gur|ura|int|ond|mat|l r|r a|isf|ote',
        eng:
          ' th|the| an|he |nd |and|ion| of|of |tio| to|to |on | in|al |ati|igh|ght|rig| ri|or |ent|as |ed |is |ll |in | be|e r|ne |one|ver|all|s t|eve|t t| fr|s a| ha| re|ty |ery| or|d t| pr|ht | co| ev|e h|e a|ng |ts |his|ing|be |yon| sh|ce |ree|fre|ryo|n t|her|men|nat|sha|pro|nal|y a|has|es |for| hi|hal|f t|n a|n o|nt | pe|s o| fo|d i|nce|er |ons|res|e s|ect|ity|ly |l b|ry |e e|ers|e i|an |e o| de|cti|dom|edo|eed|hts|ter|ona|re | no| wh| a | un|d f| as|ny |l a|e p|ere| en| na| wi|nit|nte|d a|any|ted| di|ns |sta|th |per|ith|e t|st |e c|y t|om |soc| ar|ch |t o|d o|nti|s e|equ|ve |oci|man| fu|ote|oth|ess| al| ac|wit|ial| ma|uni| se|rea| so| on|lit|int|r t|y o|enc|thi|ual|t a| eq|tat|qua|ive| st|ali|e w|l o|are|f h|con|te |led| is|und|cia|e f|le | la|y i|uma|by | by|hum|f a|ic | hu|ave|ge |r a| wo|o a|ms |com| me|eas|s d|tec| li|n e|en |rat|tit|ple|whe|ate|o t|s r|t f|rot| ch|cie|dis|age|ary|o o|anc|eli|no | fa| su|son|inc|at |nda|hou|wor|t i|nde|rom|oms| ot|g t|eme|tle|iti|gni|s w|itl|duc|d w|whi|act|hic|aw |law| he|ich|min|imi|ort|o s|se |e b|ntr|tra|edu|oun|tan|e d|nst|l p|d n|ld |nta|s i|ble|n p| pu|n s| at|ily|rth|tho|ful|ssi|der|o e|cat|uca|unt|ien| ed|o p|h a|era|ind|pen|sec|n w|omm|r s',
        por:
          'os |de | de| a | e |o d|to |ão | di|ent|da |ito|em | co|eit|as |dir|es |ire|rei| se|ção|ade|a p|dad|e d|s d|men|nte|do |s e| pr| pe|dos| to| da|a a|o e| o |o a|ess|con|tod|que| qu|te |e a| do|al |res|ida|m d| in| ou|er |sso| na| re| po|a s| li|uma|cia|ar |pro|e e|a d| te|açã|a t| es| su|ou |ue |s p|tos|a e|des|ra |com|no |ame|ia |e p|tem|nto| pa|is |est|tra|ões|na |s o|oda|das|ser|soa|s n|pes|o p|s a|o s|e o| em| as| à |o o|ais|ber|ado|oa |o t|e s|man|sua|ua | no| os|a c|ter|çõe|erd|lib|rda|s s|nci|ibe|e n|ica|odo|so |nal|ntr|s t|hum|ura| ao|ona|ual| so|or |ma |sta|o c|a n|pre|ara|era|ons|e t|r a|par|o à| hu|ind|por|cio|ria|m a|s c| um|a l|gua|ran| en|ndi|o i|e c|raç|ion|nid|aci|ano|soc|e r|oci| ac|und|sen|nos|nsi|rec|ime|ali|int|um |per|nac| al|m o|r p| fu|ndo|ont|açõ| ig|igu|fun|nta| ma|uni|cçã|ere| ex|a i| me|ese|rio|l d|a o|s h|pel|ada|pri|ide|am |m p|pod|s f|ém |a f|io |ode|ca |ita|lid|tiv|e f|vid|r e|esp|nda|omo|e l|naç|o r|ant|a q|tad|lic|iva| fa|ver|s l|ial|cla|ngu|ing| ca|mo |der| vi|eli|ist|ta |se |ati|ios|ido|r o|eci|dis| un|e i|r d|ecç|o q|s i|qua|ênc|a m|seu|sti|nin|uer|rar|cas|aos|ens|gué|ias|sid|uém|tur|dam|sse|ao |ela|l e|for|tec|ote| pl|ena| tr|m c|tro| ni|ico|rot',
        ind:
          'an |ang| da|ng | pe|ak | ke| me|ata| se|dan|kan| di| be|hak|ber|per|ran|nga|yan|eng| ya| ha|asa|gan|men|ara|nya|n p|n d|n k|a d|tan| at|at |ora|ala|san| ba|ap |erh|n b|rha|ya | ma|g b|a s|pen|eba|as |aan|uk |ntu| or|eti|tas|aka|tia|ban|set| un|n s|ter|n y| te|k m|tuk|bas|iap|lam|beb|am | de|k a|keb|n m|i d|unt|ama|dal|ah |ika|dak|ebe|p o|sa |pun|mem|n h|end|den|ra |ela|ri |nda| sa|di |ma |a m|n t|k d|n a|ngg|tau|man|gar|eri|asi| ti|un |al |ada|um |a p|lak|ari|au | ne|neg|a b|ngs|ta |ole|leh|ert|ers|ida|k h|ana|gsa|dar|uka|tid|bat|sia|era|eh |dap|ila|dil|h d|atu|sam|ia |i m| in|lan|aha|uan|tu |ai |t d|a a|g d|har|sem|na |apa|ser|ena|kat|uat|erb|erl|mas|rta|ega|ung|nan|emp|n u|kum|l d|g s| hu|ka |ent|pat|mba|aga|nta|adi| su|eni|uku|n i|huk|ind|ar |rga|i s|aku|ndi|sua|ni |rus|han|si |car|nny| la|in |u d|ik |ua |lah|rik|usi|emb|ann|mer|ian|gga|lai|min|a u|lua|ema|emu|arg|dun|dip|a t|mat|aya|rbu|aru|erk|rka|ini|eka|a k|rak|kes|yat|iba|nas|rma|ern|ese|s p|nus| pu|anu|ina| ta|mel|mua|kel|k s|us |ndu|nak|da |sya|das|pem|lin|ut |yar|ami|upu|seo|aik|eor|iny|aup|tak|ipe|ing|tin| an|dik|uar|ili|g t|rse|sar|ant|g p|a n|aks|ain| ja|t p| um|g m|dir|ksa|umu|kep|mum|i k|eca|rat|m p|h p|aba|ses|m m',
        fra:
          ' de|es |de |ion|nt |et |tio| et|ent| la|la |e d|on |ne |oit|e l|le | le|s d|e p|t d|ati|roi| dr|dro|it | à | co|té |ns |te |e s|men|re | to|con| l’|tou|que| qu|les| so|des|son| pe|ons| un|s l|s e| pr|ue | pa|e c|t l|ts |onn| au|e a|eme|e e| li|ont|ant|out|ute|t à|res|ers| sa|ce | a |tre|per|a d|cti|er |lib|ité| en|ux | re|en |rso|à l| ou| in|lle|un |nat|ou |nne|n d|une| d’| se|par|nte|us |ur |s s|ans|dan|a p|r l|pro|its|és |t p|ire|e t|s p|sa | dé|ond|é d|a l|nce|ert|aux|omm|nal|me | na| fo|iqu| ce|rté|ect|ale|ber|t a|s a| da|mme|ibe|san|e r| po|com|al |s c|qui|our|t e| ne|e n|ous|r d|ali|ter| di|fon|e o|au | ch|air|ui |ell| es|lit|s n|iss|éra|tes|soc|aut|oci|êtr|ien|int|du |est|été|tra|pou| pl|rat|ar |ran|rai|s o|ona|ain|cla|éga|anc|rs |eur|pri|n c|e m|s t|à u| do|ure|bre|ut | êt|age| ét|nsi|sur|ein|sen|ser|ndi|ens|ess|ntr|ir | ma|cia|n p|st |a c| du|l e| su|bli|ge |rés| ré|e q|ass|nda|peu|ée |l’a| te|a s|tat|il |tés|ais|u d|ine|ind|é e|qu’| ac|s i|n t|t c|n a|l’h|t q|soi|t s|cun|rit| ég|oir|’en|nta|hom| on|n e| mo|ie |ign|rel|nna|t i|l n| tr|ill|ple|s é|l’e|rec|a r|ote|sse|uni|idé|ive|s u|t ê|ins|act| fa|n s| vi|gal| as|lig|ssa|pré|leu|e f|lic|dis|ver| nu|ten|ssi|rot|tec|s m|abl',
        deu:
          'en |er |der| un|nd |und|ein|ung|cht| de|ich|sch|ng | ge|ie |che|ech| di|die|rec|gen|ine|eit| re|ch | da|n d|ver|hen| zu|t d| au|ht | ha|lic|it |ten|rei| be|in | ve| in| ei|nde|auf|den|ede|zu |n s|uf |fre|ne |ter|es | je|jed|n u| an|sei|and| fr|run|at | se|e u|das|hei|s r|hte|hat|nsc|nge|r h|as |ens| al|ere|lle|t a| we|n g|rde|nte|ese|men| od|ode|ner|g d|all|t u|ers|te |nen| so|d d|n a|ben|lei| gr| vo|wer|e a|ege|ion| st|ige|le |cha| me|haf|aft|n j|ren| er|erk|ent|bei| si|eih|ihe|kei|erd|tig|n i|on |lun|r d|len|gem|ies|gru|tli|unt|chu|ern|ges|end|e s|ft |st |ist|tio|ati| gl|sta|gun|mit|sen|n n| na|n z|ite| wi|r g|eic|e e|ei |lie|r s|n w|gle|mei|de |uch|em |chl|nat|rch|t w|des|n e|hre|ale|spr|d f|ach|sse|r e| sc|urc|r m|nie|e f|fen|e g|e d| ni|dur|dar|int| du|geh|ied|t s| mi|alt|her|hab|f g|sic|ste|taa|aat|he |ang|ruc|hli|tz |eme|abe|h a|n v|nun|geg|arf|rf |ehe|pru| is|erf|e m|ans|ndl|e b|tun|n o|d g|n r|r v|wie|ber|r a|arb|bes|t i|h d|r w|r b| ih|d s|igk|gke|nsp|dig|ema|ell|eru|n f|ins|rbe|ffe|esc|igu|ger|str|ken|e v|gew|han|ind|rt | ar|ieß|n h|rn |man|r i|hut|utz|d a|ls |ebe|von|lte|r o|rli|etz|tra|aus|det|hul|e i|one|nne|isc|son|sel|et |ohn|t g|sam| fa|rst|rkl|ser|iem|g v|t z|err',
        jav:
          'ng |an |ang| ka|ing|kan| sa|ak |lan| la|hak| ha| pa| ma|ngg|ara|sa |abe|ne | in|n k|ant| ng|tan|nin| an|nga|ata|en |ran| ba|man|ban|ane|hi |n u|ong|ra |nth|ake|ke |thi| da|won|uwo|ung|ngs| uw|asa|gsa|ben|sab|ana|aka|beb|a k|g p|nan|nda|adi|at |awa|san|ni |dan|g k|pan|eba| be|e k|g s|ani|bas| pr|dha|aya|gan|ya |wa |di |mar|n s| wa|ta |a s|g u| na|e h|arb|a n|a b|a l|n n| ut|yan|n p|asi|g d|han|ah |g n| tu| um|as |wen|dak|rbe|dar| di|ggo|sar|mat|k h|a a|iya| un|und|eni|kab|be |art|ka |uma|ora|n b|ala|n m|ngk|rta|i h| or|gar|yat|kar|al |a m|n i|na |g b|ega|pra|ina|kak|g a|a p|tum|nya|kal|ger|gge| ta|kat|i k|ena|oni|kas| pe|dad|aga|g m|duw|k k|uta|uwe| si| ne|adh|pa |n a|go |and|i l| ke|nun|nal|ngu|uju|apa|a d|t m|i p|min|iba|er | li|anu|sak|per|ama|gay|war|pad|ggu|ha |ind|taw|ras|n l|ali|eng|awi|a u| bi|we |bad|ndu|uwa|awe|bak|ase|eh | me|neg|pri| ku|ron|ih |g t|bis|iji|i t|e p| pi|aba|isa|mba|ini|a w|g l|ika|n t|ebu|ndh|ar |sin|lak|ur |mra|men|ku | we|e s|a i|liy| ik|ayo|rib|ngl|ami|arg|nas|yom|wae|ut |kon|ae |rap|aku| te|dil|tin|rga|jud|umu| as|rak|bed|k b|il |kap|h k|jin|k a| nd|e d|i s| lu|i w|eka|mum|um |uha|ate| mi|k p|gon|eda| ti|but|n d|r k|ona|uto|tow|wat|gka|si |umr|k l|oma',
        vie:
          'ng |̣c |́c | qu| th|à |nh | ng|̣i | nh|và| va|̀n |uyê| ph| ca|quy|ền|yề|̀i | ch|̀nh| tr| cu|ngư|i n|gươ|ườ|́t |ời| gi|ác| co|̣t |ó |c t|ự |n t|cá|ông| kh|ượ|ợc| tư| đư|iệ|đươ|ìn|́i | ha|có|i đ|gia| đê|pha| mo|ọi|mọ|như|n n|củ| ba|̣n |̉a |ủa|n c|̀u |̃ng|ân |ều|ất| bi|tự|hôn| vi|g t| la|n đ|đề|nhâ| ti|t c| đô|ên |bả|hiê|u c| tô|do |hân| do|ch |́ q|̀ t| na|́n |ay | hi|àn|̣ d|ới|há| đi|hay|g n| mô|ốc|uố|n v|ội|hữ|thư|́p |quô| ho|̣p |nà|ào|̀ng|̉n |ị |́ch|ôn |̀o |khô|c h|i c|c đ| hô|i v|tro| đa|́ng|mộ|i t|ột|g v|ia |̣ng|ản|ướ|ữn|̉ng|h t|hư |ện|n b|ộc|ả |là|c c|g c| đo|̉ c|n h|hà|hộ| bâ|ã |̀y | vơ|̣ t|̉i |iế| cô|t t|g đ|ức|iên| vê|viê|vớ|h v|ớc|ực|ật|tha|̉m |ron|ong|áp|g b|hươ| sư|a c|sự|̉o |ảo|h c|ể |o v|uậ|a m|ế |iá|̀ c|cho|qua|hạ|ục| mi|̀ n|phâ|c q|côn|o c|á |i h|ại| hơ|̃ h| cư|n l|bị| lu|bấ|cả|ín|h đ| xa|độ|g h|c n|c p|thu|ải|ệ | hư|́ c|o n| nư|ốn|́o |áo|xã|oà|y t|hả|tộ|̣ c| tâ|thô| du|m v|mì|ho |hứ|ệc|́ t|hợ|án|n p|cũ|ũn|iể|ối|tiê|ề |hấ|ợp|hoa|y đ|chi|o h|ở |ày|̉ t|đó|c l|về|̀ đ|i b|kha|c b| đâ|luâ|ai |̉ n|đố|ết|hự|tri|p q|nươ|dụ|hí|g q|yên|họ|́nh| ta| bă|c g|n g|thê|o t|c v|am |c m|an ',
        ita:
          ' di|to | de|ion| in|la |e d|di |ne | e |zio|re |le |ni |ell|one|lla|rit|a d|o d|del|itt|iri|dir| co|ti |ess|ent| al|azi|tto|te |i d|i i|ere|tà | pr|ndi|e l|ale|o a|ind|e e|e i|gni|nte|con|i e|li |a s| un|men|ogn| ne|uo | og|idu|e a|ivi|duo|vid| es|tti| ha|div| li|a p|no |all|pro|za |ato|per|sse|ser| so|i s| la| su|e p| pe|ibe|na |a l| il|ber|e n|il |ali|lib|ha |che|in |o s|e s| qu|o e|ia |e c| ri|nza|ta |nto|he |oni|o i| o |sta|o c|nel| a |o p|naz|e o|so | po|o h|gli|i u|ond|i c|ers|ame|i p|lle|un |era|ri |ver|ro |el |una|a c| ch|ert|ua |i a|ssi|rtà|a e|ei |dis|ant| l |tat|a a|ona|ual| le|ità|are|ter| ad|nit| da|pri|dei|à e|cia| st| si|nal|est|tut|ist|com|uni| ed|ono| na|sua|al |si |anz| pa| re|raz|gua|ita|res|der|soc|man|o o|ad |i o|ese|que|enz|ed | se|io |ett|on | tu|dic|à d|sia|i r|rso|oci|rio|ari|qua|ial|pre|ich|rat|ien|tra|ani|uma|se |ll |eri|a n|o n| um|do |ara|a t|zza|er |tri|att|ico|pos|sci|i l|son|nda|par|e u|fon| fo|nti|uzi|str|utt|ati|sen|int|nes|iar| i |hia|n c|sti|chi|ann|ra | eg|egu|isp|bil|ont|a r| no|rop| me|opr|ost| ma|ues|ica|sso|tal|cie|sun|lit|ore|ina|ite|tan| ra|non|gio|d a|e r|dev|i m|l i|ezz|izi| cu|nno|rà |a i|tta|ria|lia|cos|ssu|dal|l p| as|ass|opo|ve |eve',
        tur:
          ' ve| ha|ve |ler|lar|ir |in |hak| he|her|bir|er |an |arı|eri|ya | bi|ak |r h|eti|ın |iye|yet| ka|ası|ını| ol|tle|eya|kkı|ara|akk|etl|sın|esi|na |de |ek | ta|nda|ini| bu|ile|rın|rin|vey|ne |kla|e h|ine|ır |ere|ama|dır|n h| sa|ına|sin|e k|le | ge|mas|ınd|nın|ı v| va|lan|lma|erk|rke|nma|tin|rle| te|nin|akl|a v|da | de|let|ill|e m|ard|en |riy|aya|nı | hü| şa|e b|k v|kın|k h| me|mil|san| il|si |rdı|e d|dan|hür|var|ana|e a|kes|et |mes|şah|dir| mi|ret|rri| se|ola|ürr|irl|bu |mak| ma|mek|n e|kı |n v|n i|lik|lle| ed| hi|n b|a h| ba|nsa| iş|eli|kar| iç|ı h|ala|li |ulu|rak|evl|e i|ni |re |r ş|eme|etm|e t|ik |e s|a b|iş |n k|hai|nde|aiz| eş|izd|un |olm|hiç|zdi|ar |unm|ma | gö|ilm|lme|im |n t|tir|dil|mal|e g|i v| ko|lun|e e|mel|ket|ık |n s|ele|la |el |r v|ede|şit|ili|eşi|yla|a i| an|anı| et|rı |ahs| ya|sı |edi|siy|t v|i b|se |içi|çin|bul|ame| da|miş|may|tim|a k|tme|r b|ins|yan|nla|mle| di|eye|ger|ye |uğu|erd|din|ser| mü|mem|vle| ke|nam|ind|len|eke|es | ki|n m|it | in| ku|rşı|a s|arş| ay|eml|lek|oru|rme|kor|rde|i m| so|tür|al |lam|eni|nun| uy|ken|hsı|i i|a d|ri |dev|ün |a m|r a|mey|cak|ıyl|maz|e v|ece|ade|iç |şma|mse|te |tün|ims|kim|e y|şı |end|k g|ndi|alı| ce|lem|öğr|ütü|k i|r t| öğ|büt|anl| bü',
        pol:
          ' pr|nie| i |ie |pra| po|ani|raw|ia |nia|wie|go | do|ch |ego|iek|owi| ni|ści|ci |a p|do |awo| cz|ośc|ych| ma|ek |rze| na|prz| w |wo |ej | za|noś|czł|zło|eni|wa | je|łow|i p|wol|oln| lu|rod| ka| wo|lno|wsz|y c|ma |ny |każ|ażd|o d|stw|owa|dy |żdy| wy|rzy|sta|ecz| sw|dzi|i w|e p|czn|twa|na |zys|ów |szy|ub |lub|a w|est|kie|k m|wan| sp|ają| ws|e w|pow|pos|nyc|rac|spo|ać |a i|cze|sze|neg|yst|jak| ja|o p|pod|acj|ne |ńst|aro|mi | z |i i|nar| ko|obo|awa| ro|i n|jąc|zec|zne|zan|dow| ró|iej|zy |zen|nic|ony|aw |i z|czy|no |nej|o s|rów|odn|cy |ówn|odz|o w|o z|jeg|edn|o o|aki|mie|ien|kol| in|zie|bez|ami|eńs|owo|dno| ob| or| st|a s|ni |orz|o u|ym |stę|tęp|łec|jed|i k| os|w c|lwi|ez |olw|ołe|poł|cji|y w|o n|wia| be|któ|a j|zna|zyn|owe|wob|ka |wyc|owy|ji | od|aln|inn|jes|icz|h p|i s|się|a o|ją |ost|kra|st |sza|swo|war|cza|roz|y s|raz|nik|ara|ora|lud|i o|a z|zes| kr|ran|ows|ech|w p|dów|ą p|pop|a n|tki|stk|gan|zon|raj|e o|iec|i l| si|że |eka| kt| de|em |tór|ię |wni|lni|ejs|ini|odo|dni|ełn|kow|peł|a d|ron|dek|pie|udz|bod|nan|h i|dst|ieg|taw|z p|z w|zeń|god|iu |ano|lar| to|y z|a k|ale|kla|trz|zaw|ich|e i|ier|iko|dzy|chn|w z|by |ków|adz|ekl|ywa|ju |och|kor|sob|ocz|oso|u p|du |tyc|tan|ędz| mi|e s| ta|ki ',
        gax:
          'aa |an |uu | ka|ni |aan|umm|ii |mma|maa| wa|ti |nam| fi|ta |tti| na|saa|fi | mi|rga|i k|a n| qa|dha|iyy|oot|in |mir|irg|raa|qab|a i|a k|kan|akk|isa|chu|amu|a f|huu|aba|kka| ta|kam|a a| is|amn|ami|att|ach|mni|yaa| bi|yuu|yyu|ee |wal|miy|waa|ga |ata|aat|tii|oo |a e|moo| ni| ee|ba | ak|ota|a h|i q| ga| dh|daa|haa|a m|ama|yoo|a b|i a|ka |kaa| hi|sum|aas|arg|man| hu| uu|u n| yo| ar| ke| ha|ees| ba|uf |i i|taa|uuf|iin|ada|a w|i f|ani|rra|na |isu| ad|i w|a u|nya|irr|da |hun|hin|ess| ho| ma|i m|und|i b|bar|ana|een|mu |is |bu |f m| ir| sa|u a|add|aad| la|i d|n h|eeg|i h|sa |hoj|abu| ya|kee|al |udh|ook|goo|ala|ira|nda|itt|gac|as |n k|mum|see|rgo|uum|ra |n t|n i|ara|muu|ums|mat|nii|sii|ssa|a d|a q| da|haw|a g|yya|asu|eef|u h|tum|biy| mo|a t|ati|eny|gam|abs|awa|roo|uma|n b|n m|u y|a s|sat|baa|gar|n a|mmo|nis| qo|nna| ku|eer| to|kko|bil|ili|lis|bir|otu|tee|ya |msa|aaf|suu|n d|jii|n w|okk|rka|gaa|ald|un |rum| ye|ame| fu|mee|yer|ero|amm|era|kun|i y|oti|tok|ant|ali|nni| am|lda|lii|n u|lee|ura|lab|aal|tan|laa|i g|ila|ddu|aru|u m|oji|gum|han|ega| se|ffa|dar|faa|ark|n y|hii|qix|gal|ndi| qi|asa|art|ef |uud| bu|jir| ji|arb|n g|chi|tam|u b|dda|bat|di |kar|lam|a l| go|bsi|sad|oka|a j|egu|u t|bee|u f|uun',
        swh:
          'a k|wa |na | ya| ku|ya | na| wa|a m| ha|i y|a h|a n|ana|ki |aki|kwa| kw|hak| ka| ma|la |a w|tu |li |a u|ni |i k|a a|ila| ki|ali|a y|ati|za |ili|ifa| mt|ke | an|kil|kat|mtu|ake|ote|te |ka |ika|ma |we |a s|yo |fa |i n|ata|e k|ama|zi |amb|u a|ia |u w| yo|azi|kut|ina|i z|asi| za|o y|uhu|yak|au |ish|mba|e a|u k|hur|ha |tik|wat| au|uru| bi|sha|mu |ara|u n| as|hi | hi|ru |aif|tai|cha|ayo|a b|hal| uh| ch|yot|i h| zi|awa|chi|atu|e n|ngi|u y|mat|shi|ani|eri| am|uli|ele|sa |ja |e y|a t|oja|o k|nch|i a|a j| nc|ima| sh|ami| ta|end|any|moj|i w|ari|ham|uta|ii |iki|ra |ada|wan|wak|nay|ye |uwa| la|ti |eza|o h|iri|iwa|kuw|iwe| wo|fan| sa|she|bu |kan|ao |jam|wen|lim|i m|her|uto|ria| ja| ni|kam|di | hu|zo |a l|da |kaz|ahi|amu|wot|o w|si |dha|bin|ing|adh|a z|bil|e w|nya|kup|har|ri |ang|aka|sta|aji|ne |kus|e m|zim|ini|ind|lin|kul|agu|kuf|ita|bar|o n|uu |iyo|u h|nad|maa|mwe|ine|gin|nye|nde|dam|ta | nd|ndi|rik|asa| ba|rif|uni|nga|hii|lez|bo |azo|uzi|mbo|sil|ush|tah|wam|ibu|uba|imu| ye|esh| ut|taa|aar|wez|i s|e b| si|ala|dhi|eng|aza|tak|hir|saw|izo|kos|tok|oka|yan|a c|wal|del|i b|pat| um|ndo|zwa|mam|a i|guz|ais|eli|mai|laz|ian|aba|man|ten|zin|ba |nda|oa |u m|uku|ufu| mw|liw|aha|ndw|kuh|ua |upa| el|umi|sia',
        sun:
          'an |na |eun| ka|ng | sa|ana|ang| di|ak | ha|nga|hak|un |ung|keu|anu| ba| an|nu |a b| bo| je|a h|ata|asa|jeu|ina| ng|ara|nan|awa|gan|ah |sa |a k| na|n k|kan|aha|a p|a s|ga |ban| ma|a n|ing|oga|bog|sar| pa| ku|man|a a|ha |san|ae |bae|din|g s|aga|sah|ra |tan|n s| pe|ala| si|kat|ma |per| ti|aya|sin| at| pi| te|n a|aan|lah|pan|gar|n n|u d|ta |eu |ari|kum|ngs|a m|n b|n d|ran|a d|gsa|wa |taw|k h|ama|ku |ike|n p|eba|bas| ja|al |a t|ika|at |beb|kab|pik|asi|atu|nda|una|a j|nag|e b|n h|en |g k|oh |aba|ila|rta|aku|boh|ngg|abe|art|ar |n j|di |ima|um |ola|geu|usa|aca|sak|adi|k a|udu|teu|car|tin| me| ay|h k| po|eh |u s|aka|rim|ti |sac|k n|ngt|jen|awe|ent|u a|uma|teh|law|ur |h s|dan|bar|uku|gaw|aru|ate|iba|dil|pol|aja|ieu|ere|jal|nar| hu|n t|nya|pa |are|upa|mas|ake|ut |wan| ge|kal|nus| so|ngk|ya |yan|huk| du|tun| mi|mpa|isa|lan|ura|u m|uan|ern|ena|nte|rup|tay|n m| ke|ka |han|und|us |h b|kud|ula|tut| tu| ie|hna|kaw|u k|lak|gam|mna|umn|g d| nu|yun|ri |ayu|wat| wa|eri|g n|a u|i m|u p| ta|du |dit|umu|k k|ren|mba|rik|gta| be|ali|h p|h a|eus|u n|alm|il | da|sas|ami|min|lma|ngu|nas|yat|rak|amp|mer|k j|sab|mum| ra|rua|ame|ua |ter|sal|ksa|men|kas|nge|k d|ona| bi|bis|sio|ion|nal|taa| de|uh |gal|dip|we |bad',
        ron:
          ' de|și | și|re | în|are|te |de |ea |ul |rep|le |ept|dre|e d| dr|ie |în |e a|ate|ptu| sa|tul| pr|or |e p| pe|la |e s|ori| la| co|lor| or|ii |rea|ce |au |tat|ați| a | ca|ent| fi|ale|ă a|a s| ar|ers|per|ice| li|uri|a d|al | re|e c|ric|nă |i s|e o|ei |tur| să|lib|con|men|ibe|ber|rso|să |tăț|sau| ac|ilo|pri|ăți|i a|i l|car|l l|ter| in|ție|că |soa|oan|ții|lă |tea|ri |a p| al|ril|e ș|ană|in |nal|pre|i î|uni|ui |se |e f|ere|i d|e î|ita| un|ert|ile|tă |a o| se|i ș|pen|ia |ele|fie|i c|a l|ace|nte|ntr|eni| că|ală| ni|ire|ă d|pro|est|a c| cu| nu|n c|lui|eri|ona| as|sal|ând|naț|ecu|i p|rin|inț| su|ră |e n| om|ici|nu |i n|oat|ări|l d| to|tor| di| na|iun| po|oci|tre|ni |ste|soc|ega|i o|gal| so| tr|ă p|a a|n m|sta|va |ă î|fi |res|rec|ulu|nic|din|sa |cla|nd | mo| ce| au|ara|lit|int|i e|ces|uie|at |rar|rel|iei|ons|e e|leg|nit|ă f| îm|a î|act|e l|ru |u d|nta|a f|ial|ra |ă c| eg|ță | fa|i f|rtă|tru|tar|ți |ă ș|ion|ntu|dep|ame|i i|reb|ect|ali|l c|eme|nde|n a|ite|ebu|bui|ât |ili|toa|dec| o |pli|văț|nt |e r|u c|ța |t î|l ș|cu |rta|cia|ane|țio|ca |ită|poa|cți|împ|bil|r ș| st|omu|ăță|țiu|rie|uma|mân| ma|ani|nța|cur|era|u a|tra|oar| ex|t s|iil|ta |rit|rot|mod|tri|riv|od |lic|rii|eze|man|înv|ne |nvă|a ș|cti',
        hau:
          'da | da|in |a k|ya |an |a d|a a| ya| ko| wa| a |sa |na | ha|a s|ta |kin|wan|wa | ta| ba|a y|a h|n d|n a|iya|ko |a t|ma |ar | na|yan|ba | sa|asa| za| ma|a w|hak|ata| ka|ama|akk|i d|a m| mu|su |owa|a z|iki|a b|nci| ƙa| ci| sh|ai |kow|anc|nsa|a ƙ|a c| su|shi|ka | ku| ga|ci |ne |ani|e d|uma|‘ya|cik|kum|uwa|ana| du| ‘y|ɗan|ali|i k| yi|ada|ƙas|aka|kki|utu|n y|a n|hi | ra|mut| do| ad|tar| ɗa|nda| ab|man|a g|nan|ars|and|cin|ane|i a|yi |n k|min|sam|ke |a i|ins|yin|ki |nin|aɗa|ann|ni |tum|za |e m|ami|dam|kan|yar|en |um |n h|oka|duk|mi | ja|ewa|abi|kam|i y|dai|mat|nna|waɗ|n s|ash|ga |kok|oki|re |am |ida|sar|awa|mas|abu|uni|n j|una|ra |i b| ƙu|dun|a ‘|cew|a r|aba|ƙun|ce |e s|a ɗ|san|she|ara|li |kko|ari|n w|m n|buw|aik|u d|kar| ai|niy| ne|hal|rin|bub|zam|omi| la|rsa|ubu|han|are|aya|a l|i m|zai|ban|o n|add|n m|i s| fa|bin|r d|ake|n ‘|uns|sas|tsa|dom| ce|ans| hu|me |kiy|ƙar| am|ɗin| an|ika|jam|i w|wat|n t|yya|ame|n ƙ|abb|bay|har|din|hen|dok|yak|n b|nce|ray|gan|fa |on | ki|aid| ts|rsu| al|aye| id|n r|u k|ili|nsu|bba|aur|kka|ayu|ant|aci|dan|ukk|ayi|tun|aga|fan|unc| lo|o d|lok|sha|un |lin|kac|aɗi|fi |gam|i i|yuw|sun|aif|aja| ir|yay|imi|war| iy|riy|ace|nta|uka|o a|bat|mar|bi |sak|n i| ak|tab|afi|sab',
        fuv:
          'de | e |e n|nde| ha|la |e e| ka|akk| nd| wa|ina|al |hak|na | in|ndi|kke|ɗo |di |ii |ade|aad|um |ko |i h|ala| mu| ne|lla|mum|ji |wal| jo| fo|all|eɗɗ| le|neɗ|e h|kal| ko|taa|re | ng|aaw|e k|aa |jog|e w|ley|ee |ke |laa|e m|eed|e l|nnd|aag|ɗɗo|ol | ta|o k|gu |kee|le |waa|ond|gal|a j|ogi|am |eji|dee|m e|ti |nga|e d|ɗe |awa|ɓe | wo|gii|eej|ede|gol|aan| re| go|i e|agu|e t|ann|fot|eyd|oti|ɗee|pot| po|maa|naa|oto|ydi| he|i n|ni |taw|enn|een|dim|to |a i|e f|e j|goo|a k|der| fa| aa|ele| de|o n|dir| ba|er |ngu|oot|ndo|i k|ota|ima| sa|won|ay |ka |a n|oor|a f|ngo|tee| ja|i f| to|o f|e ɓ|i w|wa |ren|a e|nan|kam|hay|ma |eyɗ|o t|awi|yɗe|ore|o e|too|and|fof|i m|a w|ñaa|e y|hee| do|eel|ira|nka|aak|e g|e s|l e|of |aar| ɓe|dii| la|ani|e p|tin|a t| te| na|e i| so|o w|ral|e r|are|ooj|awo|woo|gaa| ma|u m|kaa|faw| ña|dow| mo|oo | ya|aam|nge|nng| yi|und| ho|en |i l|so | mb| li|o i|e a| nj| o |ude|e b|o h|igg|ɗi |lig|nda|ita|baa| di|iin| fe|iti|aaɗ|ama|inn|haa|iiɗ|a h| no|tii|den|tal| tu|tuu|yan|l n|yim|do |non|imɓ|bel| je|ine| hu|njo|ugn|guu|no | da|edd|uug|mii|nee|jey|a d|ano| ke|lit|lli|go |je |ank|tde|amt|ent|eɗe|ɓam| ɓa|mɓe|y g|aga|alt|ɗɗa|ind|wit| su|nna| ɗe|ree|ŋde|i a|m t|aŋd|l h|jaŋ|ago|ow |ete| ɗu',
        bos:
          ' pr| i |je |rav| na|pra|na |da |ma |ima| sv|a s|nje|a p| da| po|anj|a i|vo |va |ko |ja | u |ako|o i|no | za|e s|ju |avo| im|ti |sva|ava|i p|o n|li |ili|i s|van|ost| ko|vak|ih |ne |a u| sl|nja|koj| dr| ne|jed| bi|i d|ije|stv|u s|lob|im |slo| il|bod|obo| ra|sti|pri| je| su|vje|om |a d|se |e i| ob|a n|i i| se|dru|enj| os|voj|cij|e p|a b|su |o d|uje|u p|raz|i n|a o| od|lo |u o|ova|u i|edn|i u| nj|ovo|jen|lju|ni |oje|nos|a k|ran|dje|iti|o p|aci|žav|a j|i o|e o|pre|pro|bra|nih|ji | ka|e d|jeg|og |sta| tr|tre|bud|u n|drž|u z|rža|bit|svo|ija|elj|reb|e b|mij|jem|avn|pos| bu|ka |aju| iz|ba |ve |rod|de |aro|e u|iva|a z|em |šti|ilo|eni|lje|ći |red|bil|jel|jer| ni|odn|m i|du |tva|nar|gov| sa|oji| do|tu |vim|u d| st|o k|e n|a t|za |nim| dj| sm|ući|ičn|dna|i m|oda|vno|eba|ist|nac|e k|čno|nak|ave|tiv|eđu|nov|olj|sno|ani|aln|an |nom|i b|stu|nst|eno|oj |osn|a r|ovj|nap|smi|nog|čov|oja|nju|ara|nu |dno|ans|ovi|jan|edi|m s| kr|h p|tup| op| čo|iko|jek|tvo| vj| mi|tel|vu |obr|živ|tit|o o|una|odu| mo| ov|kri|ego|din|rug|nik|rad|pod|nji|sam|sto|lja|dst|rim|ite|riv| te|m n|vol|i v|e t|vni|akv|itu|g p| ta|ašt|zaš|svi|ao |te |o s|ak |mje|a č|odr|udu|kla|i t|avi|tno|nič| vr|nic|dni|u u|ina| de|oba|od |jih|st ',
        hrv:
          ' pr| i |je |rav|pra|ma | na|ima| sv|na |ti |a p|nje| po|a s|anj|a i|vo |ko |da |vat|va |no | za|i s|o i|ja |avo| u | im|sva|i p| bi|e s|ju |tko|o n|li |ili|van|ava| sl|ih |ne |ost| dr|ije| ne|jed|slo| ra|u s|lob|obo| os|bod| da| ko|ova|nja|koj|i d|atk|iti| il|stv|pri|om |im | je| ob| su| ka|i i|i n|e i|vje|i u|se |dru|bit|voj|ati|i o|ćen|a o|o p|a b|a n|ući| se|enj|sti|a u|edn|dje|lo |ćav| mo|raz|u p| od|ran|ni |rod|a k|su |aro|drć|svo|ako|u i|rća|a j|mij|ji |nih|eni|e n|e o| nj|pre|pos|ćiv|oje|eno|e p|nar|oda|nim|ovo|aju|ra |ći |og |nov|iva|a d|nos|bra|bil|i b|avn|a z|jen|e d|ve |ora|tva|jel|sta|mor|u o|cij|pro|ovi|za |jer|ka |sno|ilo|jem|red|em |lju|osn|oji| iz|aci| do|lje|i m| ni|odn|nom|jeg| dj|vno|vim|elj|u z|o d|rad|o o|m i|du |uje| sa|nit|e b| st|oj |tit|a ć|dno|e u|o s|u d|eću|ani|dna|nak|nst|stu| sm|e k|u u|an |gov|nju|juć|aln|m s|tu |a r|ćov|jan|u n|o k|ist|ću |te |tvo|ans|šti|nu |ara|nap|m p|nić|olj|bud| bu|edi|ovj|i v|pod|sam|obr|tel| mi|ina|zaš|e m|ašt| vj|ona|nji|jek| ta|duć|ija| ćo|tup|h p|oja|smi|ada| op|oso|una|sob|odu|dni|rug|udu|ao |di |avi|tno|jim|itu|itk|će |odr|ave|meć|nog|din|svi| ći|kak|kla|rim|akv|elo|štv|ite|vol|jet|opć|pot|tan|ak |nic|nac|uće| sk| me|ven',
        nld:
          'en |de |an | de|van| va| en| he|ing|cht|der|ng |n d|n v|et |een| ge|ech|n e|ver|rec|nde| ee| re| be|ede|er |e v|gen|den|het|ten| te| in| op|n i| ve|lij| zi|ere|eli|zij|ijk|te |oor|ht |ens|n o|and|t o|ijn|ied|ke | on|eid|op | vo|jn |id |ond|in |sch| vr|aar|n z|aan| ie|rde|rij|men|ren|ord|hei|hte| we|eft|n g|ft |n w|or |n h|eef|vri|wor| me|hee|al |t r|of |le | of|ati|g v|e b|eni| aa|lle| wo|n a|e o|nd |r h|voo| al|ege|n t|erk| da| na|t h|sta|jke|at |nat|nge|e e|end| st|om |e g|tie|n b|ste|die|e r|erw|wel|e s|r d| om|ij |dig|t e|ige|ter|ie |gel|re |jhe|t d| za|e m|ers|ijh|nig|zal|nie|d v|ns |d e|e w|e n|est|ele|bes| do|g e|che|vol|ge |eze|e d|ig |gin|dat|hap|cha|eke| di|ona|e a|lke|nst|ard| gr|tel|min| to|waa|len|elk|lin|eme|jk |n s|del|str|han|eve|gro|ich|ven|doo| wa|t v|it |ove|rin|aat|n n|wet|uit|ijd|ze | zo|ion| ov|dez|gem|met|tio|bbe|ach| ni|hed|st |all|ies|per|heb|ebb|e i|toe|es |taa|n m|nte|ien|el |nin|ale|ben|daa|sti| ma|mee|kin|pen|e h|wer|ont|iet|tig|g o|s e| er|igd|ete|ang|lan|nsc|ema|man|t g|is |beg|her|esc|bij|d o|ron|tin|nal|eer|p v|edi|erm|ite|t w|t a| hu|rwi|wij|ijs|r e|weg|js |rmi|naa|t b|app|rwe| bi|t z|ker|ame|eri|ken| an|ar | la|tre|ger|rdi|tan|eit|gde|g i|d z|oep',
        srp:
          ' pr| i |rav|pra| na|na |ma | po|je | sv|da |a p|ima|ja |a i|vo |nje|va |ko |anj|ti |i p| u |ako|a s| da|avo|i s|ju |ost| za|sva|o i|vak| im|e s|o n|ava| sl|nja| ko|no |ne |li |om | ne|ili| dr|u s|slo|koj|a n|obo|ih |lob|bod|im |sti|stv|a o| bi| il| ra|pri|a u|og | je|jed|e p|enj|ni |van|u p|nos|a d|iti|a k|edn|i u|pro|o d|ova| su|ran|cij|i i|sta|se | os|e i|dru| ob|i o|rod|aju|ove| de|i n| ka|aci|e o| ni| od|ovo|i d|ve | se|eni|voj|ija|su |u i|žav|avn|uje| st|red|m i|dna|a b|odi|ara|drž|ji |nov|lju|e b|rža|tva|što|u o|oja| ov|a j|odn|u u|jan|poš|jen| nj|nim|ka |ošt|du |raz|a z| iz|sno|o p|vu |u n|u d|šti|osn|e d|pre|u z|de |ave|nih|bit|aro|oji|bez|tu |gov|lje|ičn| sa|lja|svo|lo |za |vno|e n|eđu| tr|nar| me|vim|čno|oda|ani|đen|nac|nak|an |to |tre|ašt| kr|stu|nog|o k|m s|tit|aln|nom|oj |pos|e u|reb| vr|olj|dno|iko|ku |me |nik| do|ika|e k|jeg|nst|tav|em |i m|sme|o s|dni|bra|nju|šen|ovi|tan|te |avi|vol| li|zaš|ilo|rug|var|kao|ao |riv|tup|st |živ|ans|eno|čov|štv|kla|vre|bud|ena| ve|ver|odu|međ|oju|ušt| bu|kom|kri|pod|ruš|m n|i b|ba |a t|ugi|edi| mo|la |u v|kak| sm|ego|akv|o j|rad|dst|jav|del|tvo| op|nu |por|vlj|avl|m p|od |jem|oje| čo|a r|sam|i v|ere|pot|o o|šte|rem|vek|svi| on|rot|e r',
        ckb:
          ' he| û |ên | bi| ma|in |na | di|maf|an |ku | de| ku| ji|xwe|her| xw|iya|ya |kes|kir|rin|iri| ne|ji |bi |yên|afê|e b|de |tin|e h|iyê|ke |es |ye | we|er |di |we |ê d|i b| be|erk|ina| na| an|î û|yê |eye|î y|kî |rke|nê |diy|ete|eke|ber|hem|hey| li| ci|wek|li |n d|fê | bê| te|ne |yî | se|net|rî |tew|yek|sti|af | ki|re |yan|n b|kar|hev|e k|aza|n û|wî | ew|i h|n k|û b|î b| mi| az|dan| wî|ekî|î a|a m|zad|e d|mir|bin|est|ara|iro|nav|ser|a w|adi|rov|n h|anê|tê |ewe|be |ewl|ev |mû | ya|tî |ta |emû| yê|ast|wle| tê|n m| bo|wey|s m|bo | tu|n j|ras| da| me|din|î d|ê h|n n|n w|ing|st | ke| ge|în |ar | pê|iye|îna|bat|r k|ema|cih|ê b|wed|û m|dî |û a|vak|ê t|ekh|par| ye|vî |civ|n e|ana|î h|ê k|khe|geh|nge|ûna|fên|ane|av |î m|bik|eyê|eyî|e û| re|man|erb|a x|vê |ê m|iva|e n|hî |bûn|kê | pa|erî|jî |end| ta|ela|nên|n x|a k|ika|f û|f h|î n|ari|mî |a s|e j|eza|tên|nek| ni|ra |ehî|tiy|n a|bes|rbe|û h|rwe|zan| a |erw|ov |inê|ama|ek |nîn|bê |ovî|ike|a n| ra|riy|i d|anî|û d|e e|etê|ê x|yet|aye|ê j|tem|e t|erd|i n|eta|ibe|a g|u d|xeb|atê|i m|tu | wi|dew|mal|let|nda|ewa| ên|awa|e m|a d|mam|han|u h|a b|pêş|ere| ba|lat|ist| za|bib|uke|tuk|are|asî|rti|arî|i a|hîn| hî|edi|nûn|anû|qan| qa| hi| şe|ine|n l|mên|ûn |e a',
        yor:
          'ti | ní|ó̩ | è̩|ní | lá|̩n |o̩n|é̩ |wo̩|àn | e̩|kan|an |tí | tí|tó̩| kò|ò̩ |̩tó| àw| àt|è̩ |è̩t|e̩n|bí |àti|lát|áti| gb|lè̩|s̩e| ló| ó |àwo|gbo|̩nì|n l| a | tó|í è|ra | s̩|n t|ò̩k|sí |tó |̩ka|kò̩|ìyà|o̩ | sí|ílè|orí|ni |yàn|dè |̩‐è|ì k|̩ à|èdè| or|ún |ríl|è̩‐|í à|jé̩|‐èd|àbí|̩ò̩|ò̩ò|tàb|nì |í ó|n à| tà|̩ l|jo̩| ti|̩e |̩ t| wo|nìy|í ì|ó n| jé| sì|ló |kò |n è|wó̩| bá|n n|sì | fú|̩ s|í a|rè̩|fún| pé| òm|̩ni|gbà| kí| èn|ènì|in |òmì|ìí |ba |nir|pé |ira|mìn|ìni|n o|ràn|ìgb| ìg|bá |e̩ | rè|̩ n|kí |n e|un |gba|̩ p|í ò|nú | o̩|nín|gbé|yé | ka|ínú|a k|fi | fi|mo̩|bé̩|o̩d|dò̩|̩dò|ó s|i l|̩ o|̩ ì|wà |í i|i ì|hun|bò |i ò|dá |bo̩|o̩m|̩mo|̩wó|bo |áà |̩ k|ó j|ló̩|àgb|ohu| oh| bí| ò̩|bà |ara|yìí|ogb|írà|n s|ú ì| ìb|pò̩|í k| lè|bog|i t|à t|óò |yóò|kó̩|gé̩|à l|ó̩n|rú |lè | yó|̩ ò|̩ e|a w|̩ y|ò̩r|̩ f| wà|ò l|í t|ó b|i n|ó̩w|̩gb|yí |í w|ìké|̩ a|láà|wùj|àbò|i è|ùjo|fin|é̩n|n k|í e|i j|ú à| ìk|òfi| òf| ar|i s|mìí|ìír| mì| ir|rin|náà| ná|jú |̩ b| yì|ó t|̩é̩| i |̩ m|fé̩|kàn|rí |ú è|à n|wù |s̩é|é à| mú| èt|áyé|í g|̩kó|̩dá|è̩d|àwù|è̩k| ìd|irú|í o|i o|i à|láì|í n|ípa| kú|níp| ìm|a l|ké̩|bé |i g|de |ábé|ìn |báy|̩è̩|ígb|wò̩|níg|mú |láb| àà|n f|è̩s|̩ w|ùn |i a|ayé|èyí| èy|mó̩|á è| ni|n b| wó|je̩| ìj|gbá|ò̩n|ó̩g',
        uzn:
          'lar|ish|an |ga |ar | va| bi|da |va |ir | hu|iga|sh |uqu|shi|bir|quq|huq|gan| bo| ha|ini|ng |a e|r b| ta|lis|ni |ing|lik|ida|oʻl|ili|ari|nin|on |ins| in|adi|nso|son|iy | oʻ|lan| ma|dir|hi |kin|har|i b|ash| yo|boʻ| mu|dan|uqi|ila|ega|qla|r i|qig|oʻz| eg|kla|a b|qil|erk|ki | er|oli|nli|at | ol|gad|lga|rki|oki|i h|a o| qa|yok|lig|osh|igi|ib |las|n b|atl|n m| ba|ara| qi|ri | sh|iya|ala|lat|in |ham|bil|a t|a y|bos|r h|siy|n o|yat|inl|ik |a q|cha|a h| et|eti|nis|a s|til|ani|h h|i v|mas|tla|osi|asi| qo|ʻli|ati|i m|rni|im |uql|arn|ris|qar|a i|gi | da|n h|ha |sha|i t|mla|rch| xa|i o|li |hun|bar|lin|ʻz |arc|rla| bu|a m|a a| as|mum| be| tu|aro|r v|ikl|lib|taʼ|h v|tga|tib|un |lla|mda| ke|shg| to|n q|sid|n e|mat|amd|shu|hga| te|tas|ali|umk|oya|hla|ola|aml|iro|ill|tis|iri|rga|mki|irl| ya|xal|dam| de|gin|eng|rda|tar|ush|rak|ayo| eʼ| so|ten|alq| sa|ur | is|imo|r t| ki|mil| mi|era|zar|hqa|aza|k b| si|nda|hda|kat|ak |oʻr|n v|a k|or |rat|ada|ʻlg|miy|tni|i q|shq|oda|shl|bu |dav|nid|y t|ch |asl|sos|ilg|aso|n t|atn|sin|am |ti |as |ana|rin|siz|yot|lim|uni|nga|lak|n i|a u|qon|i a|h k|vla|avl|ami|dek| ja|ema|a d|na | em|ekl|gʻi|si |i e|ino| ka|uch|bor|ker| ch|lma|liy|a v|ʼti|lli|aka|muh|rig|ech|i y|uri|ror',
        zlm:
          'an |ang| ke| se|ng | da|dan|ada|ara| pe|ak | be|ran|ber| me|ah |nya|hak|per|n s|ata|ala|ya |a s|kan|asa|n k|lah| di|da |aan|gan|nga|dal| ma|n d|erh|eba|rha|a p| ha|kep|pad|yan| ya|ap |ama| ba|nda| te|ra |tia|man|eng|a b|a d|ora|men|n p|ter|iap|san|epa| or|pen|eti| ad| at|a a|n a|set|tan|h b|tau|sia|n t|apa|dak|pa |sa |au |ta |ela|bas|at | sa|n b|beb|n m|keb|h d|p o|end|ega|aka|a k|am |sam|gar|ana|leh|lam|ole| un|neg|k k|ban|g a|di |n y|eh |a m|eri|aha|han| ti|a t|ma |any|uan|seb|ebe|ngs|atu|mas|bag|car|mem|ing|ian| ne|kes|i d|gsa|ia |ika|mat|agi|ert| de| la|emb|und|nan|asi|emu|ers|epe|na |anu|gi |ung|erk|n h|ngg|tu |ind|pem|i m|g b|kla| in|iha|pun|i s|erl|akl|era|as |dap|eca|sec|al |k m|bar|nus|usi|lan|tin|si |awa|nny| su|bol|sas| as|ini|rta|rat|ena|sem|aya|ni |den|g m|g t|kem|i k|adi|ai |ti | ap| ta|in | he| bo|had|uka|tar| an|hen|ann|ain|ka |rka|ri |ema|k h|n i|g s|dia|dun|ira|rsa|elu|nta|a n|mel|iad|uk |mpu|ua |har|kat|aga|lai|enu|ses|emp|ntu|k d|ent|un |mba|rma|jua|uat|k a|mar|rak|h m|ila|lua|i a|aja|ker|dil|g d|uma|rli|lin|esi|sua|nak|ndu|l d| pu|t d|erm|ser|ar |ese|ati|tuk|rga|i p|dar|esa|bah| ol|ari|ngk|ant|sek|gam|raa|mbe|ida|sat|iri|kea|i b|saa|dir|g u|erj|tik|unt|eka|rja',
        ibo:
          'a n|e n|ke | na|na | ọ | bụ| n |nwe|ere|ọ b|re |nye| nk|ya |la | nw| ik| ma|ye |e ọ|ike|a o|nke|a m|ụ n| ya|a ọ|ma |bụl|ụla| on| a |e i|kik|iki|ka |ony|ta |bụ |kwa| nd|a i|i n|di |a a|wa |wer|do | mm|dụ |e a|ha | ga|any| ob|ndi| ok|he |e m|e o|a e|ọ n|ite|rụ |hi |mma|ga‐|wu |ara| dị|aka|che|oke|we |o n| ih|n o|adụ|mad|obo|bod|a g|odo| ka| ez|te |hị |be |ụta|dị | an|zi | oh|a‐e|akw|gba|i m|me | ak|u n|nya|ihe|ala|ohe|ghi|ri | ọz|her|ra |weg| nt| iw| mb|ba |pụt| si|ro |oro|iwu|chi|a‐a|rị |ụ i|ụ ọ| eb|iri|ebe|ụrụ|zọ | in|a y|ezi|e ị|kpa|le |ile|ịrị|n e|kpe|mba| ha|bi |sit|e e|inw|nil|asị| en|mak|a u| ni|apụ|chị|i i|ghị|i ọ|i o|si | e |ide|o i|e y|ụ m|a s|u o|kwu|ozu|yer|ru |enw|ụ o|ọzọ|gid|hụ |n a|ahụ|nkw|sor|egh|edo|a ụ|tar|n i|toz|ị o|pa |i a| me|ime|uru|kwe| mk|tu |ama|eny|uso|de | im|ọ d|osi|hed|a d| kw|mkp|wet| ọr| ọn|obi|ọrụ| ịk| to|gas| ch|ịch|nha|ọnọ|nọd| nc| al|n ụ|ị m| us|nọ |u ọ|nch| o |eta|n u| ot|otu|sir|sịr| nh|a k|ali|o m| ag| gb|e s|ọta|nwa|ị n|lit|ega|ji |ọdụ|e k|ban|e g|ị k|esi|agb|eme|hu |ikp|zu |pe |nta|na‐|chọ|u a|a b|uch|n ọ|onw|ram|kwụ|ekọ|i e| nọ| ug|ọch|u m|gwu|a h|zụz|ugw|meg|ị e|nat|e h|dịg|o y|kpu|pụr|cha|zụ |hịc|ich| ng|ach| og|wap|wan|ịgh|uwa| di| nn|i ị',
        ceb:
          'sa | sa|ng |ang| ka|an | pa|ga | ma|nga|pag| ng|a p|on |kat|a k|ug |od | ug|g m| an|ana|n s|ay |ung|ata|ngo|a m|atu|ala|san|ag |tun|g s|g k|god|d s|a s|ong|mga| mg|g p|n u|yon|a a|pan|ing|usa|tan|tag|una|aga|mat|ali|g u|han|nan| us|man|y k|ina|non|kin| na|syo|lan|a b|asa|nay|n n|a i|awa| ta|taw|gaw|nsa|a n|nas| o |ban|agp|isa|dun|was|iya| gi|asy|adu|ini|bis| ad|ili|o s| bi|g a|nah|nag|a t| ki|lin|lay|ahi|sam|al |wal| di|nal|asu| ba|ano|agt| wa|ama|yan|a u| iy|kan|him|n k|gan|ags|n a|kag| un|ya |kas|gpa|g t| su|aha|wha|agk|awh|gka|a g|kal|l n|gla|gsa|sud|gal|imo|ud |d u|ran|uka|ig |aka|aba|ika|g d|ara|ipo|ngl|g n|uns|n o|kau|i s|y s|og |uta|d n|li | si|gik|g i|mta|ot |iin| la| og|o a|ayo|ok |awo|aki|kab|aho|n m|hat|o p|gpi|a w|apa|lip|ip | hu| ga|a h|uba|na | ti|bal|gon|la |ati|wo |ad |hin|sal|gba|buh| bu| ub|uha|agb|hon|ma |nin|uga|t n|ihi| pi|may| pu|mak|ni | ni|d a|pin|abu|agh|ahu|uma|as |dil|say| in|at |ins|lak|hun|ila|mo |s s|sak|amt|o u|pod|ngp|tin|a d|but|ura|lam|aod|t s|bah|ami|aug|mal|sos|os |k s| il|tra| at|gta|bat|aan|ulo|iha|ha |n p| al|g b|lih|kar|lao|agi|amb|mah|ho |sya|ona|aya|ngb|in |inu|a l| hi|mag|iko|it |agl|mbo|oon|tar|o n|til|ghi|rab|y p| re|yal|aw |nab|osy|dan',
        tgl:
          'ng |ang| pa|an |sa | sa|at | ka| ng| ma|ala|g p|apa| na|ata|pag|pan| an| at|ay |ara|ga |a p|tan|g m|mga| mg|n n|pat| ba|n a|aya|na |ama|g k|awa|kar|a k|lan|rap|gka|nga|n s|g n|aha|g b|a a| ta|agk|gan|tao|asa|aka|yan|ao |a m|may|man|kal|ing|a s|nan|aga| la|ban|ali|g a|ana|y m|kat|san|kan|g i|ong|pam|mag|a n|o a|baw|isa|wat| y |lay|g s|y k|in |ila|t t| ay|aan|o y|kas|ina|t n|ag |t p|wal|una|yon| o | it|nag|lal|tay|pin|ili|ans|ito|nsa|lah|kak|any|a i|nta|nya|to |hay|gal|mam|aba|ran|ant|agt|on |t s|agp| wa| ga|gaw|han|kap|o m|lip|ya |as |g t|hat|y n|ngk|ung|no |g l|gpa|wa |lag|gta|t m|kai|yaa|sal|ari|lin|a l|pap|ahi| is| di|ita| pi|pun|agi|ipi|mak|a b|y s|bat|yag|ags|o n|aki|tat|pah|la |gay|hin| si|di |i n|sas|iti|a t|t k|mal|ais|s n|t a|al |ipu|ika|lit|gin| ip|ano|gsa|alo|nin|uma|hal|ira|ap |ani|od |i a|gga|y p|par|tas|ig |sap|ihi|nah|ini| bu|ngi|syo|o s|nap|o p|a g| ha|uka|a h|aru|a o|mah|iba|asy|li |usa|g e|uha|ipa|mba|lam|kin|kil|duk|n o|iga| da|dai|aig|igd|gdi|pil|dig|pak| tu|d n|sam|nas|nak|ba |ad |lim|sin|buh|ri |lab|it |tag|g g|lun|ain|and|nda|pas|kab|aho|lig|nar|ula| ed|edu| ib|git|ma |mas|agb|ami|agg|gi |sar|i m|siy|g w|api|pul|iya|amb|nil|agl|sta|uli|ino|abu|aun|ayu| al|iyo',
        hun:
          ' sz| a |en | va|és | és|min|ek | mi| jo|jog|ind|an |nek|sze|ság| az|gy |sza|nde|ala|az |den|a v|val|ele| el|oga|mél|egy| eg|n a|ga |zab| me|zem|emé|aba|int|van|bad|tel|tet| te|ak |tás|ény|t a| ne|gye|ély|tt |n s|ben|ség|zet|lam|meg|nak|ni | se|ete|sen|agy|let|lyn|s a|yne|ra |z e|et | al|mel|kin|k j|eté|ok |tek| ki|vag|re |n m|oz |hoz|ez |s s|ett|gok|ogy| kö|mbe|es |em |nem|ely| le|ell|emb|hog|k a|atá|köz|nt | ho|yen|hez|el |z a|len|dsá|ásá|tés|ads|k m| ál| em|a s|nte|a m|szt|a t|áll|ás |y a|ogo|sem|a h|enk|nye|ese|nki|ágo|t s|lap|ame|ber|ló |k é|nyi|ban|mén|s e|i m|t m| vé|lla|ly |ébe|lat|ág |ami|on |mze|n v|emz|fel|a n|lő |a a|eki|eri|yes| cs|lle|tat|elő|nd |i é|ég |ésé|lis|yil|vet|át |kül|ért| ke|éte|rés|l a|het|szo|art|alá| ny|tar|koz| am|a j|ész|enl|elé|ól |s k|tár|s é|éle|s t|lem|sít|ges|ott| fe|n k|tko|zás|t é|kel|ja | ha|aló|zés|nlő|ése|ot |ri |lek|más|tő |vel|i j|se |ehe|tes|eve|ssá|tot|t k|olg|eze|i v|áza|leh|n e|ül |tte|os |ti |atk|zto|e a|tos|ány|ána|zte|fej|del|árs|k k|kor|ége|szá|t n| bi|zat|véd|nev|elm|éde|zer|téb|biz|rra|ife|izt|ere|at |ll |k e|ny |sel| né|ába|lt |ai |sül|ház|kif|t e| ar|leg|d a|is |i e|arr|t t|áso|it |ető|al | má|t v| bá|bár|a é|esü|lye|m l| es|nyo',
        azj:
          ' və|və |ər |lar| hə|in |ir | ol| hü| bi|hüq|üqu|quq|na |lər|də |hər| şə|bir|an |lik| tə|r b|mal|lma|ası|ini|r h|əxs|şəx|ən |arı|qla|a m|dir|aq |uqu|ali| ma|una|ilə|ın |yət| ya|ara|ikd|əri|ar |əsi|əti|r ş|rin|yyə|n h| az|dən|nin|ərə|tin|iyy|mək|zad| mü|sin| mə|ni |nda|ət |ndə|aza|rın|ün |ını|ə a|i v|nın|olu|qun| qa| et|ilm|lıq|ə y|ək |lmə|lə |kdi|ind|ına|olm|lun|mas|xs |sın|ə b| in|n m|q v|nə |əmi|n t|ya |da | bə|tmə|dlı|adl|bər| on|əya|ə h|sı |nun|maq|dan|inə|etm|un |ə v|rlə|n b|si |raq| va|ə m|n a|ınd|rı |anı| öz|əra|nma|n i|ama|a b|irl|ala|li |ins|bil|ik | al| di|ığı|ə d|lət|il |ələ|ə i|ıq |nı |nla|dil|müd|n v|ə e|unm|alı| sə|xsi|ə o|uq |uql|nsa|ətl| də|ili|üda|asi| he|ola|san|əni|məs| da|lan| bu|tər|həm|dır|kil|iş |u v| ki|min|eyn|mi |yin| ha|sos|heç|bu |eç | ed|kim|lığ|alq|xal| as|sia|osi|r v|q h|rə |yan|i s| əs|daf|afi| iş|ı h|fiə| ta|ə q|ıql|a q|yar|sas|lı |ill|mil|əsa|liy|tlə|siy|a h|məz|tün|ə t| is|ist|iyi| so|n ə|al |ifa|ina|lıd|ı o|ıdı|əmə|ır |ədə|ial| mi|əyi|miy|çün|n e|iya|edi| cə| bü|büt|ütü|xil|üçü|mən|adə|t v|a v|axi|dax|r a|onu| üç|seç| nə| se|man|ril|sil|əz |iə |öz |ılı|aya|qan|i t|şər|təm|ulm|rəf|məh| xa|ğın| dö| ni|sti|ild|amə|qu |nam|n o|n d|var|ad |zam|tam|təh',
        ces:
          ' pr| a |ní | ne|prá|ráv|ost| sv| po|na |ch |ho | na|nos|o n| ro|ání|ti |vo |neb|ávo|má |bo |ebo| má|kaž| ka|ou |ažd| za| je|dý |svo|ždý| př|a s| st|sti|á p| v |obo|vob| sp|bod| zá|ých|pro|rod|ván|ení|né |ý m|ého| by| ná|spo|ně |o p|mi |í a|ter|roz|ová|to | ja| li|áro|nár|by |jak|a p|a z|ny | vš|kte|i a|lid|ím |o v|í p|u p|mu |at | vy|odn| so| ma|a v| kt|í n|zák|li |oli|ví |kla|tní|pod|stá|en |do |t s|mí |je |em |áva| do|byl| se|být|í s|rov| k |čin| ve|ýt |í b|it |dní|vše|pol|o s| bý|tví|nýc|stn|nou|ejn|sou|ran|ci |vol|se |nes|a n|pří|eho|ným|tát|va |ním|mez|ají|i s|stv|ké |ích|ečn|žen|e s|vé |ova|své|ým |kol|du |u s|jeh|kon|ave|ech|eré|nu | ze|i v|o d|í v|hra|ids|m p|ému|ole|y s| i |maj|o z| to|aby|sta| ab|m a|pra| ta|chn| ni|že |ovn|ako|néh|len|dsk|rac|lad|chr| že|vat| os|sob|aké|i p|smí|esm|st |i n|m n|a m|lně|lní|při|bez|dy |áln|ens|zem|t v|čen|leč|kdo|ými| ji|oci|i k| s |í m|jí | či|áv |ste|och| oc|vou|ákl| vz|rav|odu|nez|inn|ský|nit|ivo|a j|u k|iál| me|ezi|ské|ven|stu|u a|tej|oln|slu|zen|í z|y b|oko|zac|níc|jin|ky |a o|řís|obe|u v|tak|věd|oje| vý|ikd|h n| od|čno|oso|ciá|h p| de|a t|ům |soc|jíc|odů|něn|adn|tup|dů |děl|jno|kéh|por|ože|hov|aci|nem|é v|rok|i j|u o|od |ího|vin|odi',
        run:
          'ra |we |wa | mu|e a|se | n |a k|ira|ntu|tu | ku| um|ko |a i|mu |iri|mun|hir|ye |unt|ing|ash|ere|shi|a n|umu|zwa| bi|gu |ege|a a|za |teg|ama|e k|go |uba|aba|ngo|ora|o a|ish| ba| ar|ung|a m| we|e n|na |sho|ese|nga| ab|e m|mwe|ugu| kw|ndi| gu|ate|kwi|wes|riz|ger|u w| at|di |gih|iza|n u|ngi|ban|yo |ka |e b|a b| am| ca|ara|e i|obo|hob|ri |u b|can|nke|ro |bor| in|bah|ahi|ezw|a u|gir|ke |igi|iki|iwe|rez|ihu|hug|aku|ari|ang|a g|ank|ose|u n|o n|rwa|kan| ak|nta|and|ngu| vy|aka|n i|ran| nt| ub|kun|ata|i n|kur|ana|e u| ko|gin|nye|re | ka|any|ta |uko|amw|iye| zi|ga |ite| ib|aha| ng|era|o b|ako|o i| bu|o k|o u|o z| ig|o m|ho |mak|sha| as| iv|ivy|n a|i b|izw|o y| uk|ubu|aga|ba |kir|vyi|aho| is|nya|gan|uri| it| im|u m|kub|rik|hin|guk|ene|bat|nge|jwe|imi| y |vyo|imw|ani|kug|u a|ina|gek|ham|i i|e c|ze |ush|e y|uru|bur|amb|ibi|agi|uza|zi |eye|u g|gus|i a| nk|no |abi|ha |rah|ber|eme|ras|ura|kiz|ne |tun|ron| zu|ma |gen|wo |zub|w i|kor|zin|wub|ind| gi|y i|ugi|je |iro|mbe| mw|bak| ma|ryo|eka|mat| ic|onk|a z| bo|ika|eko|ihe|ukw|wir|bwa| ry| ha|bwo| ag|umw|yiw|tse| ya|he |eng| ki|nka|bir|ant|aro|gis|ury|twa| yo|bik|rek|ni | ah| bw|uro|mw |tan|i y|nde|ejw| no|zam|puz|ku |y a|a c|bih|ya |mur|utu|eny|uki|bos',
        plt:
          'ny |na |ana| ny|y f|a n|sy |aha|ra |a a| fa|n n|y n|a m|an | fi|tra|any| ma|han|nan|ara|y a| am|ka |in |y m|ami|olo| ts|lon|min| mi| sy| na|a t| ol|fan| ha|a i|man|iza| iz|ina|ona|y h|aka|o a|ian|a h|reh|etr|a s|het|on |a f|ire|fah|tsy|mba| ar| hi|zan|ay |ndr|y o|ira|y t| an|ehe|o h|afa|y i|ren|ran| zo|ena|amb|dia|ala|amp|zo |ika| di|tan|y s|y z| az|ia |m p|rin|jo |n j| jo| dr|zy |ry |a d|ao |and|dre|haf|nen|mpi|rah| ka|eo |n d| ir|ho |am |rai|fa |elo|ene|oan|omb| ta| pi| ho|ava|azo|dra|itr|iny|ant|tsi|zon|asa|tsa| to|ari|ha |a k|van|n i|fia|ray| fo|mbe|ony|sa |isy|azy|o f|lal|ly |ova|lom| vo|nat|fir|sam|oto|zay|mis|ham|bel| ra|a r|ban|kan|iha|nin|a e|ary|ito| he| re| no|ita|voa|nam|fit|iar| ko|tok|isa|fot|no |otr|mah|aly|har|y v|y r| sa|o n|ain|kam|aza|n o|oka|ial|ila|ano|atr|oa | la|y l|eri|y d|ata|hev|sia|pia|its|reo| ao|pan|anj|aro|tov|nja|o s|fam|pir| as|ty |nto|oko|y k|sir|air|tin|hia|ais|mit|ba | it| eo|o t|mpa|kon|a z|a v|ity|ton|rak|era|ani|ive|mik|ati|tot|vy |hit|hoa|aho|ank|ame|ver|vah|tao|o m|ino|dy |dri|oni|ori| mo|hah|nao|koa|ato|end|n t| za|eha|nga|jak|bar|lah|mia|lna|aln|va | mb|lan| pa|aov|ama|eve|za |dro|ria|to |nar|izy|ifa|adi|via|aja| va|ind|n k|idi|fiv|rov|vel',
        qug:
          'una|ta | ka|na |ka |ash|cha|a k|ari|ish|kun|kta|ana|pak|hka|shk|apa|mi |ach|hay|akt|shp|man|ak | ch| ha|rin|ata|tak|lla|ita|ami|ama|aku|har| pa|pas|ayñ|yñi|ina| ma| ru|uku|sh |hpa|run|all|kuy|aka|an | tu|tuk|yta|chi|chu|a c|ñit|in |nak|a h|nka|ris|tap|kan| ki|ayt|pi | sh|pa |i k|a p|nap|kam|kaw|pay|nam|ayp|aws|iri|wsa|a s|ank|nta|uy |a t|hin|a m|ay | li|ant|lia|kay|nat|a r|shi|iak|lak|uya| wa|yuy|say|kis|y r|ypa|hun|a a| yu|n t|tam| ti|yay|n k| ya|a w|hpi|lli| al|api|yku|un |ipa|a i|iku|ayk|shu| sa|ush|pir|ich|kat|hu |huk| il|ill|kas|a y|rik|yac|a l| ku|kac|hik|tan|wan|ypi|ink|ika| ni|ila|ima|i c|yll|ayl| wi|mac|nis| ta|i y|kus|tin|n s|i p|yan|llu|la |iks|tik|kpi| pi|awa|may|lan|li | ri|kll|yas|kin|kak|aya|ksi|k h|aym|war|ura| ay|lat|ukt|i t|iya|ull|mas|sha|kir|uch|h k|nch|akp|uma|pip|han|kik|iki|riy|aki| ii|i s|n p|h m|kar|nal|y h|tac| su|nac|mak|n m|nki|k a|mam|iwa|k t|k k|i m|yma| ña|wil|asi|nmi|kap|pal|sam|pam|k i|k l|i i|pan|sum|i w| hu|his| mu|iia|mun|k m|u t|pik|was|ik |ma |hat|k r|akl|huc| im|mal|uyk|imi|n y|anc|y k|a n|iñi| iñ|wak|unk|yka| mi|iña|a u|has|ywa| ak|llp|ian|ha |tar|rmi|i a|arm|las|ati|pur|sak|ayw|hap|yar|uti|si |iyt|uri|kim| ar|san|h p|akk|iy |wat|wpa|y i|u k',
        mad:
          'an |eng|ban|ng | sa| ka|dha| ba|ren|ak |ang| se| ha|hak| dh|na | pa|se |adh|a s|aba|n s|ara|ngg|are|ha |aga|sa | or|ore|asa|sar|ana| ma|aan|a k|ale|gi | ag|gad|a b|n o|n k|eba|ala|ra |gan| ke|dhu|ota|aja|bas|n b|ka |man|tab|dhi|beb|sab|ama|ako|abb|at |ggu|nga| ta|pan|wi |huw|uwi|eka|ata|a d|san| ot|agi|lak|hal|ba |bba|i h|ong|em |kab|g a|lem|a o| pe| na|ane|par|ngs|nge|gar|a a|tan|gsa|a p|ran|i s|k h|n p|uy |guy|ken|n a|al |ada| ga|apa|pon|e d| e |nek| an|g s|ta |kaa|on |kal|a m|ssa|ona|abe|kat| la|a e|e e|sal|ate|jan|ri |nan|lab|asi|sad|i p|e a|lan|aka|a h|ari| bi|ena|si |daj| ng|ton|e k|har|oss|gen|i k|g k|car|ase|ano|era|kon| be|nya|n d|nag|bad|ar |epo| da|mas| kl| al|n t|mat|nos|n n|ela|g e|a n|k k|uwa|adi|pad|ggi|uan|i d|ne | so|hi |sae|oan|wan|as |le |gap|ter|yat|om |kla|k a|e b|ina|ah |k s|koa|i a|ega|neg|n h|m p|aha| as| ja|abi|ma |kas|bi | mo|aon| di|one| ep|per|aya|e s|nto|te |bat|epa|nda|n e| ca|int|pam|di |ann| ra|aen|k d|amp|a t|nta|and|e p|rga|pen|yar|mpo|ste|dra|ok |oko|ila|g p|k b|i b|set|to |isa|nao|nna|n m|ett| a |bis|hid|bin|i m|nas| ho|kar|t s| po|dil| to|aju|ika|kom|arg|ant|raj|a l|das|tto|ost|mos|lae|ga |rek|idh|tad|hig|en |rny|arn|ndh|eta|adu| dr|jat|jua|gam',
        nya:
          'ndi|ali|a k|a m| ku| nd|wa |na |nth| mu| al|yen|thu|se |ra |nse|hu |di |a n|la | pa|mun| wa|nga|unt| la|a u|u a|e a|ons|za | ma| lo|iye|ace|ce |a l|idw|ang| ka|kha|liy|ens|li |ala|ira|ene|pa |i n|we |e m|ana|dwa|era|hal|ulu|lo |ko |dzi| ci|yo |o w|iko|ga |a p|chi| mo|lu |o l|o m|oyo|ufu| um|moy|zik| an|ner|and|umo|ena| uf|dan|iri|ful|a a|ka |to |hit|nch| nc|a c|ito|fun|dwe| da|kuk|wac| dz|e l|a z|ape|kap|u w|e k|ere|ti |lir| za|pen|tha|aye|kut|mu |ro |ofu|ing|lid| zo|amu|o c|i m|mal|kwa|mwa|o a|eza|i p|o n|so |i d|lin|nso| mw|iro|zo | a |ati| li|i l|a d|ri |edw|kul|una|uti|lan|a b|iki|i c|alo|i k| ca|lam|o k|dza|ung|o z|mul|ulo|uni|gan|ant|nzi| na|nkh|e n|san|oli|wir|tsa|u k|ome|ca |gwi|unz|lon|dip|ipo|yan|gwe|pon|akh|uli|aku|mer|ngw|cit| po| ko|kir|mba|ukh|tsi|bun|iya|ope|kup|bvo|han| bu|pan|ame|vom|ama| ya|siy| am|rez|u n|zid|men|osa|ao |pez|i a| kw| on|u o|lac|ezo|aka|nda|hun|u d|ank|diz|ina|its|adz| kh|ne |nik|e p|o o|ku |phu|eka| un|eze|mol|ma | ad|pat|oma|ets|wez|kwe|kho|ya |izo|sa |o p|kus|oci|khu|okh|ans|awi|izi|zi |ndu|iza|no |say| si|i u|aik|jir|ats|ogw|du |mak|ukw|nji|mai|ja |sam|ika|aph|sid|isa|amb|ula|osi|haw|u m| zi|oye|lok|win|lal|ani| ba|si | yo|e o|opa|ha |map|emb',
        zyb:
          'bou|aeu|enz|nz |eng|iz |ih |uz |uq |oux|ing| bo| di| ca|z g|dih|ux |ngh|cae|gen|euq|z c|you|ng |ung|ngz|ij | gi| mi|miz|aen| ge|z d| ci|gya| yi| de|ouj|uj | gu|cin|ngj|ien|mbo|dae| mb|zli| se|gij|j g|ang|ouz|z y|j d|nae| cu| ba| da|h g|oz |yin|de |z b|nzl|li |nj |euz|x m| cw|iq | yo|gz |q g|yau|inh|vun|x b|h c| ga|ix |cwy|wyo| ro|rox|oxn|vei|nda|i c| nd|z m|gh |j b|wz | si| gy|hoz|unz|xna|cun|gue| li|ei |z h|yen|bau|can|inz|q c|dan| hi|gj |uh |yie| vu|faz|hin| bi|uek|goz|zci|nh |aej|ya |ej | fa|gun|ciz|au | go| ae|h m|ngq|den|gva|ouq|nq |z s|q d|ekg|q s| do|h d|kgy|eix| wn|ci |az |hu |nhy| ha|j c|u d|j n|z l|auj|gai|gjs|lij|eve|h s|sen|sin|sev|ou |sou|aiq|q y|h y|jso|bin|nei| la|en |ouh|din|uen|enj|enh|i b|z r|awz|q n|vih|j y|anj|bwn|sei|z n| ne|ozc|hye|j s|i d|awj|liz|g g|bae|wng|g b|eiq|bie|enq|zda| ya|n d|h f|x d|gak|hix|z v|h b|oen|anh|u c|in |i g|ghc|zsi|hci|siz|anz|ghg|ez |dun|cou| du|ngg|ngd|j m|cuz| ho|law|eiz|g c| dw|aw |g d|izy|hgy|ak |nde|min|dei|gda|ujc|wn |env|auy|iuz|ai |wnj|a d|hen|ozg|nzg|ek |g y|gzd|gzs|yaw|e c|yuz|daw|giz|jhu|ujh| co|nvi|guh|coz| ve| he|i m|sae|aih|x l|iet|iuj|dwg|iqg|qgy|gih|yai| na| fu|uyu|zbi|zdi|q b|cie|inj|zge|wnh|jsi|uzl| bu| le|eij|izc|aq ',
        kin:
          'ra | ku| mu|se |a k|ntu|nga|tu |umu|ye |li | um|mun|unt|a n|ira| n |ere|wa |we | gu|mu |ko |a b|e n|o k|e a|a u|a a|u b|e k|ose|uli|aba|ro | ab|gom|e b|ba |ugu| ag|omb|ang| ib|eng|mba|o a|gu | ub|ama| by| bu|za |ihu|ga |e u|o b| ba|kwi|hug|ash|ren|yo |ndi|e i| ka| ak| cy|iye| bi|ora|re |gih|igi|ban|ubu| nt| kw|di |gan|a g|a m|aka|nta|aga| am|a i|ku |iro|i m|ta |ka |ago|byo|ali|and|ibi|na |uba|ili| bw|sha|cya|u m|yan|o n| ig|ese|no |obo|ana|ish|kan|sho| we|era|ya |aci|wes|ura|i a|uko|e m|n a|o i|kub|uru|hob|ber|ran|bor| im|ure|u w|wo |cir|gac|ani|bur|u a|o m|ush| no|e y| y |rwa|eke|nge|ara|wiy|uga|zo |ne |ho |bwa|yos|anz|aha|ind|mwe|teg|ege|are|ze |n i|rag|ane|u n|ge |mo |u k|bul| uk|bwo|bye|iza|age|ngo|u g|gir|ger|zir|kug|ite|bah| al| ki|uha|go |mul|ugo|n u|tan|guh|y i| ry|gar|bih|iki|atu|ha |mbe|bat|o g|akw|iby|imi|kim|ate|abo|e c|aho|o u|eye|tur|kir| ni|je |bo |ata|u u| ng|shy|a s|gek| ru|iko| bo|bos|i i| gi|nir|i n|gus|eza|nzi|i b|kur| ya|o r|ung|rez|ugi|ngi|nya| se|mat|eko|o y| in|uki| as|any|bis|ako|gaz|imw|rer|bak|ige|mug|ing|byi|kor|eme|nu | at|bit| ik|hin|ire|kar|shi|yem|yam| yi|gen|tse|ets|ihe|hak|ubi|key|rek|icy| na|bag|yer| ic|eze|awe|but|irw| ur|fit|ruk|ubw|rya|uka|afi',
        zul:
          'nge|oku|lo | ng|a n|ung|nga|le |lun| no|elo|wa |la |e n|ele|ntu|gel|tu |we |ngo| um|e u|thi|uth|ke |hi |lek|ni |ezi| ku|ma |nom|o n|pha|gok|nke|onk|a u|nel|ulu|oma|o e|o l|kwe|unt|ang|lul|kul| uk|a k|eni|uku|hla| ne| wo|mun| lo|kel|ama|ath|umu|ho |ela|lwa|won|zwe|ban|elw|ule|a i| un|ana|une|lok|ing|elu|wen|aka|tho|aba| kw|gan|ko |ala|enz|o y|khe|akh|thu|u u|na |enk|kho|a e|zin|gen|i n|kun|alu|mal|lel|e k|nku|e a|eko| na|kat|lan|he |hak| ez|o a|kwa|o o|ayo|okw|kut|kub|lwe| em|yo |nzi|ane|obu| ok|eth|het|ise|so |ile|nok| ba|ben|eki|nye|ike|i k|isi| is|aph|esi|nhl|mph| ab|fan|e i|isa| ye|nen|ini|ga |zi |fut| fu|uba|ukh|ka |ant|uhl|hol|ba |and|do |kuk|abe|za |nda| ya|e w|kil|the| im|eke|a a|olo|sa |olu|ith|kuh|o u|ye |nis| in|ekh|e e| ak|i w|any|khu|eng|eli|yok|ne |no |ume|ndl|iph|amb|emp| ko|i i| le|isw|zo |a o|emi|uny|mel|eka|mth|uph|ndo|vik| yo|hlo|alo|kuf|yen|enh|o w|nay|lin|hul|ezw|ind|eze|ebe|kan|kuz|phe|kug|nez|ake|nya|wez|wam|seb|ufa|bo |din|ahl|azw|fun|yez|und|a l|li |bus|ale|ula|kuq|ola|izi|ink|i e|da |nan|ase|phi|ano|nem|hel|a y|hut|kis|kup|swa|han|ili|mbi|kuv|o k|kek|omp|pho|kol|i u|oko|izw|lon|e l| el|uke|kus|kom|ulo|zis|hun|nje|lak|u n|huk|sek|ham| ol|ani|o i|ubu|mba| am',
        swe:
          ' oc|och|ch |er |ing|för|tt |ar |en |ätt|nde| fö|rät|ill|et |and| rä| en| ti| de|til|het|ll |de |om |var|lig|gen| fr|ell|ska|nin|ng |ter| ha|as | in|ka |att|lle|der|sam| i |und|lla|ghe|fri|all|ens|ete|na |ler| at|ör |den| el|av | av| so|igh|r h|nva|ga |r r|env|la |tig|nsk|iga|har|t a|som|tti| ut|ion|t t|a s|nge|ns |a f|r s|män|a o| sk| si|rna|isk|an | st|är |ra | vi| al|t f| sa|a r|ati| är| me| be|n s| an|tio|nna|lan|ern|t e|med| va|ig |äns| åt|sta|ta |nat| un|kli|ten| gr|vis|äll| la|one|han|änd|t s|stä|t i|ner|ans|gru| ge|ver| må| li|lik|ihe|ers|rih|r a| re|må |sni|n f|t o| mä| na|r e|ri |ad |ent|kla|det| vä|run|rkl|da |h r|upp|dra|rin|igt|dig|n e|erk|kap|tta|ed |d f|ran|e s|tan|uta|nom|lar|gt |s f| på| om|kte|lin|r u|vid|g o|änn|erv|ika|ari|a i|lag|rvi|id |r o|s s|vil|r m|örk|ot |ndl|str|els|ro |a m|mot| mo|i o|på |r d|on |del|isn|sky|e m|ras| hä|r f|i s|a n|nad|n o|gan|tni|era|ärd|a d|täl|ber|nga|r i|enn|nd |n a| up|sin|dd |örs|je |itt|kal|n m|amt|n i|kil|lse|ski|nas|end|s e| så|inn|tat|per|t v|arj|e f|l a|rel|t b|int|tet|g a|öra|l v|kyd|ydd|rje| fa|bet|se |t l|lit|sa |när|häl|l s|ndr|nis|yck|h a|llm|lke|h f|arb|lmä|nda|bar|ckl|v s|rän|gar|tra|re |ege|r g|ara|ess|d e|vär|mt |ap ',
        lin:
          'na | na| ya|ya |a m| mo|a b|to | ko| bo|li |o n| li|i n| pe|i y|a y|a n|ngo|ki | ba| ma|kok|pe |la |a l|zal|oki|ali|nso|oto|ala|ons|so |mot|a k|nyo|eng|kol|go |nge| ny|yon|o e|ang|eko|te |o y|oko|olo|ma |iko|a e|e m|e b|lik|ko |o a|ako|ong| ye|mak|ye |isa| ek|si |lo |aza|sal|ama| te|bat|o p|oyo|e n| az|a p|ani|sen|o m|ela|ta |amb|i k|ban|ni | es|yo |mi |mba|osa| oy|aka|lis|i p|eli|a t|mok|i m|ba |mbo| to| mi|isi|bok|lon|ato|ing|o b| nd|ota|bot| ez|ge |nga|eza|o t|nde|ka |bo |gel|kan|e k|lam|sa |ese|koz| po|den|ga |oba|omb|oli|yan|kop|bon|mos|e e|kob|oka|kos|bik|lin|po |e a| lo| bi|kot|’te|ngi|sam| ’t|omi|e y|ti |i b| el|elo|som|lok|esa|gom|ate|kam|i t|ika|a s|ata|kat|ati|wa |ope|oza|iki|i e| ka|bom|tal|o l|bek|zwa|oke|pes| se|bos|o o|ola|bak|lak|mis|omo|oso|nza| at|nda|bal|ndi|mu |mob|osu|e t|asi|bis|ase|i l|ele|sus|usu|su |ozw|and|mol|tel|lib|mbi|ami| nz|ne |ene|kel|aye|emb|yeb|nis|gi |obo|le |kum|mal|wan|a ’|pon| ep|baz|tan|sem|nya|e l| ta|gis|opo|ana|ina|tin|obe| ti|san| ak|mab|bol|oku|u y|mat|oti|bas|ote|mib|ebi|a o|da |bi | mb|lel|tey|ibe|eta|boy|umb|e p|eni|za |be |mbe|bwa|ike|se | et|ibo|eba|ale|yok|kom| en|i a|mik|ben|i o| so|gob|bu |son|sol|sik|ime|eso|abo| as|kon|eya|mel',
        som:
          ' ka|ay |ka |an |uu |oo |da |yo |aha| iy|ada|aan|iyo|a i| wa| in|sha| ah| u |a a| qo|ama| la|hay|ga |ma |aad| dh| xa|ah |qof|in | da|a d|aa |iya|a s|a w| si| oo|isa|yah|eey|xaq|ku | le|lee| ku|u l|la |taa| ma|q u|dha|y i|ta |aq |eya|sta|ast|a k|of |ha |u x|kas|wux| wu|doo|sa |ara|wax|uxu| am|xuu|inu|nuu|a x|iis|ala|a q|ro |maa|o a| qa|nay|o i| sh| aa|kal|loo| lo|le |a u| xo| xu|o x|f k| ba|ana|o d| uu|iga|a l|yad|dii|yaa|si |a m|gu |ale|u d|ash|ima|adk|do |aas| ca|o m|lag|san|dka|xor|adi|add| so|o k| is|lo | mi|aqa|na | fa|soo|baa| he|kar|mid|dad|rka|had|iin|a o|aro|ado|aar|u k|qaa| ha|ad |nta|o h|har|axa|quu| sa|n k| ay|mad|u s| ga|eed|aga|dda|hii|aal|haa|n l|daa|xuq|o q|o s|uqu|uuq|aya|i k|hel|id |n i| ee|nka| ho|ina|waa|dan|nim|elo|agu|ihi|naa|mar|ark|saa|riy|rri|qda|uqd| bu|ax |a h|o w|ya |ays|gga|ee |ank| no|n s|oon|u h|n a|ab |haq|iri|o l| gu|uur|lka|laa|u a|ida|int|lad|aam|ood|ofk|dhi|dah|orr|eli| xi|ysa|arc|rci|to |yih|ool|kii|h q|a f| ug|ayn|asa| ge|sho|n x|siy|ido|a g|gel|ami|hoo|i a|jee|n q|agg|al | di| ta|e u|o u| ji|goo|a c|sag|alk|aba|sig| mu|caa|aqo|u q|ooc|oob|bar|ii |ra |a b|ago|xir|aaq| ci|dal|oba|mo |iir|hor|fal|qan| du|dar|ari|uma|d k|ban|y d|qar|ugu| ya|xay|a j',
        hms:
          'ang|gd |ngd|ib | na|nan|ex |id | ji|ad |eb |nl |b n|d n| li|ud |jid| le|leb| ga|ot |anl|aot|d g|l l|b l| me|ob |x n|gs |ngs|mex|nd |d d| ne|jan|ul | ni|nja| nj| gu| zh|lib|l n|ong| gh|gao|b j|b g|nb |l g|end|gan| ad| je|jex|ngb|gb |han|el | sh| da|ub |d j|d l|t n| nh|nha|b m|is |d z|x g| ya|oul|l j| wu|she|il |nex| ch|b y|d s|gue|gho|uel|wud|d y| gi|d b|hob|nis|s g| zi| yo|lie|es |nx |it |aob|gia|ies| de|eib|you| ba| hu|ian|zib|d m|s j|oud|b d|chu|ol |ut | do|t j|nen|hud|at |s n|hen|iad|ab |enl| go|dao| mi|t g|zha|b z|enb|x j| ze|eit|hei|d c|nt |b s| se|al | xi|inl|hao| re| fa|d h|gua|yad|ren| ho|anb|gx |ngx|ix |nib|x z|and|b h|b w|fal| xa|d x|t l|x m|don|gou|bao|ant|s z|had|d p|yan|anx|l d|zhe|hib| pu|ox | du|hui|sen|uib|uan|lil|dan|s m| di| we|gha|xin|b x|od |zhi|pud| ju| ng|oub|xan| ge|t z|hub|t h|hol|t m|jil|hea|x l| ma|eud|jul|enx|l z|l s|b a| lo| he|nga|d r|zen| yi|did|hon|zho|gt |heb|ngt|os |d a|s l|aos| si|dei|dud|b b|geu|wei|d w|x c|x b|d k|dou|l h|lou| bi|x a|x d|b c| sa|s a| bo|eut|blo| bl|nia|lol|t w|bad|aod| qi|ax |deb| ja|eab| nd|x s|can|pao| pa|gl |ngl|che|sat|s y|l m|t s|b f|heu|s w| to|lia| ca|aox|unb|ghu|ux | cu|d f|inb|iel| pi|jib|t p|x x|zei|eul|l t|l y|min|dad',
        hnj:
          'it | zh| ni|ab |at | sh|ang|nit|os | do|uat|ox |ax |nx |ol |ob | nd|t d|x n|nf |zhi|as | ta|tab|ef |if |d n|ad | mu| cu|uax|cua|mua|b n|uf |ib |s d|dos|id |enx|nb |hit| lo|f n|t l|ngd|gd |us |inf|ux |ed | go|she|b d|b z|t n| ho|x z| yi|aob|l n|ong|t z| zi|ix |nda|d z|ut |yao|uab|enb| de|dol|f g| dr|zhe| yo| le|euf|x d|inx|nen|das| ne|dro|gb |ngb|d s| ge|hox|f z|uef|s n|len|b g| ua|ud |nd |gox| na|il | du|x j|oux|f y|f h|ndo|x c|han|of |zha|uad|s z| da| ny| ja| gu|heu| ji|ik | bu|shi|lob|od | ya|gf |t g|hai|ged|ngf|b h|you| hu|ex |bua|out|nil|hen|rou|yin|zhu|ous|nya|enf|f d|is | re|b c|lol|nad|dou|af | xa| id|t s| ha|uk |jai|xan|sha|b y|hua|aib|s s|d d| la| qi|ren|x l|hue|l m|x g|ot | xi| ba| zo| kh| dl|jua| ju|aod|zif|ait|bao| di| ga|x y| nz|b s|x s|xin| li|aof|b b|ngx|gx |eb |b l|x t|x m|hed| be|dax|b t|s t|hef|las|d j|gua| pi|t y|f b|d l|l d|nzh| ib|hif|t h|dus|t r|hou|f l|hun|und|s l|el |aik|d y|aos|f t| mo| bi|hab|ngt|gai| za|uas|x h|gt | zu|ros|aid|zos| gh|end|pin|k n|k z| ao|iao|s b|dex|x b|due|ak |d g| fu|s x|deu|s y|mol|x i|f s|hik| hl| bo|l b|eut|lb |uaf|zho|d b| lb|s m|lan|al |b k|t b| ch|d p|x x|f x|ub |t c|d m| ro| nt|d h|et |uak|aox|gon|tua|yua|t t|zis|deb|d t| we|shu',
        ilo:
          'ti |iti|an |nga|ga | ng| pa| it|en | ka| ke| ma|ana| a | ti|pan|ken|agi|ang|a n|a k|aya|gan|n a|int|lin|ali|n t|a m|dag|git|a a|i p|teg|a p| na|nte|man|awa|kal|da |ng |ega|ada|way|nag|n i| da|na |i k|sa |n k|ysa|n n|no |a i|al |add|aba| me|i a|eys|nna|dda|ngg|mey| sa|pag|ann|ya |gal| ba|mai| tu|gga|kad|i s|yan|ung|nak|tun|wen|aan|nan|aka| ad|enn| ag|asa| we|yaw|i n|wan|nno|ata| ta|l m|i t|ami|a t| si|ong|apa|kas|li |i m|ina| an|aki|ay |n d|ala|gpa|a s|g k|ara|et |n p|at |ili|eng|mak|ika|ama|dad|nai|g i|ipa|in | aw|toy|oy |ao |yon|ag |on |aen|ta |ani|ily|bab|tao|ket|lya|sin|aik| ki|bal|oma|agp|ngi|a d|y n|iwa|o k|kin|naa|uma|daa|o t|gil|bae|i i|g a|mil| am| um|aga|kab|pad|ram|ags|syo|ar |ida|yto|i b|gim|sab|ino|n w| wa| de|a b|nia|dey|n m|o n|min|nom|asi|tan|aar|eg |agt|san|pap|eyt|iam|i e|saa|sal|pam|bag|nat|ak |sap|ed |gsa|lak|t n|ari|i u| gi|o p|nay|kan|t k|sia|aw |g n|day|i l|kit|uka|lan|i d|aib|pak|imo|y a|ias|mon|ma | li|den|i g|to |dum|sta|apu|o i|ubo|ged|lub|agb|pul|bia|i w|ita|asy|mid|umi|abi|akd|kar|kap|kai| ar|gin|kni| id|ban|bas|ad |bon|agk|nib|o m|ibi|ing|ran|kda|din|abs|iba|akn|nnu|t i|isu|o a|aip|as |inn|sar| la|maa|nto|amm|idi|g t|ulo|lal|bsa|waw|kip|w k|ura|d n|y i',
        uig:
          'ish| he|ini|ing|nin|gha|ng |ili| we|we |sh |in | bo|quq|oqu|ni |hoq| ho|ush|shi|lik|qil|bol|shq|en |lis|qa |hqa|n b|hem| qi|ki |dem|iy | ad|ade|igh|e a|em |han|liq|et |ge |uq |nda|din| te| bi|idi|let|qan|nli|ige|ash|tin|ha |kin|iki|her|de | er| ba|and|iti|olu|an | dö|döl|aq |luq| ya|me |lus|öle|mme|emm| qa|daq|rki|lgh|erq|erk|shk|esh|rqa|iq |uqi|ile|rim|i w|er |ik |yak|aki|ara|a h| be|men| ar|du |shu|uql|hri|hi |qlu|q h|inl|lar|da |i b|ime| as|ler|etl|nis| öz|ehr|lin|e q|ar |ila| mu|len| me|qi |asi|beh|a b|ayd|q a|bir|bil| sh|che|rli|ke |bar|hke|yet|éli|shl|tni|u h|ek |may|e b| ké|h h| ig|ydu|isi|ali|hli|k h| qo|iri|emd|ari|e h|ida|e t|tle|rni| al|siy|lid|olm|iye|anl| tu|iqi|lma|ip |mde|e e|tur|a i|uru|i k|raw|hu |mus|kil| is|i a|ir |éti|r b|özi|ris|asa|i h|sas| je|he | ch|qig|bas|n q|alg|ett|les| xi|tid| él|tes|ti |awa|ima|nun|a a| xe| bu|hil|n h| xa|adi|dig|anu|uni|mni| sa|arl|rek|ére| hö|kér| ji|min|i q|tis|rqi| iy|elq|xel|p q| qe|y i|i s|lig| ma|iya|i y|siz|ani| ki|qti| de|q w|emn|met|jin|niy|i i|tim|irl| ti|rin|éri|i d|ati|si |tew|i t|tli|eli|e m|rus|oli|ami|gen|ide|ina|chi|dil|nay|ken|ern|n w| to|ayi| ij|elg|she|tti|arq|hek|e i|n a|zin|r a|ijt|g b|atn|qar|his|uch|lim|hki|dik',
        hat:
          'ou |an | li|on |wa |yon| po|li |pou|te | yo|oun| mo|un |mou|ak | na|en |n p|nan|tou|syo| dw| to|yo | fè|dwa| ak| ki|ki | pa| sa|out| la| ko| ge|ut |n s|gen| de|se |asy|èt |i p|n d| a | so|n l|a a|fè |n k| se|pa |e d|u l| re|ite|sa | ch|kon|n n|e l|t p|ni |cha|a p|nn |ans|pi |t m| ka| an|nm |fèt|i s|son|man| me|n m|n a|e p|swa|sou|e k|hak|òt |n y|men|i l|epi| pe|ote|san| ep|i k| si|yen|eyi|a l| ap|i a|yi |pey|je |n t|e a|k m|e s| ni|lib|e n|i t|lit|ran|lè |enn|al |a s| pr|a f|ns | lò|ap |lòt|enm|k l|n e|t l|kla|anm|e y|a k| ma|e t|ay |i m|ali| lè|è a|ye |a y|ant| os| ba|i g| tè|aso|u t|a n| pw|ras| pè|n f|nas|ka |n g|osw| ta|dek|i d|pwo|e m| di| vi|la |i n|u s|sos|bli| te|o t| tr|lwa|ète|a t|le |u y|i f|tan|a c|lar|a m|ete|ara|t k| pi|ibè|bèt|re |osy|de |ati|ke |res|tis|i y|tè |nen| fa|ekl|ze |nal|ons|ksy|ini|che| le|e r|a d| en|aye|he |o p|alw| kò|lal| no|esp|a g|ava|kou|las|way|u f|isy| za| ok|oke|kal|ken|sye|ta |onn|k k|nje|pra|van|esi|pès|kot|ret|sya|n v|lek|jan|ik |a b|eks|wot|è n|di |òl |tra|u k|i r|nou| as|k a|u d|ist|èso|ib | ne|iti|ti |is |y a|des|è l|a r|ont| ke|nsa|pat|rit|sit|pòt|ona|ab |è s| sw|ond|ide| ja|rav|t a|ri |bon|viv| sè|pre|vay|k p|l l|kòm|i o| ra|era|fan|dev',
        aka:
          'sɛ |a a| sɛ|ne |ra |a n| wɔ| a |ara|an |eɛ |no | ne| bi| no| as|iar|bia|yɛ |mu |aa | an|ɛ s|e a|ma | ho|bi |man|deɛ| mu|ho |ɛ a|na |a ɛ| ob|obi|e n|a b|n a|so |o n|pa |ama|ɛ o|o a|ipa|nip|ɛ n|naa| na|a w|ana| so| ad| nn|ɛ ɔ|ɛde|asɛ|kwa| on|oni|wan| am|a ɔ|sɛd|wɔ | ah|ɛyɛ| ny|oɔ | n |mma|i a| mm|nni| kw|ie |wɔn|ɛ w|de | ɛy| ba|ase|ɔ n|o b|i m|ɔ a|uo |n n|a m|o s|iri| yi|ni |e s|nyi|di |u n|a o|aho| de|tum| ɛn|ɔn |nya|i n|ɔma|e m|adw| yɛ|umi|die|mi |ɛ ɛ|o k| ab|ɛm |a s| ma|nam| ɔm| ɛs|yin| at| bɔ|o d|ina|pɛ |sɛm|ua |n s|bɔ |adi|ya |e h|aso|mar|ani|kuo|rɛ |fa |a k|ɔde|a h|ba |n b|re |uma|wum|om |ɔ h|m n|yi |u a| sa|se |dwu|ɔ b| nt|m a|erɛ| kɔ|a y|orɔ| nk| bɛ| ɔd|ten|rɔ |hyɛ|saa|ka |ɛ b|e b|i s|ade|am |nka|kor|i ɛ|ene|ena| ns|ban|ɛns| ku|ɛsɛ|ane|nsɛ|fof|ɛɛ | fi|gye|ɔtu| di|ano|i k|o m| ɔt| ko|yɛɛ|bir| ak|im |kye| pɛ|a d|yie|ko |nti|i b|ete|ofo|amm|ye |ri |foɔ|kɔ |bom|abo|ɔ s|ɔne| ɛb|soɔ|for|isɛ|m k|asa|nod|ɛ m|fir|ti | da|e y|sua| be|nii|seɛ|wa |ber| aw|dwe|n f| fo|o ɛ|i h|u b|ɔ m| mf|hɔ |kab|wɛ |to |rib|hwɛ|ibi| dw|dis|nso|ans|tir|u ɛ| ti| hɔ|sa |e o| tu|odi|ɛ y|ia |ofa| ɔn|o w|ɛbɛ|aba| ka|ii |wen|ɛsi|m m|sia|ada|yer|ian|da |set| gy|dua|i d|som|mfa|ɔ w| af|i y|any|ora|rim|wɔd|dwa|nsi',
        hil:
          'nga|ang| ka|ga |ng | sa|an |sa | ng| pa| ma|ag |on |san|pag| an|ung|kag|a p|n s|a k|n n|a m|ata|kat| ta|gan|g p|ay |tar|g k|ags|run|ala|aru|gsa|tag|a s|g m| mg|mga|n k|a t|od |kon|g s|a n|ing|a i|man|g t|agp|tan| si|n a|y k|mag|gpa|may|hil|pan|ya |ahi|la |g a|sin|gin|ina|aya|ana|ili| pu|han|g i|yon|nan| in|way|uko|gka| gi|aha| uk|ilw|lwa|asa|apa|kas|syo|at |ban|lin|iya|kah|n p| na|o n|lan|a a|in |ngk|g n|ini|aba|pat|pun|a g|ali|o s| iy|yan|agt|tao|ngs|gba|kab|wal|ngo|al |nag|agk|o m|ni |i s|aga|ano| wa|isa|abu|kal|a h|dap|ong|a d|mat| tu|gso|no |aho|aki|sod|agb| da|asy|ila|d k|pas| hi|agh|d s|n m|na |lal|yo |di |til| la|o k|s n|non|gay|sal|a b|god|ao |ati|aan|uha| is|ka |aka|asu|ngb|o a|ama|ato|atu|uga|paa|but|una|n u|bah|uan|iba| di| ba|pah|bat| du|ulo|os |y s|nah| ko|aag|agi|sil|gi |i m|hay|yag|gon|y n|sta|n d|ot |oha|tun|ida| pr| su|a l|uta|m s| al|do |uli|sug|n t|as |lon|sul|og |pam|pro|him|gua|alo|lig| bi|bis|asi|ula|ton|ksy|gtu|a e|k s| ib|n b|maa|ugu|ko |lib|ron|i a|hi |hin|tek|lab|abi|ika|mak|bot|aoh|ok | hu|ghi|ind|ote|tok|i n|t n|g e|eks|dal|uma|ubo|tum|hat|to |ado|kin| ed|rot|ho |ndi|inu|ibu|y a|nta|ad |gko|lah|duk|abo|iko|nda|aro|gal|mo |g o| bu|int| o |n o|aay|da |gsu',
        sna:
          'wa |a k|ana|ro |na | ku| mu|nhu|dze|hu |a m| zv|mun|oku|chi|a n|aka|dzi|ka |zer|ero| ch|che|se |unh|odz|rwa|ra |kod|zvi| ne| pa|kan| we| dz| no|ika|va |iri| an|kut|nyi|o y|yik|van|nek|ese|eko|zva|idz|e a| ka|ane|ano|ngu|eku|cha|ung| yo|ri |ake|ke |ach|udz|iro|a z|u w| va|ira|wes|ang|ech|nge|i p|eng|yok|nok|edz|o i|irw|ani|ino|uva|ich|nga|ti |zir|anh|rir|ko |dza|o n|wan|wo |tan|sun|ipi|dzw|eny|asi|hen|zve|kur|vak|a p|sha|unu|zwa|ita|kwa|e k|rud|nun|uru|guk|a c|a d| ya|a y|bat|pas|ezv|ta |e n|uti| kw|o k|o c|o m|ara| ma|si |ga |uko|ata|ose|ema|dzo|uch|hip|kuv|no |rus|hec|omu|i z|wak|o r|kus|kwe|ere|re | rw| po|o a|mwe|yak|mo |usu|isi|za |sa |e z|uta|gar| in|hin|nem|pac|kuc|we |ete| ye|twa|pos|o d|a i|hur|get|ari|ong|pan|erw|uka|rwo|vo | ak|tem|zo |emu|emo|oru| ha|uit|wen|uye|kui| uy|vin|hak|kub|i m|a a|kud| se| ko|yo |and|da |nor|sin|uba|a s|a u| ic|zvo|mut|mat|nez|e m|a w|adz|ura|eva|ava|pi |a r|era|ute|oko|vis| iy|ha |u a|han|cho|aru|asa|fan|aan|pir|ina|guv|ush|ton| hu|uny|enz|ran|yor|ted|ait|hek| ny|uri|hok|nen|osh| ac|ngi|muk|ngo|o z|azv|kun|nid|uma|i h|vem|a h|mir|usa|o p|i n|a v|i k|amb|zan|nza|kuz|zi |kak|ing|u v|ngw|mum|mba|nir|sar|ewo|e p|uwa|vic|i i|gwa|aga|ama|go |yew|pam',
        xho:
          'lo |lun|oku|nge|elo|ntu|tu |e n|ele| ku|nye|ye |nga|ung|la | ng|lek|a n|o n|yo |o l|e u|nel|gel|a k|ko |ho |ulu|ke | ne| na|lul|we |le |wa |ngo| kw|ule|kub| no|a u|onk| um|nke|o e| lo|ela|kun|ama|any|unt|ang|eko|uba|elu|ezi|mnt| wo|a i|eyo|alu|lel|umn|lwa|kwe|olu|ba | uk|kuk|won|ukh|une|uku|gok|nok|enz| un|khu| ok|the|e k|zwe|kan|eki|aph|ane|uny|ile|o z|aku|ley|lok| ez|het|eth|ath|oka|pha|sel|ala|o y|kul|akh|kil|enk| in|esi|o k| yo|use|hul|u u|tho|obu|wen|ana|nku|khe|o o|e a|na |kho|ban|a e|ise|ent|gan|uth|ni |kel| zo|he |izw|o w|hi |elw|nam|ing|eli|fun|za |lwe|eng|ya |kwa|fan|isa|o a|ndl|ntl|ayo|eni|gen|hus|uhl|iph|tha|nzi|isw|sa |phi|aba|ben|und|ume|thi|ha |alo|ka |ink|hla|lal|wan|i k| lw|i n|bel| ba|o u|azi|e o|swa|ngu|bal|pho| ab|man|kut|emf|e i|mfa|a a|e e|een|int|uph|eka|ebe|seb|lan|nee|zi |o i|mal|sha|sek|dle|ziz|mth|nen|zel| se|okw|tya|ike|lin|tla|ene|sis|ima|ase|yal|ubu| ak|ant|sen|olo|wak| ko|a o|mfu|ezo|sid|nay|oko| ub|ulo|zo |do |isi|wez|iso|han|nte| ph|zim| ya|ga |li | le|iba|ham|ube|kup|aza|jik| ul| en|eem|phu| ol|and|imf| es|o s| im|kuf|u k|kwi|nak|ma |nan|ety|kuh|kus|yol| am|hel|idi| so|lis| nj|nje|jen|tsh|aka|zin|kuz|‐ji|no |ufu|ale|ong| el|bo |a y|e l|men|yen|lum',
        min:
          'an |ak |ang| ma| da| ka| sa|ara| ha|yo |nyo|hak| ba|ran|dan|man|nan|ng | pa| di|kan|ura| na|ata|asa|ok |nda|ala| pu|pun|uak|ntu|n d|k m| ti|ah |o h|n s|k u|n k| ur| un|tua|n b|and|unt| ta|uny|n p|tio|iok|ama|pan|ek |ban|jo |n m|k h|k d|ado|nga|aan|g p|tan|aka|ind|at |dak|dap|o p|tau|pek|uan| at|amo|mar|ape|au |kat|mo |sas|ari|asi|di |o s|ia |ngg|bas|ika|sam|am |lia|o d|san|gan|sia|tar|n n| jo| su|anu|lam|gar|o t| in|par|sua|dek|sar|k s|ri |o m|ana|bat|asu|ko |ai | la|ant|dal|lak|aga|alu|iah|o u|n a|tu |k a|adi|rad|i m|mal|dok|usi|aku|i d|k k|al |aro|eka|neg|ega|ato|to | ne|mam|o b|eba|ian|beb|n u|um |si |aba|rat|uah|ro |mas|ila|a d|ali|uka|ard|kam|ti |atu|nus|dar|ami|n t|sa |in |amp|kal|car|lan|aha|kab|so |rde|un |i k|gsa|das|ngs|aca|yar|ka |ati|ar | an|uku|ras| ko|sya|mat|k n|aya|nta|lo |any|sur|kaa|dil|kar|o a|u d|k t|pam|dia|ra |iba|lai|i t|lah| bu|mpa|kum|abe|n h|ili|nny| as|u p|aki|amb|sac|as |k b|h d|uli|ajo|a n|raj|n i|dua|ndu|k p|i p|itu|lin|han|huk|o k|rik|a b| li|ik |ggu|jam|bai|a a|i a|nia| ad|i j| hu|gam|sal|aso|ngk|sad|apa|ann| mu|ony|dik|bad|ain|did|min|l d|ada|bul|rga|tin|ga |ani|alo| de|arg|ahn|sio|hny|n l|sti|awa|uju|per|bak| pe|tik|ans| pi|a s| um|bag|ndi|anj|mba',
        afr:
          'ie |die|en | di| en|an |ing|ng |van| va|te |e v|reg| re|n d| ge|ens|et |e r|e e| te| be|le |ver|een| in|ke | ve| he|eg |het|lke|lik|n h|de |nie|aan|t d|id |men| vr|nde|eid|e o| aa|in |of |der|hei|om |g v| op| ni|e b| el|al |and|elk|er | me|ord|e w|g t| to| of|ers| we| sa| vo|ot |erk|n v|vry|ge |kee|asi|tot| wa|sie|ere| om|aar|sal|dig|wor|egt|gte|rdi|rd |at |nd |e s|ede|ige| de| ’n|n a|eni| wo|e g| on|n s|’n |e t|erd|ns |oor|bes|ond|se |ska|aak|nig|lle|yhe|ryh|is |eli|esk|ien|sta|vol|ele|e m| vi|ik |r d|vir|edi|kap|g e|ir |es |sy |ang|din| st|ewe|gem|gel|g o| is|el |e i|op |ker|ak |uit|ike|nse|hie|ur |eur| al|e a|nas|e n|nge|ier|n o|wer|e d|ap | hu|ale|rin| hi|eme|deu|min|wat|n e|s o| as| so|as |e h|del|d v|ter|ten|gin|end|kin|it | da| sy|per|re |n w|ges|wet|ger|e k|oed|s v|nte|s e|ona|nal|waa|d t|ees|soo| ma|d s|ies|tel|ema|d e|red|ite| na|ske|ely|lyk|ren|nsk|d o|oon|t e|eke|esi|ese|eri|hul| gr|ig |sio|man|rde|ion|n b|n g|voo|hed|ind|tee| pe|rso|t v|s d|all|n t|rse|n i|eem|d w|ort|ndi|daa|maa|t g|erm|ont|ent|ans|ame|yke|ari|n m|lan|voe|n ’|nli|rkl|r m|sia|ods|ard|iem|g s|wee|r e|l g|taa|sek|bar|gti|n n|lin|sen|t o|t a|raa|ene|opv|pvo|ete| ty|arb| sl|igh|dee|g a|str|nsl|sel|ern|ste',
        lua:
          'ne |wa | ne|a m| ku|a k| mu|di | bu|a b| di|e b|tu |nga|bwa|ntu| bw|udi|a d|e m|i b| ba| ma|shi|adi|u b|a n|la |ons|mun|i n|ung|nsu|ga |yi |ya |na |unt| dy|idi|e k|buk|mu |ika|esh|su |u m|ku |nde|any| bi|lu |nyi|end|yon|dik|ba | ci| ka|ang|u n|u y| mw|ka |i m| yo|we |oke|tun|de |kes|hi |kok|mwa| kw|e n|ban|dya|sha|u d|ken|kwa|ji |ha |wen|dit| ud|a a| an|mwe|itu| pa|le | a | wa|nji|kan|kum|ibw|bwe|a c|ant|ena|yen|mba|did|e d|ala|u u|ish|mak|bul|i a|nda|enj|u a|ila|pa |ako|ans|uke|ana|nso|amb|hin|umw|kal|uko|i k|bad|aka|ela|ele|u w|u k|du |ja |bu | mi|ind|ndu|kwi| ns|mbu|atu|bud|dil|ile|sun|eng|ula|enz|nan|nsh|kad|alu| cy|bis|kud|lon|u c|gan|dib|da |dye|bid| by|ukw|i d|aa |ngu|a p|sam|isa| aa|ilu| na|aba|lel|ye |dim|cya|kub|so |ond|kus|mat|nge|e c| bo|aku|bak|mus|ta |umb|ulo|elu|man|iki|mon|ngi|abu|mud|kuk|omb| mo|und|diy|kwe|umu|mal| ke|ush|gil|uba|imu|dis|wil|wu |san|gad|uka|bon|ma |aci|mik|wik| me|pan|iku|nza|ben|ulu|ifu|iba|kak|ata|som|ong|e a|apa| tu|o b|umo|bya|utu|uja|yan| be|ke |akw|ale|ilo|uku|cil|tup|kul|cik|kup|upe|bel|amw|ona| um|iko|awu|and|za |ike|a u|ima|muk| ya|mum|me |map|ita|iye|ole|lum|wab|ane| lu|nu |kis|mbe|kab|ine|bum|lam|pet| ad|fun|ama| mb|isu|upa|ame|u p|ubi',
        fin:
          'en |ise|ja |ist| ja|on |ta |sta|an |n j|ais|sen|n o|keu|ike|oik|lis| va|ell|lla|n t|uks| on|ksi| oi|n k| ka|aan|een|la |lli|kai|a j| ta|sa |in |mis| jo|a o|ään|än |sel|n s|kse|a t|a k|tai|us |tta|ans|ssa|kun|den|tä |eus|nen|kan|nsa|apa|all|est| se|eis|ill|ien|see|taa| yh|jok|n y|vap|a v|ttä|oka|n v|ai |itt|aa |aik|ett|tuk|ti |ust| ku|isi|stä|ses| tä| tu|lai|n p|sti|ast|n e|n m|tää|sia|unn|ä j|ude|ä o|ste|si |tei|ine|per|a s|ia |kä |äne| mi|maa| pe|a p|ess|a m|ain|ämä|tam|yht| ju|jul|yks|hän|ä t| hä|utt|ide|et |llä|val|sek|stu|n a|lä |ami|hmi| ke|ikk|lle|iin|sä |euk|täm|ihm|tee| ih|lta|pau| sa|isk|mää|ois|un |tav|ten|dis|hte|n h|iss|ssä|a h|ava| ma|a y| ei| te| si| ol|ekä|sty|alt|toi|att|oll|tet| jä| ra|vat| mu|iel| to|mai|sal|isu|a a|kki|at |suu|n l|väl|ää |uli|tun|tie|eru| yk|etu|vaa|rus|muk| he|ei |a e|kie|sku|eid|iit| su|nna|sil|oma|min| yl|lin|aut|uut|sko| ko|tti|le |sie|kaa|a r| ri|sii|nno|eli|tur|saa|aat|lei|oli|na | la|oon|urv|lma|rva|ite|mie|vas|ä m| ed|tus|iaa|itä|ä v|uol|yle| al|lit|suo|ama|joi|unt|ute|i o|tyk|n r|ali|lii|nee|paa|avi|omi|oit|jen|kää|voi|yhd|ä k| ki|eet|eks| sy|ity|ilö|ilm|oim|ole|sit|ita|uom|vai|usk|ala|hen|ope| pu|auk|pet|oja|i s|rii|uud|hdi|äli|va | om',
        slk:
          ' pr| a |prá|ráv| po|ie |ch |ost| ro|ho | na|vo |ani|na | ne|nos|ažd|kto|kaž| ka|má |né |ávo|om | má|ebo|ti | v | al|ale|leb|bo | je| za|ých|o n|ždý|dý |ia | sl|mi |ova|sti|nie|van|to |eni|ne |áva|lob|ého|slo|rod|tor|rov| sp| zá|á p|o v|a p| kt|ý m| sv|voj|bod|obo|nia| ná| vy|ej |je |ať |o p|a v|a s|áro|a z| sa| ma|a n|e a|e s|mu |mie|kla|nár|svo|spo| by|ovn|by |roz|sa |ľud|iť |odn| vš|ov |i a|néh|vše|o s|va |o a| ľu|oci|pre|nu |a m|u a|ený|e v|ný |nes|a k|zák|pod|ným| do|u p| k |u s|áci|ajú|byť|yť |nýc|eho|ran|pol|tát|stn|jeh|a r|šet|ými|lad|čin|ému|a o|edz|ť s|kon|stv|oré| sú| ni|e z|pri|och|ny |štá|sť |oje|vna|tre|u k| či|ko |é p|maj|smi|a a|etk|nak|ým |med|dov|prí| ob|iu |uds|osť|esm|e b|m a|hra|i s|rác|bez|vať|chr|e p| ab|jú | št|žen| ho|čen| de|i p|ť v| vo|dsk|pro|nom| in|ou |du |že |aby|est| bo|ré |bol| so|nú |olo|kej|áln| oc|obe|ky |dzi|dom|áv |por|lne|rav|aké|ens|pra|ok | že|tné| ta|ako|res| vz|i k|ami| tr| ak|ní |len|o d|del|ský|cho|ach|ivo|h p|ože|iál|inn|slu|kra|loč|očn|ju | os|anu|oju|voľ|ákl|str|é s|ené| ži|niu|sta| st|ved|tvo| me|dno|m p|de |ké |kým|ikt|stu|é v|i v|vyh| to|v a|odu|hoc|a t|ím |ly |hov|y s|soc|júc|ú p|odi|vod|liv|aní|ciá| ve|rej|ku |ci |ske|sob|čno|oso',
        tuk:
          'lar| we|we | bi|yň |ary|ada|da | he| ha|an |yny|kla|dam|de | ad|yna|er |na | ýa|ir |dyr|iň |bir|r b|ydy|ler|ara|am |yr |ini|lan|r a|kly|lyd| öz|mag|nyň|öz |her|gyn|aga|en |ryn|akl|ala|dan|hak|eri|ne |uku|ar |r h|ga |ny |huk| de|ili|ygy|li |kuk|a h|nda|asy|len| ed|bil|atl|ine|edi|niň|lyg| hu| ga|e h|nde|dil|ryň|aza|zat|a g|‐da|a‐d|eti|ukl| gö|ly | bo|tly|gin| az|lma|ama|hem|dir|ykl|‐de|e d|ile|ýan|a d|ýet|ýa‐|ynd|lyk|aýy|e a|ünd|ge | go|egi|ilm|sy |ni |etm|em‐|lme|m‐d|aly|any| be|tle|syn|rin|y b|let|mak|a w|a ý|den|äge|ra | äh|mäg| du|n e|bol|meg|ele|ň h| et|igi|ň w|im |iýa| ýe| di|r e|ek | ba|ak |esi|ril|a b|in |p b|deň|etl|agy| bu| je|bu |e ö|y d| hi|mez| es|ard| sa|ähl|e b|yly| ka|esa|mek| gu|n a|e t|lik| do|e g|sas|ill|nma|ň a|ram|ola|hal|y w|ýar| ar|anm|mel|iri|siý|ndi|ede|gal|end|mil|rla|göz| ma|n b|e ý|öňü|ňün|n h| tu|hiç|yýe| ge|my |iç | öň|n ý|tla|ň ý|lin|rda|al |lig|gar| mi|i g|dal|rle|mal|kan|gat|tme|sin|and|ň g|gor| ta|öwl|ýle|y g|e w|ora|tiň|ekl| yn|alk|döw| dö|ere|m h| me|dur| er|asi|tut|at |çin|irl|umy|eli|erk|nme|wle|gur|a ö|aýa| çä|nun| ki|ras|aml|up |ýaş|tyn| aý|ry |ň d|baş|ip |gi |z h|kin|z ö|n w|ter|inm|eýl|i ý|kim|nam|eň |beý|dol| se| te|r d|utu|gyý|ez |umu|mum',
        dan:
          'er |og | og|der| de|for|en |et |til| fo| ti|ing|de |nde|ret| re|hed|il |lig| ha|lle|den| en|ed |ver|els|und|ar | fr| me|se |lse|and|har|gen|ede|ge |ell|ng |at | af|nne|le |nge|e f|ghe|e o|igh|es |af |enn| at|ler| i |ske|hve|e e|r h|ne |enh|t t|ige|esk| el| be|ig |tig|fri|or |ska|nin|e s|ion| er|nhv|re |men|r o|e a| st|ati| sk| in|l a|tio| på|ett|ens|al |tti|med|r f|om |end|r e|del|g f|ke | so|på |eli|g o| an|r r|ns | al|nat|han| ve|r s|r a| un| he|t f|lin| si|r d|ter|ere|nes|det|e r| ud|ale|sam|ihe|lan|tte|rin|rih|ent|ndl|e m|isk|erk|ans|t s|kal| na|som|hol|lde|ind|e n|ren|n s|ner|kel|old|dig|te |ors|e i| hv|sni|sky|ene|vær| li| sa|s f|d d|ers|ste|nte|mme|ove|e h|nal|ona|ger| gr|age|g a|vil|all|e d|fre|tel|s o|g h|t o|t d|r i|e t| om|arb|d e|ern|r u| væ|d o|res|g t|klæ|øre|n f| vi| må|ven|sk | la|gte|kab|str|n m|rel|e b|run|rbe|bej|t i|ejd|kke|t e|g d|rkl|ilk|gru|ved|bes| da|nd | fu|lær|æri|rdi|ærd|ld |t m|dli|fun|sig| mo|sta|nst|rt |od | ar| op|vis|igt|ære|tet|t a|emm|g e|mod|rho|ie |g u|ker|rem| no|n h| fa|rsk|orm|e u|s s|em |d h| ge|ets|e g|g s|per| et|lem| tr|i s|da |dre|n a|des|dt |kyt|rde|ytt|eri|hen|erv|l e|rvi|ffe|off|isn|r t| of|ken|l h|rke|g i|tal|må |r k|lke|gt |t v|t b',
        nob:
          'er | og|og |en | de|for|til|ing|ett| ti|et | ha| fo| re|ret|il |het|lle|ver|tt |ar |nne| en|om |ell|ng |har| me|enn|ter|de |lig| fr| so|r h|ler|av |le |den|and| i | er|som| å |hve|or |t t|ne | el|els|re | av|se |esk|enh|nge|ska|nde|e o|ete|gen|ke |lse|ghe|ten|men| st|r s|fri|igh|ig | be|e e|nhv|r r|tte|ske|te | på| ut| sk|al | in|sjo|på |der|e s|ner|rin|jon|t o|unn|e f|han|asj|tig|ed |es |g f|sam|ent|tti|ene|nes|med|ge | al|r o|ens|r e|eli|isk|lin| ve|nin|g o| sa| an|t f|itt|lik|end|kal|r f|t s|rih|ihe|nas|nte|e r|ns | si|lan|g s|mme|ige|l å|erk|dig| gr|n s|ren|r a|all| na|kte|erd|ere|e m|und|r u|res|tel|ste|gru|inn|lær|ers| un|det|t e|arb|ale|del|ekt|ven|t i|g e|bei|eid|e a|n m|e d| ar|rbe|e g| bl|ans|klæ| li| he|g t|æri|sky|run|rkl| la|sta|sni|kke|m e|rt |mot| mo|e n|tat|at |e h|e b|ove|e t|jen|t d|str| må|r m|n e|ors|rel|ker| et|n a|bes|one| vi|nn |g r|e i|kap|sk |ot |ndi|nnl|i s| da|s o| no|id |ger|g h|vis|n o|bar|s f|ndl|t m|g a|opp|t a|dis|nal|r d|per|dre|ona|ære|rdi|da |ute|nse|bli|ore|tet|rit| op|kra|eri|hol|old| kr|ytt|kyt|ffe|emm|g d|l f| om|isn| gj|å d|ser|r b| di| fa|n t|r k|lt |set| sl|dom|rvi|me |l e|gre|å s|må | tr|nd |m s|g i|ikk|n h| at|tes|vil|dli|g b|d d| hv|rav',
        suk:
          'na | mu| bu| na|a b|ya |hu |a n|we | gu|nhu|a g| ba|a m|ili|wa | ya|li |unh| bo|mun|ali|bul|han|bo |i m|ilw|uli|ang|lil|la |i b|e n|ga | wi|kil|mu | al| se|u a|ge |kge|ekg|sek|lwe|ose|le |lo |bi |ulu|e y|kwe|ila|and|e b|i n|yo |ng’|a s|nga| ns|si |abi|nsi|ina|lin|aki|se |ban| ly| gw|dak|lu |ngi|gil|a w|o g|akw|u b|ile|anh|ka |ilo|a l|ubi|e g| nu|o n|ja |gan| ng| ma|lya|nul|g’w|ani|ndi|u m|iya|wiy| ji|jo | ka|yab|lwa|ada|o b|e k| ad|gwi|ho |gub| ku|ing|o a|o l|ula|ika|a i|u n|dik|iha|shi|ayo|gun| ja|ha |biz|o j|lag|ma |wen| sh|ele|ung|o s|gi |gul|mo |lan|iwa|a k|ala|iki|jil|ola|ji |a a|yak| li|nil|iza|agi|aha|man|bos|iga|kuj| ha|ana| lu| gi|iti| mh|uga|uyo|win| ga|za |a y|ki | nd|oma|ene|o w|a u|mah|yos|sol|hay| mi|iko|ong|aga|iku|gwa|i a|ndu|pan|u g|e i| ab|ujo|ida|nya|ibi|duh|but|i y|u w|iji|nhy| we|nik|aya|uhu|nda| il|je |abo|aji|lel|ubu|nay|ba |lug|lon|ale|mil|da |a j|dul|o m|mha|aka|e u|g’h|udu|lyo|e m|e a|gik|bus|bal|sha|wit|twa|ngh|nek|wig| um|okw|any|uma|ima|uso|bud|’we| ij|hil|bil|a h|imo|ita|no | ih|gut|nha|ne |iso|ulo|uno|yom|’ha|u l|elo|eki|wel|hya|ngu|omb|som|mbi|i g|o i|u i|bak| is|ugu| yi|utu|eni|tum|umo|u s|tog|inh|’wi|lit|waj|e j|ule|jiw|u u|kub|kul|lik|uto| uy|upa',
        als:
          'të | të|dhe|he | dh|në |ë d|e t| e |et |ë t|imi|për|ejt|dre|rej| pë| dr| në|it |gji|sht|ve |jit|ë p| gj|ith| sh| i | li|het|e p| nj|t t|ër |ë n|in | ve|me |jtë|e n| ka|ara|e d|ush|n e|tet| pa|jer|hku|a t|re |ën |ë s|sh | ku|së |t d|ë m|kus|mit|lir|ka |ë k|jë |se | si| që| ba|etë|që |ë b|si |ë g|eri|thk|nje|eve|e k|e s|jet|ose|bas|ohe| os|ra | mb|iri|h k|min|shk|ash|rim|ndë| nd|një|jta|e m| me|eti|do | du|es |rë |e l|mi |anë|tar|t n| as|dër|hte|end|tën|vet|uar|und|ësi|kom|tje|duh|ndi|at |ave| ko|ri |ta |ë v|shm| de|ar |omb|i d| kë|i p|jes| ng|uhe|nga|i n|en |ë e|ga | ar|e a|ës |hme|bar| pe|htë|ë l|ur |ë i|isë|ime|sim|ris|tës|art|ëm |cil|tim|tyr|ësh| ma|shë|or |t a|kët|gje| ci|r n|e v|par|nuk|ëta|rgj|i i|ish|uk | nu|ë r|are| je|ë c| pu|atë|lim|lli| ës|ë a|i t|mar|ore| së|tit|lar|per|t p|rat|ite|inë|t s|riu|ke |ërg|a n|edh| pr|esi|irë|ërk| po|hë |ë j|i s|a e|ht |mba|roh|im |ari|e b|lit|ti |asn|tav|snj|t e|ik |tij|k d|qër|hëm|ras|res|otë|nal|mun| an|kla|ven|e q|tat|t i| fa|ij | tj|igj|te |ali|bro| di|roj| ti|uri|ojë|ë q|çdo|det|n p| pl|ekl|ind|erë|vep|dek|nim|ive|ror|sho|hoq|oqë|ëri|pri|r d|shp|esë|le |a d|shi| mu|dis|r t|ete| t |ë f|ëzo|zim| çd|mbr| re|e f|jen|i m|iut|n k|tha|s s|lot',
        sag:
          'tî | tî|na | na| ng|a n|ngb|gö |ngö|nga|nî | lo|lo |zo |bi |la |gbi|ang| sô|sô |î l|gan|ö t| zo|o n| wa|a t|îng|i t|ngü|gü | al|lîn| nd|a l|ê t| kû|äng|î n| te|wal|ala|alî|î k|ë t|î m|â t|î â|ô a|î b| mb|ûê |gâ |örö|ngâ|kûê| lê|o k|a â|e n|ko |î s| kö|ter|dör|köd|ödö|ï n|a k|lêg|gë |ôko|ëpë|mû |pëp| pë|o a|êgë|eke|yek|ke |ü t|î t| ay|o t|bên|ê n|rê |pëe|ra |ëe |erê|rö |tï |kua|aye| nî| ôk|ua |a z|ä t| âl|â n|ïng|î d|ö n|âng|ênî| am|î z|ten|âla| yâ|ê a|mbê|a m|û n|a y|ne |ene|rä |î g|a s|bê | ku|arä|ndi|ga |diä|ëng|iä | du| ân|amû|dut|öng|yâ |utï|ro |önî|lï |a p| gï|oro|lë |î a| âm|ndo| sê|ngô|do |i n|o s|ndö|âra|e t| bê|gba|ûng| mä|sâr| sï|î p| gb|ö k|e a|yê |a a| âk|dö |ara|ba |ï t| tö|a w|zar|tön|î w|war|ndâ|a g|ana|në |ênd| të|ta |ban| lë|zön|î f|nzö| sâ|sï |tën|o w| nz|sên| âz| da| za|îrî| në|nën|ate|ä s|bâ | at|o l|ënë|o ô|fa | kp| ma|o p| mû|kân|a b|bat|ata|ô n|se | kâ|alë| ko|ông|da |ë s|üng|ë n|ibê|rös|mbë|bët|ëtï|âmb|mbâ|ïgî|mba|gî |tän| po|bûn|gï |amb|ü n|gbï|ôi |gôi| af|rë |erë|lê | as|afa|âzo|i p|sor| ad|i s| ba|gïg|ä n|bät|dë |ö â|kûe|ûe |kpä|päl|älë|e z|ätä|ö w|ngi| yê|köt|ötä|tä |ê s|kod| hï|hal|hïn|lëz|ëzo|ngä|gän|odë|ö m|mar|sär|pä |ärä|îan|rän|bîa|a h|gi |bor|du ',
        nno:
          ' og|og | de| ha|er |en |ar |til| ti|lle|ett|il |ret|om |et | re|le |har|enn| me| al|all| fr|ne |tt |re | å | i |nne|and|ing|ska| sk|men| fo|det|den|ver|for|ell|t t|dom| so|de |e s| ve| ei|ere| på|al |an |e o|e h|fri|sam| sa|l å|på |leg| el|ler|som|ein|ei |nde|av | st|dei|or |ten|esk|kal|gje|n s|tte|je |ske|rid|r r|i s|te |nes| gj|eg |ido|med|e f|r s|st |ke |jon| in|r f|sjo|asj|nas|ter|unn|ed |kje|han|ona| er|t o|t e|g f|ski|e m|ast|ane|e t| av| gr|lan|ste|tan|å f| na|der| sl|t s|seg|n o|r k|nga|ge | an|g o|at |na |ern|nte|ng | ut|lik|e a|bei|gru|e i|arb|kil|g s|lag|eid|r a|e d|g d| si| få|ame|a s|e r|rbe|jen|n m|r d|n e|nn |e n|erd| tr| må| bl| mo|ren|run|nin|bli|kra| kr| at|ege|n i|me |nsk|ins|år |frå|in |lov|v p|end|mot|ale|e v|å a|få |rav|int|nal| ar|sta|e k|t f|ome| la|ot |t a|sla| ik|nle|itt| li| kv|id |kkj|ikk| lo|nad|å v|tta| fa| se|gen|ld |å s|kan|g t| ka|r l|god|n a|lin|jel|ild|dig|ha |l d|kap|ve |ndr|g i|g a|inn|var|rna|r m|r g|a o|dre|d a|n t|ag |kår|mål|ig |va |i d|t m|e e|n d|tyr| om|g e|eve|då |e u| då|und| no|ir |gar|g g|l h|se |ga |d d|l f|ker|r o|å d|eld|ige|t d|t i|t h|oko|nnl|rel|nok|rt |lt |åse|jer|ta |ik |ial|eig|r p|i e|olk|bar|osi|kte|sos|lir|opp| un|ad | be',
        mos:
          ' n |ẽn| a | se|a t|sẽ|̃n | ne|a s| ye|e n| ta| tɩ|n t| pa|tɩ | la| so|nin| ni| b | fã|fãa|ãa |ng |a n| bu| tõ|la |ẽ | te|tõe|ne |ye |a a|or | ya| to|ed |ned|pa |e t|õe |tar|em |tẽ|g n|ã n|n m|aan| ma|sor|buu|n y|maa|uud|a y|r n|ins|n p|ud |ra |paa|ɩ n|a b| wa|d f| na|me |n d|ara|n b|sã |taa|n w|bã |an |yel|eng|aal|ɩ b|n n|gẽ|̃ng|og | ka| bɩ|bɩ | tʊ|gã | yɩ|na |am |e b|ame|wa |g a|d b|aam|ab |mb | bã|ãmb| ba|m n|wã |aab|a m|aa |saa|ga |nsa|yaa| wã|a l|tog|ore|n s|nd |ʊʊm| sõ| sã|ãng|seg|egd|d s|el |tʊʊ|ngã|ba | tũ| da|ã t| me|b s|re |dat|l s|d n|ɩ y|ã y|dɩ |aoo|g t| kã|m t|ing|r s|a p|b y|b n|gdɩ|men|dã |vɩɩ| vɩ|lg |oor|ã s|n k|al |rã |nga|ar | le|gr |d a|neb|̃nd|ɩɩm|ĩnd|yɩ |lem| pʊ| bʊ|pʊg|nge|to |b t|ɩ s|g s| mi| ke|a k|bãm| we|kao|ilg|wil| zĩ| no|kẽ| ra|m b|ʊge|b k| bũ|oog|ã p|bũm|ngr|at | wi|gam| ko|eb |g b|sõn|ãad|ã f|õng|ɩm |m s| yi|ũmb| yã|ʊm |oy |wẽ|noy|ʊmd|da |ren|a z|ya | gã|le |b p|ɩ t|n g| f |ni |soa|oab|i t| sɩ|lag| ti|te |o a|s n|oga|go |tũ |gem|age|a w|̃ n|in | yõ|a g|b b|aor|ka |ẽe|tũu|aas|a r|e y|ag |eg |r t|e a|ã k|iid|e p|neg|o t|ate|oa |e s|ũ n|mã |ms |ell|eem|ẽm|b w|̃ms|too|ik | zã|zĩn|kog|bao|r b|s a|bui|uii|ogl|aba|alo|loa|kãa|od |l b|ll |nda|kat|aka',
        cat:
          ' de| i |es |de |la | la| a | pe|per|ió |ent|tat| se|nt |ret|ts |dre|at | el|ls | dr|men|aci|a p|ció|ona| co|a l|al |na |s d|que|en |el | to|s i| qu| en|e l|ns |tot|et |t a|ers| pr|t d|ons|er | ll|ion|a s|ta |a t|con|els|s e| l’|rso|res|als|son| un|est|cio| re|pro|ita|cia| in|les| o |ue |del|lli|té | té|ia |ame|é d|sev|ota|nac|i l| al|s p|a d|ar |a i|ual|nal|a c|ant|nci| le|ert|sta|rta|ser|t i|i a|l d| no|va |ats| d’|s n|re |s a|e c|eva| na|rà | ca|ues|com|lib|és | so|ibe| es|ets|ber|da |r a|no |una|l’e|s l|ter|sen|ran|ure|des|man|i e|l p|t e|n d|e d|e e|om | di|cci|igu|a a|s t| pa|i d|tra|s o|aqu|tre|vol|ect|a u|l i|gua|ide|s s|ada|ene|ial|nta|ntr|ens|soc|cte|ra |oci|hum|uma|cla|ali|lit|erà|cti| aq| hu|ici|pre|era|ess|uni|nte| fo| ni|ble|sse|tes|alt|eme|ass|ica|seg|o s|ote|rac| ig| po|ans| és|a e|un |us |mit| ma|r s|se |ssi|s h|a m|r l|nit|l t|ènc|ó d|ten| te|ir |i p|tal|eta|dic|i i|hom|t q|par|egu|s f| as|n l|ria| mi| ac|lic|int| tr|act|eix|n e|s c|ont|nse|ecc|t t|ltr|amb|qua|l’a|eli|ura|an |ist|e t|ó a|one|nam|ing|lar|o p|esp|rec|lig|a f| ha|iva| am|lle|t s|rot|mat|liu|tiu|iur|n a|fon|ots|inc|ndi|e p|seu|olu|gur|i c|més|der|rna|ina|for|igi|cie|bli|ic |mb |in |art|ol |rom|nin|omp',
        sot:
          ' le|le |ng |ho | mo| ho| bo|a h| e |lo |ya |ba |e m|a l| ya| ts| ba|na |ong| ka|a b|tho|e t|sa |elo|olo|a m|ets| di|o e|la |mon|oth|tsa|o y|ka |eng|a k|oke|kel|a t|g l|tok|ang|o t|tla|mot| se|o l|e b| na| ha|lok|wa |e h| tl| a |aba|o b|tse|ha | o |hab|e k|tjh|a d|tso|jha| to|se |so |oko|e e|tsh|dit|pa |apa|o n|e l|loh|kol| ma|o m|a e|ela|ele|ana|a s|let|bol|ohi|a a|tsw|kap| ke|hi |g o|ohl|eo |ke |ona|set|o k|o s|di | kg|e d|aha|lan|bot|bo |ito|o h| mm|hle|eth|ena|i b|ala|ats|moh|swa|lwa|g k|atl|abe|g m|ola|phe|bat|ane|a n|mel| me|o a| ph|ebe|ell|hlo|tlo|etj|mat| sa|g t| th|g y|lat|mol|g b|g h| en|she|the|seb|nan|lek|boh|hae|kgo|hel|e s|edi|wan|me |kga|ae |to |a f|ath|lao| hl|han|ile|nah|we |ume|kan|otl|len|aka|efe|ire|bel|bet|rel|swe|mme|sen|a p| ko|g e|atj|lel|its|bon|oho|eha|shi|man|ano|nts|he |lal|eka| fu|o f|heo|got|all|ao |het|hat|get|ban|hal|kge| wa|a y|lla|fum|mmo|kar|alo| ef|thu|e y|wal|tha|san|hon|tlh| he|e n|ben|hla|ing|uma|pha|o o|si | tu|tum|llo|lle| ta|pan|hen|mo |nen|hir| lo|son|ots|tab|ama|ato|din|lap|hil| eo|dis|oka|elw|tsi|llw|i m|hol|pel|iso|no |e a|fet|lwe|adi| fe|fen|hwa|opa|kop|are|amo|ret|emo|i k|isa|o p|o d|i l|gat|dik|i t| nt| la|ame|shw|hah| am|nya|ita|mab',
        bcl:
          'an | sa|in | na|ng |sa | pa|na |nin|ang| ka| ni| ma| an|pag| as|sin|asi|n s|ion|n n|cio|a m|on |ban| de|n a|ga |kan| mg|a p|mga|a n|os |rec|ere|der|cho|ech|n p|aci|aro|n m|man|a s| la|n d|o n|asa|n k|g s|kat|sar|ata|ay |o s|al |ong|n l| o |a a|ho |a k|igw|tal|gwa|amb|kas|sai|mba|wa |ara| ig|agk|o a|lam|ro |o i|gka|ali|apa|nac|san|aba|g p|ina|a d|iya|yan|ing|lin|may|ink|aiy|nka| ba|aka|a i|yo | in|ag |abo| da|aha|ini| ga|tan|s n|nta|ano|agt|s a|kai|ad |hay|ida|hos|o m|og |ia |iba|ent|han| ta|par|n i| hu|at |ron|a b|g n|ant|g m|nal|ayo|a g|dap|mag|no |sta|aya|iri| pr|nga|ran|cia|g k|es |pat|li | co|dad|l n|y n|bos| si|mak|pro|ala|men|gan|aki|nte|lan|o k|con|t n|gab|a l|g d|ona|n b|ta |do |nda|aan|as |uha|agp|a c|uli|awo|taw|pan|n o| so|hul|i n|ter|ado|ags|g a|tra|min|anw|tay|kam|nwa|waa|g o|a o|kap|ain|bal|bil|ami|g i|d a|res|ra |nag|gta|ton|n e|ba |nan| mi|kab|en |bas|gpa|nes|o p| di|pin|ika|l a|n g|ind|isa|cci|ili|ial|ecc|tec|nci|ios|bah| es|one|pak|om |imi|agi|ico| re|ana| bi|a e|nid|rim|rar| se|rab|s s|hal|i a|buh|sab|cri|ubo|bo |gi |wo |rin|int|agh|ipa|sii|ibo|ani|to |sad|hon| le|iis|a t|ast|say|lar|n c|aag|ote|rot|n t|y m|ici|paa|ley|ey |yag|aen|dan|ni | pu|atu|lab|sal|ica| gi',
        glg:
          ' de|os |de | e |ión| a |da |to |ció|ere|ón |der|ito|en |a p| co|ent|eit|n d| se|rei|ade|as |aci|dad|s d| pe|per|o d|s e|e a|e d|men| da|nte|ers| pr| te|do |al |rso|ida|es |ten|soa|oa |que| to| po| o |a t| in|a e| li| do|cia|te |tod|res|o a|pro| re|tos|est|ra | es| ou|dos|lib|con|a d|nci|o e| na|e e|a a|a s|ber| á |oda| pa|e o| qu|e c|ue |ar |nac| en| sú|tra|s p| un|súa|com|ou |ia |nto|ser|a c|er |ns |a o|se |des|is |ter|s n| ca|ado|or |óns|sta|úa | no|rda|s s|ibe|rá |erd|era|no |nal| as|ica|e p|eme|erá|pre|sen|das|e n| ni|e s|por|ais|par|ant|ara|ame|cci|ona|io |o p|n p| di|cto|s t| so|o t|o á|nin| me| os|cio|enc|unh|n e|n c|nha|ha |ntr|ion|n s|á s|n t|s o|ese|nta|ect|e i|o s|e l|so |nid|oci|soc|ont|dic|ici|e t|tad| ac|tiv|ndi|ali|gua|l e|rec|a l| ig|omo|cas|o m|re | ma|ing|na |igu|vid|eli|ngu|und|s i|rac|a n|cla|cti|seu|ria|on |ase|o n|lic|s c|man|lid|a u|uni|ta | ó |ual|ido|ori| fu|ind|nda|ste|s a|tes| tr|act|ial|fun|dis|ecc|o ó|cal|mo |un |e r|iva|n o|ca |n a|o c|esp|ome|o o|seg|sti|r a|tor|r d|egu|ada|lo |nde|r o|uma|ote| el|alq|lqu|uer|spe|a i|tar|bre|tri|hum|olo|cie|ren|ena|ari|mat| fa|med|ura|lar|edi|ver|ixi|á p|ibr|gur|int|pen|rot|a f|cac|s f|ili|rio|ma |a v| vi|rim|len|ita',
        lit:
          'as |ir | ir|eis|tei| te|s t|os |uri|ti |us |is |iek| pa|ai | vi|vie|tur| ki|ri |žmo| tu| žm|ien|ės |ių |ali|ais|mog|vis| ka|lai| la|ini|i t|s i|s ž|sę | į |isę|ena| ne| pr| bū| jo|pri|kie| ta|kvi|nas| su|ekv|mas|gus|būt|tin|isv|s s|ogu|isi|mą |mo |ant| ar|s k|ama|kai|ūti|s a|s v|aci| ti|s n| sa|s p|oki|cij|inė|ar |val|ms |tai|jo |i b| na|gal|sav|kur|aus|men|rin| ap|imą|ma |sta|ę į|ina|i p|imo|nim|i k| nu|ima|oti|mis| ku|jos|lyg|dar|išk|je | at|tas|kad|r t|tų |ad |tik|i i|nės|arb|i v|ijo|eik|aut|s b| įs| re|iam|sin|suo| be|isu| va|li |sty|asi|tie|ara|lin|isė|i s|ą i|jų | ly| ga|vo |si |r p|tuo|aik|rie| mo|din|pas|mok|ip |i n|rei|ybė|mos|aip|r l|ntu|įst|į t|gyv| iš|nti|tyb|ų i|pag|kia|kit|es |uot| sk|jim|tis| or|aud|yve|ven|mų |als|ų t|nac|avo|dam|ą k|i a|s j|oje|agr|kla|gau|neg|nių|o k|ega|iki|aug|ek |tat|ieš|tar|ia | ši|ios|ška|sva| to|tau|int|sau|uti| as|io |oga|san|mon|omi|kin|ito|s g|ome|r j| ve|aty|kim|nt |iai|lst| da|ją |min|r k|o t|nuo|tu |ver|kal|am |usi|o n|o a|ymo|tym|vę |ati| ji|o p|tim|ų n|paž|ter|s š| vy|alt|ksl|ing|ų s|oma|šal|ran|e t| ni| ša|ava|avi|nie|uom|irt|elg|jam|ipa|kių|tok|eka|tos|oja|kio|eny|nam|s d|ndi|amo|yti|gri|svę| gy|lie|ėmi|ats|ygi|soc|sie|oci|pat|cia',
        umb:
          'kwe|oku|a o| ok|nda| kw| om|da |wen|e o|a k|la |ko | ly|end|nu |ka |o l|oko|mun|omu|unu|kwa|wa | ko|a v|o y|omo|mok|ali| vy|eka|olo|i o|osi| yo|lyo|mwe|si |okw|we |lo |iwa|o k|i k|le |te |a e|ete|gi |kut|sok|ong|iso| ya|vo |ang| ey|wet|ata|a y|o o|yok|ofe|fek|kuk|ela|a l|ilo| wo|owi|nga|iñg|kul|oka|vyo|uli|u e| va|li |ñgi|kal|wat|ta |u o|eci|ngi|ovo|ye |so | li|oci|yo |wiñ|nde|ga |ing| nd|ili|nge|ci |eye|ala|vya|e k|kol|isa|a a|lom|lon|go |avo|ako|ovi|pan| ol|uka|ngo|lya|ti |o v|akw|yal|olw|uti|imw|eli|alo|ge |ung| ku|a u|lis| al|onj|ati|wal|ale|e l|sa |i v|and| ov| yi|ika|ukw|ele|lil|yos|he | oc|yov|iha|ikw|omb|val|lin|lim|ahe|apo| ka| ye|yom| vo|lik|i l|kok|wav|aka|cih|o e|tiw| ke|yi |i w|ama|e y|lof|yow|yol| ek|kov|ole|vak|vik|tav|omw|a c|upa| el|ila| lo|aso|su |e v|lyu|ava|ñgo|lwa| wa|gis|gol| ce|tis|ave| on| es|po |wil|va |eso|kup|co | la|yam| ak|wam|iyo|ekw|e e|i c|tat|i a|a n|yah|eko|lwi|ita|lit| ec|kwi|upi|i y|epa|kan|kiy|nja|dec|asi|e u|yav|asu|mak|lap|yim|tya|vos|kas|cit| ha|lel|u c|a w|emb|u y|ola|yon| os|win|lye| ca|eyo| uk| ci| ow| yu|ayi|vel|liw|has|iti|sil| et|yuk|o w|umb|ulu|ya |wi |anj|kat|ngu|wom|o a|uva|esu|usu|mbo| co| of|mat|o c|ca |cel|vi |u l|ba |kon|mbe|wiw',
        tsn:
          ' le|le |go | mo|ng | ts| go|lo | bo|ya |we | di|gwe| ya|ong|ngw|sa |olo|elo|a b|tsa|tsh| e |tlh|a l|o t|e t|a g|e m|wa |a t|o y|eng|na |e l| kg|wan|kgo|mo |o n|tse|a k| tl|ets|ane| ba|dit|mon|ele|hwa|shw|la |ka |a m|nel| na| ka|e d|o l| o |o m|ba |se |e g|e e|bot|a d| a |di | ga|ots|tla|otl| se|lol|o b|tho|so |lho|tso|o g|ang|got|e b|ga |lel|seg|o e|its|gol|ose|ho |oth|let|e o|lha|ego|aba|hab|e k|ano|los|a n| nn| ma|eka|g l|šha|tšh|kan|alo|ola|lhe|ela|aka|sen|gat|tsw|kga| nt|mol|o a|nng|o o|o k|aga|atl|o s|bat|tlo|agi|yo |len|g y|edi|e y| th|g m|dik|to |tir|e n| ja|a a|mel|o d|ana|ire|g k|rel|swe| yo|bon|gag|lek|e s|mot|kwa|i l| te|a s|he |agw|ats|iwa|i k|itš|ona|no |a e|mai|any|lao|ikg|she|ntl|lwa|dir|g t|lon|ale| sa|ao |hel|shi|tle| wa|ume|log|jwa|itl|pe |hir| jw|non|iti|a y|set|hok|ira| ti|odi| me|gi |e j|tek|etl|a p|ko |ath|ala|hol|bod|tet|mog|han|nya| mm|g g|nag|i t|adi| lo|oag|i b|nna| ko|the|lan|re |thu|wen|hot|nyo|hut|o i| ne|pol|me |tum|ope|ame|gan|emo|ore|wel|nts|oko|okg|iro|ro |tha|elw|amo|gor|ing|jal|isi|nan|ogo| it|jaa|si |oga|heo|gon|diw|pa |opa| kw|lat|are|bo |o j| ke|ke |ile|gis|o f|rag| ph|bok|aak|kar|rwa|nye|g a|atš|mok|ago|okw|hag|ate|ato|uto|gwa|mme| fa|fa | op',
        vec:
          ' de|to |ssi| di| e |de |ƚa |ass| in|e d|ƚe |ón |ión|e e|o d|sió|ent| co|rit| so|dir|el |iri|re |eƚa|tà |e a|ti |à d|so |men|te |ess|in |a s| a | gà|gà |ito|deƚ| pr|i d|ion| el|sa |aƚe|a d|e i|nto|e p|o a|nte|ame|mo | na|con|sio|hom| te|omo|ni |are|a p|pro|e s|da | ke|ke | i |o e|nas|ƚi |aƚa| pa|gni|ssa|aƚi|xe |se |o i|i s| aƚ|ar | eƚ| un|e l| da| ho|on |ia | og| si|sia|e n| al|o s|a e| li|ogn| se| o | ri|n t| l’|i i|naƚ|i h|dei|dis|ei |na |à e|del|o c|ont|iti|tut|ibe|ber|nsa| es|par|iss|res|e c|o g|ona|ond|ità|un |ri | tu|lib|sar|n d|ras|a c|nda| st|ens|i e| cu|nit|e o|egn|a n|do |ari|ta |eƚe|ro | xe|gua|ne |a l|n c|a i|n e|i p| re|cia|al |tra|e f|man|n s|no | po|ers|i g|uni|pre| fo|uti|n p|eri| ma|era|l s|ani| fa|per|soc|oci|o o|rtà| no|l d| pe|pri|e r|ter|si |a a| as|ndo|i a|fon|a u|end|e k|sen|o p|iaƚ|teƚ|e g|ico|n u|ert|io |l’a|a t|ra | me|ugu|ati| ne|uaƚ|dar|o t|com|asi|e t|iar| ƚe|nta|sta|teg|o n|ant| ug|ins|nse| pu|seg| le|ori|ura|ndi|tri|alt|ist|o k|ƚo |kia|e u|rar|tes|ita|ans|rso|ltr| su|l m|n o|ƚit|a r|ai |uma|ici|ato|opo|bli| ca|eƚi|l r|ica|ria|tro|isp|sun|cua|ind|co |vit|cur|cas|int|ute|ric| ra|gna|rse|dam|lic|ono|ere|riv|ite| um|for|avo|sic|vor|icu|ris|eƚ |eto|cos|ntr',
        nso:
          'go | le|le | go|a g|lo |ba | di|ka |o y|ya | ka| ya|ng | ma|a m| mo| tš|elo|etš|e g|a l|o l| bo|a k|a b|e t|na |o t|tok|wa |e m|a t| ga|la |ang| a | ba| se|man|tše|oke|o k|ša |kel|dit|tša|tho|we |ele|a d|o g|o a|a s|o b|gwe|e d|ho |o m|ego|e l| na|tšh| to|šo |še |oko|ga |di | o |olo| e |let|ong|gob| ye|oba|ago| tl|tšw|mo |e b|re |g l|ngw|aba|tšo|swa|šha|ane|tla|hab|o n|ona|ito|ela| kg|ogo| th|oth|wan|eo |e k| sw|lok|kgo|log|ye |o d|a n|ola|g o|e s|set|hlo|kol|se | wa|lel|ao |eng|o s|šwa|mol| ts|eth|net|ano| bj|a y|o e| ke|thu|hut|šwe|ge |itš|leg|rel|alo|to |ohl| ge|mog|kan|e e|ire|nag|ke |eba|aka|pha|gag|bot|o w|aga|a a|mot|are|mok| yo|gor|oka|ko |gon|no |ore|ana|agw| wo|bon|bat|lwa|tse|bja| ph|din|yo |e r|šeg|e y|ath|nya|get|lao|sa |wo | re|wag|odi| sa|seb| me|utš|oph|mel|iti|kge|ato|kar|o o|šom| la|o f|phe|edi|hir|ala|pol|lat|ušo|i g|a p|g y|the| fi|ume|wel|bop|hel|emo| du|ile|gwa|bo |ale|tle|lwe|lek|ban|ta | lo|lon|o š|dir|mae| mm|tlh|god|pel|a w|weg|eka|elw|atš|išo|aem|šhi| ko|gam|rwa|mmo|boi|e n|ntl|pan|amm|i l|i b|hle|hla|leb| am|šon|jo |len|i s|kop|ret|gel|ing|opa|yeo|dum|sen|e a|ape|ase|kwa|lef|mal|amo|oge|bjo|oik|mon|kga|okg|a f|tsh|boh|uto|ika|ahl|ja |adi|iša|gab|hom|abo',
        ban:
          'ng |an |ang| sa|ing|san| ma| pa|ane|rin|ne |ak |hak| ha| ka|n s| ri| ke|nga| ng|man|in |lan|a s|ara|ma | ja|n p|n k| pe|g s|g p|pun|asa|uwe|gan|n m|nin|sal|pan| la|alu|iri|sa |lui|jan|adi|a m|adu|uir|ra |yan|mad|kan|wan|duw|ur |tan|g j|anm|we | tu|nma|ika|awi|nge|ah |tur|ih |ban|ka |e h| ne|n n|en |nte|un |ngs|eng|anu|beb|aya|ani|ana|ian|a p|ala|bas|nan|gsa|ngg|uta| da|gar|aka|eba|da |apa|asi|ama|lih|aha| wa|ten| ut| ta|a n|ebe|are| wi|han|aje|keb|oni|nik|ent|aki|uni|ata|wia|iad|g n| pu|jer|ero|ron|aan|k h|saj|din|sak|a t|nus|dan|n w|pen|usa| ba|ngk| pi|ant|sam|e p|taw|n r|ate|wi |nen|i m|ega|neg|iwa|pat|atu|e s|ami|ipu|g k|ina|mar|kat|kal|aga|sar|ran|kin|per|g r|ndi|arg|ar |ksa|e m|ren|nya|al |tat|ida|ela|h p|aks|ntu|ngu|ado|lak| ny|oli|at |wen|ep |i k| se|dos|h s|n l|dad|gka|eka|a k|rep|eda|n h|par|upa|ena|swa| sw| in|nay|ewa|ung|era|ali|a u| mu|eh |nip|r p|e k|n t|k p|ras|i n|uku|n i|wah|eri|g m|pak|n b|r n|ayo|nda|mal|mi |um |dik|os |osa| mi|yom|na |teh|awe|k r|lar|car|tah|sia|g h|ti | hu|ut |huk|kum|sti|ewe|tuk| me|rga|pin|h m| su|gi |ari|n d|a w|ta |uan|gaw|gen|h r|on |war|tut|lah|pag|gay|r m|n u|ada|ira|a b|ngi|end|kew|g t|min|ggi|gda|jag|as |rap|agu| an|e n|ngd|s k|ila|eta',
        bug:
          'na |eng|ng | na| ri|ang|nge|nna|ngn|gng|ge |sen|a r| ma| pa| si| ta| ha|ri |hak|app|tau|ak |au |ddi|a t|ase|edd|ale|a n|nap|gen|len|ass|pa |e n|ai |ria|enn|ega| ru|upa|rup|ias|a a|ing|inn|a s|pun|ngi|nin|e p|ini|nai|ga |lal|gi |sin|ppu|are|ae |ye | ye|ana|g n|sed|ada|le | as|i h|a p|ama|g r|i r|man| se|una|ara|ra |di |ssa|ren|a m|pad|e r|ila|ban|asa| ke|san|din|e a|ura| la|ane| de|nas|e s|i a|ipa|pan|u n|ann|i l| ad|da |ala|aji|ole|att| pu| e |ong|i s| ba|pur|aga|lai|i p|lan|g a|ngs|sal|ola|gsa|g s|a b|i n|ppa|rip| we|a k|g m|asi|wed|akk|mas|i m|ril|u r|reg|g p| pe|ung|gar|neg|sse| po|e m|k h| ar|pas| ne|map|ian| te|nar|pol|ett|ran| ja|bas|eba|jam|beb|ena|par| al|sib|ebe|ngk|uru|keb| sa|ain|ttu| mo|aka|unn|add|iba|sa |gan|gka|nen|bbi|i t| at|atu|kan|nan|uan|leb|rus|de |e d|ton|ata|tu |ssi|ro |e y|cen|kun|awa|ell| wa|k r|mak|wa |uwe|ire|ebb|gag|apa|sae| tu| ia|tte|mat|sim| to|a d|o r|ta |nat|ece|tur|la |ie |dec|ko |kel| di| hu|nca|caj|pak|rel|ma |lu |g t|bol|uku|e e|ter|jaj|tta|we |bir|deg|huk|e h|dan|ure|baw|kol|rit|kko|ele|arg|rga|llu|oe |lin|use|ari|auw|pat|mul|elo|ula|iti|gau|an |u p|nga|g y|a h|ekk|sil|ka |e w|ade|anc|iga|sip|ten|a y|e t| me|nre|aja|ji |rek|a w|dde|per|iko|sik',
        knc:
          ' a |ro |be |nzə|ye |a a| ha| kə|abe|akk| ka|zə |adə|a n|a k|kki|hak|mbe| la| ad|ndu| nd|wa |ben|en |ma |də | ya|o a|əbe|ə a|ga |e a|əga|lan|əna|lar|aye|aro|kin|inz|rdə|ard|ana|yay| ga|əla|kəl|ji |awa| mb|bej|eji|kən| ba|an |uro|du | na| ku|anz|dəg|nəm|kal| nə|e m|na |gan| du| sh|shi|amb|n k| su|ara|u y| ta|so |a d|kam|wo | ye| sa|e h|a s|sur|aso|au | au|iwa|nyi|kur|a l| da|kar| as|dəb|iya|kiw|o k|obe|e s|ada|ama|and|u a|aa |ta |ima|n n|la |əwa|nga| ci|ba | ab| nz|əgə| fa|ənd|ata|ndo|ya |tə |nza|ə n|ndi|a g|in |nam| fu|ə k|aya|a t|tən|a b|təg|ru |uru|inb|am |e k|al |ida|mga|aar|a h|baa|ə s|nab|dəw|dun|asa|nya|owu|gad|taw|o w|gən|a y|kat|dam| sə|o h|əra|e n|awo|ade|əmk| wa| wo|amg|dən| tə|a f|ala|i a|zəg|o n|uny|iga|zən|əli|wur|u k|o s|wan|za |din|utu|e l|san|i k|uwu|wu |awu|n a|on |de |da |nba|mka|yi |gay|tam| ng|laa|gin|azə|bem|gai|taa|ibe|rad|adi|fut| mə|wow|wak|ali|kun| an|mər|o t|yab|nad|aim|əgi|i n| aw|liw|cid|u s|edə|atə|any|do |apt|lka|alk|dar|rta|bed|tu |ela|ndə|uwo|gal|yir|wum|n y|ayi|n d|mma|zəb| yi|nan|ltə|lmu|ilm|mar|bel|raj| il|ero|m a|utə|enz|iro|alw|uma|umm| um|e g|how|kka|o f| ny| ho|fuw|ə h|ang|tin|zəl|o g|ema|ən |no |a i|a m|wal|əny|iwo|lil|ədə|ə f|rtə|hi |diy|mu ',
        kng:
          ' ya|na |ya |a k| na|a y|a m| ku|a n|a b| ba|u y|and|ka | mu|yin|wan|tu | lu|aka| mp|ve | yi|la |ntu| ki|mpe|pe |nda|a l|si |yan|ana|so | ke|e n|ons|nso|di |da |ndi|i y|u n|lu |mun|alu|unt|ina|e y|nza|luv|ala|uve| ma|u m|ke |za |ayi|sal|o m|ban|ndu|ta |isa|kan|ulu|i m|amb|ma |kim|u k|fwa| ny|nyo|yon|ama|ti |ang|anz|du |kus|o y| me|i n|to |ins|nsi|wa |usa| mo|kon|uta|end|i k|uka| bi|a d| ko|mbu|mos|sa | ve|ika|mu |osi|e k|uti|kuz|imp|a v|e m|und|ind| fw|ila| to|pwa|mpw|ngu|bal|adi|ba | sa|len|sam|sik|mab|tin|vwa|mba|kuk| di|yay|a t|yi | le|ant| ka|ata|isi|olo|kis|mut|ula|lo |bu |su | bu| at|amu|o n|dya|kut|dil| nz|ngi|abu|usu|but| nt|ni |bak|kul|e b|nga|e l|inz|imv|gu |wu | dy|lus|awu| ti|lak|bay|bun|kat|ngo|tal|i b|utu|kak|o k|bim|uzi|uza|mvu| ng|nak|iku|baw|esa|kin|ken|yak|mpa|luz|umu|nu |nta|dis|dik|vuk|u f|tan|sad|ati|nka|ank|luk|mak|ong| mb|ani|i l|lwa|aba|luy|uya|yal|ing|zwa|kuv|idi|ku |ga |zit|bis|uvw|uzw| ni|swa| nk|iti|mef|fun|ibu|nsa|aku|ufu|kub|lam|met|i a|mus|eta|a a|u t|twa|atu|tuk|fum|uko|iki|don|kol|kun|bam|eng|uku|ndo| ns|a s|ela|usi|pam|mvw|u b|i t|zo |anu|tis|uke|sul|te |gid|dib|yam|ilw| mf|ola|umb|uso|kam|gi |mbi|oko|nzi|i s| nd|mfu|luf|dus|bum|lut|mam|ded|wil|tad',
        ibb:
          'ke | nd| mm|me | ke|e u|ndi|o e| em|mme|de |en |e n|owo| en| ow|wo |i e|mi |ye |emi|nye| un|e e|edi|ene| ek|yen|eny| ed|e m|nen|une|ana|n e|e o|e i| ye| uk|et |n n|eke|na |e k| mb|em |ne | id| es|un |kpu|ede|iet|ndo| nk|o k|di |kpo|ukp|did|am |an |kie|nam|kem|esi|o u| nt|idu|eme|o n|t e|no |yun|mo | uf|ho |mmo|nyu| in|o m|kpe|o o|sie|oho| kp|do |din|ie |ono|kpa|m e|ri |nkp|dib|on |e a|uke| ki|boh|a k| et|po |ida|dut|m u|ked|ded| ub| of|ond|ru |uru|pur|in |ut |du |eko|a u|ina| ot|mbe|n o|bet|iny|man| ak|op |idi|ikp|i o|edu|kon|ade|om | us|uan|wem|a m|uwe| uw|puk|ak |ode|ro |t m|a e|oro|a n|n k|u o|to |te |bo |akp|ufo|ok |dik|pan|mbo|bio|i m|ide|ini|fur|uri|ban|ofu|ubo|n i|o i|uto|iso|dom|omo|ema|diy|fen| nw|dis| ny| is|ni |usu|n m|u u|fin|tom|eto|pem|ed |m m|ibo|oto|o a|sua|wed|nwe|m n| ut|mde|dud| eb|ara| as|i n|oki| ob|nte|mok| ik| an|kar|m k|o y|t k| on|i u|nwa|n y|asa|ama|re |ufi|uka|io |nek|i k| or|pon|top|sun|ion|se |aha|t o|k n|e y|ere| ef|mba|mad|isu| mi|kor|ra |ian|i a|ka |a a|k m|ko |da |t i|ena|obi| ey|ha |dia|ti |aba|uk |u m|d e|dem|san|a o| se|pa | ab|tod|n u|p m|ude|fok|k u|efe|uku|nti|nka|ibi|son|he |pe |nto|dak|a y| od|nde|eye|anw|ndu|mbu|so |ebi|bie|nda|sin|med|tu ',
        lug:
          'a o| ok| mu|oku|mu |wa |nga| ob|ga |tu |ntu|a e|na |bwa|a a|ang|ra |aba| n |ba |a m|wan|a n| ng| ab|li |obu|unt|a k|era|ibw|dde|oba|a b|u n|za |la |mun|ban|ali|ka |emb|iri|bul|ate|mbe|i m| ek|tee|eek|uli| bu|u a|edd|sa | ku|ant|ana|eki|u b|be |dem| eb|ama|n o| om|ira|omu| ki| ed|ye |ala|amu| am|e o|gwa|nna| er|kuk|y o|kwa| en|okw|eer| ly|inz|ula|kus|kir|u e| ba| em|eri| ky|any|onn| wa| ye|ggw|ina|kol|n e|awa| bw|uyi|u k|eka|yo |bwe|ola|o e|usa|o o|kwe|mus|yin|bal|i e|u m|ngi|e m|bir|riz|ere|ri |ebi|kul|aga|nza|kub|ekw| eg|ko |a y|u o|we |kut|mat|e l|e e|a l|aan|ger|no |kan|sin|nka|gir|uso| at|a g|iza|gan|nyi|zes|uku|wo |nge|zib|isa|izi|ya |egg|ufu|rir|lin|wam|wal|eby|a w|i o|bee|oze|esa|eta|iko|ebw| ma|ako|bon|tuu|kin|uki|de |zi |kug|yen|ino|e b|obo|aka|ulu| te|ne |lwa|ma |y e|lye|kuy|nsi|i y|gi |utu|ly |imu|e n|taa|asa|enk|ku |o n|o b|sob|si |una|bun|usi|san|e k| ag|uka|uga|ata| ol|rwa|wen|ing|wat|kik|o k| by|nya|ong|kye|by |kyo| bo|ewa|yam|bye|ubi|ngo|kis|ani|boz|kit|i n| aw|ky | al|sib|muk|awo|uko|umu|ibi|uma|afu|olw|eky|tab|ung|buy|ini|uum|saa|y a|lal|mag|ro |end|add|enn|kib|ens|ole|ni |mbi|o a|i k|gat| og|maw|and|kuu|a z|wet|igi|yig|emu| ne| gw|a t|nzi|n a|gya|amb|uwa|ulw| ey',
        ace:
          'ng |an |eun|ang| ha|peu|oe |ak |on |nya| ny|yan| ta|ngo|ung|gon|na |ah | pe|reu| ng| ba| ke|hak|meu|keu| me|eut|at |ure| na|ban|ee | di|teu|roe|ata| ur|ara| be|seu|han|a h| sa|am |dro|eur|um |n n|tie|iep| ma| la|ala|nan|g n|ut |ong|a n|ep |tan| te|tap|jeu| ti|eul|eub|eu |eug| da|eum|eh |euk|ra |ih |n p|uga|ai |n b|a t|e n|lam|eba| se|beb|n t|awa|om |a b| ka|asa| at|eus|and|nyo|oh |ta |ka |h t|n k|p u|man|e t|n d|n h|ana|dan| pi|ape|a s|neu|nda| si|t n|bah|ula|yoe|a k|h n|dum|euh|g d|e p|eng|e b| le| pa|ngs|sia|ran|ma |g k|un | wa|ndu|lan|una|heu|ura|n m|lah|sa |n a| ra|aba|g s|a p|ia |und| je|wa |kat|bak|k n|anj| dr|asi| bu|nga|beu|uny|yar|sya|hai|k m|k t|k a|ama|aan|ek |a m|ok |g h|aka|sab|g p|i n|uta|khe|h p|ue |uka|har|ari|di |e d| su| um|t t|a l|ya |san|e s|gan|uko|gsa|e u| li|kan|bat|lee|aro|ot |n s|leu|ina|h d|lak|oih|yat|n u|kom|pat|ate| ne|ngg|nje|taw|mas|uma|sid|anu|umu|aja|si |uh |h m|rat|aya|sal|et |soe|t b|n l|aga|taa|usi| ja|ute|m p|en |dek|ila|a d|ube|dip|gam|any|lin|tam|don|ika|usa| ji|rak|idr|h b|nus|adi| as|dar|ame|n j|ngk|m n|eup|h h|bue|k h|huk|euj|g b|gar|eka|gah|upa|ile|sam| bi|h s| de| in|mum|‐ti|t h| hu|k k|pho|dil|ep‐|nta| ge|geu|h l|hat|ie |tha|use|ieh|sas',
        bam:
          ' ka|ni |a k|ka |an | ni|kan| bɛ|n k| la|i k|ya |la |ye |ɔgɔ|na | ye|bɛɛ|ɛɛ |en |li |sir|ɛ k|ama| ma|ira|a d|ra |ali|’a | da|man|a n|a b| i |ma | kɛ| wa|gɔ |wal|mɔg|ana|n n| ba| ja|ɔrɔ| mi| kɔ| k’| mɔ| jo| si|min|iya|dan|len|i m|’i |in |kɔn|ko |aw |den| sa| o | n’|ara|bɛ |i n|jam|ɔnɔ| na|ɛrɛ|a s|i j|ani|n b|a m|i d| fɛ| tɛ| an|osi|jos|a y|kɛ |a l|iri| ko| di|ɛ b|ada|ila|ɛ m|i t| fa|nɔ | de| ha|asi|tɛ |ari|a j|raw|a t|ɛ s|ale|a f|tig|ɛn |aya|dam|a i|i b|sar|si |riy|ɲa |n y|nu |inn|e k|ɔn |rɔ |ang|a w|o j|w n|nnu|k’i|nti|nɲa|ade|abi|bil|ala|hɔr|kal|had|igɛ|i s|a a|mad| a |aga|u k|kab|a ɲ|aba| ti|olo| hɔ|o b|ɛ j|i f| ta|ɔ k|aar|baa|ɛ n|n’a|kun|ugu|iɲɛ|diɲ|n j|k’a|a h|rɛ |ati|ɔ m| se| cɛ|ɲɔg|bɔ | tɔ|i y|lan|i h| ɲɔ|tɔn|don|nɛ |inɛ|ga |i l|ɲɛ |ile| fo|o k|ɛ l|nna|ili|un |gɔn|maa|fɛn|n d|ant|n i|aay|go |da | jɛ|u b|ri |rɔn|aka|lak|ɔnɲ|e m|ɔ b|nin|nw |cɛ |w k|yɔr|n o|o f|nga|jo |o m|nen|n’i|on |ɛ t| ku|o l|igi|ɲɛn|anb|fɛ |ɔ s| bɔ|n m|e b|afa|nka|n f|nma| fi|’u |ɔ n| ɲɛ|fan|i ɲ|ti |a o|dil|ɛ d|uya| sɔ|ago|ɛ y|e f|ɛmɛ|mɛn|aju|e d|bɛn| jɔ| fu|til|bag|fur|n t|uru|kar|atɔ|be | d’| du|d’a|oma|lom| u | do|riw|taa|w l|mɛ |gɛ |imɛ|n w|iir|nni|iim|amu|so |bal| ɲa| b’|gu |ɛɛr|’o |iwa|n s|wol|ele|ɲan',
        tzm:
          'en |an | ye| d | n |ad |ur | ad|n i| s |agh|ḥe|n t| i |dan| ta| lh|lḥ|d y| gh|ell|n a|ra |̣eq|i t|eqq|s l|mda|ett|n d|d t|akk|la | ti|qq |hur|di | di| am|gh |ghu| is|t i|r s|in |nag| na|a y|is | te|a d|n n|yet|n g|ll |ara|ghe|ma | we| ar| wa|n s|l a|n l|sen|edd| ak|it |li | le|dd |ull|lla| id|d a| ur|rfa|erf|kul| yi| ku|as | se| ma|zer|amd|a n|lli|lel|men|t a|kw | de|t t|nt |kkw| im|fan|a i|a t|eg |n w|i d|q a|rt |ar |gar| ag|es | tl|ize|emd|i w|i l|deg| as|ken| dd|n u|lan|d i|a a|wak|tta| tm|d u|er | tu|wem|at |ddu|tle|w d|n y|t n|sse|r a|mur|s t|tam|gi | tt|yes|wan|r i|tim|na |wen|twa|d l|ttu|kke|wa |nen| iz|iḥ| u |win|d n|ame|s d|ent|ḍe|hel|a l|hed|ess|t d|mga|arw|i n|ḥu|mi |mad|agi|i g|der|udd|s n|rwa|̣en|awa|i i|ya |h d|iya|s y|msa|uḥ|idd|urt|un |n m|ane|em |sef|lsa|ili|q i|qan|leq|siy| ik|el |err| in|yed| la|ant|den|tag|man|g w|mma|yen|len|tmu|i u|aw |taw|r y|wad|edm|ṣe|hla|t l|̣er|ala|asi|ef |u a|tte|ddi|ttw| lâ|imi|l n|til|al | ne|am |̣ud| lq|iḍ| ya|dda|̣ṛ|med|ren| ss|gra|m a|ghl| il|chu|tem| ll|khe|way|eln|lna|ana|ukl|duk|gha|lt |ni |all|i a|tal|ray|nes|s k|tes|naw|ert|ila|awi|lqa|kra|anu|nun| kr|ikh|ezm|n k|iwe|iwi|ima|net|ser|s u|ir |yeh| an|aya|ehw|hwa|esk|dde',
        kmb:
          'a k| ku|ya |la |ala| mu| ki|a m| o |u k|ni |o k| ni|kal| ky|mu | ya|lu |dya| dy|a o|ang|kya|a n|tok|i k|oso|so |kwa|nge|xi |na |elu|nga| kw|wa | wa|a d|hu |kut|thu|uka|oka|mut| ka|a i|mba|uth|ka |gel|ba |u m|u y|ku |ene|u n|ga |kuk|ban|ixi|i m|e k|wal|oke| mb|kik|kel|ne |u w|ela|uto|i y|ana| ng|iji|a y|kit|ma | ji|nda|ngu|yos|kum|ulu|ji |i d|isa|und| it|and|ong| mw|u i|iba|ika|wen| di|ten|ilu|ila|ndu|ye |sa |kub|aka|ena|amb|ung|olo|a w|ngo|kil|oxi|lo |muk|ke |sok|du |mox|ate|o w|kus|wat|ta | wo|gu | ph|u d|ito|ita|e m|alu|a j|kis|tun|uma|wos|luk|o m|san|mwe|a a|di |imo|ula|wan|nji|jix|i j|a t|kij|idi|kan|uku|gan|kul|e o|kye|adi|ato|o i| ja| ix|da |nu |o n|uta|kud| yo|i n|udi|ki |su |tal|a u|lun|e y|u u| ye|jin|iki|pha|hal|wij|we |a s|lak|ikw|go |tes|fol|itu|eng| ke| uf|yen|ing|yat|ele|utu|kyo|o y|kwe|kwi|uba| en|kib|ite| we|dal|i o|yan|ge |eny|tan|uki| ik|dib| im|esu|lon|kat|atu|e n|ja |i u|jya|vwa|kam|i w|ute|ini|uke|lel|esa| se|xil| ut|fun|unj|ufo|mbo| a |uso|kim|mun|u p|nen|ukw|u o|i i|umu|han|gon| il|lan|ata|te |i a| ko|jil|o a|nde|nyo|eka| at|o d|exi|ijy|tu |usa|tul|kuz|ilo|dis| un|u j|dit|ufu|ote| ib|ivw|mwi| bh| ha|se |bul|ubu|win| os|imb|bha|ama| to|axi|inu| uk|sak|kos|bot',
        lun:
          'la | mu|ng | ku|a k|tu |ntu|chi| ch|a n|aku|di |mun|ma |unt|a m|g a| a | na|ela|ndi|aka| we|ima|jim|shi|eji|u w|i k| ni|ind|wu |i m|a w| in|a i|u m|hi |awu|na |kul|wej|lon|cha| ja|sha| kw|a c|i n|nak|ala|mu |wa |ing|ka |ung|kum|a h|ulo|him|mbi|muk|u c| wa|hak|iku|nsh|yi | ha|bi |amu|imb|ewa|wen|kwa|ang|adi|idi|kut|esh|ana|g o|ila|ha |tun|u j|ong|nik|kuk|tel|ovu| ov|u n|han| an|ate|vu |a a|kal|ula|kwi|jak|u a| ya|a y|ilu|u k| he|ham|and|uch|kus|ond|eka|hel|kew|zat|del|hin|uku|nde|i j|enk|i a|uka|eng|ach|lu |nat|nji|ona|mon|awa|nke|umo|ins| yi|a d|ama|udi|wak|i h|ati|i c|wan|ta |bul|mwi|ata|ayi| ak|uma|i y|ina|ich|itu|uza|kuz|nin| mw|ku |kin|wun|sak|naw|nyi|ni |ant|muc|wal|ish|u y|mul|kud|waw|uke|wes|uki|i i|kam|yid|wit|da |akw|kad|yan| di|ken|uta|ika|imu|iya|nda| ns|mbu|ya |ule|dil|iha|kuy| ko|hik|eni|ahi|kuh|si |kun|ush|umu|atw|g e|his|dik|ji |any|li | ye|dim|kos|osi|hih|wat|eyi|ney| ne|amb|twe|til|wil|nu |kwe|u h|etu|tiy|ja |nan|ash|mwe|win|was|hit|iti| wu|iwa|wah|lem|g i|tam|din|hu |haw|nga|kay| ka|hid|yin|isa|iki| ma|jaw|jil|che|mpe|omp|eta|tan|jin|hiw|usa|umb|eme|inj| hi|ulu|ubu|nam|wik|mpi| da|ale|ite|tal|twa|ahu|end|nka|mba| at|ga |mes|dic|iwu|yej|kan|kuc|iyi|sem|emb|lun|una',
        war:
          'an |ga |nga| ka| ng| pa| ha|han|pag|in |ata| hi| an|mga| mg| ma|kat|hin|a m|ay |a p|ya |ung|a k|gan|on |n h|n n|ug |n p|n k| ug|n m|da |a h|n i|ha |iya|adu|dun|tad|a n| ta|ada|sa | iy|ara| na| di| o |pan|may|a t|ang|ud |ana|n a|o h|o n|taw|n u|ags|yon|y k|al |tag|asa|kad|o p|man| ba|awo|gsa|wo |ag |gad| in|a a|a u|ina|syo|a i|a s|od |ing|agp|ala|asy|ngo|n b|ali|nas|san|aka|a d|ra |g a|was|g h|aha|gpa|agt|to |ad |n t|tun|ng |usa| wa| tu|ini|iri|tan|ahi|kan|ray|nal|war|dir|i h|gka| us|god|g p|ri |a b|nan|ida|o a|i n|bal|y h|kas|uga|hat|tal|nah|awa|ni |pin|uha|buh|o m| bu|gud|aba|at |no | pi|bah|g m|ili|him|aya|atu|d h|agi| su|agk|lwa|mo |d a|alw|sya|uma|ano|int|kal|upa|mag|yo |o u|agb|n d|asu|lin|a o| ko|ona|did|hiy| bi|as | ki|l n|sud|iba|hi |o k|kon|ira| la|gba|pam|amo|g i|ton|gin|n o|uro|ho |os |la |g k|gtu|d m|aud|aag|t h|gi | gu| ig| ir|n g|abu|aho|ami| sa|ati|par|kau|ern|ban|tra|gar|ama|ras|yan|adt|tum| un|ka |aga|aso|api|dto|kin|tik|mil|iko|rin|sal|ika|a g|ila|mah|lip|rab|non|agu|ak |dad|lau|d n|ko |it |pak|n e| ti|una|i m|lig|s h|bay|ro |sug|mak|n w|naa|g n| so| ag|yal|nte|lal|ba |aup|lan|ihi|y b|kah|tub|bye| am|ari|yer|uka|ani|uyo|oha|ito|n s|upo|ent| pu|sam|iin|til|mat|ato',
        dyu:
          'a’ | kà| ká|kà |ye | ye| à |ya’|ni | bɛ|kán|la |án |ya |ɔgɔ| ni| la|ɛɛ |ká |na |a k| mɔ|bɛɛ|mɔg| i |nya|á k|n k|ɔrɔ|’ k| mí|’ l| kɛ|mín|’ y|ín | mà|à k|ɛ k|’ m|ma | ya|à m| wá| jà| ní| be|be | ò |i y|ní |i’ | lá|ra |iya|ɛrɛ|n’ |n n| há| kɔ|te |wál|àma|jàm| te|áli|a b|ima|man|à à|hák|e k|lim| kó|ɔnɔ|mà |n b|i k|ɛn |gɔ |e b|n y|ɔ’ |ana|’ n|o’ | sà|ɛ y|’ s|kɛ |à l|rɔ |e à|kɔn|li’|àni|a m| dí|aw |rɛ |ɔ k|’ b| bá|à b|a à|ákɛ|riy|e s|gbɛ|nɔ |a j| bɔ| ù | sɔ|bɛn| sí|à y|sàr|e m|ara|kó | fà|à s| àn|dún| là|en | sì|an’| fɛ|úny| dú|a n|a y|ɛya|àri| gb|in |kɛr|kan|’ t|dí | cɛ|nin|yaw| tá|na’|e w|mìn|ìna|lá |ɔn | mì| ɲá|à d|ali|n m|yɛr| yɛ|sɔr|gɔ’| tɔ|ama|báa|nga| dà|i m|i à|sìg|ìgi|yɔr|gɔn|w n|áar|a d| sé|ána|àng|len|à i|si |ɛra|á d|bɛr|a s|bɔ |ólo|a h|i b|ɔ s|ɛ l|den|ɛ’ |à t|àra|ɔya|gɔy|kɛy|ógo|u’ |aya|’ d| má| dɔ|ra’|a f|ɔny|’ f| ó |ili|sí | se|se |ko |cóg|a t| có|dén|hɔr|ɔɔn| hɔ|ma’|lan|ika|ina|kàl| a |àla|n s|ɛ m|i t|rɔn|tig|ànt|a w|tá |e n|i s|à n|nna| í |’à |ò k|a g|n d|an |ga |fɛn|ɔ à|li |e i|ɛɛɛ|kél|ati|so’| yé|i f|áki|dàn| k’|i n|k’à| nà|í i|í à|lik|yé |igɛ|e’ |e ò|go | lɔ| na|ɔ b|w l|í t|rɔ’| dò|ò b|min|ti |àga|ow |n t|mad| mi|ò l|éle|gi |ɲán|í y|kil|dɔ |nba|i ɲ|gu | wó|ɛli|i l|úru',
        wol:
          ' ci|ci | sa|am |sañ|añ | na| ak|ak |lu |it | mb| am|aa |na |al |ñ s|ñu |ne |mu |te |pp | ne| ko|m n|i a| ku| ñu| te| mu|baa|u n|ko |u a|mba|a s|e a|ay | wa| lu| do|ar | ni|u m|nit|oo |épp| ta|oom|gu |t k|i b|ku |u k| it|éew|rée| ré|u y|xal| aa|kk |i d| bu|doo|i w| bi|war|u c| yi|aay|llu| li|fee|loo| xe| xa| ya|taa| di|yi |ama|on |u j|yu |eex|ew | yo|boo|xee| bo| wà|àll|wàl|mi |o c|ir |mën| më|yoo|ul | gu|nn |en |oot| du| so|oon|e m|dam|een|u d|i n|uy |eet|i m|ara| ba|bu |a a|ata|okk|aad| lé| ay|ju |ada| nj|nam|und|axa|dun|m a|enn|r n|aar|ex |taw|ala| jà| pa|et |di |ën |ana|ral|ota|k s|awf|naa|wfe| gi|u l|igg|aju| dë|ma | aj|ti |u t| se|ax |gée|mbo| ja|ool|bii|li |a m| ke|see|m c| ye|i l| ng|yam|ngu| yu|w m|an |ken|n w| lo|i s| me| de|m m|i t|om |u x|n t| an| mi|jaa|laa|ee |bok|lig|p l|n m|t y|ggé|k l|a l|lép|àpp|jàp|aam| jë|aax|ekk|nd |góo|ewa|ndi|tax|a d| da|amu|éey|gi | su|k c|n n|l b|o n|k t|p n|jàn|àng|gir| jo|a c|n a|n c|ñoo|i ñ|a n|kaa|ba |m g|le |une|kan|e b|la |nda|lee|i j|ang|aat|k n|ey |ant|iir|a y|l a|e n|nan|añu|men|j a|ok |k i|nee|l x|omi|i c|oxa|aw |g m|dox|nte|opp|u w|ngi| mo|omu|y d|are|i k|aan|em |du |a b|njà|ñ ñ| ti|m r|kun|ddu|ali| së| la|eg | ma|ëra|ng |xam|mul',
        nds:
          'en |un |at |n d| da| de| un|een|dat|de |t d|sch|cht| ee| he|n s| wa|n e| vu|vun|ech|rec|ht |er |ten| to|tt | si| re|ver| ge|nne|t w|n w|ett|n h|n v|k u|n u| el|gen|elk|lk |t u|ien|to |ch | ve|wat|sie|war|het|it | an|n f|ner| mi| in|ann|rn | fö|ör |r d| fr|t r|hte|orr|ich|för| sc|rie|eit| or|den|nsc|ege|fri|rer| st|t g| up|aar|t a|nd | is|ll |rre|is |up |t e|chu|rt |se |ins|daa|lt |on |t h|oon|che|all|n g| ma|rrn|min| se|ell|hei| na|t s|n i|n a|nn |len| sü|in |rd |nen| we| bi|n m|e s|ven|ken|doo|sse|ren|aat|e m|ers|n t|s d|n b|lle|ünn|t t|n o|ik |kee|e g|t v|n k|hen|arr| dr|heb|lie|ebb|e v| al|e a|llt| ke|hn |he | wi|cho|ehe|ok |ard|sta|men|ill|gel|tsc| ok| do|an |düs|ene|erk| gr| dü|weg|ie |ede|ieh|r s|sün|üss|und|raa| dö|röf|drö|t m|ats|öff|e f|ünd|e w|dör|ens| gl|rch|sik|ig |kt |örc|ere|gru| ün|ff |ahn|nre|mit|st |al |aal|hon|ert|kan|nat|der|dee|enn|run| so|eih|lic|ehr|upp|iht|nwe| fa|pp |eke|e r|unw|t n|taa|hup| ka| be|bbt| wo|p s|el |as |t f|bt |e e|nee|maa|huu|eve|nst|ste|mee| ni|inn|n n|ern|iet| me|hör|dde|ent|n r|t o|öve|are|arb|ite|ter|l d|ach|nic|bei| as|lan|t b|d d|t i|ang|ame|rbe|utt| ut|pen| eh|uul|iek|hr | ar|r t|ul |e d|art|n ü|one|eer|na |nte|mut|ete|üd | mu|üüd|lüü',
        vmw:
          'tth|la |thu|a e|na |hu |kha|a m|we |ana| mu|a o|awe|ela|ni |ala|hal|edi|to | ed|ire|dir|eit|ito|rei|ya |a n|wa |mut|a w| wa| ni|akh|aan|u o| on|o y|okh|utt|a a|haa| n’|wak|nla| wi|ari| yo| si| ok| ot|iwa|ka |iya| sa|ne |apo|lap|ale|le | oh|oth|att|the|mul|aka|oha|kun| el|aku|oni|mwa|ha |e s|unl|tha|ott|ele|ett|e m|o s| va|ene|e n|e o| ya|oot|hav|ade|ihi|iha|ihe|de |o o|e a|eli|hen|amu|e w| aw|hel|dad|ra | at|po |i m|lel|wi |o n|owa|e e|ula| en|ta |o a|i a|moo|waw|ina| ak|ota| mo|sa |a s| so|han|ara|var| kh|a i|ri |aya|itt|anl|row| mw| et|i o|ika|’we|nro|i e|n’a|her|lan|nak|sin|lo |elo|vo |u e|eri|n’e|oli|thi|u a|a’w|ida| ah|a v|liw|kan|him|lib|yar|riy|ona|onr|erd|wal|hiy|aa |ibe|rda|wan|ber|era|avi|hiw|nna|i v|hwa|lei|mih|vih| ep|khw|ntt| na|ko |ia |sik|aha|iwe|e k|hun|una|mu |avo|ikh|laa|riw| ma| an|e y|kel|’el|huk|u y|phe|kho|pon|i s|nid|upa|ath|ila|yot|eko|ali|tek| es| it|o e|uku|wih|nan|tte| a |mur|’at|i w|ani|ulu|nih|wel|lik|ira|ane|a y|nkh|saa|ro |n’h|wir|i n|ile|som|u s|hop|inn|ei |ont|kum|yaw|saw|iri| eh|tel|tti|ola|aki|mak|ret|uth|nnu|a k|nuw|ahi|enk| il| nn|ena|va |yok|ute|soo| pi|lal|ohi|hik|mpa|uwi|lih|har|kin|aph|ma |ope|man|ole|uma| oo|mpw| v’|nal|ehi|nin|uni| ek|khu',
        ewe:
          'me |ame|e a|le |wo |kpɔ| am|ɖe |ƒe | si| me| wo|be |si | le|sia|esi|la | la|e d| ɖe| kp|pɔ |aɖe|e l| be|e w| ƒe|e e|dzi|na |nye|a a| du|ye | ŋu| na|duk| dz|ukɔ|e s|ome| mɔ|e n| aɖ|kpl|nya|gbe|e b|e m|ple|ɔkp|ɔ a|pɔk|woa|ɔ m|kɔ |evi|nɔ |ŋu |ke | nu|ɔ l|mes|awo| o |iwo|ɔnu|e ɖ| ab|ya |ekp|e k|ɔwɔ|u a| al|nu |ia |ɖek|e ŋ|kpe|ɔme|o a|iny|zi |dze| ny|o k|eme|eƒe|o n|iam|egb|mɔn|blɔ|i n|wɔ |a m| eƒ|o d|alo|siw|ɔɖe|lo |o m|eke|e g| bu|eny|ubu|ŋut|ɔ s|bub|lɔɖ|enɔ|meg|akp|abl| ha|e t| ta| go|mek|eɖo|ukp|li |nɔn|to |any|a l|etɔ|ɔ ƒ| ey|e h|nuk|gom|ɔ ɖ|ɔe |bɔ |ɖo |i s| to|anɔ|a k|ɔnɔ|e x|awɔ|e ƒ|tɔ | ƒo|mev| es| ɖo|ɖes| xe|i w|tso| wò|wɔw|mɔ |iaɖ|i l| ag| li|ã |o ƒ|odz|a s|agb|yen| ts|bu | he|bet| gb|o e|ewo|a e|ɔna|i d|ti |ele|dɔw| ka|i a|uti|peɖ|ta | an|afi|a ŋ|a ƒ| ad|ƒom|se |ɔwo|xex|exe|oma| ma|vin| dɔ|o l|wɔn|eye|a n|i t|vi |ɔ b|so |edz|gbɔ|ɖev|ado| se|ɔ n|oto|ene|eɖe|xɔ |nan|ɖod| af|ben|zin|ee |de |ɖok|dzɔ|gɔm|adz|ɔ k|wom| gɔ|uwo|i ɖ|a d| vo|a t|o g|i b| xɔ|oɖo|i m|e v|ats|o ŋ|sɔ |ovo|i e| at|vov|ne |ɔ e|kat|o s| ne| aw|da |wòa|eŋu| as|asi| el|o t|yi | sɔ|men|a b|ze |mee|uny|te |dom| ak|man|ẽ |i o|ie |ana|ata|ui |axɔ|u k|ɖoɖ|tsi|ema|rɔ̃|ded|ɔ g|ena| en|kɔm|met|u s| eɖ|oku|kui|mew|xem',
        slv:
          ' pr|in | in|rav|pra|do |anj|ti |avi|je |nje|no |vic| do|ih | po|li |o d| za| vs|ost|a p|ega|o i|ne | dr| na| v |ga | sv|ja |van|svo|ako|pri|co |ico|i s|e s|o p| ka|ali|stv|sti|vsa| ne| im|sak|ima|jo |dru|nos|kdo|i d|akd|i p|nja|o s|nih| al|o v|ma |i i| de|e n|pre|vo |i v|ni |red|obo|vob|avn|neg| bi|ova| iz|ove|iti|lov|ki |jan|a v|na | so|em | nj|a i|se | te|tva|oli|bod|ruž|e i| ra| sk|ati|e p|aro|i k| ob|a d| čl|eva|rža|drž| sp|ko |i n| se| ki|ena|sto|e v|žen|nak|kak|i z|var|ter|žav| mo|di |gov|imi|va |kol|n s| z |mi |ovo|rod|voj| en|nar|ve | je|pos|a s|ego|vlj|jeg| st|h p|er |kat|člo|ate|a z|enj|n p|del|i o|lja|pol|čin|a n|ed |sme|jen|eni| ta|odn| ve| ni|e b|en | me|jem|kon|nan|elj|sam|da |lje|zak|ovi|šči|raz|ans|ju |bit|ic | sm|ji |nsk|v s| s |n v|tvo|ene|a k|me |vat|ora|krš|nim|sta|živ|ebn|ev |ri |eko|o k|n n|so |za |ičn|ski|e d| va|o z|aci|cij|eja|elo|dej|si |nju|vol|kih|i m|nst|kup|kov|uži|la |mor|vih| da|h i|lju|otr|med|o a|sku|rug|odo|ijo|dst|spo|tak|zna|edn|vne|ara|ršn|itv|odi|u s|čen|boš|nik|avl|akr|e o|vek|dno|oln|o o|ošč|e m|ta |vič|bi |pno|čno|mel|eme|olj|ode|rst|rem|ov |ars| bo|n d|ere|dov|ajo|kla|ice|vez|vni| ko|ose|tev|bno|užb|ava|ver|e z|ljn|mu |a b|vi |dol|ker|r s',
        ayr:
          'apa|nak|aka| ja| ma|ata|ana|aña|asi|aqe|cha|aki|ñap|jha|mar|aw |kan|ark| ch|una|aru|paw|ti |jh |pat|jaq|rka| ta|a j| ar|hat|ama|tak| wa|ach|iw |a a|ani|a m|spa|na |kap|ki |taq|pa |jan|sa | uk|qe |kis|kas|ha |ina|niw|may| kh| am|at |ati|pan|i j| ya| mu|iti|ka |ayn|t a|as |amp|ch |a u|an |pjh|yni|mun|iña|uka|ajh|ru |w k|hit|ñan|h a|is |isp|qen|khi|isi|has|ejh|e m|sis|atä|oqa|nch|rus|kam|siñ|han|mpi|kañ|qha|sin|asp| in|ham| uñ|ñat|hañ|qat| sa|yas|yat|ita|äña|ska|tap|asa|kha|sit|täñ|tha|arj|ma |a t|ta |tas|nka|sti|iri|sna| ji|a y|ara|pas| as|ñja|rjh| ku| ut|hap|tat|kat|tis|pi |apj|jam|noq|aya|i t|i u|ukh|ura| ka| ju|ans|qas|uñj|asn|a c|nin|aqa|kaj|nañ|sip|i a|us |i m|kun|w u|anc|api|ino|ili|uya|pac|tan|jil|ña |lir|utj|w j|s a|ipa|chi|kiw|w m|kak|muy|pis|rak|hac|isa|njh| lu|mas|amu|ena|nsa|w t|nan|ali|s j|ink|tay| a |upa|wak|a k|way|wa |in | ay|tañ|s m|jas|mp |lur|ank|khu|rañ|h j|t m|iru|eqa|ayt|yt |heq|che|anq|en |lan|rin|ipj|i c|mat|qpa|aqh|tja|awa|uki|k a|qej|anj|sap|pam|usk|yaq|kar|nip|llu|wal|run|yll| aj|lin|a w|ayl|n m|jac|isk|naq|ast|h u|ni |ath|a i|ayk|jhe|aqp|h k|uch|inc|hus|sar|s u|s w| pa|nap|ap | un|ak |n j|tir| ak|ns |s c|ust|arm|ask|war|ri |man|pit|qer|juc|sir|n w|hik|ika',
        bem:
          ' uk|la |uku|wa |a i|a u| mu|kwa|ali|ya |shi|a n|amb| na|sam| pa|ula|ta |nsa|fya| no|nga| ya|mbu|bu |ata| in| ku|a m|lo |se |nse| ba|ntu|kul|ons|ala|ang|ins|aku|li |wat|mo |tu |alo|a a|ngu|ili|nok|ika|na |nan|a p|ing|a k| al|mu |gu |o n|sha| ca|ila|oku|e a|ikw|yak|ka |lik| um|ana|lin|yal|ga | ci|aba|lwa|ku |ish| fy|uli|a b|u u|unt|i n| on|kal|lil|u y|ba |hi |ukw|amo|po |ulu|kan| sh|kup|ko |we |and|a c|aka|le |u n|cal|o u|ha |ile|ama|umu|bal|kus|akw|u m|mul| if|o a|kut|nsh|o b|ung|apo|e n|kub|mun|uci|yo |mbi|nka|cit|bul| ab|any| bu|pa |ne |u c|u b| ka|abu|ndu| fi|e u|a f|ton| ne|ant|no |i u|u a|ban|o i|cil|cin|ify| ng|pan|tun|gan|nda|kuc|kwe| ns|o c|ngw|o f|ans|fwa|a l|pam|tan|ti | am|kum|kuk|lan|u s| is|wil|du |nya|und| ic|e k|wal|aya|bi |bil|ubu|ush|fwi|int|nta|utu|twa|wab|afw|ela|o m|uko|ako| ta|lam|ale|gwa|win|u k|apa|ma |onk|way|kap|i k|imi|a o|upo| im|iwa|mba|o y|ngi|ici|pak|lul|ind| ma|e p|de |nde|gil|e b|iti|uti|ilw|a s|imb|da | li|uka|hiw|umo|pat|afu|kat|ine|eng|fyo|bun| af|uma|kuf|alw|til|ita|eka|afy|mas|e y|tul|but|nto|usa|kwi|mut|i i| ak| ap|bom|umw|sa |ont| wa|ilo|u f|baf|fik|ina|kab|ano|pal|ute|nab|kon|ash|bwa|ifi| bo| bw|lya|atu|ubi|bik|min|aik|cak|nak|men|ubo|ye |hil',
        emk:
          ' ka|a k|ka | la| a |la |an |kan| ma|a l|ni |ya |na |ama|a a|lu |n k| di|ɛɛ |di |a m|ma | bɛ| ja|ana|a b|aka|bɛɛ|man|iya|a d|ara|dɔ |jam|alu|en |a s| si| sa| mɔ|mɔɔ|ani| ye| dɔ| tɛ|ye |i s|i a|den| ba|riy|tɛ |sar|ɔɔ |da | al| kɛ| ni|ari|ila|a j| i |a t|n d|ɛn |ɲa |kak|ra |ada|ɛ k|i k|i d|len|u d|ele|nna|sil|n n|n m|olo| se| bo|ade|aar|ɔdɔ|ɛ d| kɔ|ɔ a|ank|ɔn | fa|fan|a ɲ|se |lak|lo | da| na|bol|kel|e k| wo|i m|aya| ke|ko | ad| mi|nu |baa| sɔ|dam|nda|ɔnɔ|mɛn| ko|a f|and|ala|ɛ y|ɔ b|ɛ s|le |ɛ m|i l|i b| wa|n s|a i| de|ina|li |ɔya|mad| mɛ|aba| le|n a| ha|a n|ɔ s|u l|nɲa|han|n b|sɔd|dɔn|kɔn|kɛ |ata|nɔ |kar|dan|in |u k|ɔ m|kɛd|ɛda|i j| su|nnu|a w|ɔ k|nka|lat| gb|ɲɔɔ|aji| an|a h|nin|olu|u m|kun|a g|on |asa| ku|ibi|jib|don| lɔ|i t|waj|bɛn|ɛnn|ban|ɔrɔ|wo |ran|si |ɛ b|ɛnɛ|ɛ l|mak|suu|e m|ii |i f| ɲi|e a|o m|ɲin|enn|usu|ba |ɛdɛ|yan|taa|nan|u b|u t| ɲa|nal|nba|ɲɛ | ɲɔ|law|ati|nad|rɔy|hɔr|a y|iri|sii| hɔ|mir|ti |enɲ|bɔ |u s|n t|u y|ini| te|ta |kol|enb|awa|bat| fu|nki|kil|ili| du|bar|ɛ j|fɛn|fɛ | do| dɛ|gbɛ|su |uus|aam| ta|afɛ|may|lɔ |nni|ɔnn|lɔn|maf|o a|e d| bɔ|din|sab| fɛ|ɔ j|o y|i w|tan|ɔɔy|dɛɛ|bɛd|kad|min|ɔlu|dal|ɔɔl| tɔ|ɔɔn|e f|biy|ali|e b|kɔd|te |wol|bi |e w| mu|ida|du |ant|nɛn|dɛ |ɛ a|dah',
        bci:
          'an |be | be| ɔ |un | i |ran|sra|wla| sr|kwl|in |la | kɛ|n b|kɛ |n s|n k| kw| ng|n n|lɛ |a b|n m|le | nu|a k|nun|i s| a |man|n i|ɛn |e k|ɛ n|kun|n ɔ|mun| ni| ti| mu|nin|nga|ti | n |ɛ ɔ|e n|ɔ n| su|ga |ɔ f| fa| ku| li|e s|su |a n|a s|a ɔ|ɛ b|i n|e a| sɔ|wa |sɔ |i k| ma| le|ɛ i|tin|ɔ k|di | at|ata|ta |ɔ l|fat| mɔ|ati|mɔ |lik|akw|ɛ m| sɛ|lak|e w| sa|dɛ |ndɛ|mɛn|i b| mm| yo|iɛ |ba | nd|nvl| nv| kl|vle|sɛ |a a| mɛ| fi|ke |und| wu|ɛ s|n a|mml|liɛ|mla| ka|ike|yo |ɔ t|ngb|i a|e b|a m| an|ɔ ɔ| di| yɛ| si| bo|e t|ndi|bo | ye|o n|n t|e m|fin|e y|n f|sa |ɔ b| fɔ|dan|n y|fa |i i|uma|yɛ | ju| ny|ɔ i|nan| na|kan|ɔun| tr|wun| b | o |n l| aw|a y|b a| wa|fɔu|i f|ɛ a|ing|ge |uɛ |i w|a w|nge|klu|ka |gba|e i|awa|o m|jum|ɔ y|ɛ k|wie|a i|ie | fl|e f| wl|tra| ba|lo |lun| ak|ang|ye | wi|e l| kp|uan|i m| uf|uwa|n w|sie|flɛ|kpa|alɛ|luw|flu|o i|kle|ua | da|nyi|nzɛ|wuk|ɔ s|wo |e ɔ|ika| wo|wan|bɔ |ian| bl|wlɛ| bu|anz|o ɔ| af|aci|u b|bu | ya|ɛ w|ufl|bɔb|te |zɛ |ɔ d|a t|elɛ|i t|ci |nua|fuɛ|ɔbɔ|u i|anm|i l| w |w a| bɔ|o b|lu |se |u m|ilɛ|iɛn| ja|a j|afi|i ɔ|n u| se|unm|nda|yek|bɛn|gbɛ|eku|ɛ l|nma|kac|u s|san|ko |o y|o s|a l|u n|si |anu|aka|any|ɛ d| ko|n j|ɔ w|u a|fi | yi|anw|i j|uka|fiɛ|a d|o a|lel| kɔ|ɔlɛ|ɔn |a f',
        bum:
          'e a|an |od | mo|e n|ne |am |mod|se |e m| me| ab|ai | ai|na | os|e e| na|a a| ak| ng| an|ose|a n| y | en|nna|y a| nn|le |nam| dz| be|a m|d o|nde|i a|iñ |n a|ane|i n| a |de |ie |ele|end| as|e d|nyi|bel|abe| ya|ven|a b|li | bo|mve|ki |asu|ya | et| ay|ge |da |su |be | bi|ngu|bia|i m| e |m a|ia | mi|ul |yiñ|gul|ene|eny| ki|oe |bod| mb|ili|dzi|e b|yia|ian|ebe|i e|en |l y|ala|og | mv|e y|oñ |ege|nge|ñ a|om |ayi|la |dzo|mem|ve |a e| nd|bog|eti|ñ m|d m| ma| fi|fil|nda| ek|tob|bo |e k|emv| at| te|n e|ñ n|o a|min| ny|m e|e v|ban|fe |abo|woe|u m|uan| to|g a|ga | fe| wo|e f|ben| nt|mbo|abi| se| si|nga| da|lug| ve|oan|beb|d b|k m| ad|ulu|lu |aye|zie|d a|añ |a f|ial|akō|kōk|n m|ato|ōk |eku|a s|ñ b| al|di |zen|o e|n k|tie|zia|n b| ba|men|te | nk|m y| vo|ese|si |e t|man|do |óñ |u e|o m|e o|ma |ad |sie|eñ |noñ|lad|ela|ae |kua|gan|aka|i b|obo|alu|ug |m m| eb|me |e s|em | ze|ond|ama|sog| no|teg| ey|u a| es|yóñ|edz| mf|m w| fu|oba|ako|eyó|e z| di|m o|ye |ali|to |vom| el|ñ d|bi |mis|n n|n y|kom|dze|inn|i d|tso|is | so|ñ e|l a|m n|boa| fa|fam| zi|zo |ii |ing|dza|ndo|sal|mam|s m|ui |d e|any|ndi|kal| ye|s a|esa|nts|eyo|oga|ses|mey|ete|ziñ|ol |uma|i s|ake| ev|u n|voe|yoñ|a o|zom|m s|yae| ob|bon|kam|ó m|kya',
        epo:
          'aj | la|la |kaj| ka|oj | de|on |de |raj| ra|iu |ajt|as |o k| ĉi|e l|j k| li| pr|eco|aŭ |ĉiu|jn |ia |jto|est| es| al|an | ki|pro|io | ko|en |n k|kon| ti|co |j p|o d| po|ibe| aŭ|ro |tas|lib|ber|aci|toj| en|a p| ne|cio|ere|ta | in|to |do |o e|j l|n a|j d| se|a k|j r|ala|j e|taj| re|rec|iuj|kiu| pe|o a|ita|ajn|ado|n d|sta|nac|a a|nta|lia|ekt|eni|iaj|ter|uj |per|ton|int| si|cia| ha|stu|a l|je | je|al |o ĉ|n p|jta|tu | ri|vas|sen|hav|hom| di| ho|nte|a e|ali|ent| so|nec|tra|a s|ava|por|a r| na|igi|tiu|sia|o p|n l|ega|or | aj|soc|j ĉ|s l|oci|no | pl|j n|kto|evi|s r|j s|ojn|laj|u a|re | eg|j a|gal|ers|ke |pre|igo|er |lan|n j|pri| ku|era|ian|rim| fa|e s| ju|e a|ika|ata|ntr|el |is |u h|li |ioj|don|ont|tat|ons| el| su|go |un | ke|ebl|bla|n s|oma|ĉi |raŭ|kla|u r|ne |ili|iĝo|o t|s e|tek|men|nen|j i|nda|con|a d|ena|cev|moj|ice|ric|ple|son|art|a h|o r|res| un|u s|coj|e p|ĝi |for|ato|ren|ara|ame|tan| pu|ote|rot| ma|vi |j f|len|dis|ive|ant|n r| vi|ami|iĝi|sti|ĝo |r l|n ĉ|u l| ag|erv|u e|unu|gno| ce| me|niu|iel|duk|ern| ŝt|laŭ|o n|lab|olo|abo|tio|bor|ŝta|imi| ed|lo |kun|edu|kom|dev|enc|ndo|lig|e e|a f|tig|i e| kr| pa|na |n i|kad|and|e d|mal|ono|dek|pol|oro|eri|edo|e k|rso|ti |rac|ion|loj|j h|pli|j m',
        pam:
          'ng |ing|ang| ka|an | pa|g k| at|ala|g p|at |apa| ma|kar|lan| ki|ata|kin|pam|g m|ara|tan|pan|yan| a |pat| in| ba|aya|n a|g a|ung|rap|ama|man|g b| ni| di|nin|din|n k|a a|tin|rin|a k|ami| la|tun|n i|ari|asa|nga|iya|ban|ati| me|nan| da| sa| na|t k|gan|g s|bal|etu|mag|a i|met|sa |la |ant|kal| iy|kap|a n| mi|in |ya |aka|tau| o |san|n d|au |lay|ana|mak|yun|na |ika|a m|ipa|ran|atu| al|n n| ta|ti |ila|g l|ali|kay|nsa|aga|a p|iti|g t|par|u m|ans|nu |al |g i|t p|iwa|a d|syu|t m|sab|anu|un |uli|mip|ra |aki|aba|u a|mal|as |mil| it|una|bla|abl|ita|awa|kat|t a|ili|kas|g n|lag|da |tas|i a|wa |n l|lal|dap|mas|bat| pr|abi|ap |a b| e |mik|ani|sal|li |ad | an|ral|ira|gal|a r|lin|g d|nte| li|ale|kab|e p|ula|wal|lit|nti|s a|lip|nta|pro|te |ie |wan|ag |tu |upa| ya|g e|tek|usa|g g|bie|o p|it |pun|ian| bi|lat|aku|be |n p|sas|iba|yat|alu|tul|e m|kan|l a|nap|t i|lir|u k|isa|pag|abe|len|e k|rot|en |bil|mam|ksy|ngg|lam|p a|ily|liw|eks|ote|n o|gga|u i|eng|ipu| tu|lya| ri|aul|pas|dan|uri|ema|lab|ta |lak|are| ar|ail|tam|o a| ke|ril| pe|sar| ra|ina|asi|ka |art|pak|sak|mit|rel|i k|gaw| ul| re|inu|i i|mun|abu|asy|mba| pi|ags|obr|gpa|a o|am |n m|mem|o k|isi| mu| nu|mis|nun|era|ndi|ga |agp|aun|mab|anm|lub|gla|e a|nme',
        tiv:
          'an | u | sh| na|nan|en | a |ha |sha|shi| i |er |a i| er|or | ma|ar |gh |n i|n u|a m| ve| ci|n s|han|u n| ke|lu |man| lu|n m|yô |a u|u a|n a|r n|a k|mba|in |ii | ha|kwa|ken|n k|na |hin| mb|a a| kw|n n| ga|ga |cii|agh|a n|aa |wag|ve |a s| yô|nge|ba |r u|u i| gb|ana| or|a t|mao|r i|ity|ma |aor|anm|nma|gen|oo | ta|ir |ren| kp|i n|ang|r m|e u|gba| ng|r s| ia|ere|ugh| it|ian|doo|ese|uma|kpa| la|u k|n g|ngu|gu |om |oug|on |ol |a h|ior| ts| he| ne|tar|h u| ka|la |n t|se |e n|r a|a v|hen| ku|aha|mac|yol|i u|ace|ge |ce | de|ish|u t| io| do|tom|hi |a e|u u|o u|i m|iyo|i d|bar|ave|ua |u s| te|igh|a l|e a|m u|a w|un |n c|n e|ne |ev |r k|ind|ene|sen| is|ndi|ker|era| to|a o|ima|u v|a g|paa|n h| wo|di |yar|tya|ase|e s|de |n y|ee |end|him|tes| mk|u m|ka |tyô| mz|won|u e| um|u h| wa| mi|yan|tin|ran|ie |hie|a c|hir|i a|e k|i v|mak| in| za|r c|nen|e l| ig|i k|kur|nah|tse| ik|ves|eng|rum|mzo|men|zou|i l|e i|a d|i e|i i| ya| vo|mlu|ô i|inj|nja| as|vou|ura|ron|gbe| iy|r t|ôro|a y|oru|e e| zu| ti|ra |n l|ci |u l|ver|kpe| fa|was| ml|e m|em |io |mi |da |civ|môm|ant|see|ivi|wan|vir|nda| ij|soo|zua|lun|ea |vea|wa |ôm |av |hio|ake|a f|igb|l i|u z|r l|zan|nta|e g|hem|h s| mt|ded|iky|o s|r g|do |ndo|iji| hi|e h',
        tpi:
          'ng |ong|lon| lo|im | ol| na|la | ma|pel|ela|ri |at | bi|ait|na | yu|ol |gat| ra|bil| ka|ilo|man|rai|t l|it |eri|mer| o |wan| i |mi |umi| wa|ing|yum|ta |t r|tin|eta|get|lge|olg|iga| ig| sa|ara|em |rap|i o|ap |nme|anm|in |ain|an |a m|ant|ape|nar|m o|i n| no|g o|g k|i i|as |ini|mas| me|n o|sim|tri|kan|kai|ntr| ga| st|a s| pa|gut| ha| wo|g y|yu |a l|g s|ama|m n|ok |g w|wok|spe|a k|i b|i m|g l|i l|sin|sam|pim|m l|kam| gu|l n|amt|tpe|g n| in|ts |a i|mti|utp|isp|kim|its| la|isi|aim|api|lo |o m|g b|tai| di|a o|dis|a t|p l|en |map|t w|s b| lu|luk|sem|no |tim|lai| ko| ki|ave|ols|nog|m k|lse|sav|nem|ve |a p| fr| em|nim|tu |i y|nka|et |m y| ti|g t|nap|g p|sta|tap|aun|a n| tu|un |asi|fri|pas|n m|m g|l i|aut|ane| sk|kau|t n|nta|sen|n s|oga|i g|g g|m i|kis|o i| ba|tok|os |usi|m s|ngt|anp|a w|s n|a h|s i|iki|i s|sai|l m|npe|ari|o l|o b|g r|ik |uti|iti|gti|aik|ut | to|a g|ili|a y| pi| ta|kin|ni |n b|lim| ye|yet| we|k b|ina|g m|uka|str|ins|rid|a b|anw|nsa|nwa|m w|m m|dom|ot |hap|ido|aus|i w| ne| si|n i|t o|dau|ese|rau|ank|sap|o k|m b|nin|pos|o n|am |go |s o|s l|u y|pik|vim|ivi|es | go|n n|kot|ron|ple|g d|a r|kul|ali|sku|apo|om |g h|l l|s s|ti |les|t m|gav|eki|nai|mek|kom| as|ind|nda|ip |liv|ul |ati',
        ven:
          'na | na| vh|a m| mu|ha | u |wa |tsh|a n|a u|we |hu | ts|vha|nga| ya|ya |a v|lo |vhu|ṅwe| dz|thu|ane|ho |ana|o y| kh|shi|a t|ga | pf|e n| zw|elo|uṅw|sha|muṅ|nel|a p|ne |fan| ng|pfa|uth|a k|edz|kha|u n|dza|ele| a |mut|aho|zwa|a h| ha| ka|kan|o n|a z| hu| mb|dzi|la |vho|wo |za |zwi|ang|i n|fho|han|hum|u v|lwa|ela|a d|e u|u m|o d|u t|mul|olo|aka|ḓo | wa|o v|hol|e a|ofh|u s|no |si |gan|mbo|hi |ano|he |zo |shu|o k|ula|hak|low|zi |ka |led|lel| ḓo| ma| sh|bof| i |o m|hat|e k|dzw|yo |o t|o h|ngo|owo|elw|tsi|rel|ath|o i|a s|hon|its|sa |dzo| te|awe| mi| nd|go |a i|mba|avh|umb|isa|wi |hil|iṅw|ing|nah|unz|ni |and|i h|ine|a l|mis|e v| lu|i k|e m|swa|ṱhe| ḽa|li |mbu|i t|a y|vel|a ḓ|one|dzh| ḓi|ush|evh| fh|lan|hut|uts|alo| si|oṱh|het| an|amb| it|sir|ire|vhe|u k|nḓa|ea |mo |eth|tea|ḓa |u a|wan| bv|o a|ila|nda|ri | sa|o ḽ|i m|hus|zan|ndu|fha|uri|ou |ḽa |ivh|umi|ulo|adz|a a| ur|wah|fun|khe|a ṱ|isw|le |i v|ayo|she|e y|kon|hen|hul|o u|o w|ule|zit|anḓ|thi| ny|hun|hel|ung|i ḓ|uvh|a f|u d|bve|kat|hal|hav|ura|u w|nyi|pfu|lay| ho|iwa|tel|u h| ṱh|oni| o | ko|mbe|mus|hin|alu| th|san|u ḓ|zwo|huk| fa|u i| ṱa|zhi|du |o z|hit|udz| yo|usi|a w| ḽi|pha|lev|mir|eli|i i|u ṱ| iṅ|hoṱ|win|hed|so |ira|hir|ṱho|mur|ala| li',
        ssw:
          'nge|eku|a n|ntf| le|e n| ng|tfu|lo |la |nga| ku|fu | ne|o l|khe|tsi|nkh|le |he |unt|elo| lo|si |ele|a l|ni |ung|mun|ma |lun|lel|wa |lek|nom| um|eni|oma| no|kut|hla|onk|a k|e l|ent|e k|gel|ela|ko |eli| ba| la|pha|ats| em|o n|ang|ema|eti|nel|nye|ban|ulu|uts|hul| na|aka|tfo|e u|lan|oku|lok|won|khu|esi|lul|a e|ule|ala|umu|tse|akh|ye |ve |i l|nek|ana|ane|lil|kwe|aph|na |we |ke |aba| wo|nti|ndl|ale|i n| ye|ba |ilu|gek|gan|lab|any|hat| li|tin|wen|gen|kel|len|ndz|fo |and|let|eko|e b|lwa| ka|te |set|nem| kw|mal|ka |ant|alu|ne |phi|ing| un|u u| ek|ise|une|e e|kul|nal|lal|mph|o y|uhl|fan|‐ke|ile|i k|kub|ukh|ben|kan|ako|a b|kat|eke|ive| ti|sek|nak|sit|seb|u l|alo|yel|kho|wo |kha|les|o e|ngu|kus|lom|ini|ikh|elw|isa|sa |fun|e w|ebe|o k|jen|iph|eng|kwa|ahl|uph|emb|be |tis|lwe| si|etf|isw|uma| se|ene|ta |nan| im|i e|enk|e a|abe|kun|ume|hak|nen|dle|ase|sen|kuv|tel|ebu|omu| in|lin|sel|tfw|nhl|a i|e i|kuk|uba|ti |kuf|mhl|bon|ula|sin|int|fut|dza|lak| wa|ind|ave|ali|yen|ete|to |ngo|use|kuh|hol|ze |a‐k|ona|a a|se |nje|und|swa|lon|eki|ike|i a|lis|tsa|gab|sim|i w|its|fol|e t|o m|hi |ndv|phe| ya|ma‐|utf|sik|liv|bun|cal|nta|ata|gal|mel|ute|wem|gap|han|uny|oba|alw|ili|a w|mbi| bu|gob| at|awo|ekw|dze|u n|emp',
        nyn:
          'omu| om|ntu|tu | ku|a o|ra | ob|wa |obu|ari|a k|mun|a n|unt|mu |uri|nga| mu|aba|ri |a e| na|e o|gye|rik|ho |a a|han|ang|re |ga |iri|bwa|oku|aha|bur| bu|na |eki|ka |iku|ire|uga|ndi|ush|ban|ain|ere|ira|we |kur|sho| ek| ab|ne |ine|a b|and| ni|u a|e k|sa |u b|iha|i m|e n|kir|be |aho|bug|ibw| eb| ba|ing|ura|gir|u n|kut|ung|ant|abe| ah|ye |e b|i n| bw|kwe|ebi|era|iki|ba |ro | kw| ok|uba|gab| no|zi |bir|i k|u o|o o|rwa|o e|kub|end|ama|mer|eka|kug|ate|tee|di |rir|bus|kuk|rin|ish|sha|i b|wah|ha |u m|bwe|ngi| ai|ara|kwa|kan|o g|za |ngo|kuh|ana|i a|eme|eek|i o|baa| ka|go | gw|nib|zib|ash| or|iro|she|o k|u k|iin|o b|iba|oon|gan|agi|ngy|hem|mwe|ona|oro|bwo| ar|ya |i e|uru|nar|eir|uta|tar|kwi| ti|egy| n |hi |bar|isa|ute|o a|shi|ora|e e| en| ki| nk|riz|nda|da |ja |si |nsi|wen|yes|tek|yen|aga| am|o n|rei|rag|ki |obw|mur| ha|ris|wee|amb|aab|bya|kus|ugi|a y|ind|ata| ne|bas| ky|ija|hob|ikw|mus|gar|a g|eky|dii|bor|aar|ibi| we|aka|ham|emi|ekw|rer|ini|har|gi | bi|naa|kor| er|gwa|n o|iza| by|eih|yam|iho|rih|i y|ete|o m|eby|but|a r|ika|mag|ozi| em|ong|iik|iko|uka|nik| yo|sib|eri|utu|tuu|amu|uko|irw|nka|ani|yaa|u e|mut|roz|mub|ens|aij|nis|uku|kye|nde|der|e a|nok|nko|asa|aas|hab|obo|ent|ahu|rye|oba|kih|yob',
        yao:
          'chi|ndu| wa|du | ch|a m|aku|akw|ni |kwe|und| mu|wak|wan|mun| ku|la |e m|wa |ulu|amb| ak|kut|u w|ali|mbo|lu |we | ma|le |ufu|ful|ila|a k|bo |a n| ga| ni|amu|kwa|se | na|ose|hil|nga|go |aka|and|ang|na | uf| pa|ete|uti|jwa|kul| jw|son|ngo|lam|e u|ne |kam|oni| so|u j|e a|ele|a c|ana|wal|ti |isy|cha| yi|gan|te |ya |mwa|lij|wet|che|ga |yak|ili|pa |e n| ya|o s|nda|i m|ula|jos|i a|ile|ijo|li |e k|o c|a u| mw|ich|mul|uch|o m|asa|ala|kas| ka|i w|ela|u a|ach|his|nam|lan|yin|i k|ind|ani|sye|yo |si |pe |gal|iwa|man|sya|aga|a w|o a|ule|ikw|asi|kus|ope|ma |gak|e w|jil|kap|hak|ika|ite|aji|mba|u g|ase|mbi|kum|uli|any|ape|a y|ekw|mal|imb|ja | al|end| ng| ja|mas|usi|kup|e c|pen|ye |anj|ka |a j|a p|lem|o n|ama|him|ago|sen|eng|ane|ako|mch|ola|och|oso|ena| kw|sop|lek|pel|gwa|hel|ine|gam|u y| mc|i y|awo|ons| mp|ole| li|wo |i u|hik|kol|auf|mka|tam|syo|e y|mpe|ten|ati|mau|nji|wam|muc|ong|i g|kan|uma|je |iku|nag|kwi|da | ul|cho|ngw|ene|iga|ano|esy|ion|upi|pag|o k|eka|wu |uwa|kuw|sa | un|a l|bom|iya|uni|jo |ale| ji|apa|yil|lil|uku|i n|o g|a a|o w|waj|mus|ipa|pan|pak|one|i c|ujo|duj|emw|nya|tio|jak|oma|nja|hiw|dan|apo|e j|poc| wo|lic|alo|eje|ing| mi|e p|lo |lig|a s| yo|ung|no | m |upa|ata| bo|nde|he |i j|was',
        lav:
          'as |ība| un|un |tie|ies|bas|ai | ti|esī|sīb|ien| vi|bu | ir|vie|ir |ību| va|iem|em | pa| ne|s u|am |m i|šan|u u|pie|r t| ci| sa|ās |vai| uz| ka| pi| iz|brī|rīv| br|dzī|cij|ena|uz |ar | ar|es |s p|isk|nam| ap| at|ot |āci|inā|viņ|kvi|ikv| ik|vis|i i| no|s v|pār| ie|ju |u a|nu |edr| pr|vīb|īvī|drī|iju|dar|ilv| st|cil|lvē|iņa|s i|s t| la|ana|u p|i a|kā |n i|īdz|s s|tīb|ija|vēk|jas|cie|ka |aiz|īgu|tu |gu |iec|ām |arb|ied|ībā|s b|val|bai|līd|īgi|s n| jā|umu|zīb|t p|u v|lst|als|ska|kum|mu |a p|st |vēr|n p|gi |s l|aut|jot| tā|ama|arī|n v|stā| ai|izs|kas|anu|sta|u n| da| ta|s a|u k|ojo|ba |ņa |nīg|ā v|jum|stī|sav|m u|u i| kā|s d|not|u t| so|iev|a u|cīb|son|ā a|mat|i u|līb|u d|a s|nāt|nīb|nāc|i n|s k|ajā|rīk|rdz| dz|ned|kat|pil| pe|per|ēro|kst|i v|īks|cit|līt|pam|ekl|os | re|tau| li|evi|evē|i p|jā |ma |u s|t v|bā |kur|rīb|ras|bie| pā|a a|tis|a v| be|jeb|ciā|skā|oci| ve|soc|roš|abi|rso|būt|bez|zsa|ers|āda|t s|atr|t k|ieš| je|sar|nev|ais|oša|īša|nas|kād|enā|n b|uma|a t| lī|eci|lik|iku|ebk|mie|nod|roj|īga|ts |ēt |arp|tar|iet|aul|du |sab| de|tīt|iāl|ard|āt |tās|glī|zgl|ant|izg|tik|ta |isp|r j|spā|na |paš|tra|tot|pre|ret|ecī|eja|lie|ā u| ku|īst|ikt|ier|kt |eno|ēka|dro|oši|t t|klā|i k|rie|tā |arā',
        quz:
          'una|an | ka|nan|cha|ana|as |apa|pas|man|lla|aq |sqa|ta | ru|run|kun|ach|qa | ll|pa |paq|na |nta|chi|npa| ma|nch|aku|anp| ch|in |a r|ant|hay|mi |taq|ay |ama|asq|qan|tin|kuy|chu|lap|a k|yta|a a|ima|wan|ata|spa|all| wa|n k| ja|ipa| ya|nin|ina|aqm|his|qmi|a m| ju|pi |anc|nap|iku|aus|usa|kau|pan|nak|kan| mu|naq|aqt| pa|kam|aqa|kay|i k|kus|un |ank|isq|nku|may|yku|ayn|a j|a l|ayt|qta|ati|a p| pi| ri|aci|lli|lin|ayk|uku| al| at|n r|yac|ion|pip|han|inc|n j|ayp|yni|qpa|nac|say|asp|uy |mac|s m|cio|awa|a c|laq|tap| yu| im|a y|yoq|n m|asi|mun| de|has|n a| as|n c|int|uch|nma|s k|oq |ari|q k|hu | na|ypa| tu|tuk|tun|atu|rim|q r| sa|jat|yan| ji|nat|anm|jin|a s|api|hik|uya|nti|pac|tan|ash|mas|n p|n l|k a|ura| su|a q|yuy|n y|ech|q j|unt|yay|ypi|is |lan| qa|usp|kas| an|a w|s w|inp|sin| ta|ma |a t|shw|q a|hwa|uyt|nmi|sim|ere|rec|der|uma|s t|isp|n t|ña | ni| ay|upa|nam|hur|war|waw|imi|nka|sap|kaq|s j|was|y r|usq|kin| un|inm|qas| si|ani|tiy|t a|sta|pay|pis|maq|hin|ha |arm|npi|rmi|ink|aqp|q c|la |i p|nis|yma|nk | ku|aym|nal|hak|rik| ti|unc|niy|y s|iyo|juc| qh|ist|pap| aj|s y|cho|onq| re|ayo|iqp|n s|s p|os |i m|t i|ras|ita|piq|qsi|ku |yqa|mik|q y|eqs|pat|tak| pu|lak|i r|ipi|iya|ywa|muc|a n| qe|san|jun|y l',
        src:
          ' de|de |e s|os | sa|tzi|tu | su|one| a |sa |ne | e | in|ent|ion|der|su |zio|ere|as |e d|a s|u d|ret|es | cu|ess| pr| so|s d|men|ale|ade|atz| s |re |e c|sos|in |s i|chi| un|nte|ten|etu|er | pe|et |e e|ida| te|le | is| ch|ene|are| es|a p| si|u s|a d|pro|hi |dad|te |sse|tad|zi |e t| on|e i|s e|nt |nzi|u a|sso|onz| co|ame|cun|tos|e a|sas|a c|ntu|net|na |e p|at |nes|du | li|t d|n s|son|s a| o |ber|ro |pes|u e|int|zia|nat|i p|ia |res|nu |un | re|sta|s p|ter|era| po| di|per|s c|t s|rar|ser| at|e o|s s|ibe|lib|si |tra|ust|u c|rta|unu|cus|ntz|adu| to|da |nal| na|ant|egu|eto|und|ine|i s|a e|otu|u p|t a|ert|est| da|a a| fa|ist|ona|pod|s o|pre|iss|ra | ma|ica|tot|les|ntr|una|sua|con|dae|ae |s n|man|sia|ndi|nid|ada|a l|nta|o s|a i|ua |ide| ne|otz|min|rat|iat| pa|nde|ode|dis|ren|ali|a u|ta |u o|sot|u t|ime|ssi| as|o a|pet|e u|nsi|fun|lid|epe|eru|unt|st |t e|end|us | fu| ca|ner|dos|s f|ass|nda|uni|das|iu |ind|a t|ial|a f|ghe|gua| eg|a n| se|ont|etz|s m|s ò|sti|t p|ual|nen| me|sen|com|ura|a b|lic|a o|pen|ado|nos|inn|des|seg|e f|din|òmi|ire|a m| òm|e l|dep|ènt|for|ena|par| tr|u i|ara|cra|sid| no|s u|u r|suo|e n|pri|ina| fi|ria|gur|art|det|s t| bo|tar|emo|run|ama|icu|isp|dam|e r|itu|cum|tut|eli| bi',
        rup:
          ' sh|ri | a |shi|hi |i s|ti |ea |ari|i a| ca|rea|tsi|i c| s |a a|ndr|tu |câ |dre|i n|ept|ptu|rep|li | nd| di| un|a s|are|i u|ats|la | la|i l|ear| li|lje|di |ati|lui|ui |a l| tu|tat|â s|ei |sea| ti| câ|un |jei|or |caf|afi| lu|â t| ar|ali|i t|fi |ilj|a c|bâ |râ |car|ibâ|lor| cu|nâ |icâ|a n|i d|s h|hib|tâ | hi|â a|si |u c|eas|tur|tul|ber|â c| in| co|lib|u a|n a|cu |ibe|u s|tea|lu |tsâ|ul |tse|int|a p|i i| pr|u p|i p|url|i m|lji|min|sti|alâ| al| pi|sht|nal|â n| si|ji |â p|rar|ert|sii|ii |nat|til|u l|sâ |lâ |â l|sta| nu| ic|i f|nu |ist|mlu|ili|a t|ots|uni|rta|a d|its|â d|pri| ts|oml|i e| de| na|sia| po|gur|tut| st| at| ân|ura|al |ita|anâ| ma|ips|can|oat|tsl| su| as| so|ând|nts| ap| ea|sh |nit| mi|ent|a i|ate| ac|poa|ilo|sot|ina|ash|ona| lj|âts|rli|lip|â i|unâ|t c|iti|bli| u |nji| fa|zea|tât|ril| om|urâ|con|i b|sig|igu|ntr|pur|par|ntu|let|com|iil| ni|eal|ind|r s|hti|at |ucr|art|adz|arâ|itâ|rtâ|inj|uri| eg| sc|atâ|sin|ral|pse|asi| ba|r a|apu|âlj|ia |chi| va|sun|ter|rlo|ica| pu|luc|unt|i v|ise|ini|est|ast|gal|ega|act|nda|ead|uts|a u|imi|ma |ra |pis|s l|ets|a o|va |pi |lit|scâ|asc|ial|sa | ta|rim|tar|alt|idi|tlu| gh|era|ant|eri|aes|a m| nâ| ae|oar|nea|pro|apt|ana|ta |atl|lic|l s|iun|nte|mil',
        sco:
          ' th|the|he |nd | an|and| o |al | in|ae |in |es |ion|cht| ta|tio|or |t t|ric| ri|ich|tae|on |s a|is |e a| aw| be|s t| he|ati|ent|ht |ts |e r| co|er | na| fr|bod|ody|his|dy |hes| fo|e t|o t|for|it |ng |ty |n t| or|be |fre|ree| hi|l a|ing|awb|wbo| sh|s o|ter| on|sha|nat|r t|nal|an |n a| as|hal|e o|y a|d t|tit| pe|l b| re|y h|aw | ma|nt |men|air|ce | pr| a | ti|hts|e f|e c|le |eed|edo|dom|n o|e s|ons|d a|res|e w|man| wi|d f|ed |sta|ar |t o|ona| it|ity|at |as |her|ers|t i| de|con|til|il | st|nti|e p|e i|e g|nce|ny | so| di|nte|ony|ns |und|ith|thi| fu|ie |ir |oun|ont|e e| un|pro|oci|nae|y i|lit|soc|com|nin|en |ic |ne |r a| me|ly | wa|ear|ual| en|ame|uni|r i|e h|hum| is|ane|uma|ess|inc| fa|equ| hu|ver| eq|e m|hei|o h|ms |d o| ha|wi |t n|s f| no|t a|int|cla|rit|qua|d i|iti| se|rsa|y s|ial| le| te|e d|r o|ive|r h| la|nit|om |ite|s r|cie|s i|ali|cti|cia|re |aim|rat|ld |tat|hat|rt |per|s h|n f|dis|tha| pu| we|g a|oms|eil|ntr|fai|tri|ist|ild|e u|r s|dec|lea|e b|hau|imi|mai|s n| ac|elt|lt |l t|omm|d p| ga|din|war|law|eme|y t|era|eir|art|ds |s e|ral|nor|tel|ge |g o|eik|eli|rie|rou|nda| gr|lan|mei|ate| ge|n i|ten|id |s d|ors|iou|bei|sam|nta|sec|mmo|lar| tr|ful|ul |mon|s w|anc|l o|gar|ern|ara|d s',
        tso:
          ' ku|ku |ni |a k|hi | ni|a n| a |i k|ka |i n|wa | ya| ma|la |ya |na |a m| ti| hi|fan| sv|nel|hu |a t|ane|ela| ka|iwa|u n| na|svi|lo |nhu|a l|a h|ele|le |ndz|u k|va | xi|a w|vi |mbe| à |elo|wu | wu|eli| mu|u y|mun|i l| le|nga|umb|lan|nfa| va|u l|be |u h|li |kum|tik|ihi|iku|aka|unh| wa|a s|liw|isa|i m| fa|ma |anu|nu |u t|han| la| ng| wi|wih| ha|a x|yel|a a|lel| nf|i h|ta |ana|o y|e k| nt|u a|i a|eni| li|ndl|ga |any| ko| kh|van|u w|u v|amb|a y|ti |sa |pfu|i t|i w|in |lek|e y|ang|and|ati|yi | è |irh|sva|mat|ani|i s| nd|a v|mel|yen|hla|isi|hin| ye|eke|n k| lo|ulu|kwe|hul|thl| kw|nth|tin|mah|wan|ava| mi|ko |khu|u s|à n|dle|lul|ule|tir|o l|i y|aha|aye|kwa|inf|à k|è k|rhu|mba| th|fum|end|anh|xi |dzi|kel|a f|u f| lè|we |may|eka|nye|gan|dze|vu |ham|xim|mis|thx|aku|tà |xa |hlo| tà|eyi|ima|nti|eki|ngo| si|u p|vak|ngu|lak|ume|oko|lon|a è|o n|lok| ta|zis|hak|u m|i à|ke |i x|u x|rhi|ha |awu|dza|u à|za | là|n w|ung|e n|a à|i f|esv|les|vik|siw| y |à m|to |mha|ola|sav|ond|nya|kot|kol|uma|e h|mbi|e s|naw|ths| dj|fun|mu |a u|xiw| ts| hl|u d| lw|nyi|ki |ong|sun|lwe|ike|ind|nis|xih|e a|èli|imu|sel|sek|iph|zen|lum| pf| xa|sin|umu|sim|ave|kar|ala|wey|sik|o t|avu|wav|oni|ile|wak| yi|ali| hà|gul|e l|ba |i v',
        rmy:
          ' sh|ri | a |shi|hi |i s|ti |ea |ari|i a| ca|rea|tsi|i c| s |a a|ndr|tu |câ |dre|i n|ept|ptu|rep|li | nd| di| un|a s|are|i u|ats|la | la|i l|ear| li|lje|di |ati|lui|ui |a l| tu|tat|â s|ei |sea| ti| câ|un |jei|or |caf|afi| lu|â t| ar|ali|i t|fi |ilj|a c|bâ |râ |car|ibâ|lor| cu|nâ |icâ|a n|i d|s h|hib|tâ | hi|â a|si |u c|eas|tur|tul|ber|â c| in| co|lib|u a|n a|cu |ibe|u s|tea|lu |tsâ|ul |tse|int|a p|i i| pr|u p|i p|url|i m|lji|min|sti|alâ| al| pi|sht|nal|â n| si|ji |â p|rar|ert|sii|ii |nat|til|u l|sâ |lâ |â l|sta| nu| ic|i f|nu |ist|mlu|ili|a t|ots|uni|rta|a d|its|â d|pri| ts|oml|i e| de| na|sia| po|gur|tut| st| at| ân|ura|al |ita|anâ| ma|ips|can|oat|tsl| su| as| so|ând|nts| ap| ea|sh |nit| mi|ent|a i|ate| ac|poa|ilo|sot|ina|ash|ona| lj|âts|rli|lip|â i|unâ|t c|iti|bli| u |nji| fa|zea|tât|ril| om|urâ|con|i b|sig|igu|ntr|pur|par|ntu|let|com|iil| ni|eal|ind|r s|hti|at |ucr|art|adz|arâ|itâ|rtâ|inj|uri| eg| sc|atâ|sin|ral|pse|asi| ba|r a|apu|âlj|ia |chi| va|sun|ter|rlo|ica| pu|luc|unt|i v|ise|ini|est|ast|gal|ega|act|nda|ead|uts|a u|imi|ma |ra |pis|s l|ets|a o|va |pi |lit|scâ|asc|ial|sa | ta|rim|tar|alt|idi|tlu| gh|era|ant|eri|aes|a m| nâ| ae|oar|nea|pro|apt|ana|ta |atl|lic|l s|iun|nte|mil',
        men:
          ' ng|a n|i n|ɔɔ |ti | ti|i l| i | ma| nu| gb|ngi|a k|aa |gi | kɔ|ia |ɛɛ |ei | na| a |ma |hu | ye| ta|kɔɔ|a t|na | hu|a m| kɛ| nd|gbi|ya |bi |i y| lɔ|a h|ɛ n|ii |ɔny|u g|i h|nya|uu |lɔn| kp|i m|ngɔ|nga|la |i t|kɛɛ|lɔ |i k|ɔ t|mia| mi|a y|nge| ji|ee |gaa|a a|ɔ n|ɔ i|gɔ |ind|tao|ao | hi|num| le| yɛ|umu|mu |ung|nda|hin|ye |i g|hou|hug|e n|ugb|ni |a l|sia|ndɔ|nuu|a i|maa| ya|ahu|gba|u k|mah|oun|ɔma|le |da |i w|ɔlɔ|i j| va| ɔɔ|eng|i i|va |yei|dɔl|li |lei| sa|yɛ |kpɛ|yil|isi| la|bat|a w|u n|e t|ta |ahi| ki| wo|ɔ k|e a|ɛlɛ|saw| lo|o k|ji |gbɔ|pɛl|uvu|ili| ho|vuu| gu|nde|aho|gbu|ɛ t|ale|ila|nah|kɛ |ɛi |ndu|kpa| wa|nuv|ge |e m| ny|e k|atɛ|wei|awe|a g| ii|bua|ie |awa|wot|yek|kɔl|ulɔ|ing|ga |gul|tɛ |ɔle|u t|gbɛ|ɔ y|nun|wa |hei|ani|ɛ k| tɔ|bɔm|ɛ g|ein|taa| ha|ang|uni|u i|ekp|ɔ g|lɛɛ|kpɔ|a v|kpe|ote|i b|te |u m|tii|ɔ s| we|ɛ h|baa|pe |ɛ y| ɛɛ|i ɛ| ba|fa |a j|bu |ifa|kia|jif|u l|eke|ama|gen|u w|lee|lɛ | lɛ|ɛmb|a b|e y|aah|hii|ngo|bɛm|lek| wi|ui | yi|u y|bɛɛ| he|u a|e h|ɔ m|uah|o g|yen|yan|nyi|aal|hi |wu |yee|maj|ajɔ|jɔɔ|nye|mbo|e g|u ɔ|ong|ka |oi |lon|dun|uny|ɛng| sɔ|lɔl|nyɛ|lii|a p|oyi|iti| bɛ|lɔm|akp|e i|ɛ i| ka|jis|oko|i p|ɔla| wɛ|a s|ewɔ|iye|dɔɔ|lok|gua|ɛ b| li|u h|nin|wee|lah|ula| ga| du|i v',
        fon:
          'na | na| e | ɖo|ɔn |ɖo |kpo| kp|nu |o n| ɔ | nu| mɛ| gb|mɛ |po |do |yi |tɔn| é | si|gbɛ|e n|in | to| lɛ|lɛ | tɔ|nyi| al|wɛ | do|bo |ɛtɔ| ny|tɔ |e ɖ|ɖe | bo|okp|lo |ee |ɖok|to |ɔ e|bɛt| wɛ| ac|a n|sin|acɛ|o t|o a|ɛn |i ɖ|o e|bɔ |ɔ ɖ| bɔ|cɛ |ɛ b| ɖe|a ɖ|ɔ n|ɛ ɔ|n b|an |nɔ |odo|ɛ ɖ|o ɔ|ɛ n|ɛ e|ɖɔ |ji | ɖɔ|lin|n n| en|bi |o ɖ|mɔ |n e|pod| bi|lɔ | mɔ|n a|nɛ |ɛ k|i n|un |ɔ m|i e|mɛɖ| hw| ji| ye|ɛɖe|enɛ| ǎ |alo|o s|kpl|u e|a d|ɔ b| nɔ|alɔ|ɔ é|ɔ g|ɖee|si |n m|gbɔ|a t|n k| yi|sɛn|jɛ |e k| wa|o m|e m|é ɖ| jl|hɛn|e e| hɛ| sɛ|nnu|nun|wa |n ɖ| ee|é n|kpa|unɔ|bɔn|ɔ t|a s|ɛ é|u k|ɔ w|inu|e s|i t|zɔn|o l|a y|o g|bɛ |ma |n t|e j|ɔ s|ɔ a|o b|a z| zɔ|jlo|i k|nuk|ɔ k|a e|ɔ l|u t|kɔn|xu |e ɔ| lo|hwɛ| ka|eɖe|o y|e w|jij|sis|n l|ixu|six| su|ali|isi|ukɔ|ɛ a| ay|ayi|su |n g|u a|a b|n d|dan|nmɛ| ta|n ɔ|etɔ|e g|o j| we|onu|wem|ba |ema|ɛ g|o h|ɛ s|ɛ t|i s|u w|n s| sɔ|bǐ | bǐ|hwe|a m|sɔ |lɔn|o d|u m|ple| ma|ɛ l|azɔ| az|tog|ye |i l|hun| jɛ|o w|ogu|o k|u g|kan|oɖo|elɔ|gbe| le| el|wu |ka |ɛ w|n w| li|sun|esu| hu| i |ɖó | ɖó|plɔ|ɖi |ɖè |ɛnn|pan|i m|yet|xo |iin|tii| ti| fi|e b|zan|i w|poɖ|ɖes|a j|ann|a g|gun| ɖi| tu|gan|ɛ m| wu|u s|ɔ y|a l| da|u n|u l|ɔnu|obo|ɔ h|vi |lee|ijɛ|ta |e a|ya |nuɖ|ɔ d|wen| tɛ| ga| ɛ | xo',
        nhn:
          'aj |tla| tl| ti|ej |li |j t|i t| ma|an |a t|kaj|tij|uan|sej|eki| no|chi|ij | ua|ma | to| te|j m| ki|noj|ika| se|lis|j u|aka|laj|tle|pa |pan|j k|ka | mo|amp|ali|ech|uaj|iua|j n|man|oj |och|tek|tli|kua|ili|a k|se | pa|ano|ise|ual|mpa|tec|n t|en |len|iaj|is | ue|a m|jto|ajt|pia| am|uel|eli| ni|ya |oua|j i|ni |hi |tok|kin|noc|one|lal|ani|nek|jki|ipa|kit|oli|ati|amo|j s|kam|aua|ia |tim|mo | ku|ant|stl| ik| ke|opa|ase|nij|ama|i m|imo|ijp|ist|tl |ijk|tis|mej|itl|tik|mon|ok |lak|par|n n|ara|ra |tit|kej|jpi|a s|ojk|ki | o |alt|nop|maj|jya| ka|iti|cht|ijt|uam|a n|kiu|lat|leu|o t|ita|lau| ip|tep|kia|jka|n m|ana|lam|kij|nka|tou|epa|n s|til|i n|i u|e t| ak|s t|k t|lti|nem|lan|eyi|mat|nau|ose|emi|j a|ntl|uat|uey|jtl|nit|nti|kip|oka|onk| on|eui|i k|kat|j p|ini|toj|kem|ale|ajy|ame|ats|pal|iki|ema|uik|n k|eua|ach|e a|ijn| sa|mpo|tot|otl|oyo|mil|hiu|eka|tol|ajk|uak|ite|san|pam|atl|yek|tia|ate|ino|jua|a i|ipi|j o|tsa|oke|its|uil|o o|jne|oju|tos|kui|oui|a a|yi |kol|ote|a u|i i|n a|ken|chp|iko|as | ne|tin| me|ank|jti| ye|kon|ojt|aui|xtl|ine|tsi|kii|you|ko |ejk|o k|uas|poy|tst|ejy|nok|las| ya|yol|hti|pou|siu| in|nel|yok|mac|ak |hik|sij| si|sto|htl|jke|nko|jch|sek|mot|i a|ela|ui |kis|mel|axt| ax|ijc|nan',
        dip:
          ' ku|en |ic |ku | bi|bi | yi| ke|an |yic|aan|raa| ci| th|n e| ka| eb| ra|c k|c b|n a|ci |in |th |kua|ny |ka |i k|ŋ y|i l|ben|k e|ebe| ek| e |höm|nhö|öm | al|ai |kem| ye| nh|eme|m k|men|i y|t k|n k| la|c e|ith| er|lɛ̈|thi|alɛ|ua |t e|ek |ɛ̈ŋ| lo|ɔc |n t|ŋ k| ep|u l|it |yen|kɔc|̈ŋ |de |k k|pin|a l|i r|n y|epi|n b|lau|at |iny|aci|aai|u t|ken|au |ok | te|a c|ath| pi|ke | ac|e y|cin|u k|oŋ | lu| ti|a t|uat|baa|ik |tho|yit|ui |hii|u n|h k|e r|n c|te |kek| lö|l k|h e| lɛ|hin|thö|m e|ɛŋ |n r|n l| et| mi|ëk |i b|ekɔ|era|eŋ |e w|i t|el |ak |nhi|iic|a k|i e|pio| ny|ŋ e| aa|nde|u b|e k|kak|eba|ök |k a| ba| en|ye |lɛŋ| pa|iim|im |köu|e c|rot|e l| le|öŋ |ot |ioc|c t|i m|r e| kö| kɔ|eth|y k|oc |ŋ n|loo|la |iit| el| we| ey|i p|uny| ro|ut | tu|oi |e t|enh|thɛ|m b|hok|pan|k t|ëŋ | wi|yii|tha|wic|pir| li|u e|bik|u c|ën |ynh|y e|lui|eu |ir |y b|nyn|uc |n w|mit| ec|öun|any| aw|ɛt |ɛ̈ɛ| dh| ak|and|loi|wen|l e|höŋ|e e|thë|aku|̈ɛ̈|kut|am |eny|u m|i d|iek|k c| ko|tic|leu| ya|u y|tii| tö| ma|nyo|tö | ew|hök|den|t t|hëë|i n|k y|i c|cit|h t| ed|uee|bai|ɛ̈n|öt |eri|ɛ̈k|awu|rin|a p|cɛ̈|hai|kic|t a| të|tue|cii|hoŋ| bɛ|ooŋ|n p| cɛ|̈k |c l|u p|uk |c y|löi|i a|eke|dhi|wel|thk|eeŋ|öi |elo|n m|r k|ien|om |hom| wa|nho',
        kde:
          'na | na| va| wa|la |nu |a k| ku|a w|ila|wa |a v|chi| mu|unu|e n|mun|van|a m|a n|ya |le |ele|sa | ch|asa|amb|ana|was|lam|mbo|ohe|ave| vi|ne |bo |aka|e v|a u|u a| n’|u v|e m|ke |anu| li|ve |vel|ake|ala|hil|ile| pa| av|ng’|a l|he |ing|ene|ela|ili|ika|vil|ngo|vak|ali| di|uku|wun|any|lan|a i|mbe|a a|uni|e a|ama| ma|go |nda|bel|emb|wak|kuw|nya| mw|ola|a d|den|lem|a c| il|ulu|kol|g’a|o v|nji|kan|ji |au |ma | au|lil|mbi|uwu|lik|ye |’an|kuk|din|ula|no |and|umi|kum|eng|ane|dya|ong|o l|ach|mwa|e w| ak|an’|a p|kal|nil|lew|mad|n’n|voh|ilo|wen|aya|apa| vy|kut|ale|va | al|ang|ava|kul|hin|o m|hel|e k|ond|hi | la|lin| lu|idy|dye|u l|da |ole|ka |ani|ndo|ton| in|ewa|lov|o c|dan|u m|cho|uva|ia |pan|kam|we |ove|nan|uko|bi |kav| ya|lim| um|eli|u n|nga|uli|lia|mil|o n|’ch| kw|li | an|aha|dil|ata| dy|e l|n’t|i v|tuk|hoh|u i|hev|ni |niw|und| ul|ade|lel|kay|lon|e u|ino|i n|nje|uwa|she|yik| ly|hum|ako|i w|uma|vya|kwa|ba |’ma|val|kil|mwe|mba|mu |pal|umb|wav|hih|ulo| ka|e c|nde|wal|ima|’ni|lun|ihu|a y|vin|yoh|e i|vyo|inj|u c|kup|kuv| ki| m’|a s|e p|dol|lek|awa|o u|n’c|iwa|imu|anj|mal|yen|u w|yac|bil|oja|o a|ha |utu|ech|i d|uka|taw|n’m|ita|awu|ina|m’m|i a|itu|hon|lu |atu|mak|iku|lya|lit|jel|evo| vo|i l|mah|hap',
        snn:
          ' ba|ye |bai| ye|ai |e b| ca|ai̱|ia |ji | ne| si|i̱ | go|goa|sia|i n|e c|a y|i y|̱ b| ja|se |aye|i j|a b|jë |iye|e g|re |oa |hua|yë |quë| gu|hue|e̱ |u̱i|gu̱|ne | ma|̱i |je̱|eo |e s| hu| ña|bay|o y|ñe |ja |ajë|to |aij|deo| ñe|a i|ayë|ba | ji|beo|cat| de| be|e j|i s|mai|e e|bi |a ñ| co| e |ato|uë |ña |i g|e ñ|i b| iy|cha|ë b|eba|coa|na | ts|e y|̱je|reb| i | ti|i t|ja̱|ach|ue |e i|i c|ni |oac|e t|a ë| re|je |aiy|oji|eoj|a̱j|oye| ë |ë t|cay|ija|ico|ihu| sa|i d|ere|a c| qu|ahu|iji|ca |ua | yë| to|a h|ase|ues|ë s|aca| se|uai|e d|ese|asi|caj| ai| tu|tut|utu|ë c|yeq|equ| na|cai| i̱|ti |mac|e m|ë g|ebi|a a|ani|tu |e n|yeb|eje|oya|toy|co̱|a m|̱ t|ije|sic|eso|eoy|a t| a | te|haj|cah|oas|are|i m|a s|ehu|añe| da|o b| do|i i|i r|e r|neñ|yer|huë|ë y| o |jai|a j|aje|a g|ibë|ëay|aña|aja|a o|coc|bëa|oca|sos|doi|oi |aco|eñe| jë|ë d|ë j|cas|ëca|hay|ea |̱ g|ari|tsi|yij|sai|̱ c|osi|teo|o h|co |̱re|nej|ëhu|o s|ose|jab|̱ni| me|rib|ñes|si |yaj|jëa|uaj|ë m|dar| yi|oe |e o|nes|i̱r|ma |nij|i h|oja|uëc|ama|ë i|i̱h|o̱u|̱uë|̱hu|aqu|ëco|e a|a̱ |ëja|̱ñe|o̱a|go̱| ëj|ñe̱|tia|abë|sih| bi|tsë|sëc| je| cu|̱ a|ned|cab|a d|ore|me | oi| ro|jay|tso|ë r|eye|ta |bë |ñaj|soe|̱ca|o̱c|año|o c|ire|ohu|uej|ñej|i a|ñas|ë q| ju|ban',
        kbp:
          'aa | pa| se|se |na |nɛ | nɛ| yɔ| wa|yʊ | ɛy|ɛ p|ɖɛ |aɖɛ|a ɛ|a w|ɛwɛ|ɛna|yɛ |ala|ɛ ɛ|ɛ s|ɔɔ |yɔɔ|ɩ ɛ| ɛ |paa|e ɛ|e p|ɛyʊ|aɣ | pɩ| ɛw|a p|waɖ|ʊʊ |a n| ta|yɔ |yaa|yɩ |wɛn|la |taa|ʊ w| tɔ|a a|ɔ p|ɛya| kɩ| ɩ |ɩyɛ|a t|ʊ ɛ|a k|wɛɛ|tɔm|ɔm |ɛ t|wal|ʊ n| wɛ| ŋg| tɩ|ɛ n|ɛ k|kpe|ɛ ɖ|maɣ|zɩ | an|ʊ t|ɛ y| pʊ|nɩ | tʊ|ɛyɩ|ɩɣ |ɩ t| we|ɩ y|anɩ| pɔ|a s|gbɛ| pɛ| ɛs|pa |kpa|ɛɛ |wɛ | nɔ|daa|nɔɔ|ʊ y|ama|ya | kʊ|tʊ |pal|mɩy|ayɩ|ɩ p|ɩna|tɩ | ɖɩ|ʊ p|ɔ ɛ| ɛl| mb|ɔ s|ŋgb|a y|ɩma|ɖɩ |ʊ k|ɔɖɔ|ɩ n|bʊ |mbʊ| ɛk| kp|ɛja| ɛj|tʊm|jaɖ|paɣ|kɛ | ye|ɛyɛ|alɩ| na|i ɛ| ke| ya| ɖɔ|ɩ ɖ|ɔɔy|nda|ɖɔ |fɛy|ɣ ɛ|ɩ s|jɛy|yi |ɖɔɖ|ɛla|lɩ |kɩm|kɩ |aŋ |bɛy|pee| ñɩ|lab|ɩzɩ|pe |eyi|ŋ p|ɩ ɩ|ɛzɩ| fa|ɔyʊ|aʊ |ʊmɩ|ʊyʊ|ʊma|a l|sɔɔ|a ɩ|ekp|ʊ s| aj|ajɛ| ɛt|iya|wey|ɩ k|ʊ ŋ|ma |kan|ɩsɩ|laa|ɔyɔ|ɩm |li | kɛ| lɛ|and|sam| sa|ɣtʊ|ɔ k|day|ɔɔl|ɣ p|sɩ |ɔŋ |ɩfɛ|akp|pak|sɩn|pɩf|naa|ndʊ|kul| ha|aɣt|ɔ y|uli| ɖe| kɔ|eek| pe| sɔ|m n|ŋga|ee |ga |ɖʊ |maʊ|m t|e e|ɣna|ɣ s|ŋgʊ|abɩ|akɩ|a ñ|yaɣ|pɩz|eki| ɖo|maŋ| la|yee|ana|tɩŋ|ɣ t|pad|ñɩm| ca|ɛ a|a ɖ|pɩs|ina|dʊʊ|ɖe | ɖa|a m|lɛ |ked| ɛɖ|lak|aka|gʊ |asɩ|ʊ ɖ| ɛd|dʊ |nʊm| nʊ|ñɩn|ba |ɛpɩ|pʊ |ada|ɛhɛ|hal| a |le |zɩɣ|ɛɛn|ɛsɩ| le|aɣz|uu |nɖɩ|e t|ŋ n|ɛda|lɩm|e w|ɔ w|ɩ a| ɛp| nɖ|ɛkɛ|i p|ɣzɩ|alʊ|zaɣ|bɩ |ɛ l|ɩkɛ|ɔ t|e y|ɖam|aaa|pɛw',
        tem:
          'yi | yi| ka|a ʌ| tə|uni|ni |wun| ɔ | aŋ| wu|ka | kə| kʌ| ʌŋ|nɛ |kə |tək| ʌm|əkə|ɔŋ |mar| ɔw|a k|ma |i k| a |wa | mʌ|i t|ri |ɔwa|thɔ| th| ma|ari|i m|a a|ʌma|aŋ | o | ba|tha|ba | kɔ|a y|ŋ k|ɔm |‐e | rʌ|lɔm|kɔ |i ɔ|kom|o w|ʌnɛ|te |mʌ | ŋa|i o|əm |hɔf|ɔf |alɔ|om |a m|ɔ b|ɔ y|aŋf|fəm|hal|kəp| mə|ŋfə|ʌth| tʌ|a t|a r|ŋ y|ŋth|ŋa | ʌt|ɔ k|e ɔ|ɛ t| ro|wan|ema| gb|ank| ye|th |yem|nko| mɔ|ʌwa| sɔ|kʌm|m a|kət|ʌmʌ|anɛ|rʌw|ɔ t|ʌme|ʌŋt|me |ʌte| bɛ|hɔ |a ɔ|ki |ʌŋ |m ʌ|m k|ar |ŋ ɔ|yɛ |əth|ɛ ʌ| ta|i a|ta | ʌk|ə k|thi|et |pet|pa |ŋɔŋ| te|ŋe |i ʌ|ra |i r|əpe| ŋɔ|ɛ k|ʌ k| yɔ| rə|kʌt|rʌ | yɛ|bɛ |e a|e t|ro |ɔ ʌ|akə|thə|ɔ m|a‐e|əpa|a w|kəl|ə b|yɔ |ə t|mɔ |bot|ŋ t|e y|əŋ |mʌs|gba|e m|m r| bo|ʌŋe| ak|ɛ a|nʌn|ləŋ|ələ|sɔŋ|ŋ b|təm|wop|ʌ a|ə y|kəs|sek|ə s|tʌt|li |ot | ko|ɛ ŋ|ŋ a|ekr| ra|ɔth|sɔt|ʌse|ath|ru |t k|ɛ m|e k|ɛth|ma‐|po | po| wo|ʌrʌ|i y|m t|m ŋ|tʌŋ|tɔŋ|e w|gbʌ|tə |nth|ʌyi|ʌlə|hən|ʌ ʌ|op |iki|ʌkə|rʌr|ʌru|ŋgb|sɔ |əyi|rʌn|gbə|ɔ a|ər |ɔkɔ| pə| ʌr|ənʌ|ləs|nka|ith|əli|ʌy |bəl|mʌy|ran|o ɔ|ɛ r|ant|f ʌ|mə |ti |f t| tɔ|əs |r k|hi |yik|ɔ ɔ|rək|kar|ʌ t|mʌt|lɔk|ayi|krʌ|pan|na |kʌr|mət|tət|tho|pi |mʌl| to|to | wa|ʌgb|thɛ|ə g|bas|eŋ |aŋk|ɔ r|thʌ|o t|ɛŋ |i‐e|kʌ |kʌs|mɔŋ|o d|kɔŋ|din|ɔ g|kəw|di |ŋ w|əma|ɛr |ʌ y|ək |ŋko',
        toi:
          ' ku|a k|wa | mu|a m|la |ali|ya |tu |i a|e k|a a|aku|ula|ntu|ang| al|lim|lwa|kwa|aan|mun|mwi|de |ulu|ngu|wi |imw|luk|gul|na |ele| ak|kub|ons|unt|kul|oon|se |ant|nse| oo|zyi|gwa|si | ba|ba | lw|zya|uli|ela|a b| ci| ka| zy|waa|and| an| kw|ili|uki|eel|uba|nyi|ala|kut|ide| ma|kid|isi|uny|i m|kun|cis| ya|li |i k|nga|a l|yin|kuk|ka | ul|kus|ina|laa|nte|ila|tel|mul|wab|wee|nda|izy|ede| am|led|amb|ban|we |da |ana|kwe|e a|lil| bu|o k|bwa|aka|ukw|o a|ati|uko|awo|yan|ko |uci|ilw|bil|bo |a c|wo |amu|law|mbu|i b|bul|umi|ale|abi|kak|e m|u b|akw|u o|ti |sal|kuy|ung|bel|wak| bw|o l|ga |kal|asy|e u|lan| mb|lo |usa|ika|asi|aam|a n|ule|bi |cit|bun|kup|egw|muk|igw|u k|u a|mbi|wii|kum|a z|aci|ku |yi | mi|yo |le |mas|yig|ubu|kka|i c| ab|ene|ne |no |a y| wa|abo|ndi|uta|syo|aya|aba|len|kuc|eya|o y|mal|ind|lem| lu|ukk|mo |eka|mil|mbo|ita|uka|ama|lik|u z|ndu|mu |nzy|zum|bal|abu|upe|bam|syi|u m|liz|int|ta |yak|ley|e b|nzi|lii|kab|uti|ube|uum|i n|cik|ezy|iib|iba|ani|iko|iin|ile|was| ca|zye|alw| aa|sya|uku|twa|min|tal|muc|umu| nk|du |azy|onz|lek|kon|buk|o m|yik|i z|lwe|u u|oba|kwi|imo|gan|zil|del|usu| we|peg|yee|ngw|sum|imb|ump|mpu|nde|end|i o|yoo|o n| nc|a u|mi |ano|uya|o c|di |mba|yil|yal|ako|a o|isy|izu|omb',
        est:
          'sel|ja | ja|le |se |ust|ste|use|ise|õig|mis| va|gus|ele|te |igu|us |st |dus| õi| võ| on|on |e j| in|ini|nim|ma |el |a v|iga|ist|ime|al |või|da | te|lik| ig|adu|mes|ami|end|e k|e v|l o| ka|est| ra| se|õi |iku| ko|vab|aba|tus|ud |a k|ese| ku|l i|gal|tsi|lt |es |ema|ida|ks |a i|n õ|lis|atu|rah|tam|ast|sta|e t|s s| mi|ta |ole|stu|bad|ga |val|ine| ta|ne | pe|nda|ell|a t|ali|ava|ada|a p|ik |kus|e s|ioo|tes|ahe|ing|lus| ol|a a|is |vah|a s|ei | ei|kon|vas|tud|ahv|t k|as |a r|s t|e e|i v|eks|oon|t v|oni|kõi|s k|sio|sus|e a|gi |mat|min| pi|s v|oma|kul|dad| ni|e p| om|igi|tel|a j|e o|ndu|dse|lle|ees|tse|uta|vus|aal|aja|i t|dam|ats|ni |ete|pid|pea|e õ|its|lma|lev|nis|dis|ühi|sli|i s|nen|iel|des|de |t i|et |nin|eva|teg|usl|elt|ili|i m|ng | ee|tem|ses|ilm|sek|ab | põ|ait| ne|õrd|sed|võr|ul | üh| ki|abi| kõ|ega|rds| vä|ots| et| ri|põh|ed |töö|si |ad |i k| tä|ata| ab| su|eli| sa|s o|s j|sil|nni|ari|asu|nna| al|nud|uma|sik|hvu|onn|eab|emi|rid|ara|set|e m| ke|a e|täi|d k|s p|i e|imi|eis|e r|na | ül|a ü|koh|a o|aks|s e|e n| so|õik|saa|and|isi|nde|tum|hel|lii|kin|äär|sea|isk|een|ead|dum| kä|rii|rat|lem|umi|kor|sa |idu|mus|rit|har| si|vad|ita|ale|kai|teo| mõ|ade|üks|mas|lse|als|iaa|sia|sot|jal|iig|ite',
        snk:
          'an | a | na|na |a n|ga | ga|en | su|re |a k| ka|su |a a|a s| ta|un | se|ta |ma | i |ama|do |e s|ere|ser|aan| do|nan|nta| ra|n s| ma| ki| ja|jam| da|taq|ne |a g|a d| ya|n d|ni | ku|ren|ri | si|ana|u k|n ŋ|ŋa | nt|e k|maa| ŋa|ndi|wa |aqu|ane| ba|ra |a r| sa|oro|n t|raa|tan| ke|oxo| xa|i s|di |a f|and|ti |a b| be|i k|gan|aax|aaw| go|iri|kit|awa|axu|sir|a i| du|a t|me |ara|ya |ini|xo |tta|i a|oll|ran|on |gol|e d|n g|a j|nde|aar|e m|be |a m|ari|u n|lli|ron| fa|qu | ti|n n|aad|axa| ña|o a| so|ke |nu | ko|din|lle|dan|a y|man|i g|sor|u r|i t| no|are|xar|kuu| wa|enm|ada|baa|de |qun|o k|yi |xun|i n|i x| an| ha|kan|fo |att|ang|n k|o s|dam|haa|da |n y|kat|e t|li | fo|i d| mo|nme|u b|i m|aba| fe|len| re|pa |ant|ayi|yan|e n|a x|e y|n b| di|ppa|app|kap|xa |u t|o g|mox|ure| xo|ond|i i|a ñ|n x|taa|du |ell| me|iti|xu |u d|udo|ind|uud|anu|nga|o b|nun|nox|n f|ku |aga|anŋ|dun|itt|eye|ye | bo|ore|ite|u a|oor| yi| ro|sar|saa|ill|e b| wu|le |riy|nma|ro |ken|edd|fed|bur| mu|mun|o n|iin|tey|sel| tu|u m|lla|la |ono|ñaa|den|faa|a w|te |inm|ka |aay| te|ina|xoo|o d|ira|u s|o t|nmu|nen|ban|ene| ni|ña |o i|uur|una|o m|xon|n w|kaf|gu |e g|a h|kil|yu |und|aqi|een| bi|bag|i j|n ñ|laa|i r|no |sig|igi|kor| o |i b|bat',
        cjk:
          ' ku|a k|yi | ny|nyi|la |wa | ci|a c|a n|we | mu| ha|i k|nga|ga |a m|kul|uli|esw|sa |ana|ela|ha |ung|a h|ze |tel|swe| ka|a u|mwe| wa|ci |ate|kwa|mbu|ya | ya|ma |uci|kut|han|u m| mw|mut| ul|nat|e m|e k|mu |uth| ca| ma|lit|aku|ang|thu|na |ca |ka |nji|i m|kup|pwa|hu |ji |kan|wes|i n|ina|li |ali|e n|asa|mba|a i|e a|ifu|fuc|amb|ize|ing|anj| mb|ita|bun| kw|uta|i u|cip|a y|awa|muk|i c|naw| ak| na|imb|lin|kus| ce|ite|ila| an|upw|ta |ula|ong|ulu|esa|a a|kha|wo |ba |ngu|ukw|lim|u c| xi|nge|kuh| un|umw|cif|lem|emu|ulo|o k|kun|aka|umu|ama|wik|ala|xim|o m|has|ikh|mwi|tam|te |o n|imw|uka|utu|lo | es|a w|ule|ku |ipw|usa| ng|i y|ili|wil|no |aci|e c|ko |kum| ye|bu |kuk|ufu|o w|mo |e u|pwe|cim|uha|e h|ngi|aze|imo|swa|yes|mil|ciz| mi| in|ulw|akw|e w|ika|so |lon|e y|iku|eny|mbi|o y|yum|isa|umb| li|aco|e i| iz| ja|cik|tan|lwi|kat|nda|i a|uni|wak|fun|uma|o c|a x|i h|aha|nal|u k|uze|was|ema|lum|pem|ngw|o u|wam|kal|co |kwo|uso|a e|apw|una|tum|sak|gul|umi|nin|ja |ces|iki| ik|tal|bi |ata|yul|nyu|zan|ile|ge |wan| uf| up|lik|le |wen|waz|kwe|ele| um|aso|wac| if|i w|hak|i i|man|mah|go | cy|oze|yoz|hal|ges|cin|kuz|uvu|iso|da |o l|gik|ngo|lul|eka|cyu|upu| yo| ut|ipe| uk|kol|ise|u i|vul|mun|ne |cen| it|kuc|mul|and',
        ada:
          'mi |nɛ | nɔ| nɛ| e | he|he |nɔ | a |ɔ n|kɛ | kɛ|i k| ng|a n|i n|aa |e n|blɔ| bl|ɛ n|ɛ e|gɛ |ngɛ|e b|lɔ | ma| mi|ɛ h| ts| ko|hi |ɛ a| ɔ |ko |e h|ɛɛ |tsu| ni|ɔ k|a m|a k|i h|ma | ny|emi|a h|ami| be|be |i a|ya | si|e m|e j| ka|si |ɛ m|ɔ f| kp|nya| je|ni |oo |loo|o n| hi| fɛ|fɛɛ|a t|laa|a b|je |e k| pe|pee| ye|mɛ |umi|ɔ m| ha|a a|ɔmi|omi|kpa| wo|ɔ e|i t|ɛ ɔ|e s|i b|ɔ h| lo|ɛ k|ke |ha |bɔ |maa|mla|i m|ɔ t|ɔ́ |e p|kaa|ahi| sa|lɔh|ɔhi|sum|ɔ a|nɔ́|o e| na| gb|ee |e ɔ| ji|e a|i s| ml|ɛ s|sa | hɛ|ɔɔ |yem|u n|alo| jɔ| ku| lɛ| bɔ| to|a s|ɛ b|i l|lɛ |sua|o k|uaa|a j| su|ɛmi| ad|ɛ y|imi|ade| fa| al|jɔm|des|esa|eɔ |ihi|ji |ne |ɛ t|a e|ɛ j|ake|e e|kak|ngɔ|o a|eem|i j|e y|wo | bu|him|e w|́ k|ɔ y|tom|suɔ|ia |ane|mah| ya|o b| ke|e g|wom|gba|ue |ba | bi| gu|uo |e t|san|uu |pa |hia| tu| hu|suo| we|tsɔ|ɔ s|e f|kuu|gɔ |o m|a p| ja|ɛ p|fa |ɔ b|ɛ g|hɛɛ| ab|a l|hu |ye |na |tue|i ɔ|isi| sɔ|sɔs|jam|gu |ti |ɛ w|sis|o h|uɔ |li |a w| ba|sɔɔ|abɔ| ju| hl|ɔsɔ|hla|ɔ l|a y|sɛ | ɔm|ɔmɛ|i w|ɛti|pɛt|kpɛ|to | yi|asa| kɔ|nyu|akp|pak|kpe|sɔɛ|ɔɛ |u ɔ|yɛm|o s|uɛ | nu|pe |se | sɛ|o j|a g|ɔ w| wa|sem| pu|su |e l| mɛ|u k|hɛ |nih|kas| fɔ|kon|onɛ|bim|lam|imɛ|nyɛ| fi|hiɔ|usu|i p|bi | ní|yo |eeɔ|uam|bum|níh|íhi|o l|ula|kul|guɛ|naa',
        quy:
          'chi|nch|hik|una| ka|anc|kun|man|ana|aq |cha|aku|pas|as |sqa|paq|nan|qa |apa|kan|ikp|ik |ech|spa| de|pa |cho|ere|der|rec|am | ru|an | ma| ch|kpa|asq|ta |na |nam|nak|taq|a k|qan|ina|run|lli|ach|nap|pi |mi | ll|yoq|asp|ima|hay|hin|aqa|nku|ant|ayn|oyo| hi| im|hoy|cio|nta|nas|q k|api|iw |wan|kuy|kay|liw|aci|ion|ipa|lla|oq |npa|ay |kas|a m|nac| na|inc|all|ama|ari|anp| ya|chu| hu|nin|pip|i k|qmi|hon|w r|ata|awa|a c|ota|in |yku|yna| wa|a h|has|a d|iku|a l| li|pan|ich|may| pi| ha|onc|a r|onk| ot|ku | qa|ank|aqm|mun|anm|hu |a p|nma| mu|qta|n h|pap|isq|yni|ikm|ma |wsa|aws|kaw|ibr|bre|lib|ayk|usp|nqa|e k| al|lin|n k|re |ara|nat|yac|kma|war|huk|uwa|yta|hwa|chw| sa|was|kus|yan|m d|kpi|q m|a i|q l|kin|tap|a a|kta|ikt|i c|a s|uy | ca|qaw|uku| tu| re|aqt|ask|qsi|sak|uch|q h|cas|tin|pak|ris|ski|sic|q d|nmi|s l|naq|tuk|mpa|a y|k c|uma|ien|ypi| am|qaq|qap|eqs|ayp|req|qpa|aqp|law|ayt|q c|pun| ni|a q|ruw|i h|haw|n c| pa|amp|par|k h| le|yma|ñun|ern|huñ|nni|n r|anq|map|aya|tar|s m|uñu|ten|val|ura|ita|arm|isu|s c|onn|igu| ri|qku|naw|k l|u l|his|ley|say|s y|rim|aru|rma|sun|ier|s o|qar|n p|a f|a t|esq|n a|oqm|s i|awk| va|w n|hap|lap|kup|i r|kam|uyk|sap| qe|ual|m p|ran|nya|gua| pe| go|gob|maq|sum|ast| su| ig',
        rmn:
          'aj |en | te|te | sa| le|aka|pen| si| e |el |ipe|si |kaj|sar| th|and| o |sav|qe |les| ma|es | ha|j t|hak|ja |ar |ave| an|a s|ta |i l|ia |nas| aj|ne | so|imn|mna|sqe|esq|nd |tha|haj|e s|e t|e a|enq|asq|man| ja|kan|e m| i | ta|the|mes|cia|bar|as |isa|utn|qo |hem|o s|s s| me|vel|ark|i t| na|kas|est| ba|s h|avo| di|ard| bi| pe|rka|lo | ak|ika|e r|a a| pr|e k|qi |mat|ima|e p|a t| av|e d|r s|n s|anu|nuś|o t|avi|orr|o a| ka| re|n a|re |aja|e o|sqo|sti| ov|õl |l p|nqe|ere|d o|vor|so |no |dik|rel|ove|n t|ve |e b|res|tim|ren| de|àci|o m|i a|but|len|ali|ari|rre|de | pa|ver| va|sqi|ara|ana|vip|rak|ang|vi | ra|or |ker|i s|eme|e z|ata|e l|a e|rip|rim|akh|la |o p|kar|e h|a p|na |ane|rin|ste|j b|er |ind|ni |tne| ph|nip|r t| ke|ti |are|ndo| je|l a|uśi|e n|khi| bu|kon|lim|al |tar|ekh|jek|àlo|o k| ko|rde|rab|aba| zi|ri |aća|ćar|śik|dõl|dor|on |ano|ven| ni|śaj| śa|khe|ća |ast|j s|uti|uni|tni|naś|i d|mut| po|i p|a m| pu|a l|l s|som|n n|ikh|nik|del|ala|ris|pes|pe |j m|enć|e e|nća|ndi|rdõ|kri|erd|śka|emu|men|alo|nis|aśt|śti|amu|kh |tis|uj |j p|do |ani|ate|nda|o b|nge|o z|soc|a d|muj|o j|da |pri|rdo| as|cie|l t|ro |i r|kla|ing|a j| ze|zen|j e|ziv|hin|aśk| st|maś|ran|pal|khl|mam|i b|oci|rea|l o|nqo| vi|n e',
        bin:
          'e o|ne | ne|be |an |en |vbe| o |wan|mwa|n n|e e|emw|evb|mwe|in |na |e n| na| em|omw|e a|n e|e i| vb|re | ke|gha|gbe|wen| gh|ie |wee| om|e u| kh|bo |hia| ir|ha |o k|nmw|tin|n o|vbo|he |eti|ia |kev| ev| we| et|win|ke |ee |o n| hi|a n|a r|o r|gie|ran| ya|ira|mwi|a m| mw|a g|ghe|ogh| a | re| uh|eke| og|n k| no|ro |ye |khe| ye|hek|rri|nog|een|unm|a k|ogi|egb|ya |ere|wun|hun|mwu| mi|mie|de | rr|a e| ar|a o|n y|e v|o g|un |ra | ot| gb|uhu| ok|n i|ien|a v|rhi|e k|n a|i n|a y| ru|khi|n m|hie| eg|oto|arr|ba |ovb|u a|e y|ru |ian|hi |kpa| ra|o m|nde|yan|e w|and|to |o e|o h| ni| rh|e r|n g| er|n h|ugb|we |hae|on | iy|dom|rue|u e| or| ik|ren|a i|aro|iko|o y|n w|ben|ene|rio|se |i k|uem|ehe| ov|otu|okp|kug|oba|iob| uw|aen| do|iru|ae |tu |ue | iw| ma|wu |rro|o o|rie|n v| ug|a u|nna| al|ugh|agb|pa | ay|o w|ze |uwu|ma | eb|iye|aya|ugi|inn|gho|rre|nii|aku|gba|khu| se|yi |onm|ho |a w|ii |iwi| uy|uyi|e d| i |hin|obo|u o| ak|beh|ebe|uhi|bie|ai |da |i r|gbo|o v|won|mwo|umw| ag|ode| ek| la| um|aan| eh|egh|yin|anm|mo | kp| bi|kom|irr|i e|a a|kha|oda|bon|a d| ow|owa|ghi|n u|o a|yen|eem|ieg| az|aze|hoe| yi|oe |e g|ele|le |lug| ka|aa | as|yaa|gue|a h|mu |nre| od|n r|ero|ese| ku|enr|lel|vbi|wa |u i|a b|oro|bi ',
        gaa:
          'mɔ | ni|ni |kɛ |ɛ a| ak|lɛ |i a| he|ɛ m|akɛ| lɛ| ko|gbɛ|ɔ n|ɛɛ | mɔ| kɛ|yɛ |li |ɛ e|ko |ɔ k|i e|aa | yɛ|bɛ | ml|shi|ɛ h|egb| gb|ɔɔ |mli| fɛ|fɛɛ|heg|nɔ |a a|i n|aŋ |oo | nɔ|i k|he |ɛ n| es| am|ɛ k|ɔ y| sh| ma|esa|loo|ji |maŋ|amɛ|emɔ|ɔ f|fee| ek| al|ɛi |ii |ɔ m|ɔ a|bɔ |e n|ɔ l|amɔ| eh|alo|hi |naa|ee |ɔmɔ|oni| en|o n|kon|aji|i y|i m|sa |o a|eli|umɔ| bɔ| hu|yel|hu |eem|nɛɛ|tsu| ah| nɛ|sum|tsɔ| an|nii|o e|baa| as|mɛi|yɔɔ|gbɔ|aaa|na |i h|eye|ɛ g|eɔ |ɛji| at|ana|eko|ena|o h|ŋ n|kom| ts|ɔ e|maj|i s|i l|efe|ome| kp|a l|kwɛ|ku |ehe|toi|a n|saa|bɔm|ha |a m|kɛj|kpa|hew| ku| sa| na|hiɛ| hi|ane|gba|e e|i f| mɛ|ɛ t|bɛi|ash|ŋ k|e k| ej|hey|aka|ats|ne |its|e a|san| ay|ye | je| kr| ey|mla|eŋm|nit|a h|ɔ b|ɛ s|anɔ|ŋmɔ|a e|ɛ b|jeŋ|ɛ y|aan|kro| ab| af|any|iaŋ|ɔ g|a k| yɔ|uɔ |shw|ets|ekɛ|usu|ŋŋ |ŋma|esh|u l| ba| et|iɔ |i j|o k|suɔ|oko| yi|e s| ag|afe|agb|oi |ŋ a|rok|o s| aw|ai | ji|ɛ j|aye|ŋ h|ish|nyɛ|la | ad|o m| ef|tsɛ|sɛ |wɔ |ewɔ|mɔɔ|ehi|aŋm|hwe| bɛ| to|ɔ h|jɛ |aha| ja|paŋ|alɛ|awo|sɔ |ŋts|ɛŋt|iɛŋ|bii|diɛ| di|mɛb|eni|his| ny|e b|hik|u k|ate|i b|ŋmɛ|akw|o y|eŋ |ahe| lo|me |ade|ɔ j|kɛn|teŋ|yeɔ|ɔ s|des| su|wal|nyɔ| eb| eg|ŋ m|mef|saŋ|ɛ l|o l|u n|asa|sem|jia|wɛ | em|o b|gbe|hil|ihi|hih|ɔŋ |nak|e h|sus|e g',
        ndo:
          'na |oku|wa | na|a o|a n|ka |ntu| uu|tu |uth| om|e o|mba|ong|omu|ba | ok|uut| ne|he |the|ang|hem|emb|unt|o o|a u| wo|nge| iy|ehe|kal| no|a w|o n|no |nga|e n|ko |mun|oka|lo |o i|lon|we |ulu|a m|ala| ke|la |a k|u n|han|ku |gwa|osh|shi|ana|ngu|ilo|ano|ngo|keh| mo|ga |nen|man|ho |luk|tha|ge |gul|u k|eng|ha |a y|elo|uko|a e|ye |hil|uka|li |go |wan|ath|wo |thi|dhi|uun| pa|kwa| ta|a p|ya | sh| ko|nka|lwa| os|mwe|oma|ta |ema|sho| ka|e m| yo|sha|wok|ika|po |o w|onk|e p|pan|ith|a i|opa|gel|hik|iya|hi |aan|una|o g|kuk|alo|o e|nok|ndj|le |a a|men|yom|a s|i n| li|and| po|pam|lat|kan|ash|waa|aka|ame|gam|umb|a t|ond|yuu|o k|olo|ane|ing|igw|aa |ele|kul|mon| gw|ilw|gan|o y|iil|iyo| el|kut|nin|oko|ike|o m| ku|adh| ye|amw|ome|yeh|aye| ga| on| yi|a g|lyo|ne | ng|mbo|opo|kug|eko|yok|wom| oy|non|iye| go|ulo|e e| we| e |ina|ant|omo|ene| a |i k|mok|him| dh|und|ndu| me|eho|wen|nek| op|alu|e g|ima|kat|ota|oye|ila|ngw|yop|wat|ela|o u|a l| ii| ay| nd| th|o l|yon|ili|oon|okw|yaa|taa|lwe|omb| ni|aku|i m|mo |ula|ekw|enw|iyu|pok|epa|uki|ke | wu| mb|meh|e t|uni|nom|dho|pau|eta|yi | ly|o a|ono|lun|lak|ola|yo |lol|ank|bo |i o|awa|nwa|a h|naw|hok|nem|kom|ndo|o s|u t|vet|mbu|ani|uga|ndi|ukw|udh|lok|e k|alw|kwe|kun| ya'
      },
      Cyrillic: {
        rus:
          ' пр| и |рав|ств| на|пра|го |ени|ове|во | ка|ани|ть | в | по| об|ия |сво| св|лов|на | че|ело|о н| со|ост|чел|ие |ого|ет |ния|ест|аво|ый |ажд| им|ние|век| не|льн|ли |ова|име|ать|при|т п|и п|каж|или|обо| ра|ых |жды| до|дый|воб|ек |бод|ва |й ч|его|ся |и с|ии |аци|еет|но |мее|и и|лен|ой |тва|ных|то | ил|к и|енн| бы|ию | за|ми |тво|и н|о п|ван|о с|сто|аль| вс|ом |о в|ьно|их |ног|и в|нов|ако|про|ий |сти|и о|пол|олж|дол|ое |бра|я в| ос|ным|жен|раз|ти |нос|я и| во|тор|все| ег|ей |тел|не |и р|ред|ель|тве|оди| ко|общ|о и| де|има|а и|чес|ним|сно|как| ли|щес|вле|ься|нны|аст|тьс|нно|осу|е д| от|пре|шен|а с|бще|осн|одн|быт|сов|ыть|лжн|ран|нию|иче|ак |ым |ват|что|сту|чен|е в| ст|рес|оль| ни|ном|род|ля |нар|вен|ду |оже|ны |е и| то|вер|а о|зов|м и|нац|ден|рин|туп|ежд|стр| чт|я п|она|дос|х и|й и|тоя|есп|лич|бес|обр|ото|о б|ьны|ь в|нии|е м|ую | мо|ем | ме|аро| ре|ава|кот|ав | вы|ам |жно|ста|ая |под|и к|ное| к | та| го|гос|суд|еоб|я н|ен |и д|мож|еск|ели|авн|ве |ече|уще|печ|дно|о д|ход|ка | дл|для|ово|ате|льс|ю и|в к|нен|ции|ной|уда|вов| бе|оро|нст|ами|циа|кон|сем|е о|вно| эт|азо|х п|ни |жде|м п|ког|от |дст|вны|сть|ые |о о|пос|сре|тра|ейс|так|и б|дов|му |я к|нал|дру| др|кой|тер|ь п|арс|изн|соц|еди|олн',
        ukr:
          'на | пр| і |пра|рав| на|ня |ння| за|ого| по|ти |го |люд| лю|во | ко| ма|льн|юди|их |о н| не|аво|анн|дин| св|сво|ожн|кож|енн|пов|жна| до|ати|ина|ає |а л| бу|аці|не |ува|обо| ос| як|має| ви|них|аль|або|є п| та|ні |ть |ови|бо | ві| аб|ере|і п|а м|вин|без|при|іль|ног|о п|ми |та |ом |ою |бод|ста|воб| бе|до |ва |ті | об|о в|ост| в | що|ий |ся |і с| сп|инн|від|ств|и п|ван|нов|нан|кон| у |ват|она|ії |но |дно|ій |езп|пер| де|ути|ьно|ист|під|сті|бут| мо|и і|ідн|ако|нні|ід |тис|що |род|і в|а з|ава| пе|му |і н|а п|соб|ої |а в|спр|ів |ний|яко|ду |вно|і д|ну |аро|и с| ін|ля |рів|у в| рі|и д|нар|нен|ова|ому|лен|нац|ним|ися|чи |ав |і р|ном| ро|нос|ві |вни|овн| її|ові|мож|віл|у п| пі| су|її |одн| вс|ово|ють|іст|сть|і з| ст|буд| ра|чен|про|роз|івн|оду|а о|ьни|ни |о с|сно|зна|рац|им |о д|ими|я і|ції|х п|дер|чин| со|а с|ерж|и з|и в|е п|ди |заб|осо|у с|е б|сі |тер|ніх|я н|і б|кла|спі|в і| ні|о з|ржа|сту|їх |а н|нна|так|я п|зпе| од|абе|для|ту |і м|печ| дл|же |ки |віт|ніс|гал|ага|е м|ами|зах|рим|ї о|тан|ког|рес|удь| ре|то |ков|тор|ара|сві|тва|а б|оже|соц|оці|ціа|осн|роб|дь‐|ь‐я|‐як|і і|заг|ахи|хис|піл|цій|х в|лив|осв|іал|руч|ь п|інш|в я|ги |аги| ді|ком|ини|а і|оди|нал|тво|кої|всі|я в|ною|об |о у|о о|і о',
        bos:
          ' пр| и |рав| на|пра|на |да |ма |има| св|а с|а п| да|а и| по|је |во |ко |ва | у |ако|но |о и|е с| за| им|аво|ти |ава|сва|и п|ли |о н|или|и с|их |вак| ко|ост|а у| сл|не |вањ| др|ње | не|кој|ња | би|ије|и д|им |ств|у с|јед|бод|сло|лоб|обо| ил|при| је|ање| ра|а д| об| су|е и|вје|се |ом |и и|сти| се|ју |дру|а б| ос|циј|вој|е п|а н|раз|су |у п|ања|о д|ује|а о|у и| од|и у|ло |ова|дје|жав|оје|а к|ни |ово|едн|ити|аци|у о|о п|нос|и о|бра| ка|шти|а ј|них|е о|пре|про|ржа| бу|буд|тре| тр|ог |држ|бит|е д|у з|ја |ста|авн|ија|е б|миј|и н|реб|сво|ђи |а з|ве |бил|ред|род|аро|ило|ива|ту |пос| ње| из|е у|ају|ба |ка |ем |ени|де |јер|у д|одн|њег|ду |гов|вим|јел|тва|за | до|еђу|ним| са|нар|а т| ни|о к|оји|м и| см| ст|еба|ода|ран|у н|дна|ичн|уђи|ист|вно|алн|и м| дј|нак|нац|сно|нст|тив|ани|ено|е к|е н|аве|ан |чно|и б|ном|сту|нов|ови|чов|нап|ног|м с|ој |ну |а р|еди|овј|оја|сми|осн|анс|ара|дно|х п|под|сам|обр|о о|руг|тво|ји | мо|его|тит|ашт|заш| кр|тељ|ико|уна|ник|рад|оду|туп|жив| ми|јек|кри| ов| вј| чо|ву |г п| оп|међ|њу |рив|нич|ина|одр|е т|уду| те|мје|ење|сви|а ч|у у|ниц|дни| та|и т|тно|ите|и в|дст|акв|те |ао | вр|ра |вољ|рим|ак |иту|ави|кла|вни|амо| он|ада|ере|ена|сто|кон|ст |она|иво|оби|оба|едс|как|љу ',
        srp:
          ' пр| и |рав|пра| на|на | по|ма | св|да |има|а п|а и|во |ко |ва |ти |и п| у |ако| да|а с|аво|и с|ост| за|о и|сва| им|вак|ава|је |е с| сл| ко|о н|ња |но |не | не|ом |ли | др|или|у с|сло|обо|кој|их |лоб|бод|им |а н|ју | ил|ств| би|сти|а о|при|а у| ра|јед|ог | је|е п|ње |ни |у п|а д|едн|ити|а к|нос|и у|о д|про| су|ање|ова|е и|вањ|и и|циј| ос|се |дру|ста|ају|ања|и о| об|род|ове| ка| де|е о|аци|ја |ово| ни| од|и д| се|ве |ује|ени|ија|авн|жав| ст|у и|м и|дна|су |ред|и н|оја|е б|ара|што|нов|ржа|вој|држ|тва|оди|у о|а б|одн|пош|ошт|ним|а ј|ка |ран|у у| ов|аро|е д|сно|ења|у з|раз| из|осн|а з|о п|аве|пре|де |бит|них|шти|ву |у д|ду |ту | тр|нар| са|гов|за |без|оји|у н|вно|ичн|еђу|ло |ан |чно|ји |нак|ода| ме|вим|то |сво|ани|нац| ње|ник|њег|тит|ој |ме |ном|м с|е у|о к|ку | до|ика|ико|е к|пос|ашт|тре|алн|ног| вр|реб|нст| кр|сту|дно|ем |вар|е н|рив|туп|жив|те |чов|ст |ови|дни|ао |сме|бра|ави| ли|као|вољ|ило|о с|штв|и м|заш|њу |руг|тав|анс|ено|пор|кри|и б|оду|а р|ла | чо|а т|руш|ушт| бу|буд|ављ|уги|м п|ком|оје|вер| ве|под|и в|међ|его|вре|акв|еди|тво| см|од |дел|ена|рад|ба | мо|ну |о ј|дст|кла| оп|как|сам|ере|рим|вич|ива|о о| он|вни|тер|збе|х п|ниц|еба|е р|у в|ист|век|рем|сви|бил|ште|езб|јућ|њен|гла',
        uzn:
          'лар|ан |га |ар | ва| би|да |ва |ир | ҳу|ига|уқу|бир|ҳуқ|қуқ|ган| ҳа|ини|нг |р б|иш | та|ни |инг|лик|а э|ида|или|лиш|нин|ари|иши| ин|ади|он |инс|нсо|сон|ий |лан|дир| ма|кин|и б|ши |ҳар| бў|бўл| му|дан|уқи|ила|қла|р и|қиг|эга| эг| ўз|ки |эрк|қил|а б|оли|кла| эр|гад|лга|нли| ол|рки|и ҳ| ёк|ёки| қа|иб |иги|лиг|н б|н м| қи| ба|ара|атл|ри | бо|лат|бил|ин |ҳам|а т|лаш|р ҳ|ала| эт|инл|ик |бош|ниш|ш ҳ|мас|и в|эти|тил|тла|а ҳ|и м|а қ|уқл|қар|ани|арн|рни|им |ат |оси|ўли|ги | да|а и|н ҳ|риш|и т|мла|ли | ха|а м|ият| бу|рла|а а|рча|бар|аси|ўз |арч|ати|лин|ча |либ|мум| ас|аро|а о|ун |таъ| бе| ту|икл|р в|тга|тиб| ке|н э|ш в|мда|амд|али|н қ|мат|шга| те|сид|лла|иро| шу| қо|дам|а ш|ирл|илл|хал|рга| де|ири|тиш|умк|ола|амл|мки|тен|гин|ур |а ў|рак|а ё|имо| эъ|алқ| са|енг|тар|рда|ода| ша|шқа|ўлг|кат|сий|ак |н о|зар|и қ|ор | ми|нда|н в| си|аза|ера|а к|тни|р т|мил| ки|к б|ана|ам |ошқ|рин|сос|ас | со|сиз|асо|нид|асл|н ў|н т|илг|бу |й т|ти |син|дав|шла|на |лим|қон|и а|лак|эма|муҳ|ъти|си |бор|аш |и э|ака|нга|а в|дек|уни|екл|ино|ами| жа|риг|а д| эм|вла|лма|кер| то|лли|авл| ка|ят |н и|аъл|чун|анл|учу| уч|и с|аёт| иш|а у|тда|мия|а с|ра |ўзи|оий|ай |диг|эът|сла|ага|ник|р д|ция| ни|и ў|ада|рор|лад|сит|кда|икд|ким',
        azj:
          ' вә|вә |әр |лар| һә|ин |ир | ол| һү| би|һүг|үгу|гуг|на |ләр|дә |һәр| шә|бир|ан | тә|лик|р б|мал|лма|асы|ини|р һ|шәх|ән |әхс|ары|гла|дир|а м|али|угу|аг | ма|ын |илә|уна|јәт| ја|икд|ара|ар |әри|әси|рин|әти|р ш|нин|дән|јјә|н һ| аз|ни |әрә| мә|зад|мәк|ијј| мү|син|тин|үн |олу|и в|ндә|гун|рын|аза|нда|ә а|әт |ыны|нын|лыг|илм| га| ет|ә ј|кди|әк |лә |лмә|олм|ына|инд|лун| ин|мас|хс |сын|ә б|г в|н м|адл|ја |тмә|н т|әми|нә |длы|да | бә|нун|бәр|сы | он|әја|ә һ|маг|дан|ун |етм|инә|н а|рлә|си | ва|ә в|раг|н б|ә м|ама|ры |н и|әра|нма|ынд|инс| өз|аны|ала| ал|ик |ә д|ләт|ирл|ил | ди|бил|ығы|ли |а б|әлә|дил|ә е|унм|алы|мүд| сә|ны |ә и|н в|ыг |нла|үда|аси|или| дә|нса|сан|угл|уг |әтл|ә о|хси| һе|ола|кил|ејн|тәр|јин| бу|ми |мәс|дыр|һәм| да|мин|иш | һа| ки|у в|лан|әни| ас|хал|бу |лығ|р в| ед|јан|рә |һеч|алг| та|еч |и с|ы һ|сиа|оси|сос|фиә|г һ|афи|ким|даф| әс|ә г| иш|н ә|ији|ыгл|әмә|ы о|әдә|әса| со|а г|лыд|илл|мил|а һ|ыды|сас|лы |ист| ис|ифа|мәз|ыр |јар|тлә|лиј|түн|ина|ә т|сиј|ал |рил| бү|иә |бүт| үч|үтү|өз |ону| ми|ија| нә|адә|ман|үчү|чүн|сеч|ылы|т в| се|иал|дах|сил|еди|н е|әји|ахи|хил| ҹә|миј|мән|р а|әз |а в|илд|и һ|тәһ|әһс|ы в|һси|вар|шәр|абә|гу |раб|аја|з һ|амә|там|ғын|ад |уғу|н д|мәһ|тәм| ни|и т| ха',
        koi:
          'ны |ӧн | бы|да | пр|пра|рав| мо|лӧн| да|быд|лӧ |орт|мор|ӧм |аво|ӧй | ве|ыд | не|нӧй|ыс |ын |сӧ |тӧм|сь |во |эз |льн|ьнӧ|тны|д м| ас|ыны|м п| по|сьӧ| и |то |бы | ӧт| эм| кы|аль|тлӧ|н э| от|вер|эм | кӧ|ртл|ӧ в| ко|воэ|ств|ерм|тшӧ| до|ола|ылӧ|вол|ас |ӧдн|кыт|ісь|ето|нет|тво|ліс|кӧр|ӧс | се|ы с|шӧм|а с|та |злӧ| ме| ол|аци|ӧ к|ӧ д|мед| вы|вны|а в|на |з в| на|ӧ б|лас|ӧрт| во| вӧ| сі|лан|рмӧ|дбы|едб|ыдӧ|оз |ась| оз| сы|ытш|олӧ|оэз|тир|с о| чу|ы а|оти|ция|ись|ӧтл| эт|рты| го|ы п|ы б|кол|тыс|сет| сь|рті|кӧт|о с|н б|дз |н н| мы| ке|кер|тӧн|тӧг|ӧтн|ис |а д|мӧ |ост|ӧ м| со|онд|нац|дӧс|итӧ|ест|выл| ви|сис|эта| уд|суд|нӧ |удж|ӧг |пон|ы н|н п|мӧд|а п|орй|ӧны|ӧмӧ|н м|ть |сыл|ана|ті |нда|рны|сси|рре|укӧ|з к|чук|йын|рез| эз|ысл|ӧр |ьӧр|с с|с д|рт |с в|езл|кин|осу|эзл|й о|отс| тӧ|ы д| ло| об|овн|лӧт|асс|кӧд|с м|ӧ о|нал|быт|она|ӧт |слӧ|скӧ|кон|тӧд|ытӧ|дны|а м|ы м|нек|ы к|ӧ н|асл|дор|ӧ п| де| за|а о| ов|сть|тра| дз|ь к|ӧтч|н к| ст|аса|етӧ|ьны|мӧл|умӧ|сьн| ум|ерн|код| пы|тла|оль|иал|а к|н о| сэ|а н|ь м|кыд|циа|са | ли|а б|езӧ|й д| чт|ськ|эсӧ|ион|еск|ӧ с|оци|что|ан |соц|йӧ |мӧс|тко|зын|нӧя|вес|енн| мӧ|ӧтк|ӧсь|тӧ |рлӧ|ӧя |оля|рйӧ|ӧмы|гос|тсӧ|зак|рст|з д|дек|ннё|уда|пыр|еки|ако|озь| а |исӧ|поз|дар|арс|ы ч',
        bel:
          ' і | пр|пра|ава| на|на | па|рав|ны |ць |або| аб|ва |ацы|аве|ае | ча|ння|анн|льн| ма| св|сва|ала|не |чал|лав|ня |ай |ых | як|га |век|е п| ад|а н| не|пры|ага| ко|а п| за|кож|ожн|ы ч|бод|дна|жны|ваб|цца|ца | ў |а а|ек |мае|і п|нне|ных|асц|а с|пав|бо |ам |ста| са| вы|ван|ьна| да|ара|дзе|одн|го |наг|він|аць|оўн|цыя|мі |то | ра|і а|тва| ас|ств|лен|аві|ад |і с|енн|і н|аль|най|аво|рац|аро|ці |сці|пад|ама| бы| яг|яго|к м|іх |рым|ым |энн|што|і і|род| та|нан| дз|ні |я а|гэт|нас|ана| гэ|інн|а б|ыць|да |ыі |оў |чын| шт|а ў|цыі|які|дзя|а і|агу|я п|ным|нац| у | ўс|ыя |ьны|оль|нар|ўна|х п|і д|ў і| гр|амі|ымі|ах | ус|адз| ні|эта|ля |воў|ыма|рад|ы п|зна|чэн|нен|аба| ка|ўле|іна|быц|ход| ін|о п| ст|ера|уль|аў |асн|сам|рам|ры | су|нал|ду |ь с|чы |кла|аны|жна|і р|пер|і з|ь у|маю|ако|ыцц|яко|для|ую |гра|ука|е і|нае|адс|і ў|кац|ўны|а з| дл|яўл|а р|аюч|ючы|оду| пе| ро|ы і|вы |і м|аса|е м|аду|х н|ода|адн|нні|кі | шл|але|раз|ада|х і|авя|нав|алі|раб|ы ў|нна|мад|роў|кан|зе |дст|жыц|ані|нст|зяр|ржа|зак|дзі|люб|аюц|бар|ім |ены|бес|тан|м п|дук|е а|гул|я ў| дэ|ве |жав|ацц|ахо|заб|а в|авы|ган|о н|ваг|я і|чна|я я|сац|так|од |ярж|соб|м н|се |чац|ніч|ыял|яль|цця|ь п|о с|вол|дэк| бе|ну |ога| рэ|рас|буд|а т|асо|сно|ейн',
        bul:
          ' на|на | пр|то | и |рав|да |пра| да|а с|ств|ва |та |а п|ите|но |во |ени|а н|е н| за|о и|ото|ван|не | вс|те |ки | не|о н|ове| по|а и|ава|чов|ни |ане|ия | чо|аво|ие | св|е п|а д| об|век|ест|сво| им|има|ост|и д|и ч|ани|или|все|ли |тво|и с|ние|вот|а в|ват|ма | ра|и п|и н| в |ек |сек|еки|а о| ил|е и|при| се|ова|ето|ата|воб|обо|бод|аци|ат |пре|оди|к и| бъ| съ|раз| ос|ред| ка|а б|о д|се | ко|бъд|лно|ния|о п| от|ъде|о в|за |ята| е | тр|и и|о с|тел|и в|нит|е с|ран| де|от |общ|де |ка |бра|ен |ява|ция|про|алн|и о|ият|ст |нов| до|его|как|ато| из|нег|а т|ден|а к|щес|а р|тря|а ч|ряб|о о|вен|ябв|бва|дър|гов|нац|ено|тве|ърж|е д|нос|ржа|а з|вит|зи |акв|лен| та|ежд|и з|род|е о|обр|нот| ни| с |т с|нар|о т|она|ез |йст|кат|иче| бе|жав|е т|е в|тва|зак|аро|кой|осн| ли|ува|авн|ейс|сно|рес|пол|нен|вни|без|ри |стр| ст|сто|под|чки|вид|ган|си |ди |и к|нст| те|а е|вси|еоб| дъ|сич|ичк|едв|жен|ник|ода|т н|о р|ака|ели|одн|елн|лич| че|чес|бще| ре|и м| ср|сре|и р|са |лни| си|дви|ичн|жда| къ|оет|ира|я н|дей| ме|еди|дру|ход|еме|кри|че |дос|ста|гра| то|ой |тъп|въз|ико|и у|нет| со|ави|той|елс|меж|чит|ита|що |ъм |азо|зов|нич|нал|дно| мо|ине|а у|тно|таз|кон|лит|ан |клю|люч|пос|тви|а м|й н|т и|изв|рез|ази|ра |оят|нео|чре',
        kaz:
          'ен |не | құ|тар|ұқы| ба| қа|ға |ада|дам|құқ|ық | бо| ад|ықт|қта|ына|ар | жә|ың |ылы|әне|жән| не|мен|лық|на |р а|де | жа|ін |а қ|ары|ан | әр|қыл|ара|ала| ме|н қ|еме|уға|ның| де|асы|ам |іне|тан|лы |нды|да |әр |ығы|ста|еке| өз|ын |ған|анд|мес| бі| қо|ды |ің |бас|бол|етт|ып |н б|ілі|қық|нде|ері|е қ|алы|нем|се |бір|лар|есе|ы б|тын|а ж| ке|тиі|ост|ге |бар| ти|е б| ар|дық|сы |інд|е а|аты| та| бе|ы т|ік |олы|нда|ғын|ры |иіс|ғы | те|бос|луы|алу|сын|рын|еті|іс |рде|қығ|е ж|рін|дар|іні|н ж|тті|қар|н к|ім | ер|егі|ыры|ыны| са|рға|ген|ынд|аны|уын|ы м|лға|ана|нің|тер|уы |ей |тік|ке |сқа|қа |мыс|тық|м б|ард| от|е н|е т|мны|өзі|нан|гіз|еге| на|ы ә|аза|ң қ|лан|нег|асқ|кін|амн|кет|рал|айд|луғ|аса|ті |рды|і б|а б|ру | же|р м|ді |тта|мет|лік|тыр|ама|жас|н н|лып| мү|дай|өз |ігі| ал|ауд|дей|зін|бер|р б|уда|кел|біл|і т|қор|тең|лге| жү|ден|ы а|елі|дер|ы ж|а т|рқы|рлы|арқ| тү|қам|еле|а о|е ө|тін|ір |ең |уге|е м|лде|ау |ауы|ркі|н а|ы е|оны|н т|рыл|түр|ция|гін| то| ха|жағ|оға|осы|зде| ос|ікт|кті|а д|ұлт|лтт|тты|лім|ғда| ау| да|хал|тте|лма| ұл|амд|құр|ірі|қат|тал|орғ|зі |елг|сіз|ағы| ел|ң б|ыс | ас|імд|оты| әл|н е|ағд|қты|шін|ерк|е д|ек |ені|кім|ылм|шіл|аға|сты|лер|гі |атт|кен| кө|ым‐| кұ|кұқ|ра |рік|н ә| еш',
        tat:
          ' һә|лар|әм |һәм| ке| хо|кук|оку|хок|еше| бе|ләр|кеш|га |әр |рга|ан |кла| бу|ар |ең |нең|гә | то| ба|да |ргә| ти|ырг|һәр|ене|бер|ән |ен |р к|бул|укл|дә |а т|ары|тор|ире| үз|на |ган|ара| ка| ал|ә т|нә | ит| дә|ы б| ир|рын|ше |ын |енә|тие|лык|екл|ына|н т|иеш|бар|еле|ка |елә|а х|н б|кы |рек|ала|кар| та|ә к|нда|еш |лән|бел|укы|лан|ите|тә |шен|ле |лы |ез |ерг|н и|ә б|а к|клә|үз |тел|лыр|не |әрг|ы һ|е б| га| ха|алы|рне|м и|тен|әрн|а б|ның|ынд|ың |ләт|дан|сә | як|лга|улы|ел |а а| яи|яис|асы|ш т|а һ| са|рлә|лек|иге|ә х|гез|орм|ем |аны|р б|м а|р һ|рмы|мыш|сын|шка|ә һ|исә|тәр|үлә|әт |мәт|сен|сез|чен| ни|ә и|н м|илл|ять|ны |ылы|үзе| ки| эш| ту|алу|акы|ып |уга|ль |тан|н к|лу |бу |мас|рен|кә | тү| тә|түг|зен| җә|тын|ди |баш|кле|гән|ть | би|әре|штә|гын|әүл|ер |мил| ми|клы|гел|ыш |лер|ерл|әве|рдә|а я|р а| мә| рә|лем|хал| ан|ң т| аш|ык |ция|е х|стә|ә д|аль|рак|ек | де|рәв|тот|кән|улг|орг|веш|ешт|ни |итә|кка|м т|үге|шел|а и|ндә| да|рел|кер| кы|ерә|та |н я|еге|ый |а д|аци|р о|шла|тлә|әтл|н д|айл|ллә|ард|рда|кта|шкә| за|ге |ләш|ш б|әсе|кон|шыр|циа|нин|лау|уры|ры |оты|әне| тө|инд|нди| җи|оци|соц|лә |арт|якл|зак|тиг|рке| ди| со|ыкл|кем| ко|р и|ң б|әте|гыя|чар|үгә|ин |иле| сә| ил|мгы| ае|н а|аер|ыны|л һ',
        tuk:
          ' би|лар| ве|ве |да |ада|ары| хе|ир | ад|бир|дам|кла|ер |р б|ың | ха|ара|га |ен |лан|ыны|или|дыр|ам |ала| бо|хер|р а|ыр |лы |лер|ан |бил|иң |ыды|р х|акл|нда| өз|клы|ны |хук|ери| ху|уку|ага|не |лыд|ине|ына|лен|на |хак|де |‐да|ин |рын|атл| эд|маг|өз | де|асы|лыг|кук|е а|ынд|алы|лма|бол|дан|ини|а х| я‐|е х|ге |иле|я‐д|ар |ама|ли |ыгы|ети| ба| га|гын|ере|укл|лиг|ның|зат|лык|тлы|нде|ни |лик|ден|мак|сын|дил|ры |аны|кин|әге|п б|а г|хем|иги|эрк|аза|а д|мек| эр|мал|ыкл|мәг|сас| эс|екл| ма|рин|эса|ола|ы б|айы|н э|эди| гө| хи|сы | аз|баш|ы д|йда|шга|ашг|а в| до|ыет|ы в|дак|ниң|рки|гал|чин|гда|ак | җе|а б| эт|этм|кы |лет|йән| та|гин|ян |тме|хич|ич |мез| гу|хал|ылы|үнд|илм|дай|ягд| яг|и в|им |акы|ы г|ән |а а|рың|ги |тле|н м| го|ип |ал |еси| се|лме| ка|м х|дең|ң х|е д|дир|илл|рил| ал|кан|е г|лин|ра |дол| бе| ми|мил|ң д|н х|ели|н а|е м| ге|ы х| дө|ик | со|ң а|чил|дөв|е б| са|гар|е в|ең |н б|рма| ме|кли|үчи| дә| үч|ция|н в| дү|и б|айд|кле|сер|а я|соц|гор|оци|дал|мы |олм|циа|уң | он|уп |кда|дәл|ири| ди|еле|лип|алк|лим|гур|үни|нме| әх|н г| иш|ы ө|ң э|нун|еги|тин|ы а|рле|аци|ыз |з х|сыз|аха|м э|олы|рам| ту| ни|ып |ерт|алм|ора|и х|хли|әхл|к э|өвл|вле|тмә|ет |нли|ахс|гөз|гы |етл|ы ү|нуң|ону|сиз|емм|ек ',
        tgk:
          'ар | ба| ҳа| да|ад | ва|он |ва | та|дар|ти | ин|ба | бо| ки|аро| до|ои |дор|ард|ки |бар|д ҳ|уқу| як|ин |ҳар|и о| на| ма|и м|ора| ҳу|як |ни |нсо|инс|и ҳ|аи |и б|сон|рад| му|ҳои|р я|ҳуқ|қуқ|ҳақ|ии |к и| ша|и д| аз|и и| оз|нд |яд |қ д|озо|аз |зод|анд|д б|ояд| ка|ият|она|да |амо|ақ |а б|ди | ё |гар|ат |дан|ҳам|оди|рда|моя| он|уда|қи | ху|бо |и т|дон|ст |нам|н ҳ|ода|и с|ан |н б|мил|и х|бош|они|оша|худ|ава|боя|аст|и а|ро | ме|а ҳ|имо|ила|оми|оба|ида|кар|н д|лат|д в|а ш|ҳо | ас|таҳ|рои|и н|д к|яти| ди|шад|ӣ в|ри |рдо|шав| ми|е к|роб|тар|та |кор| бе|о д|вад|мон|иҳо|ли |уд |оси|ошт|ми |р м|ати|т б| со|ӣ ё|нҳо|мин|шар|ара|таъ|ани|а в|иро|а д|дав|ят |даа| са|ама|дош|раф|шуд|лӣ |д а|оти|а м| фа|ист|ор |р ҳ|на |и к|р к|д т|и ҷ|и ш| эъ| су|н м|н в|и ӯ|фи |вар|диҳ|ига|зар| шу|ари|а т| иҷ| ақ| ҳи|асо|р б|т ҳ|а а|одо|мум|р в|а о| ӯ |рон|наз|диг| ни|бот| ҷа|авр| қа|яи |р д|уқи|лал|кас|шта|уна|еҷ |ино|тҳо|уни|або|сти| во|авл|и қ|вла|ун |у о|ӣ б| ҳе|дӣ |қу |чун|н и|сар|ояи|тав|маҳ|онҳ|қар|атҳ|тир|оҳ |ахс| қо|уқ |оли| ис|д д|и з| ко|аза|ори|фар|сос|ран|н к|р а|ҷти|ону|сӣ |ири|рра|рӣ |ҳеҷ| за|ид |ҳти|рии|ами|қон|уди|н н| од|иҷт|мия|ъло|лом|ию |наи|али|нда|оӣ |оят|янд| зи|оян|ӣ ҳ|и п|офи|киш|ҳим|рат|тим',
        kir:
          ' жа|на |ана|жан| би|уу |уку|га |бир| ук|ар |ен |луу|тар|кук|укт| ка| ад|ын |ада|ууг|дам| ме|уга|ык | ар|ене|мен|нен|ан |ары|олу| бо|ин |ам |ган|ир |бол| ал|ара|нда|н к|туу|р б|н ж| ба|анд| же|р а|кта|ына|ард|кту|эрк|үн |да |н б|н э| эр|нди|а т| ко|рды|н а|дык|рки|инд|а ж|кин|ала|а а|лар|аны|үү | өз|а к|тер|алу| та|а у|алы|а э|же |ук |ийи| ти|иш |тий| ма|гө |кыл|йиш|улу|нын|ке |н т|кар|бар|или|у м| кы|иги|рын|а б|үгө|рга|е а|ун |етт|дик| ту|дар|тта|баш|у а|н у| ээ|дын|им |рүү|гин|лык|ушу|нды|тур| са| эл| эм| мү|гон|лга|алд|икт|үүг| бе|ры |өз |нан|он | ан|кте|ул |дай|ерд|диг|р м|ери|үчү| не|атт|лды|еке|еги|үнө|лук|амд|у б|ынд|үнү|рди|тук|ка |кан|к ж| ки|м а|күн|не |ине|мда|рин|ого|кет| со|кам|дин|к м| эч| то|сыз|ылу|өзү| де|н м|ция|ээ |чүн|гиз|уп |нег|эч |руу|ыз |мес|эме| иш|лут|ы м|шка|ыкт|мам|ашк|лде| ке|лго| тү|ө ж|олг|ес |к т|кор|ге |бил|түү|угу|рал|алг|тын|кен| ул|лим|утт|ыгы|орг|н н|у ж|рде|нуу|тал|ч к|рго|мак| те| уш|уну|ктө|ди |акт|нүн| ди|зүн|иле| кө|кат|аци|мсы| эс|тык|е к|ей |тан|е э|ай |ер |соц|оци|циа|аты| жо|к к|амс|лан|а м|ири|ске|айд|ирд| мы|ылы|зги|ыны|ага|ген|е б|шул|тол|өнү|дыг|е ж|ү ү|з к|айы|раб|енд|абы|жал|ү ж|оо |уна|к а|кал|лек|ект|рма|дей| үч|тоо|мат|у э|бер',
        mkd:
          ' на|на | пр| и |во | се|то |ите|те |рав|та |а с|пра|ува|да | да| не|ва |а п|а н|и с|ата|о н|еко|а и| по|но |ој |кој| со| за| во|ств|ја |ње |ање|аво|ни | им|от |е п|е н|ма |ат |вањ|ост|а д|о с|е и|се |ова|ија|и п| сл|а о|има|сек|сло|ото|ли |о д|ава|обо|о и| ил|или| би|бод|и н|лоб| од|бид|ред|ен |при|вот|иде|а в|ста| об|и и|и д|пре|нос|ст |е с| ни| ќе|ове|аат|аци|ќе |со |ови|про|ј и|тво| ра|ест|што| де|т и|акв| ко|раз|гов|его|нег|ани|едн|ако|циј|бра|од |а з|е б|и о|а б|о п|ват| е | др|ето|ваа|как|ди |т с| ка| чо|ени|алн|одн|ено| си|чов| шт|а г|а е|вен|нит| ја|де |оди|е о|ран|и з|сно|нот| ед|тит|лно|ви |јат|ден|т н|нац| оп| до| ос|и в|осн|кон|дна|е д| ст|век|о о|род|сто|сит|еме|ара|дно|обр|ј н|пшт|еди|опш|за |ние|аро|нов|а к|вни|дру| ов|тве|жив|ште|д н|ие | ме|ед |иот|и м|о в|ќи |дат|шти|јќи|без|бед|ки |ков|ко |а р|нар|чно|дни| вр|ели|нак|ашт|ичн|ка |ема|цел|зем|еду|чув|тес|држ|ник|т п|луч|аа |деј|нст|не |а ч|руг|ода|ивн| це|нив|дин|авн| зе|нио|пор|а м|заш|лас|вит|дек|го |ине|ело|нет|ез |тен| ре| из|под|раб|або|бот|дув|нув| бе|ење|еде|он |њет|зов|иту|ван|н и|аѓа|е в|еѓу|рем|дел|о к|кот|им | жи|дос|вре|меѓ|олн|нап| го|емј|кри|уна|нем|оја| су|ита|азо|лит|тор|инс|ора|огл|ипа|пот|слу|кви',
        khk:
          ' эр|эрх| хү|ний|н б|эн |тэй|ийг|х э|эй | бо|хүн| бү|йн |ан |ах | ба|ийн|бол|ий | ха|бай|уул|рх |оло|й х|йг |гаа|эх |бүр|гүй|үн | бу|он |аар|рхт|үнд|хтэ|үр |лэх|ар | за|н х|лах|эр | хэ|й б|өлө|н э|лөө|эл | үн|аа | ул|ын |хий|үй | ор| ту|улс|ула|үлэ| чө|чөл|н т|үүл| ху|сэн| ни|ндэ|лон|гээ|р х|өөр|сан| нэ|ны | ёс|нь |эд | гэ| нь| ч | тө| тэ|лаг|оро|дэс|лс |г х|ох |үни|ээр|хам|х ё| ша|д х|р э|лго|лд | дэ|н а|бую|уюу|гуу|төр|ай |юу |тай|ээ |ж б|эг |лий|хан|ыг | эд| то|х б|дсэ|й э|рга| ал|хар|арг|ад |лга|рэг| зо|айг|ага| тү|л х|ал | хө|өөт| са|н н|йгэ|дэл|нд |гий|н з|ол |ава|лла| өө|рол|өтэ|гэр|г б|л б|бус|нэг|н д|аг |аал|н ү|алд|рла| үз|гэм|й а|н у| ол|хуу|х ч|эрэ|мга|олг|эс |хүү|той| ар|үү |лал| эн| мө|йх |ин |өрө|х т|луу|рий|сон| га|хэн|айх|эни| ам|гла|өр |аса|ана|амг| би|ард| ял|йгм|ой |лын|үрэ|эгт| ав|эдэ|оо |мий|х н|аан|үйл|арл|нха|тгэ|дээ|с о|рхи|лов|д н|тэг|өг |өн |хэр|лэн|өөг|үүн|вср|га |р т| хи|хүр|рон|ч б| хо|гөө| мэ|бие|н г|ура|бүх|ори|али| аж| үй| яв|өх |хээ|г н|ата| та|гш |г ү|эгш|вах|лох|эгд|длэ|х ү|гох|үх |энэ|лж |олц| шү|л т| да|дал|эж |д б|лан|й т|айл|л н|х а|агл|тоо| со|өри|йгу|гми|дил|ээн|дар|н ш|шүү|овс| ад|а х|р ч|ади|ааг|лаа|айд|амь|гтэ|н с|д т|ийт|лэл|х ш|н ч|унх',
        kbd:
          'гъэ|ыгъ| къ| ху|ыху|ныг| зы|эм |ну |хуи|хуэ|ъэ | и |уит|эхэ|къы|гъу|тын| зэ|э з|ӏых|ым |ъэр|хьэ|эр | цӏ|цӏы|хэм|э и|ъуэ|эху|агъ|ыны|иты|нэ |къэ|зы |уэ | дэ|эу |м и|эгъ|эну|энэ|эны|рал|эра|эщ |хъу|м х|тхэ|этх|ӏэ |хэн|дэт|э х|у х|игъ|щхь|ы ц|зэх| гъ| хэ|кӏэ|рэ |ыну|ъэх|у з| щы|ум |уэф|щӏэ|эдэ|хэр|ъун|ми |хум|лъэ|уэд|іэ | ик|мрэ|уэн|ъэм|хэт|м к| нэ|и х|э щ|хуа|эмр|э к|псо|лъы|экӏ| мы| е |иіэ| иі| я |ъэп|у д|фащ| лъ|ащэ|къу|эры|зэр|р з|эфа|ӏи |ти |алъ|эти|ри |іэщ|э г|ал |уэх|ауэ|щіэ| хъ| щӏ|уну|ъым|ъэщ|езы|зых|экі|у к|м щ|кіэ|ӏуэ|ншэ|ъых|ху |ъыщ|щэх|алы|икӏ|зым|бзэ|у и|укъ|кӏи| пс|эщӏ| щх| ха|абз|м е|іуэ|и к|эгу| гу|уне|ней| ун|ыхэ|умэ|ӏэщ|нук|у щ|эпэ|ъум| иӏ|ьэн|иӏэ|хаб|щыт|эпс| ез|хъэ|лым|ыхь|и ц|риг|щӏы|ъэк|ъыт|зэг|эри|шэу|нэг|ъэж|эщх|ъэу|эхъ|у п|мы |ейп|дэ |эн |уу | ду|и з|сэн|ъэз| ам|йпс|пхъ|ама|мал|дун|алх|лхэ|мэн|дэу|ьэ |ьэп|э д|м з|ьэх|ылъ|ыщы|уэщ|іых|уна|ціы| ці| щі|э я|щіа|хур|эжы|эсэ|ту |э е|н х| зи|со |эты|ъэс|сом|ыкӏ|нэх|псэ|и л|апщ|хэг|ъуа|ынш|и н|лъх|жьэ|и д|ызэ|жын|пщӏ|пкъ|егъ|энш|ам |апх|ыр |ъэг| ир| те|иту|и и|р и|ным|м я|и щ|м д|псы|э п|эщі|ыт |хуе|кӏу|тэн|эзэ|джэ|э л|гуп| за|къе|ыдэ|уэм|афэ|ужь|жьы|уэт|и у|оми|ын |ыты|ытэ|раг|ур |ыкъ|сэх|пса|и я|р щ|эми|сэу|эпк|кэ '
      },
      Arabic: {
        arb:
          ' ال|ية | في|الح|في | وا|وال| أو|ة ا|أو |الم|الت|لحق|حق |لى |كل |ان |ة و|الأ| لك|لكل|ن ا|ها |ق ف|ات |مة |ون |أن |ما |اء |ته |و ا|الع|ي ا|شخص|ي أ| أن|الإ|م ا|حري| عل|ة ل|من |الا|حقو|على|قوق|ت ا|أي |رد | شخ| لل| أي|ق ا|لا |فرد|رية| ول| من|د ا| كا| إل|خص |وق |ا ا|ة أ|ا ي|ل ف|ه ا|نسا|جتم|ن ي|امة|كان|دة | حق|ام |الق|ة م| فر|اية|سان|ل ش|ين |ن ت|إنس|ا ل| لا|ذا |هذا|ن أ|لة |ي ح| دو|ه ل|لك |ترا|لتع|اً |له |إلى| عن|ى ا|ه و|ع ا|ماع|د أ|اسي| حر|ة ع|مع |الد|نون| با|لحر|لعا|ن و|، و|يات|ي ت|الج| هذ|ير |بال|دول|لإن|عية|الف|ص ا| وي|الو|لأس| إن|أسا|ساس|ماي|حما|رام|سية|انو|مل |ي و|عام|ا و|تما| مت|ة ت|علي|ع ب|ك ا| له|ة ف|قان|ى أ|ول |هم |الب|ة ب|ساو|لقا|الر|لجم|ا ك|تمت|ليه|لتم|لمت|انت| قد|اد |ه أ| يج|ريا|ق و|ل ا|ا ب|ال |يه |اعي|لدو|ل و|لإع|لمي|لمج|لأم|تع |دم |تسا|عمل|اته|لاد|رة |اة |غير|قدم|وز |جوز|يجو|عال|لان|متع|مان|فيه|اجت|م و|يد |تعل|ن ل|ر ا| يع| كل|مم |مجت|تمع|دون| مع|تمي|ذلك|كرا|يها| مس|ميع|إعل|علا| تم| عا|ملا|اعا|لاج|ني |ليم|متس|ييز|يم |اعت|الش| تع|ميي|عن |تنا| بح|لما|ي ي|يز |ود |أمم|لات|أسر|شتر|تي | جم|ه ع|ر و|ي إ|تحد|حدة| أس|عة |ي م|ة، |معي|ن م|لمس|م ب|اق |جمي|لي |مية|الض|الس|لضم|ضما|لفر| وس|لحم|امل|ق م|را |ا ح|نت | تن|يته| أم|إلي|واج|د و|لتي| مر|مرا|متح| ذل| وأ| تح|ا ف| به| وم| بم|وية|ولي|لزو',
        urd:
          'ور | او|اور|کے | کے| کی|یں | کا|کی | حق|ے ک|کا | کو|یا |نے |سے | اس|ئے |کو |میں| ہے| می|ے ا| کر| ان|وں | ہو|اس |ر ا|شخص|ی ا| شخ| سے| جا|حق |خص |ہر |ام |ے م|ں ک|ہیں| یا|سی | آز|آزا|زاد|ادی|ائے|ا ح|ص ک|ہ ا|ہے |جائ|ت ک|ر ش|کہ |م ک| پر|ی ک|پر |ان |ا ج|۔ہر|س ک|دی |ہے۔|ق ہ|ی ح|ں ا|و ا|ر م|ار |حقو|قوق|ن ک|ری |کسی|ے گ|ی ج| مع| ہی|وق |سان|نی |ر ک|کرن|ی ت| حا| جو|تی |ئی | نہ| کہ|ل ک|اپن|جو |نسا|انس|ہ ک|ے ب|نہ |ہو | مل| اپ|یت |می |ے ہ|رنے|ے ل|ل ہ|ا ا| کس|رے |ی ش| ای|وہ |۔ ا|اصل|نہی|صل |ی م|یں۔|حاص|معا|د ک|انہ|ایس|ی ب|ی ہ|ملک|ق ک|ات | تع|دہ |قوم| قو|ے، |ر ہ|ا م|یہ | دو| من| بن| گا|اشر|کیا|ں م|عاش|وام| عا|اد |قوا|ی س|بر |اقو|انی| جس| لئ|لئے|دار|ر ب|ائی| وہ|ے۔ہ|مل |ے ج|علا|یوں| یہ|ے ح|ہ م|و ت|جس |ا ہ|کر |ر ن|لیم|انو| قا| و |ے۔ | اق|یم |ریق|لک |گی |ی آ|دوس| گی|وئی|ر پ|، ا|نیا|تعل| مس|ر ع|ی، |یر |لاق|خلا| رک|ین | با|ن ا|ی ن|ے پ|پنے|وری|ا س| سک| دی|ون |گا۔|م ا|انے|علی|یاد|قان|نون|س م|اف |رکھ| اع| پو| شا|وسر|ق ح|سب | بر|رتی| بی|اری| بھ|رائ| مم|ر س|یسے|ومی|دگی|ندگ| مر| پی| چا|و گ|نا |ے خ|ہ و|ادا| ہر|ا پ|تما|پور|مام|ے ع|ائد| عل|بھی|ھی |عام| مت| مق|من |د ا| ام|ونک| خل|نکہ|لاف|اعل|کوئ|اں |ریع|ذری| ذر|بنی| لی|و ک|دان|ں، |ے ی|ا ک| مح|، م|ت ا|ال |پنی|ے س|ر آ|ر ح|دیو|غیر| طر|ہوں|ی پ|ِ م|کرے| سا|اسے|رہ |برا',
        fas:
          ' و | حق| با|که |ند | که| در|در |رد | دا|دار|از | از|هر | هر|یت |ر ک|حق |د ه|ای |د و|ان | را|ین |ود |یا | یا|را |ارد|ی و|کس | کس| بر| آز|باش|ه ب|آزا|د ک| خو|ه ا|د ب|زاد| اس|ار | آن|ق د|شد |حقو|قوق|ی ب|وق |ده |ه د|ید |ی ک|و ا|ور |ر م|رای|اشد|خود|ادی|تما|ری | اج|ام |دی |اید|س ح|است|ر ا|و م| ان|د ا|نه | بی|با | هم| نم|مای| تا|د، |ی ا|انه|ات |ون |ایت|ا ب|ست | کن|برا|انو| بش| مو|این| مر|اسا| مل|وان|ر ب|جتم| شو| اع|ن ا|ورد| می| ای|آن | به|و آ|ملل|ا م|ماع|نی |ت ا|، ا|ت و|ئی |عی |ائی|اجت|و ب|های|ن م|ی ی|بشر|کند|شود| من| زن|ن و|ی، |بای|ی ر| مس|مل |مور|ز آ|توا|دان|اری|علا|گرد|یگر|کار| گر| بد|ن ب|ت ب|ت م|ی م| مق|د آ|شور|یه |اعی| عم|ر خ|ن ح| کش|رند|مین| اح|ن ت|ی د| مت|ه م|د ش| حم|و د|دیگ|لام|کشو|هٔ |ه و|انی|لی |ت ک| مج|ق م|میت| کا| شد|اه |نون| آم|اد |ادا|اعل|د م|ق و|ا ک|می |ی ح|لل |نجا| مح|ساس|یده| قا|بعی|قان|ر ش|مقا|ا د|هد |وی |نوا|گی |ساو|ر ت|بر |اً |نمی|اسی|اده|او | او| دی| هی|هیچ|ه‌ا|‌ها|یر |خوا|د ت|همه|ا ه|تی |حما|دگی|بین|ع ا|سان|ر و|شده|ومی| عق| بع|ز ح|شر |مند| شر|ٔمی|أم|تأ|انت|اند|اوی|مسا|ردد|بهر| بم|ارن|یتو|ل م|ران|و ه|ر د|م م|رار|عقی|سی |و ت|زش | بو|ا ا|ی ن|موم|جا |عمو|رفت|عیت| فر|ندگ|واه|زند|م و|نما|ه ح|ا ر|دیه|جام|مرد|ت، |د ر|مام| تم|ملی|نند|الم|طور|ی ت|تخا|ا ت|امی|امل|دد | شخ|شخص',
        zlm:
          ' دا|ان |دان| بر| او|ن س| ڤر|له |كن |ن ك|ن ا|دال|ن د|رڠ |يڠ |حق | يڠ|ارا| كڤ|أن |تيا|ڤد |ورڠ|ڠن |ياڤ| تر|اله|ولي|ن ڤ|اور|كڤد|برح|رحق|ين |اڤ |را | ات|ليه|ستي|ه ب|يه |اتا| ست| عد|عدا|ن ب|تاو|ن ت|يبس|ڤ ا|او |بيب|سي | كب|ه د|ن م| سو| من| حق| سا|لم |ق ك|اسا|الم|ن ي| تي| اي|سام|رن |ن، | ما|اتو|باڬ|بسن|سن |نڬا|ڬار|اين| مم|د س| با|كبي|ي د|ڠ ع|چار| سب|ڽ س|اڬي|د ڤ|ندق|سبا|اڽ | د | ڤم|نسي|قله|يند|ڬي |ام |تن |وان|تا |اون|ي ا| نڬ|هن | بو|ا ڤ|أنس|بول| كس| سم| سچ|ڠ ب|سچا|مأن|ا ب|ا س|بڠس| ڤڠ|دڠن|سيا|اسي|ساس| مأ| دڠ| اس|بار|هند|مان|ارڠ|رتا|دقل|تي |ت د| هن|ڤرل|نڽ |ات |ادي|ق م|، ك|تره|رها|هاد| ڤو|ادڤ| لا|ي م|ڤا |يكن|اول|ڤون|، د|ون |ڠسا|٢ د|اي |ق٢ |تو |وق |دڤ |يأن|وين|ن ه|ن٢ |ا د|وڠن|نتو|اكن|وا |ندو|وات|ه م|ي س|ڠ٢ | مڠ| ان|حق٢|يك |اد |مڤو|رات|اس |مرا|برس|ائن| مل| سس|ماس| كو|ري | بي|سوا|ڠ ت|ا، |، ت|ياد|امر|سمو|ڠ م|ڤرا|لوا|ڤري|دوڠ|ي ك|ل د|تار|ريك|تيك|ارك|ونت|لين| سر|رلي|سرت|وند|واس|رسا|ڤمب|ترم|، س|اڬا|يري|رأن| در|ا ا|دير| بڠ|ي ڤ|لائ|سوس|ڠ س|توق|سأن|ورو|جوا|هار|اڤا|وكن| ڤن|٢ ب|موا| كم|ارأ|نن |ندڠ|ا٢ | كأ|دڠ٢|و ك|كرج|وه |ا م|ڤرك|تها|اجر|جرن|ي، |شته| سڤ| به|ندي|ق ا|ڠڬو|بها|ڤ٢ | مر|سات|راس|بوا|ه ا|ا ك|د ك| ڤل|ن ح|لاج|هڽ |ڠ ا|مبي|ينڠ|بس | اڤ|ملا|كور|وار|م ڤ|سسي|نتي|تيڠ| دل|سال|وبو|منو|ڤول|مول|ڠ د|نتا|انت|ال ',
        skr:
          'تے |اں | تے|دے |دی |وں | دا| حق| کو|ے ا|کوں| دے|دا | دی|یاں| کی|ے ۔|یں |ہر | ۔ |کیت|ہے | وچ| ہے|وچ | ان| شخ|شخص|ادی|ال | حا|اصل|حق |حاص|ے م|خص |صل |ں د| نا|یا | ای|اتے|ق ح|ل ہ|ے و|ں ک| ات|ہیں|سی | مل|نال|زاد|ازا|ی ت| از|قوق|ار |ا ح|حقو| او|ص ک| ۔ہ|۔ہر|ر ش|دیا|ے ج|وق |ندے| کر|یند| یا|نہ | جو|کہی|ئے |ی د|سان|نسا|وند|ی ا|یتے|انس|ا ا|ملک|ے ح|و ڄ|ے ک|ڻ د| وی|یسی|ے ب|ا و| ہو|ں ا|ئی |ندی|تی |آپڻ|وڻ |ر ک|ن ۔| نہ|انہ|جو | کن| آپ| جی|اون|ویس|ی ن| تھ| کہ|ان |ری |ڻے | ڄئ| ہر|ے ن|دہ |ام |ں م|ے ہ|تھی|ں و|۔ ا|ں ت|ی ۔|کنو|ی ح|ی ک|نوں|رے |ہاں| بچ|ون |ے ت|کو | من|ی ہ|اری|ور |نہا|ہکو|یتا|نی |یاد|ت د|ن د| ون|وام|ی م|قوا|تا |ڄئے|پڻے| ہک|می | قو|ق ت|ے د|لے |اف |ل ک|ل ت| تع|چ ا|ین |خلا|اے |علا| سا|جیا|ئو |کرڻ|ی و|انی|ہو |دار| و |ی ج| اق|ن ا|یت |ارے|ے س|لک |ق د|ہوو| ڋو|ر ت| اے|ے خ| چا| خل|لاف|قنو|نون|پور|ڻ ک| پو|ایہ|بچئ|چئو|ات |الا|ونڄ|وری|این| وس| لو|و ا|ہ د| رک|یب |سیب|وسی|یر |ا ک|قوم|ریا|ں آ| جا|رکھ|مل |کاں|رڻ |اد |او |عزت| قن|ب د|وئی|ے ع| عز| ۔ک| مع|اقو|ایں|م م|زت |ڻی |یوڻ|ر ہ| سم|ں س|لوک| جھ| سی|جھی|ت ت|ل ا|اوڻ|کوئ|ں ج|ہی |حدہ|تعل|ے ذ|وے |تحد|متح|لا |ا ت|کار| اع|ے ر| مت|ر ا|ا م|ھین|ھیو|یہو| مط| سڱ|ی س|ڄے |نڄے|سڱد|لیم|علی|ے ق| ذر|م ت| کھ|ن ک| کم|ہ ا|سار|ائد|ائی|د ا| ہن|ہن |ی، |و ک|ں ب|ھیا|ذری|ں پ|لی ',
        uig:
          ' ئا| ھە|ىنى|ە ئ|نىڭ|ىلى| ۋە|ىڭ |ۋە | ئى| بو|ھوق|وقۇ| ھو|قۇق|نى |بول| ئە|لىك|قىل|ىن |لىش|شقا|قا |ەن | قى|ن ب|ھەم|ى ئ|ئاد|ىشى|دەم|ادە|كى |لىق|غان|ىي |ىغا|گە | بى|دىن|ىدى|ەت |كىن|ىكى|ندا|ۇق | تە|نلى|تىن|ەم |لەت|قان|ىگە|ىتى|ىش |ھەر|ئەر| با|ولۇ|دۆل|غا |اند| دۆ|اق |مە |لۇش|دە |لۇق| ئۆ|ان | يا|ەرق|ۆلە|ركى| قا|ەرك|ەمم|ا ئ|ممە|ۇقى|ىق | بە|رقا|داق|ارا|ىلە|رىم|ىشق|ى ۋ|لغا|مەن|اكى|ەر |ا ھ|دۇ |ياك|ۇقل|ئار|ق ئ|ىنل|لار| ئې|ى ب|لىن|ڭ ئ|ئۆز|ق ھ|شى |ىمە|قلۇ|ن ئ|لەر|ەتل|نىش|ىك |ەھر| مە|ھرى|لەن|ىلا|ار |بەھ| ئۇ|ە ق|ئىي|اسى| مۇ|رلى| ئو|بىر|، ئ|بىل|ش ھ|بار|ى، |ۇ ھ|ايد|ۇشق|شكە|ە ب|يەت|ا ب|رنى|كە |ىسى| كې|ېلى|الى|ەك |م ئ|ماي|ولم|تنى|ىدا|ارى|يدۇ|لىد| قو|ەشك|تلە|ك ھ|انل|ەمد|مائ|ئال|ر ئ|مدە|ىيە|ش ئ|ە ھ|لما|ائى|ئىگ|دا |ي ئ|ۇشى|راۋ|ا، |سىي| تۇ|كىل|ە ت|ىقى|قى |ۆزى|ېتى|ىرى|ىر |ىپ |ى ك|ن، |ر ب|لەش|اسا|اۋا|ى ھ|شلى|ساس|ادى|تى |اشق|ەتت|قىغ|ىما|انى| خى|ۇرۇ| خە|ن ق|منى| خا|چە |ى ق| جە|رقى|تىد| ھۆ|باش|ارل|ئىش|تۇر| جى|مۇش|نۇن|شۇ |انۇ|ۇش |رەك|ېرە|كېر| سا|الغ|ۇنى|ئېل|ىشل|تەش|خەل|مەت|اش |دىغ|كەن|ەلق|تىش|مىن|ايى|سىز|ق ۋ|نىي|جىن|رىش|پ ق| كى|ېرى|ئاس|ەلى| ما|تتى|ىرل|ولى| دە|ارق|سىت|ە م| قە|شىل| تى|ەرن|كىش|ن ھ|ەلگ|ەمن|ك ئ| تو|ى ي|قتى|ئاش|تىم|تەۋ|ناي|ىدە|ىنا| بۇ|ىيا|زىن|امى|قار|شكى|ىز | ئۈ|ەۋە|ۆرم|ە خ|شىش|ىيى|جتى|ىجت|ئىج|نام|تەر'
      },
      Devanagari: {
        hin:
          'के |प्र|और | और| के|ों | का|कार| प्|का | को|या |ं क|ति |ार |को | है|िका|ने |है |्रत|धिक| अध|अधि|की |ा क| कि| की| सम|ें |व्य|्ति|क्त|से | व्|ा अ|्यक|में|मान|ि क| स्| मे|सी |न्त| हो|े क|ता |यक्|क्ष|ै ।|िक |त्य| कर|्य | या|भी | वि|रत्|र स|ी स| जा|स्व|रों|्ये|ेक |येक|त्र|िया|ा ज|क व|र ह|ित |्रा|किस| अन|ा स|िसी|ा ह|ना | से| पर|र क| सा|देश|गा | । | अप|्त्|े स|समा|ान |ी क|्त |वार| ।प|ा प| रा|षा |न क|।प्|ष्ट|था |अन्| मा|्षा|्वा|ारो|तन्|वतन|ट्र|्वत|प्त|ाप्|्ट्|राष|ाष्| इस|े अ| उस| सं|राप|कि |त ह|हो |ं औ|ार्|ा ।|किय|े प| दे| भी|करन|री |जाए|ी प| न |र अ|क स|अपन|े व|ाओं|्तर|ओं | नि|सभी|रा | तथ|तथा|िवा|यों|पर | ऐस|रता|ारा|्री|सम्| द्|ीय |िए |व क|सके|द्व|होग| सभ|ं म|माज|रने|िक्|्या|ा व|र प| जि|ो स|र उ|रक्|े म|पूर| लि|ाएग| भा|इस |त क|ाव |स्थ|पने|ा औ|द्ध|श्य|र्व| घो|घोष|रूप|भाव|ाने|कृत|ो प|े ल|लिए|शिक|ूर्| उन|। इ|ं स|य क|्ध |दी |ी र|र्य|णा |एगा|न्य|रीय|ेश |रति|े ब| रू|ूप |परा|्र |तर्| पा| सु|जिस|तिक|सार|जो |ेशो| शि|ानव|ी अ|चित|े औ| पू|ियो|ा उ|म क|ी भ|शों| बु|म्म|स्त|िश्|्रो|्म |ो क| यह|र द|नव |चार|दिय|े य|र्ण|राध|ोगा|ले |नून|ानू|ोषण|षणा|विश| जन|ारी|परि|गी |वाह|साम|ाना|रका| जो|ाज |ी ज|ध क|बन्|ताओ|ंकि|ूंक|ास |कर |चूं|ी व|य ह|ा ग|य स|न स|त र|कोई|ुक्|ोई | ।क|ं न|हित|निय|याद|ादी|्मा|्था|ामा|ाह |ी म|े ज',
        mar:
          '्या|या |त्य|याच|चा | व |ण्य|प्र|कार|ाचा| प्|धिक|िका| अध|अधि|च्य|ार |आहे| आह|ा अ|हे | स्|्रत|्ये|ा क|स्व| कर|्वा|ता |ास |ा स|ा व|त्र| त्|वा |ांच|यां|िक |मान| या|्य | का| अस|रत्|ष्ट|र्य|येक|ल्य|र आ|ाहि|क्ष| को|ामा|कोण| सं|ाच्|ात |ा न| रा|ंत्|ून |ेका| सा|राष|ाष्|चे |्ट्|ट्र|तंत| मा|ने |किं| कि|व्य|वात|े स|करण|ंवा|िंव|ये |क्त| सम|ा प|ना | मि|कास|ातं|्र्|र्व|समा|मिळ| जा|े प|व स|यास|ोणत|रण्|काम|ीय |ा आ| दे|े क|ांन|हि |रां| व्|्यक|ा म|िळण|ही | पा|्षण|ार्|ान |े अ| आप| वि|ळण्|ाही|ची |े व|्रा|मा |ली |ंच्|ारा|ा द| आण| नि|णे |द्ध| नय|ला |ा ह|नये| सर|सर्|्री|बंध|ी प|आपल|ले |ील |माज| हो|्त |त क|ाचे|्व |षण |ंना|लेल|ी अ|देश|आणि|णि |ध्य| शि|ी स|े ज|शिक|रीय|ानव|पाह|हिज|िजे|जे |क स|यक्|न क|व त|ा ज|यात|पल्|न्य|वी |स्थ|ज्य| ज्|े आ|रक्|त स|िक्|ंबं|संब| के|क व|केल|असल|य अ|य क|त व|ीत |णत्|त्व|ाने| उप|्वत|भाव|े त|करत|याह|रता|िष्|व म|कां|साम|रति|सार|ंचा|र व|क आ|याय|ासा|साठ|ाठी|्ती|ठी |ेण्|र्थ|ीने|े य|जाह|ोणा|संर|ायद|च्छ|स स|ंरक|तील|ी व|त आ|ी आ|ंधा|ेशा|ित | अश|हीर| हक|हक्|क्क|य व|शा |व आ|तीन|ण म|ूर्|ेल्|द्य|ेले|ांत|ा य|ा ब|ी म|ंचे|याव|देण|कृत|ारण|ेत |िवा|वस्|स्त|ाची|नवी| अर|थवा|अथव|ा त| अथ|अर्|ती |पूर|इतर|र्ण|ी क|यत्| इत| शा|रका|तिष|ण स|तिक|्रक|्ध |रणा| आल|ेल |ाजि| न्|धात|रून|श्र|असे|ष्ठ|ुक्|ेश |तो |जिक|े म',
        mai:
          'ाक |प्र|कार|िका|धिक|ार | आʼ|आʼ |्रत|ेँ |क अ|्यक|िक |्ति| अध|व्य|अधि|क स| प्| व्|क्त|केँ|यक्|तिक|हि | स्|न्त|क व|मे |बाक| सम|मान|त्य|क्ष|छैक| छै|ेक |स्व|रत्|त्र| अप|्ये|ष्ट|येक|र छ|सँ |ित |ैक।| एह| वि|वा | जा|्त्|िके|ति |ट्र|ाष्| हो|्ट्|राष| अन| रा| सा|्य |अपन| कर|कोन|।प्|्वत|क आ|तन्|अछि| अछ|वतन| को|था | वा|ताक| पर|ार्|एहि|नहि|पन |ा आ|रता|समा| मा|्री|नो | नह|्षा|देश|क प| दे| का| कए|रक | नि| सं|न्य|ि क|ोनो|छि |्त |ारक|्वा|ा स|ान्|ल ज|तथा| तथ|ान |करब|ँ क| आ |र आ|ीय |ता |क ह|वार| जे|्या|िवा|जाए|ना |ओर |ानव|ा प|ँ अ|अन्|ारण|माज|स्थ|घोष| आओ|्तर| एक|साम|र्व|आओर|धार|त क|परि|रीय|्रस|कएल|ामा|्रा|रण |ँ स| सभ|द्ध|स्त|एबा|पूर|ʼ स|ा अ| घो|षा |ाहि|ʼ अ|क।प|यक |नक |रक्|रबा|चित|िक्|क ज|ोषण|कर |र प|ेतु|हेत|शिक|एल |सम्| उप|ाधि|एहन|हन |त अ|तु |ूर्|षणा| हे|िमे| अव|ेल |सभ |े स|ि ज|निर| शि|िर्|रति|होए|अनु|र अ|जाह|क क|हो |्ध |रूप|वक |च्छ|प्त|ँ ए| सक|भाव|क उ|ाप्|सभक|त आ|ि आ|र्ण|त स|्रक|एत।|र्य|त ह|जिक| जन|ाजि|चार|ण स|ैक |रा |ि स|ारा|री |िश्|वाध|ा व|ाएत|न अ| ओ |हु |कान|जे |न व|िसँ|रसं|विव|कृत|ि घ|क ब| भा|उद्|ोएत| उद|राप|ʼ प|श्य|न प|्ण |य आ|द्व| द्|िष्| सह|ि द|धक | बी|ेश | पू|षाक|नवा|ास |ामे|ए स|जेँ| कि|कि |क ल| भे|पर |यता| रू|ओ व|ाके| पए|केओ|ेओ |पएब|राज| अथ|अथव|थवा|त्त|विश|्थि|य प|ा क|न क|वास|रिव|क र| दो|सार',
        bho:
          ' के|के |ार |े क|कार|धिक|िका|ओर |आओर| आओ| अध|अधि|े स|ा क|े अ| हो| सं|र क|र स|ें | मे|में|िक | कर|ा स|र ह| से|से |रा |मान| सम|न क|क्ष|े ब|नो | चा|वे |ता |चाह|ष्ट| रा|ति |्रा|खे |राष|ाष्|प्र| सा| का|ट्र|े आ| प्| सक| मा|्ट्| स्|होख| बा|करे|ि क|ौनो|त क|था |कौन|पन | जा| कौ|रे |ाति|ला | ओक|ेला|तथा|आपन|्त | आप|कर |हवे|र म| हव| तथ|सबह|र आ|ोखे| ह।|िर |े ओ|केल|सके|हे | और|ही |तिर|त्र|जा |ना |बहि|।सब|े च| खा|े म| पर|खात|ान |र ब|न स|ावे| लो|षा |ाहे|ी क|ओकर|ा आ|माज|ित |े ज|ल ज|मिल|संग|्षा|ं क| सब|ा प|और |रक्|वे।|िं |े ह|ंत्|ाज |स्व|हिं|नइख|कान|ो स| जे|समा|क स|लोग|करा|क्त|्रत|ला।| नइ|े। |ानव|िया|हु |इखे|्र |रता|्वत|ानू|े न|ाम |नून|ाही|वतं|पर |ी स| ओ |े उ|े व|्री|रीय|स्थ|तंत|दी |ीय |े त|र अ|र प|्य |साम|बा।| आद|ून |। स|व्य|ा।स|सभे|भे |या | दे|ा म|े ख| वि| सु|केह|प्त|योग|ु क|ोग |े द|चार|ादी|ाप्| दो| या|राप|ल ह|पूर| मि|तिक|खल |यता|्ति| बि|ए क|आदि|दिम| ही|हि |मी | नि|र न| इ |ेहु|नवा|ा ह|री |ले | पा|ाधि| सह| उप|्या| जर|षण | सभ|िमी|देश|े प|म क|जे |ाव | अप|शिक|ाजि|जाद|जिक|े भ|क आ|्तर|िक्|ि म|ेकर|ुक्|वाध|गठन| व्|निय|ठन |।के|ामा|रो | जी|य क|न म|े ल|न ह|ास |ेश | शा|घोष|ंगठ|िल | घो|्षण| पू|े र|ंरक|संर|उपय|पयो|हो |बा |ी ब|्म |सब |दोस|ा। | आज|साथ| शि|आजा| भी| उच|ने |चित| अं|र व|ज क|न आ| ले|नि |ार्|कि |याह|्थि',
        nep:
          'को | र |कार|प्र|ार |ने |िका|क्त|धिक|्यक| गर|व्य|्रत| प्|अधि|्ति| अध| व्|यक्|मा |िक |त्य|ाई |लाई|न्त|मान| सम|त्र|गर्|र्न|क व| वा|्ने|वा | स्|रत्|र स|्ये|तिल|येक|ेक |छ ।|ो स|ा स|हरू| वि|क्ष|्त्|िला| । |स्व|हुन|ति | हु|ले | रा| मा|ष्ट|समा|वतन|तन्| छ |र छ| सं|्ट्|ट्र|ाष्|ो अ|राष|्वत|ुने|नेछ|हरु|ान |ता |े अ|्र | का|िने|ाको|गरि|े छ|ना | अन| नि|रता|नै | सा|ित |तिक|क स|र र|रू |ा अ|था |स्त|कुन|ा र|ुनै| छै|्त |छैन|ा प|ार्|वार|ा व| पर|तथा| तथ|का |्या|एको|रु |्षा|माज|रक्|परि|द्ध|। प| ला|सको|ामा| यस|ाहर|ेछ |धार|्रा|ो प|नि |देश|भाव|िवा|्य |र ह|र व|र म|सबै|न अ|े र|न स|रको|अन्|ताक|ंरक|संर|्वा| त्|सम्|री |ो व|ा भ|रहर| कु|्रि|त र|रिन|श्य|पनि|ै व|यस्|ारा|ानव| शि|ा त|लाग|रा |शिक| सब|ाउन|िक्|्न |ारक|ा न|रिय|्यस|द्व|रति|चार| सह|्षण| सु|ारम|ुक्|ुद्|साम|षा |ैन | अप| भए|बाट|ुन | उप|ान्|ो आ|्तर|िय |कान|ि र|रूक|द्द|र प|ाव |ो ल|तो | पन|ैन।| आव|ा ग|।प्|बै |ूर्|िएक|र त|निज|त्प| भे|जिक|ेछ।|िको|्तो|वाह|त स|ाट | अर|ाजि|्ध | उस|रमा|ात्|र्य|नको|ाय |जको|ित्|ागि| अभ|न ग|गि |ा म| आध|स्थ| पा|ारह|घोष|त्व|यता|ा क|र्द| मत|विध| सक|सार|परा|युक|राध| घो|णको|अपर|े स|ारी|।कु| दि| जन|भेद|रिव|उसक|क र|र अ|ि स|ानु|ो ह|रुद| छ।|ूको|रका|नमा| भन|र्म|हित|पूर|न्य|क अ|ा ब|ो भ|राज|अनु|ोषण|षणा|य र| मन| बि|्धा| दे|निर|ताह|र उ|यस |उने|रण |विक'
      },
      Myanmar: {
        mya:
          'င့်|င်း|ိုင|ုင်|ောင|သည်|ကို|့် |ည်း|ွင့|ခွင|ာင်|်းက|တို|သော|ို |ြစ်|နို|ျား|မျာ|င် |လည်|ြင်| အခ|ကော|းကေ|ို့|ရေး|ဖြစ|် အ|း၊ |ှင့|နှင|ရှိ|းကိ|်း၊|ည်။|်ခွ|် လ|ောက|မှု|်း |ွင်|ခြင|တွင|ော |ည့်|င်ခ| လူ|်စေ|ွတ်|လွတ|မ်း|တ်လ|ာက်|လပ်|ှိသ|ော်|င်ရ|ိသည|်လပ|်းမ|အခွ|အရေ|့်အ|်သေ|ကြေ|စွာ|့် | ဖြ|ူတိ| လွ|လူတ|စ်စ|်၊ |မည်|ွာ |်အရ|ထို|်လည|ား | ထိ|ိုး|ည် |းတွ|ားက|ရန်| မိ|ြား|ြင့|းမျ|ုပ်|က် |န် |်းတ|ဖြင|င်င|်ငံ|ွက်|ဆို|းနှ|အား|စေရ|့်ရ|်စွ|ြည်|ာ်လ|ိမိ|်ရှ|ုံး|န်း|ေ၊ |။လူ| လည|်သည|ပြု| သေ| နိ|ြော|မိမ|်မှ| ပြ|ာ အ|ပ်စ|းသည|ေးမ|ပြည|စေ၊|အခြ|ပို|် မ|ုတ်|ဝင်|း မ|းဖြ|စား|း အ|်းသ|ရမည|ွယ်|် ပ|ိုက|်။လ|် ဖ|ခြာ|အပြ|၊ အ|်ခြ|ဖွဲ|၊ လ|သို| ရှ|ွဲ့|ိမ်|းမှ|တစ်|လုပ|့ အ|်နိ|် ရ|စည်|ျက်|းခြ|်းပ|်ပြ|းကြ|ု လ|ု အ|ခံစ|တ် |် က|ာင့|အတွ|်ဖြ|ားသ|ပြင|သား|ားန|င်သ| အာ| ခံ|ပ်ခ|ေး |် န|ြီး|တည်|က်မ|ပ်သ|ဟုတ|်ရွ|မဟု|်းခ|ေးက|်သိ|က်သ|်။ |အဖွ|လို|မျှ|ုက်|်မျ| သိ|်ရာ|ည်သ|ပဒေ|ဥပဒ|ားဖ|၊ မ|် သ|၊ က| အက|းတိ|်ချ|းချ|ေညာ|ဆော|ကွယ|စ်သ|ားလ|ျို|ရား|တွက|မှ | ကြ|ပညာ|တရာ|သင်|ြေည|်ရေ|ခြေ|်နှ|ု့တ|်ကိ|် ထ|ာ လ| အပ|ားခ|ပြစ|်ရန|သက်|ရာ |်မြ|လူ့|်းန|၊ သ|တ်ခ|လူမ|ေးခ|ူညီ|တူည| အဆ|ံစာ|ားရ|ေရန| တူ| အတ|ားစ|ျင်|၊ န| တိ|လုံ|ွေး|ှု |ပေး|ူမျ|သိမ|ပ် |ိုသ|် ခ|်းလ|င်မ|မိ၏|က်စ|်သူ|၏ အ|စ်မ|ှော|ထား|်းအ| အလ|ု သ|ဂ္ဂ|ားတ| နှ| မျ|ရွက|းသေ| ကိ|ာ သ|ားပ|င်၊|ူ့အ|်ကြ|ကျင| ဥပ|ဒေအ|က်ရ|မဂ္|းစွ|င်က',
        shn:
          'င်ႈ|ၼ်း|လႆႈ|င်း|ုၼ်|်း |ူင်|ူၼ်|ဝ်း|ၼ်ႉ|ွင်|ိူင|်ႇလ|ၼၼ်|ၼ်ႇ|ူဝ်|်ႈလ|ႇလႆ|မ်ႇ|်းၵ|မိူ|င်ႇ|ၵူၼ|သုၼ|ၢင်|ုင်|တ်ႈ|တႃႇ|ဢမ်|လႄႈ|ၼႆႉ|မီး|တ်း|လွင|ိူဝ|ႆႉ |မ်း|ဢၼ်|်ႈ |ဝ်ႈ|ိုင|်းလ|ၵေႃ|ၼ် |ဵၼ်|ႈ တ| လွ|်းၼ|ုၵ်|ၢၼ်|ွတ်| တႃ|ႄႈ |ုမ်|ႆႈ |ၵ်း|ႅဝ်|လႅဝ|လွတ|ယူႇ|ဵင်|းသု|ၵူႊ| တေ|်းတ|ေႃႉ|ၵၼ်| ဢၼ|ၵ်ႇ|ီးသ| လႄ| မီ|်ႈမ|်ႈၵ|်ႉ |ၸႂ်|ိုၼ|ပဵၼ|မ်ႈ|သေ |ႈ လ|ၵ်ႈ|ွၼ်|ပိူ|းၵူ|်းပ|်းသ|ၸို|်ႇပ|်းမ|ဝ်ႇ|ႃႉၼ|်ႈတ|တီႈ|်ႇ |်၊ |်းၸ|ႈမိ|ူႊၵ|ႈလႅ|်ႈပ|ႊၵေ|ုဝ်|ိုဝ|်ႇၼ|ၶဝ်|ပ်ႉ|တင်|်ႈၸ|ႉၼႆ|်ႇမ|ူႇ။|ႂ်ႈ|ၼ်ႈ|ႉ မ|ေဢမ|းၼၼ| ၵူ|ၼ်ၵ|ၢႆး|ႉ တ|ိင်|င် |တေႃ|ၵၢၼ|ၼ်လ|်းယ|်းႁ|း လ|ႁဵတ|ဵတ်|် လ|ၢဝ်|ႃႈ |လႂ်|ပို|ေႃႇ|ိူၼ|သင်|ပၼ်|ႈလွ|ႇပဵ|။ၵူ|်းၶ|ေလႆ|ႃႇ |မၼ်|်ႈၼ|ႁႂ်|ူၺ်|်ႉတ|တ်ႇ|တေလ|ႇၼၼ|ၾိင|ဝ် |ေႃႈ|်ႇႁ|းမိ|ၢမ်|်ႇၵ|ထုၵ|်ႈႁ|း ဢ|်ႉလ|်ၼၼ|တေဢ|လုမ|ႈသင|သၢင|ၼ်ပ|ွမ်|ၵ်ႉ|ၼ်ၽ|ႈတႃ|ၼႃႈ|းပိ|ၼင်|တၢင| ဢမ| သု|ႄႈသ|် တ|ၽဵင|ပၢႆ|်ႈဢ|ၢႆႇ|်ၵူ|း၊ |်ႈယ|်ၼႆ|ၵဝ်|ၸွမ|ႃႇၶ|ၺ်ႈ|ႈ ဢ|ူမ်|ႆႈတ|းလွ|ၸုမ|်ႉယ|ထို|ပ်း|်သေ|လုၵ|် ဢ|ႁပ်|ၼ်ၼ|်းဢ|ဢဝ်|လိူ|်ႉႁ|ၼႂ်|ၸိူ|်ႇၸ|ႈလႆ|ႂ်း|ႈၸိ|ၢတ်|ႇ။ၵ|ႉ လ|လူၺ|ႂ်ႉ|်ႉၵ|ၼ်မ|်ၸိ|်း၊|ဝ်ႉ|ွၵ်|်ႇတ|်ႇၽ|ၼ်ဢ|ၶွင|ဝ်ၼ|၊ လ|းၼႆ|ဝႆႉ|ၼ်တ|ပဵင|တို|်ႇၶ|ႃႇလ|ႉယူ|းလႅ|်းထ|ႃႇၵ|င်၊|်ႉသ|ႆႈမ|ဝႃႈ|ၾၢႆ|းသေ| ပိ|တူဝ|ႇၶဝ|င်ၸ| လု|ိၵ်|ႆႈပ|ပွင| မိ|ႈမီ|င်သ|ၼ်သ|ႁူမ|ႈ ပ|း ၸ|ႅင်|ႆႈသ|ၵိူ|ႁို|ႈၾႃ|ႇ လ|ႁၼ်|်ႈၾ|းတေ|ၼ်ၸ|းၵၢ|ူပ်|ႈၵူ|းသၢ|ူၵ်|ႂ်ႇ| ၾၢ|င်ႊ|ယမ်|ႃႇတ| ၼႂ|း တ|်တေ|ၾႃႉ|ႇၵၼ|ူတ်|ီးလ| တီ|ႅတ်|ႈပိ|၊ တ|ယဵၼ|ႈလု'
      },
      Ethiopic: {
        amh:
          '፡መብ|ሰው፡|ት፡አ|ብት፡|መብት|፡ሰው|፡አለ|፡ወይ|ወይም|ይም፡|ነት፡|ንዱ፡|አለው|ለው።|ዳንዱ|ያንዳ|ንዳን|እያን|ዱ፡ሰ|ት፡መ|፡እን|፡የመ|።እያ|እንዲ|፡ነጻ|፡የተ|ም፡በ|ው፡የ|ም፡የ|፡የሚ|ና፡በ|ን፡የ|፡የማ|፡አይ|ነጻነ|ና፡የ|ው፡በ|ቶች፡|ው።፡|ሆነ፡|ት፡የ|፡በሚ|፡መን|ው።እ|ትና፡|ኀብረ|ትን፡|ውም፡|ንኛው|እኩል|ብቻ፡|ኛውም|ንም፡|፡ለመ|፡ያለ|ም፡ሰ|ማንኛ|መብቶ|፡አገ|ት፡በ|ራዊ፡|፡እኩ|፡ለማ|ለት፡|በት፡|ሆን፡|መንግ|፡በተ|ረት፡|ብቶች|ጋብቻ|ዎች፡|ህንነ|ጻነት|ም፡እ|ወንጀ|፡ልዩ|ሰብ፡|ማንም|ጠበቅ|ኩል፡|ደህን|።ማን|ነጻ፡|ግኘት|ማግኘ|።፡እ|፡የሆ|፡ሁሉ|ች፡በ|፡በመ|ሥራ፡|፡ደህ|ፈጸም|ል፡መ|ተግባ|፡ድር|ት፡ወ|ው።ማ|ፍርድ|ርድ፡|፡በሆ|ር፡ወ|በትም|ትም፡|ይነት|ቸው፡|ብ፡የ|ነትና|ቱን፡|ሕግ፡|ንና፡|፡ሥራ|የማግ|፡መሠ|ኘት፡|፡ጊዜ|ጻነቶ|ነቶች|በር፡|በኀብ|ዩነት|ልዩነ|፡በኀ|፡ዓይ|ዓይነ|ችና፡|ግባር|ባር፡|፡ደረ|ነው።|፡ነው|ደረጃ|ም።እ|ም፡መ|፡ወን|ይማኖ|ማኀበ|ሃይማ|፡ኑሮ|መሠረ|ሁሉ፡|ነቱ፡|ሌሎች|ንግሥ|በቅ፡|የሆነ|፡ይህ|ንዲጠ|ገር፡|ተባበ|ትክክ|ጸም፡|ር፡የ|ዲጠበ|ትም።|ው፡ከ|፡እያ|ሩት፡|ድርጅ|፡ብቻ|ና፡ለ|ይገባ|የመኖ|፡ማን|ንነት|ቤተሰ|ርጅት|ት፡ድ|፡መሰ|እንደ|፡አላ|ብሔራ|ት፡ለ|ሔራዊ|ርት፡|ህርት|ውን፡|የሚያ|ል።እ|ሆኑ፡|ምህር|ትምህ|በት።|ለበት|አለበ|፡አስ|ሎች፡|ች፡የ|፡በሕ|ብረ፡|፡ከሚ|ን፡አ|ት፡እ|ን፡ወ|ረግ፡|በሆነ|የኀብ|፡የኀ|መሆን|፡መሆ|ን፡መ|፡ውሳ|ንጀል|ፈላጊ|ህም፡|ረታዊ|ክለኛ|ክክለ|ታዊ፡|ጀል፡|ኑሮ፡|።፡ይ|ዓዊ፡|ዜግነ|ንዲሁ|ዲሁም|፡ማኀ|ገሩ፡|ር፡በ|ብዓዊ|አገሩ|ሁም፡|ና፡ነ|ሰብዓ|የተባ|ጅት፡|ማኖት|ር፡አ|ንግስ|ኖት፡|በሕግ|መኖር|ው፡ያ|መጠበ|ረጃ፡|፡በማ|ነትን|ብነት|ገብነ|፡ገብ|መፈጸ|፡ሁኔ|ሁኔታ|ን፡ለ|ው፡ለ|፡ተግ|፡የአ|፡ይገ|፡በአ|ችን፡|፡ትም|ነቱን|፡ቢሆ|ቢሆን|ጊዜ፡|ረ፡ሰ|ት፡ጊ|ሰቡ፡|ምበት|ላቸው|አላቸ|በነጻ|፡በነ|አንድ|ቅ፡መ|፡መጠ|ት፡ይ|መሰረ|ጥ፡የ|ስጥ፡|ፈጸመ|ውስጥ|ንድ፡|፡ውስ|፡በግ|፡ሆኖ|ሉ፡በ|፡ጋብ|ንስ፡|ንነቱ|መው፡|የሚፈ|አይፈ|ብረሰ|ነ፡መ|፡የሃ|ም፡ከ|ች፡እ|ስት፡|ሙሉ፡|አገር|ሆኖ፡|ደረግ|ኢንተ|ንተር|ተርና|ርናሽ|ናሽና|ሽናል',
        tir:
          ' መሰ| ሰብ|ሰብ | ኦለ|ትን |ኦለዎ|ናይ | ናይ| ኦብ|ዎ፡፡|ለዎ፡|ሕድሕ|ኦብ |ድሕድ|ሕድ |መሰል|ውን |ሰል |ድ ሰ|ይ ም|ል ኦ|ካብ |፡ሕድ|፡፡ሕ| ወይ|ወይ | መን| ነፃ|ን መ|ዝኾነ|፡፡ |ታት |ብ ዝ|ነት |ን ነ| ካብ|መሰላ|ነፃነ| እዚ|ብ መ|ኦዊ |ታትን|መንግ|ዊ መ| እን|ብ ብ|ንግስ|ት ኦ|ሰላት|ን ም|ኾነ |እዚ |ብኦዊ|ሰብኦ|ን ኦ|ን፡፡| ንክ| ዝኾ|ን ን| ምር|ኹን |ይኹን| ይኹ|ምርካ|ርካብ| ኦይ| ሃገ|ሕጊ |ራት |ሎም | ብሕ|ነ ይ| ከም|ማዕሪ|ይ ብ| ንም| ዝተ|ርን |ን ብ|ራዊ | ፣ |ብ ሕ|ላትን|ብ ኦ|ማሕበ|ነታት| ኦድ|ዕሪ | ማዕ|ስታት|ግስታ|’ውን|ት መ|ን ዝ|ታዊ |፣ ብ| ማሕ|ነትን|ንጋገ|ድንጋ| ስለ| ድን|ስራሕ|ኩሎም|ሕበራ|ኦት |ን ሰ|ዓለም|ፃነታ| ብም|ት ወ|መሰሪ| ስራ|ፃነት|ተሰብ|ካልኦ|ልኦት|ን ሓ|ዓት |ዋን |ቡራት|ሕቡራ| ሕቡ|ብሕጊ|ድብ |ውድብ| ውድ|ብን |ትምህ|ነቱ |ዚ ድ|፣ ኦ|ሃገራ| ኩሎ|ለዎም|ምህር|ም፡፡|ም መ| ብዝ|ምኡ’|ኡ’ው|እንት| ዓለ| ብዘ|በራዊ| ሓለ|ሓለዋ|ዎም፡|ቱ ን|ት ብ|ጋገ |ነፃ | ምዃ|ን ዘ| ገበ|ት፣ | ትም|ኸውን|ራሕ | ዘይ|ህርቲ|ርቲ |ከምኡ|ሃይማ| ምስ|ነ፣ |እንተ| ስር|ስርዓ|ርዓት|ባት |ይማኖ|ሰሪታ|ን ና| ክብ|ልን | ብማ|ገሩ | ህዝ|ላት |ት ና|ይ ኦ|ዕሊ |ለዝኾ|ስለዝ|ሪተሰ|ብሪተ|ሕብሪ| ሕብ|ን ተ|ኾነ፣|በን |ሃገሩ|ገ እ|ኻዊ | ሃይ|እን |ሪጋገ| ምሕ|ን እ|ለኻዊ|ር፣ | ብሓ| ብሃ| ክኸ|ክኸው|ብ ዘ|ዃኑ |ዊ ክ|ምን |ሓደ |ምዃኑ|ም ን|ት እ|ዊ ወ|ታውን| ሕድ|ብዘይ| ሕጊ|ት ን| ልዕ| ካል|ን ካ|ሰባት|ን ስ|ናን |ቤተሰ|ሕን |ለምለ|ት ስ|ምለኻ|፣ ከ|ተደን|ባል |ኦድላ|እዋን| እዋ|ደቂ | ደቂ| ሰባ|ፃን |ነፃን|ግስቲ|፣ ን|ዚ ብ|ስቲ | ቤተ|ምጥሓ| ክሳ| ነዚ|ን ክ|ነቲ | ነቲ|ነዚ | ምእ|ብነፃ| ምዕ|ምዕባ|ዕባለ|ክሳብ| ብነ|ል እ|ዚ መ|ልዕሊ|ክብሩ|ብማዕ|ሳብ |ህይወ|ኦቶም|ምስ |ንገገ|እምነ| እም|ድ ኦ|ቶም |ቲ ክ|ፍትሓ|ለም | ፍት|ብ ን|ን ዓ|ራውን|ሓፈሻ|ደንገ|ም ብ|ትዮን| ዝሰ|ዝተደ|ሉ መ|ብ ና|ጊ ካ|ልዎ |ኦባል| ኦባ|ድልዎ|ን ድ|ኦድል|ዜግነ|ላውን| ድሕ'
      },
      Hebrew: {
        heb:
          'ות |ים |כל |ת ה| כל|דם |אדם|יות| של| זכ|ל א| אד|של |ל ה|אי |ויו|כאי|ת ו|י ל|זכא| ול|לא | וה|רות|זכו|ית |ירו|ין | או|ם ז| לא| הח|או | הא| וב| המ|חיר|ת ל|יים|ם ל|את |ת ב|ת ש|רה |ון | לה|נה |כוי|ותי|ה ש|ו ל|ו ב| הו|ת א|ם ב|ם ו|תו | את|לה |ני |אומ| במ|דה |א י|ה ה|ה ב|על |ם ה| על|הוא|וך |ה א|בוד|וד |ואי|נות|ה ו|ת כ|י ה|יה |ם ש|ו ו| שה|ם א|ו כ|ינו|ן ה| שו|שוו|החי|כות|לאו|בות|דות|ה ל|לית|ה מ| בי|וה |וא | הי| לפ|ור | לב|ל ב|בחי|הכר|לו |ת מ|ן ש|החו|ה כ| בכ|ומי|בין|ן ו|ן ל|רוי|פלי|ולה|ליה| הז|חינ| לע| בנ|יבו|חוק| אח|חבר| יה| חי|מי |ירה| חו|האד|ווה|חופ|ופש|וק |נו |יו |ל מ|מדי|כבו| הע|נוך| הד|י א|י ו| הכ|בני|עה |ו א|רצו|דינ|בזכ|מות|יפו| אל|סוד|לם |איש|רך | אי|הגנ|הם |פי |ם כ|חות|ל ו|איל|ילי|תיה|כלל|אלי|יסו|האו|זש | בא|ר א|ו ה|זו |אחר| הפ| בע| בז|משפ| בה| לח|דרך|ומו| בח| דר| מע|ל י|תוך|מנו| בש|לל |רבו| למ|פני| לק|תם |שה |שית|ללא|לפי|היה|מעש|דו |שות|להג|וצי|שוא|אין|וי |תי |ונו|ליל| לו|חיי|ל ז| זו|היא|יא |נתו|ה פ|לת |ובי| לכ|ך ה|יל |י ש|שיו|ן ב|עול|המד|ודה|ולם| ומ|א ה|ולא| בת|הכל| סו| מש| עב|סוצ|ארצ| אר|ציא|ד א|לחי|הן |יחס| יח|יאל|הזכ|ם נ| שר|בו |עבו|היס| לי|ת ז|פול|יהי|גבל|תיו|המא|שהי|א ל|מאו| יו|ותו|ישי|גנה|פשי|וחד|יהם|חרו|לכל|ידה|עות|ונה|ום |חה |עם |שרי|ם י|שר |והח| אש| הג|ק ב|הפל|נשו|הגב|ד ו',
        ydd:
          ' פֿ|ון |ער |ן א| אַ|דער|ט א| או|און|אַר|ען |פֿו| אױ| אי|ן פ|ֿון|רעכ| דע| רע|עכט|פֿא|ן ד|כט | די|די |אַ |אױף|ױף |ֿאַ| זײ| גע|אַל|אָס| אָ|ונג| הא|האָ|זײַ| מע|אָל|נג |װאָ|ַן |אַנ|רײַ| װא|ָס |באַ| יע|יעד|ניט|ן ז|ר א|יט |אָט|אָר|עדע|מען|זאָ|ָט |פֿר|ײַן| בא|טן |אין|ן ג|ין |ן װ|נאַ|ֿרײ|ר ה| זא|לעכ|ע א|אָד|ַ ר|ענט|אַצ|ַצי|אָנ| צו| װע|יז |מענ|ָדע|איז|ן מ|ַלע|בן |ר מ|טער| מי| פּ|מיט|טלע|ָל |עכע|ײט |ַנד|ע פ|לע |געז|לאַ|אַפ|עזע|ראַ| ני|ַפֿ|רן |ײַנ|נען|טיק|כע |פֿע|יע |הײט|ַהײ|נטש|ײַה|ט ד|ן ב|לן |ן נ|פֿט|שאַ|רונ| זי| װי|ט פ| דא|טאָ|דיק|קן |ר פ|ר ג|יקן|אָב|ף א|אַק|קער|ערע|כער|י פ|ות |ַרב|פּר|קט |עם |יאָ|ציע|ציא|יט־|צו |ישע| קײ|ן ק|סער| גל|דאָ|ונט|גן |ַרא|יקע| טא|ענע|לײַ|שן |ַנע|יק |טאַ|ס א|עט |נגע|ט־א|ָנא|־אי|יקט|נטע|ײנע|־ני|ָר |װער|י א|ן י|יך |זיך|ער־|ערן|אױס|ָבן|נדע|ָסע|װי |ֿעל|ר־נ|ן ה| גר|גלײ| צי|ראָ|זעל|עלק|נד |לקע|אָפ| כּ|ט װ|ג א| נא|ט צ|ר ד|עס |דור|גען|קע |ג פ|ֿט |ן ל|שע |ר ז|רע |ײטן|פּע|קלא|קײט|יטע|ים |ס ז|ײַ | דו|אַט| לא|ר װ|קײנ|עלש|י ד|לשא|יות|נט |ַרז|ע ר|ל ז|אַמ|ן ש| שו|אינ|נטל| הי|בעט|ָפּ|ף פ|ײַכ|בער|ן צ|מאָ| שט| לע|גער|ורך|רך |נעם|גרו|פֿן|לער|װעל|ע מ|ום |שפּ|ך א|יונ|רבע|עפֿ|טעט|ן כ|רעס|ערצ|ז א|עמע|ם א|שטע|כן |רט |י ג|סן |נער|ליט|ט ז|נעמ|ּרא|היו|אַש|ת װ|אומ|ק א|יבע|ֿן |ץ א|פֿי|ײן |ם ט'
      }
    }
  },
  function(module, exports) {
    module.exports = {
      aar: {
        terminologic: null,
        iso6391: 'aa',
        name: 'Afar'
      },
      abk: {
        terminologic: null,
        iso6391: 'ab',
        name: 'Abkhazian'
      },
      ace: {
        terminologic: null,
        iso6391: null,
        name: 'Achinese'
      },
      ach: {
        terminologic: null,
        iso6391: null,
        name: 'Acoli'
      },
      ada: {
        terminologic: null,
        iso6391: null,
        name: 'Adangme'
      },
      ady: {
        terminologic: null,
        iso6391: null,
        name: 'Adyghe; Adygei'
      },
      afa: {
        terminologic: null,
        iso6391: null,
        name: 'Afro-Asiatic languages'
      },
      afh: {
        terminologic: null,
        iso6391: null,
        name: 'Afrihili'
      },
      afr: {
        terminologic: null,
        iso6391: 'af',
        name: 'Afrikaans'
      },
      ain: {
        terminologic: null,
        iso6391: null,
        name: 'Ainu'
      },
      aka: {
        terminologic: null,
        iso6391: 'ak',
        name: 'Akan'
      },
      akk: {
        terminologic: null,
        iso6391: null,
        name: 'Akkadian'
      },
      alb: {
        terminologic: 'sqi',
        iso6391: 'sq',
        name: 'Albanian'
      },
      ale: {
        terminologic: null,
        iso6391: null,
        name: 'Aleut'
      },
      alg: {
        terminologic: null,
        iso6391: null,
        name: 'Algonquian languages'
      },
      als: {
        terminologic: 'sqi',
        iso6391: 'sq',
        name: 'Albanian'
      },
      alt: {
        terminologic: null,
        iso6391: null,
        name: 'Southern Altai'
      },
      amh: {
        terminologic: null,
        iso6391: 'am',
        name: 'Amharic'
      },
      ang: {
        terminologic: null,
        iso6391: null,
        name: 'English, Old (ca.450-1100)'
      },
      anp: {
        terminologic: null,
        iso6391: null,
        name: 'Angika'
      },
      apa: {
        terminologic: null,
        iso6391: null,
        name: 'Apache languages'
      },
      ara: {
        terminologic: null,
        iso6391: 'ar',
        name: 'Arabic'
      },
      arb: {
        iso6392: 'ara',
        iso6391: 'ar',
        name: 'Arabic'
      },
      arc: {
        terminologic: null,
        iso6391: null,
        name: 'Official Aramaic (700-300 BCE); Imperial Aramaic (700-300 BCE)'
      },
      arg: {
        terminologic: null,
        iso6391: 'an',
        name: 'Aragonese'
      },
      arm: {
        terminologic: 'hye',
        iso6391: 'hy',
        name: 'Armenian'
      },
      arn: {
        terminologic: null,
        iso6391: null,
        name: 'Mapudungun; Mapuche'
      },
      arp: {
        terminologic: null,
        iso6391: null,
        name: 'Arapaho'
      },
      art: {
        terminologic: null,
        iso6391: null,
        name: 'Artificial languages'
      },
      arw: {
        terminologic: null,
        iso6391: null,
        name: 'Arawak'
      },
      asm: {
        terminologic: null,
        iso6391: 'as',
        name: 'Assamese'
      },
      ast: {
        terminologic: null,
        iso6391: null,
        name: 'Asturian; Bable; Leonese; Asturleonese'
      },
      ath: {
        terminologic: null,
        iso6391: null,
        name: 'Athapascan languages'
      },
      aus: {
        terminologic: null,
        iso6391: null,
        name: 'Australian languages'
      },
      ava: {
        terminologic: null,
        iso6391: 'av',
        name: 'Avaric'
      },
      ave: {
        terminologic: null,
        iso6391: 'ae',
        name: 'Avestan'
      },
      awa: {
        terminologic: null,
        iso6391: null,
        name: 'Awadhi'
      },
      aym: {
        terminologic: null,
        iso6391: 'ay',
        name: 'Aymara'
      },
      aze: {
        terminologic: null,
        iso6391: 'az',
        name: 'Azerbaijani'
      },
      bad: {
        terminologic: null,
        iso6391: null,
        name: 'Banda languages'
      },
      bai: {
        terminologic: null,
        iso6391: null,
        name: 'Bamileke languages'
      },
      bak: {
        terminologic: null,
        iso6391: 'ba',
        name: 'Bashkir'
      },
      bal: {
        terminologic: null,
        iso6391: null,
        name: 'Baluchi'
      },
      bam: {
        terminologic: null,
        iso6391: 'bm',
        name: 'Bambara'
      },
      ban: {
        terminologic: null,
        iso6391: null,
        name: 'Balinese'
      },
      baq: {
        terminologic: 'eus',
        iso6391: 'eu',
        name: 'Basque'
      },
      bas: {
        terminologic: null,
        iso6391: null,
        name: 'Basa'
      },
      bat: {
        terminologic: null,
        iso6391: null,
        name: 'Baltic languages'
      },
      bej: {
        terminologic: null,
        iso6391: null,
        name: 'Beja; Bedawiyet'
      },
      bel: {
        terminologic: null,
        iso6391: 'be',
        name: 'Belarusian'
      },
      bem: {
        terminologic: null,
        iso6391: null,
        name: 'Bemba'
      },
      ben: {
        terminologic: null,
        iso6391: 'bn',
        name: 'Bengali'
      },
      ber: {
        terminologic: null,
        iso6391: null,
        name: 'Berber languages'
      },
      bho: {
        terminologic: null,
        iso6391: null,
        name: 'Bhojpuri'
      },
      bih: {
        terminologic: null,
        iso6391: 'bh',
        name: 'Bihari languages'
      },
      bik: {
        terminologic: null,
        iso6391: null,
        name: 'Bikol'
      },
      bin: {
        terminologic: null,
        iso6391: null,
        name: 'Bini; Edo'
      },
      bis: {
        terminologic: null,
        iso6391: 'bi',
        name: 'Bislama'
      },
      bla: {
        terminologic: null,
        iso6391: null,
        name: 'Siksika'
      },
      bnt: {
        terminologic: null,
        iso6391: null,
        name: 'Bantu (Other)'
      },
      bod: {
        bibliographic: 'tib',
        iso6391: 'bo',
        name: 'Tibetan'
      },
      bos: {
        terminologic: null,
        iso6391: 'bs',
        name: 'Bosnian'
      },
      bra: {
        terminologic: null,
        iso6391: null,
        name: 'Braj'
      },
      bre: {
        terminologic: null,
        iso6391: 'br',
        name: 'Breton'
      },
      btk: {
        terminologic: null,
        iso6391: null,
        name: 'Batak languages'
      },
      bua: {
        terminologic: null,
        iso6391: null,
        name: 'Buriat'
      },
      bug: {
        terminologic: null,
        iso6391: null,
        name: 'Buginese'
      },
      bul: {
        terminologic: null,
        iso6391: 'bg',
        name: 'Bulgarian'
      },
      bur: {
        terminologic: 'mya',
        iso6391: 'my',
        name: 'Burmese'
      },
      byn: {
        terminologic: null,
        iso6391: null,
        name: 'Blin; Bilin'
      },
      cad: {
        terminologic: null,
        iso6391: null,
        name: 'Caddo'
      },
      cai: {
        terminologic: null,
        iso6391: null,
        name: 'Central American Indian languages'
      },
      car: {
        terminologic: null,
        iso6391: null,
        name: 'Galibi Carib'
      },
      cat: {
        terminologic: null,
        iso6391: 'ca',
        name: 'Catalan; Valencian'
      },
      cau: {
        terminologic: null,
        iso6391: null,
        name: 'Caucasian languages'
      },
      ceb: {
        terminologic: null,
        iso6391: null,
        name: 'Cebuano'
      },
      cel: {
        terminologic: null,
        iso6391: null,
        name: 'Celtic languages'
      },
      ces: {
        bibliographic: 'cze',
        iso6391: 'cs',
        name: 'Czech'
      },
      cha: {
        terminologic: null,
        iso6391: 'ch',
        name: 'Chamorro'
      },
      chb: {
        terminologic: null,
        iso6391: null,
        name: 'Chibcha'
      },
      che: {
        terminologic: null,
        iso6391: 'ce',
        name: 'Chechen'
      },
      chg: {
        terminologic: null,
        iso6391: null,
        name: 'Chagatai'
      },
      chi: {
        terminologic: 'zho',
        iso6391: 'zh',
        name: 'Chinese'
      },
      chk: {
        terminologic: null,
        iso6391: null,
        name: 'Chuukese'
      },
      chm: {
        terminologic: null,
        iso6391: null,
        name: 'Mari'
      },
      chn: {
        terminologic: null,
        iso6391: null,
        name: 'Chinook jargon'
      },
      cho: {
        terminologic: null,
        iso6391: null,
        name: 'Choctaw'
      },
      chp: {
        terminologic: null,
        iso6391: null,
        name: 'Chipewyan; Dene Suline'
      },
      chr: {
        terminologic: null,
        iso6391: null,
        name: 'Cherokee'
      },
      chu: {
        terminologic: null,
        iso6391: 'cu',
        name:
          'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'
      },
      chv: {
        terminologic: null,
        iso6391: 'cv',
        name: 'Chuvash'
      },
      chy: {
        terminologic: null,
        iso6391: null,
        name: 'Cheyenne'
      },
      cmc: {
        terminologic: null,
        iso6391: null,
        name: 'Chamic languages'
      },
      cmn: {
        bibliographic: 'chi',
        iso6391: 'zh',
        name: 'Chinese'
      },
      cop: {
        terminologic: null,
        iso6391: null,
        name: 'Coptic'
      },
      cor: {
        terminologic: null,
        iso6391: 'kw',
        name: 'Cornish'
      },
      cos: {
        terminologic: null,
        iso6391: 'co',
        name: 'Corsican'
      },
      cpe: {
        terminologic: null,
        iso6391: null,
        name: 'Creoles and pidgins, English based'
      },
      cpf: {
        terminologic: null,
        iso6391: null,
        name: 'Creoles and pidgins, French-based '
      },
      cpp: {
        terminologic: null,
        iso6391: null,
        name: 'Creoles and pidgins, Portuguese-based '
      },
      cre: {
        terminologic: null,
        iso6391: 'cr',
        name: 'Cree'
      },
      crh: {
        terminologic: null,
        iso6391: null,
        name: 'Crimean Tatar; Crimean Turkish'
      },
      crp: {
        terminologic: null,
        iso6391: null,
        name: 'Creoles and pidgins '
      },
      csb: {
        terminologic: null,
        iso6391: null,
        name: 'Kashubian'
      },
      cus: {
        terminologic: null,
        iso6391: null,
        name: 'Cushitic languages'
      },
      cym: {
        bibliographic: 'wel',
        iso6391: 'cy',
        name: 'Welsh'
      },
      cze: {
        terminologic: 'ces',
        iso6391: 'cs',
        name: 'Czech'
      },
      dak: {
        terminologic: null,
        iso6391: null,
        name: 'Dakota'
      },
      dan: {
        terminologic: null,
        iso6391: 'da',
        name: 'Danish'
      },
      dar: {
        terminologic: null,
        iso6391: null,
        name: 'Dargwa'
      },
      day: {
        terminologic: null,
        iso6391: null,
        name: 'Land Dayak languages'
      },
      del: {
        terminologic: null,
        iso6391: null,
        name: 'Delaware'
      },
      den: {
        terminologic: null,
        iso6391: null,
        name: 'Slave (Athapascan)'
      },
      deu: {
        bibliographic: 'ger',
        iso6391: 'de',
        name: 'German'
      },
      dgr: {
        terminologic: null,
        iso6391: null,
        name: 'Dogrib'
      },
      din: {
        terminologic: null,
        iso6391: null,
        name: 'Dinka'
      },
      div: {
        terminologic: null,
        iso6391: 'dv',
        name: 'Divehi; Dhivehi; Maldivian'
      },
      doi: {
        terminologic: null,
        iso6391: null,
        name: 'Dogri'
      },
      dra: {
        terminologic: null,
        iso6391: null,
        name: 'Dravidian languages'
      },
      dsb: {
        terminologic: null,
        iso6391: null,
        name: 'Lower Sorbian'
      },
      dua: {
        terminologic: null,
        iso6391: null,
        name: 'Duala'
      },
      dum: {
        terminologic: null,
        iso6391: null,
        name: 'Dutch, Middle (ca.1050-1350)'
      },
      dut: {
        terminologic: 'nld',
        iso6391: 'nl',
        name: 'Dutch; Flemish'
      },
      dyu: {
        terminologic: null,
        iso6391: null,
        name: 'Dyula'
      },
      dzo: {
        terminologic: null,
        iso6391: 'dz',
        name: 'Dzongkha'
      },
      efi: {
        terminologic: null,
        iso6391: null,
        name: 'Efik'
      },
      egy: {
        terminologic: null,
        iso6391: null,
        name: 'Egyptian (Ancient)'
      },
      eka: {
        terminologic: null,
        iso6391: null,
        name: 'Ekajuk'
      },
      ell: {
        bibliographic: 'gre',
        iso6391: 'el',
        name: 'Greek, Modern (1453-)'
      },
      elx: {
        terminologic: null,
        iso6391: null,
        name: 'Elamite'
      },
      eng: {
        terminologic: null,
        iso6391: 'en',
        name: 'English'
      },
      enm: {
        terminologic: null,
        iso6391: null,
        name: 'English, Middle (1100-1500)'
      },
      epo: {
        terminologic: null,
        iso6391: 'eo',
        name: 'Esperanto'
      },
      est: {
        terminologic: null,
        iso6391: 'et',
        name: 'Estonian'
      },
      eus: {
        bibliographic: 'baq',
        iso6391: 'eu',
        name: 'Basque'
      },
      ewe: {
        terminologic: null,
        iso6391: 'ee',
        name: 'Ewe'
      },
      ewo: {
        terminologic: null,
        iso6391: null,
        name: 'Ewondo'
      },
      fan: {
        terminologic: null,
        iso6391: null,
        name: 'Fang'
      },
      fao: {
        terminologic: null,
        iso6391: 'fo',
        name: 'Faroese'
      },
      fas: {
        bibliographic: 'per',
        iso6391: 'fa',
        name: 'Persian'
      },
      fat: {
        terminologic: null,
        iso6391: null,
        name: 'Fanti'
      },
      fij: {
        terminologic: null,
        iso6391: 'fj',
        name: 'Fijian'
      },
      fil: {
        terminologic: null,
        iso6391: null,
        name: 'Filipino; Pilipino'
      },
      fin: {
        terminologic: null,
        iso6391: 'fi',
        name: 'Finnish'
      },
      fiu: {
        terminologic: null,
        iso6391: null,
        name: 'Finno-Ugrian languages'
      },
      fon: {
        terminologic: null,
        iso6391: null,
        name: 'Fon'
      },
      fra: {
        bibliographic: 'fre',
        iso6391: 'fr',
        name: 'French'
      },
      fre: {
        terminologic: 'fra',
        iso6391: 'fr',
        name: 'French'
      },
      frm: {
        terminologic: null,
        iso6391: null,
        name: 'French, Middle (ca.1400-1600)'
      },
      fro: {
        terminologic: null,
        iso6391: null,
        name: 'French, Old (842-ca.1400)'
      },
      frr: {
        terminologic: null,
        iso6391: null,
        name: 'Northern Frisian'
      },
      frs: {
        terminologic: null,
        iso6391: null,
        name: 'Eastern Frisian'
      },
      fry: {
        terminologic: null,
        iso6391: 'fy',
        name: 'Western Frisian'
      },
      ful: {
        terminologic: null,
        iso6391: 'ff',
        name: 'Fulah'
      },
      fur: {
        terminologic: null,
        iso6391: null,
        name: 'Friulian'
      },
      gaa: {
        terminologic: null,
        iso6391: null,
        name: 'Ga'
      },
      gay: {
        terminologic: null,
        iso6391: null,
        name: 'Gayo'
      },
      gba: {
        terminologic: null,
        iso6391: null,
        name: 'Gbaya'
      },
      gem: {
        terminologic: null,
        iso6391: null,
        name: 'Germanic languages'
      },
      geo: {
        terminologic: 'kat',
        iso6391: 'ka',
        name: 'Georgian'
      },
      ger: {
        terminologic: 'deu',
        iso6391: 'de',
        name: 'German'
      },
      gez: {
        terminologic: null,
        iso6391: null,
        name: 'Geez'
      },
      gil: {
        terminologic: null,
        iso6391: null,
        name: 'Gilbertese'
      },
      gla: {
        terminologic: null,
        iso6391: 'gd',
        name: 'Gaelic; Scottish Gaelic'
      },
      gle: {
        terminologic: null,
        iso6391: 'ga',
        name: 'Irish'
      },
      glg: {
        terminologic: null,
        iso6391: 'gl',
        name: 'Galician'
      },
      glv: {
        terminologic: null,
        iso6391: 'gv',
        name: 'Manx'
      },
      gmh: {
        terminologic: null,
        iso6391: null,
        name: 'German, Middle High (ca.1050-1500)'
      },
      goh: {
        terminologic: null,
        iso6391: null,
        name: 'German, Old High (ca.750-1050)'
      },
      gon: {
        terminologic: null,
        iso6391: null,
        name: 'Gondi'
      },
      gor: {
        terminologic: null,
        iso6391: null,
        name: 'Gorontalo'
      },
      got: {
        terminologic: null,
        iso6391: null,
        name: 'Gothic'
      },
      grb: {
        terminologic: null,
        iso6391: null,
        name: 'Grebo'
      },
      grc: {
        terminologic: null,
        iso6391: null,
        name: 'Greek, Ancient (to 1453)'
      },
      gre: {
        terminologic: 'ell',
        iso6391: 'el',
        name: 'Greek, Modern (1453-)'
      },
      grn: {
        terminologic: null,
        iso6391: 'gn',
        name: 'Guarani'
      },
      gsw: {
        terminologic: null,
        iso6391: null,
        name: 'Swiss German; Alemannic; Alsatian'
      },
      guj: {
        terminologic: null,
        iso6391: 'gu',
        name: 'Gujarati'
      },
      gwi: {
        terminologic: null,
        iso6391: null,
        name: "Gwich'in"
      },
      hai: {
        terminologic: null,
        iso6391: null,
        name: 'Haida'
      },
      hat: {
        terminologic: null,
        iso6391: 'ht',
        name: 'Haitian; Haitian Creole'
      },
      hau: {
        terminologic: null,
        iso6391: 'ha',
        name: 'Hausa'
      },
      haw: {
        terminologic: null,
        iso6391: null,
        name: 'Hawaiian'
      },
      heb: {
        terminologic: null,
        iso6391: 'he',
        name: 'Hebrew'
      },
      her: {
        terminologic: null,
        iso6391: 'hz',
        name: 'Herero'
      },
      hil: {
        terminologic: null,
        iso6391: null,
        name: 'Hiligaynon'
      },
      him: {
        terminologic: null,
        iso6391: null,
        name: 'Himachali languages; Western Pahari languages'
      },
      hin: {
        terminologic: null,
        iso6391: 'hi',
        name: 'Hindi'
      },
      hit: {
        terminologic: null,
        iso6391: null,
        name: 'Hittite'
      },
      hmn: {
        terminologic: null,
        iso6391: null,
        name: 'Hmong; Mong'
      },
      hmo: {
        terminologic: null,
        iso6391: 'ho',
        name: 'Hiri Motu'
      },
      hrv: {
        terminologic: null,
        iso6391: 'hr',
        name: 'Croatian'
      },
      hsb: {
        terminologic: null,
        iso6391: null,
        name: 'Upper Sorbian'
      },
      hun: {
        terminologic: null,
        iso6391: 'hu',
        name: 'Hungarian'
      },
      hup: {
        terminologic: null,
        iso6391: null,
        name: 'Hupa'
      },
      hye: {
        bibliographic: 'arm',
        iso6391: 'hy',
        name: 'Armenian'
      },
      iba: {
        terminologic: null,
        iso6391: null,
        name: 'Iban'
      },
      ibo: {
        terminologic: null,
        iso6391: 'ig',
        name: 'Igbo'
      },
      ice: {
        terminologic: 'isl',
        iso6391: 'is',
        name: 'Icelandic'
      },
      ido: {
        terminologic: null,
        iso6391: 'io',
        name: 'Ido'
      },
      iii: {
        terminologic: null,
        iso6391: 'ii',
        name: 'Sichuan Yi; Nuosu'
      },
      ijo: {
        terminologic: null,
        iso6391: null,
        name: 'Ijo languages'
      },
      iku: {
        terminologic: null,
        iso6391: 'iu',
        name: 'Inuktitut'
      },
      ile: {
        terminologic: null,
        iso6391: 'ie',
        name: 'Interlingue; Occidental'
      },
      ilo: {
        terminologic: null,
        iso6391: null,
        name: 'Iloko'
      },
      ina: {
        terminologic: null,
        iso6391: 'ia',
        name: 'Interlingua (International Auxiliary Language Association)'
      },
      inc: {
        terminologic: null,
        iso6391: null,
        name: 'Indic languages'
      },
      ind: {
        terminologic: null,
        iso6391: 'id',
        name: 'Indonesian'
      },
      ine: {
        terminologic: null,
        iso6391: null,
        name: 'Indo-European languages'
      },
      inh: {
        terminologic: null,
        iso6391: null,
        name: 'Ingush'
      },
      ipk: {
        terminologic: null,
        iso6391: 'ik',
        name: 'Inupiaq'
      },
      ira: {
        terminologic: null,
        iso6391: null,
        name: 'Iranian languages'
      },
      iro: {
        terminologic: null,
        iso6391: null,
        name: 'Iroquoian languages'
      },
      isl: {
        bibliographic: 'ice',
        iso6391: 'is',
        name: 'Icelandic'
      },
      ita: {
        terminologic: null,
        iso6391: 'it',
        name: 'Italian'
      },
      jav: {
        terminologic: null,
        iso6391: 'jv',
        name: 'Javanese'
      },
      jbo: {
        terminologic: null,
        iso6391: null,
        name: 'Lojban'
      },
      jpn: {
        terminologic: null,
        iso6391: 'ja',
        name: 'Japanese'
      },
      jpr: {
        terminologic: null,
        iso6391: null,
        name: 'Judeo-Persian'
      },
      jrb: {
        terminologic: null,
        iso6391: null,
        name: 'Judeo-Arabic'
      },
      kaa: {
        terminologic: null,
        iso6391: null,
        name: 'Kara-Kalpak'
      },
      kab: {
        terminologic: null,
        iso6391: null,
        name: 'Kabyle'
      },
      kac: {
        terminologic: null,
        iso6391: null,
        name: 'Kachin; Jingpho'
      },
      kal: {
        terminologic: null,
        iso6391: 'kl',
        name: 'Kalaallisut; Greenlandic'
      },
      kam: {
        terminologic: null,
        iso6391: null,
        name: 'Kamba'
      },
      kan: {
        terminologic: null,
        iso6391: 'kn',
        name: 'Kannada'
      },
      kar: {
        terminologic: null,
        iso6391: null,
        name: 'Karen languages'
      },
      kas: {
        terminologic: null,
        iso6391: 'ks',
        name: 'Kashmiri'
      },
      kat: {
        bibliographic: 'geo',
        iso6391: 'ka',
        name: 'Georgian'
      },
      kau: {
        terminologic: null,
        iso6391: 'kr',
        name: 'Kanuri'
      },
      kaw: {
        terminologic: null,
        iso6391: null,
        name: 'Kawi'
      },
      kaz: {
        terminologic: null,
        iso6391: 'kk',
        name: 'Kazakh'
      },
      kbd: {
        terminologic: null,
        iso6391: null,
        name: 'Kabardian'
      },
      kha: {
        terminologic: null,
        iso6391: null,
        name: 'Khasi'
      },
      khi: {
        terminologic: null,
        iso6391: null,
        name: 'Khoisan languages'
      },
      khm: {
        terminologic: null,
        iso6391: 'km',
        name: 'Central Khmer'
      },
      kho: {
        terminologic: null,
        iso6391: null,
        name: 'Khotanese; Sakan'
      },
      kik: {
        terminologic: null,
        iso6391: 'ki',
        name: 'Kikuyu; Gikuyu'
      },
      kin: {
        terminologic: null,
        iso6391: 'rw',
        name: 'Kinyarwanda'
      },
      kir: {
        terminologic: null,
        iso6391: 'ky',
        name: 'Kirghiz; Kyrgyz'
      },
      kmb: {
        terminologic: null,
        iso6391: null,
        name: 'Kimbundu'
      },
      kok: {
        terminologic: null,
        iso6391: null,
        name: 'Konkani'
      },
      kom: {
        terminologic: null,
        iso6391: 'kv',
        name: 'Komi'
      },
      kon: {
        terminologic: null,
        iso6391: 'kg',
        name: 'Kongo'
      },
      kor: {
        terminologic: null,
        iso6391: 'ko',
        name: 'Korean'
      },
      kos: {
        terminologic: null,
        iso6391: null,
        name: 'Kosraean'
      },
      kpe: {
        terminologic: null,
        iso6391: null,
        name: 'Kpelle'
      },
      krc: {
        terminologic: null,
        iso6391: null,
        name: 'Karachay-Balkar'
      },
      krl: {
        terminologic: null,
        iso6391: null,
        name: 'Karelian'
      },
      kro: {
        terminologic: null,
        iso6391: null,
        name: 'Kru languages'
      },
      kru: {
        terminologic: null,
        iso6391: null,
        name: 'Kurukh'
      },
      kua: {
        terminologic: null,
        iso6391: 'kj',
        name: 'Kuanyama; Kwanyama'
      },
      kum: {
        terminologic: null,
        iso6391: null,
        name: 'Kumyk'
      },
      kur: {
        terminologic: null,
        iso6391: 'ku',
        name: 'Kurdish'
      },
      kut: {
        terminologic: null,
        iso6391: null,
        name: 'Kutenai'
      },
      lad: {
        terminologic: null,
        iso6391: null,
        name: 'Ladino'
      },
      lah: {
        terminologic: null,
        iso6391: null,
        name: 'Lahnda'
      },
      lam: {
        terminologic: null,
        iso6391: null,
        name: 'Lamba'
      },
      lao: {
        terminologic: null,
        iso6391: 'lo',
        name: 'Lao'
      },
      lat: {
        terminologic: null,
        iso6391: 'la',
        name: 'Latin'
      },
      lav: {
        terminologic: null,
        iso6391: 'lv',
        name: 'Latvian'
      },
      lez: {
        terminologic: null,
        iso6391: null,
        name: 'Lezghian'
      },
      lim: {
        terminologic: null,
        iso6391: 'li',
        name: 'Limburgan; Limburger; Limburgish'
      },
      lin: {
        terminologic: null,
        iso6391: 'ln',
        name: 'Lingala'
      },
      lit: {
        terminologic: null,
        iso6391: 'lt',
        name: 'Lithuanian'
      },
      lol: {
        terminologic: null,
        iso6391: null,
        name: 'Mongo'
      },
      loz: {
        terminologic: null,
        iso6391: null,
        name: 'Lozi'
      },
      ltz: {
        terminologic: null,
        iso6391: 'lb',
        name: 'Luxembourgish; Letzeburgesch'
      },
      lua: {
        terminologic: null,
        iso6391: null,
        name: 'Luba-Lulua'
      },
      lub: {
        terminologic: null,
        iso6391: 'lu',
        name: 'Luba-Katanga'
      },
      lug: {
        terminologic: null,
        iso6391: 'lg',
        name: 'Ganda'
      },
      lui: {
        terminologic: null,
        iso6391: null,
        name: 'Luiseno'
      },
      lun: {
        terminologic: null,
        iso6391: null,
        name: 'Lunda'
      },
      luo: {
        terminologic: null,
        iso6391: null,
        name: 'Luo (Kenya and Tanzania)'
      },
      lus: {
        terminologic: null,
        iso6391: null,
        name: 'Lushai'
      },
      mac: {
        terminologic: 'mkd',
        iso6391: 'mk',
        name: 'Macedonian'
      },
      mad: {
        terminologic: null,
        iso6391: null,
        name: 'Madurese'
      },
      mag: {
        terminologic: null,
        iso6391: null,
        name: 'Magahi'
      },
      mah: {
        terminologic: null,
        iso6391: 'mh',
        name: 'Marshallese'
      },
      mai: {
        terminologic: null,
        iso6391: null,
        name: 'Maithili'
      },
      mak: {
        terminologic: null,
        iso6391: null,
        name: 'Makasar'
      },
      mal: {
        terminologic: null,
        iso6391: 'ml',
        name: 'Malayalam'
      },
      man: {
        terminologic: null,
        iso6391: null,
        name: 'Mandingo'
      },
      mao: {
        terminologic: 'mri',
        iso6391: 'mi',
        name: 'Maori'
      },
      map: {
        terminologic: null,
        iso6391: null,
        name: 'Austronesian languages'
      },
      mar: {
        terminologic: null,
        iso6391: 'mr',
        name: 'Marathi'
      },
      mas: {
        terminologic: null,
        iso6391: null,
        name: 'Masai'
      },
      may: {
        terminologic: 'msa',
        iso6391: 'ms',
        name: 'Malay'
      },
      mdf: {
        terminologic: null,
        iso6391: null,
        name: 'Moksha'
      },
      mdr: {
        terminologic: null,
        iso6391: null,
        name: 'Mandar'
      },
      men: {
        terminologic: null,
        iso6391: null,
        name: 'Mende'
      },
      mga: {
        terminologic: null,
        iso6391: null,
        name: 'Irish, Middle (900-1200)'
      },
      mic: {
        terminologic: null,
        iso6391: null,
        name: "Mi'kmaq; Micmac"
      },
      min: {
        terminologic: null,
        iso6391: null,
        name: 'Minangkabau'
      },
      mis: {
        terminologic: null,
        iso6391: null,
        name: 'Uncoded languages'
      },
      mkd: {
        bibliographic: 'mac',
        iso6391: 'mk',
        name: 'Macedonian'
      },
      mkh: {
        terminologic: null,
        iso6391: null,
        name: 'Mon-Khmer languages'
      },
      mlg: {
        terminologic: null,
        iso6391: 'mg',
        name: 'Malagasy'
      },
      mlt: {
        terminologic: null,
        iso6391: 'mt',
        name: 'Maltese'
      },
      mnc: {
        terminologic: null,
        iso6391: null,
        name: 'Manchu'
      },
      mni: {
        terminologic: null,
        iso6391: null,
        name: 'Manipuri'
      },
      mno: {
        terminologic: null,
        iso6391: null,
        name: 'Manobo languages'
      },
      moh: {
        terminologic: null,
        iso6391: null,
        name: 'Mohawk'
      },
      mon: {
        terminologic: null,
        iso6391: 'mn',
        name: 'Mongolian'
      },
      mos: {
        terminologic: null,
        iso6391: null,
        name: 'Mossi'
      },
      mri: {
        bibliographic: 'mao',
        iso6391: 'mi',
        name: 'Maori'
      },
      msa: {
        bibliographic: 'may',
        iso6391: 'ms',
        name: 'Malay'
      },
      mul: {
        terminologic: null,
        iso6391: null,
        name: 'Multiple languages'
      },
      mun: {
        terminologic: null,
        iso6391: null,
        name: 'Munda languages'
      },
      mus: {
        terminologic: null,
        iso6391: null,
        name: 'Creek'
      },
      mwl: {
        terminologic: null,
        iso6391: null,
        name: 'Mirandese'
      },
      mwr: {
        terminologic: null,
        iso6391: null,
        name: 'Marwari'
      },
      mya: {
        bibliographic: 'bur',
        iso6391: 'my',
        name: 'Burmese'
      },
      myn: {
        terminologic: null,
        iso6391: null,
        name: 'Mayan languages'
      },
      myv: {
        terminologic: null,
        iso6391: null,
        name: 'Erzya'
      },
      nah: {
        terminologic: null,
        iso6391: null,
        name: 'Nahuatl languages'
      },
      nai: {
        terminologic: null,
        iso6391: null,
        name: 'North American Indian languages'
      },
      nap: {
        terminologic: null,
        iso6391: null,
        name: 'Neapolitan'
      },
      nau: {
        terminologic: null,
        iso6391: 'na',
        name: 'Nauru'
      },
      nav: {
        terminologic: null,
        iso6391: 'nv',
        name: 'Navajo; Navaho'
      },
      nbl: {
        terminologic: null,
        iso6391: 'nr',
        name: 'Ndebele, South; South Ndebele'
      },
      nde: {
        terminologic: null,
        iso6391: 'nd',
        name: 'Ndebele, North; North Ndebele'
      },
      ndo: {
        terminologic: null,
        iso6391: 'ng',
        name: 'Ndonga'
      },
      nds: {
        terminologic: null,
        iso6391: null,
        name: 'Low German; Low Saxon; German, Low; Saxon, Low'
      },
      nep: {
        terminologic: null,
        iso6391: 'ne',
        name: 'Nepali'
      },
      new: {
        terminologic: null,
        iso6391: null,
        name: 'Nepal Bhasa; Newari'
      },
      nia: {
        terminologic: null,
        iso6391: null,
        name: 'Nias'
      },
      nic: {
        terminologic: null,
        iso6391: null,
        name: 'Niger-Kordofanian languages'
      },
      niu: {
        terminologic: null,
        iso6391: null,
        name: 'Niuean'
      },
      nld: {
        bibliographic: 'dut',
        iso6391: 'nl',
        name: 'Dutch; Flemish'
      },
      nno: {
        terminologic: null,
        iso6391: 'nn',
        name: 'Norwegian Nynorsk; Nynorsk, Norwegian'
      },
      nob: {
        terminologic: null,
        iso6391: 'nb',
        name: 'Bokmål, Norwegian; Norwegian Bokmål'
      },
      nog: {
        terminologic: null,
        iso6391: null,
        name: 'Nogai'
      },
      non: {
        terminologic: null,
        iso6391: null,
        name: 'Norse, Old'
      },
      nor: {
        terminologic: null,
        iso6391: 'no',
        name: 'Norwegian'
      },
      nqo: {
        terminologic: null,
        iso6391: null,
        name: "N'Ko"
      },
      nso: {
        terminologic: null,
        iso6391: null,
        name: 'Pedi; Sepedi; Northern Sotho'
      },
      nub: {
        terminologic: null,
        iso6391: null,
        name: 'Nubian languages'
      },
      nwc: {
        terminologic: null,
        iso6391: null,
        name: 'Classical Newari; Old Newari; Classical Nepal Bhasa'
      },
      nya: {
        terminologic: null,
        iso6391: 'ny',
        name: 'Chichewa; Chewa; Nyanja'
      },
      nym: {
        terminologic: null,
        iso6391: null,
        name: 'Nyamwezi'
      },
      nyn: {
        terminologic: null,
        iso6391: null,
        name: 'Nyankole'
      },
      nyo: {
        terminologic: null,
        iso6391: null,
        name: 'Nyoro'
      },
      nzi: {
        terminologic: null,
        iso6391: null,
        name: 'Nzima'
      },
      oci: {
        terminologic: null,
        iso6391: 'oc',
        name: 'Occitan (post 1500); Provençal'
      },
      oji: {
        terminologic: null,
        iso6391: 'oj',
        name: 'Ojibwa'
      },
      ori: {
        terminologic: null,
        iso6391: 'or',
        name: 'Oriya'
      },
      orm: {
        terminologic: null,
        iso6391: 'om',
        name: 'Oromo'
      },
      osa: {
        terminologic: null,
        iso6391: null,
        name: 'Osage'
      },
      oss: {
        terminologic: null,
        iso6391: 'os',
        name: 'Ossetian; Ossetic'
      },
      ota: {
        terminologic: null,
        iso6391: null,
        name: 'Turkish, Ottoman (1500-1928)'
      },
      oto: {
        terminologic: null,
        iso6391: null,
        name: 'Otomian languages'
      },
      paa: {
        terminologic: null,
        iso6391: null,
        name: 'Papuan languages'
      },
      pag: {
        terminologic: null,
        iso6391: null,
        name: 'Pangasinan'
      },
      pal: {
        terminologic: null,
        iso6391: null,
        name: 'Pahlavi'
      },
      pam: {
        terminologic: null,
        iso6391: null,
        name: 'Pampanga; Kapampangan'
      },
      pan: {
        terminologic: null,
        iso6391: 'pa',
        name: 'Panjabi; Punjabi'
      },
      pap: {
        terminologic: null,
        iso6391: null,
        name: 'Papiamento'
      },
      pau: {
        terminologic: null,
        iso6391: null,
        name: 'Palauan'
      },
      peo: {
        terminologic: null,
        iso6391: null,
        name: 'Persian, Old (ca.600-400 B.C.)'
      },
      per: {
        terminologic: 'fas',
        iso6391: 'fa',
        name: 'Persian'
      },
      phi: {
        terminologic: null,
        iso6391: null,
        name: 'Philippine languages'
      },
      phn: {
        terminologic: null,
        iso6391: null,
        name: 'Phoenician'
      },
      pli: {
        terminologic: null,
        iso6391: 'pi',
        name: 'Pali'
      },
      pol: {
        terminologic: null,
        iso6391: 'pl',
        name: 'Polish'
      },
      pon: {
        terminologic: null,
        iso6391: null,
        name: 'Pohnpeian'
      },
      por: {
        terminologic: null,
        iso6391: 'pt',
        name: 'Portuguese'
      },
      pra: {
        terminologic: null,
        iso6391: null,
        name: 'Prakrit languages'
      },
      pro: {
        terminologic: null,
        iso6391: null,
        name: 'Provençal, Old (to 1500)'
      },
      pus: {
        terminologic: null,
        iso6391: 'ps',
        name: 'Pushto; Pashto'
      },
      'qaa-qtz': {
        terminologic: null,
        iso6391: null,
        name: 'Reserved for local use'
      },
      que: {
        terminologic: null,
        iso6391: 'qu',
        name: 'Quechua'
      },
      raj: {
        terminologic: null,
        iso6391: null,
        name: 'Rajasthani'
      },
      rap: {
        terminologic: null,
        iso6391: null,
        name: 'Rapanui'
      },
      rar: {
        terminologic: null,
        iso6391: null,
        name: 'Rarotongan; Cook Islands Maori'
      },
      roa: {
        terminologic: null,
        iso6391: null,
        name: 'Romance languages'
      },
      roh: {
        terminologic: null,
        iso6391: 'rm',
        name: 'Romansh'
      },
      rom: {
        terminologic: null,
        iso6391: null,
        name: 'Romany'
      },
      ron: {
        bibliographic: 'rum',
        iso6391: 'ro',
        name: 'Romanian; Moldavian; Moldovan'
      },
      rum: {
        terminologic: 'ron',
        iso6391: 'ro',
        name: 'Romanian; Moldavian; Moldovan'
      },
      run: {
        terminologic: null,
        iso6391: 'rn',
        name: 'Rundi'
      },
      rup: {
        terminologic: null,
        iso6391: null,
        name: 'Aromanian; Arumanian; Macedo-Romanian'
      },
      rus: {
        terminologic: null,
        iso6391: 'ru',
        name: 'Russian'
      },
      sad: {
        terminologic: null,
        iso6391: null,
        name: 'Sandawe'
      },
      sag: {
        terminologic: null,
        iso6391: 'sg',
        name: 'Sango'
      },
      sah: {
        terminologic: null,
        iso6391: null,
        name: 'Yakut'
      },
      sai: {
        terminologic: null,
        iso6391: null,
        name: 'South American Indian (Other)'
      },
      sal: {
        terminologic: null,
        iso6391: null,
        name: 'Salishan languages'
      },
      sam: {
        terminologic: null,
        iso6391: null,
        name: 'Samaritan Aramaic'
      },
      san: {
        terminologic: null,
        iso6391: 'sa',
        name: 'Sanskrit'
      },
      sas: {
        terminologic: null,
        iso6391: null,
        name: 'Sasak'
      },
      sat: {
        terminologic: null,
        iso6391: null,
        name: 'Santali'
      },
      scn: {
        terminologic: null,
        iso6391: null,
        name: 'Sicilian'
      },
      sco: {
        terminologic: null,
        iso6391: null,
        name: 'Scots'
      },
      sel: {
        terminologic: null,
        iso6391: null,
        name: 'Selkup'
      },
      sem: {
        terminologic: null,
        iso6391: null,
        name: 'Semitic languages'
      },
      sga: {
        terminologic: null,
        iso6391: null,
        name: 'Irish, Old (to 900)'
      },
      sgn: {
        terminologic: null,
        iso6391: null,
        name: 'Sign Languages'
      },
      shn: {
        terminologic: null,
        iso6391: null,
        name: 'Shan'
      },
      sid: {
        terminologic: null,
        iso6391: null,
        name: 'Sidamo'
      },
      sin: {
        terminologic: null,
        iso6391: 'si',
        name: 'Sinhala; Sinhalese'
      },
      sio: {
        terminologic: null,
        iso6391: null,
        name: 'Siouan languages'
      },
      sit: {
        terminologic: null,
        iso6391: null,
        name: 'Sino-Tibetan languages'
      },
      sla: {
        terminologic: null,
        iso6391: null,
        name: 'Slavic languages'
      },
      slo: {
        terminologic: 'slk',
        iso6391: 'sk',
        name: 'Slovak'
      },
      slk: {
        bibliographic: 'slo',
        iso6391: 'sk',
        name: 'Slovak'
      },
      slv: {
        terminologic: null,
        iso6391: 'sl',
        name: 'Slovenian'
      },
      sma: {
        terminologic: null,
        iso6391: null,
        name: 'Southern Sami'
      },
      sme: {
        terminologic: null,
        iso6391: 'se',
        name: 'Northern Sami'
      },
      smi: {
        terminologic: null,
        iso6391: null,
        name: 'Sami languages'
      },
      smj: {
        terminologic: null,
        iso6391: null,
        name: 'Lule Sami'
      },
      smn: {
        terminologic: null,
        iso6391: null,
        name: 'Inari Sami'
      },
      smo: {
        terminologic: null,
        iso6391: 'sm',
        name: 'Samoan'
      },
      sms: {
        terminologic: null,
        iso6391: null,
        name: 'Skolt Sami'
      },
      sna: {
        terminologic: null,
        iso6391: 'sn',
        name: 'Shona'
      },
      snd: {
        terminologic: null,
        iso6391: 'sd',
        name: 'Sindhi'
      },
      snk: {
        terminologic: null,
        iso6391: null,
        name: 'Soninke'
      },
      sog: {
        terminologic: null,
        iso6391: null,
        name: 'Sogdian'
      },
      som: {
        terminologic: null,
        iso6391: 'so',
        name: 'Somali'
      },
      son: {
        terminologic: null,
        iso6391: null,
        name: 'Songhai languages'
      },
      sot: {
        terminologic: null,
        iso6391: 'st',
        name: 'Sotho, Southern'
      },
      spa: {
        terminologic: null,
        iso6391: 'es',
        name: 'Spanish; Castilian'
      },
      sqi: {
        bibliographic: 'alb',
        iso6391: 'sq',
        name: 'Albanian'
      },
      srd: {
        terminologic: null,
        iso6391: 'sc',
        name: 'Sardinian'
      },
      srn: {
        terminologic: null,
        iso6391: null,
        name: 'Sranan Tongo'
      },
      srp: {
        terminologic: null,
        iso6391: 'sr',
        name: 'Serbian'
      },
      srr: {
        terminologic: null,
        iso6391: null,
        name: 'Serer'
      },
      ssa: {
        terminologic: null,
        iso6391: null,
        name: 'Nilo-Saharan languages'
      },
      ssw: {
        terminologic: null,
        iso6391: 'ss',
        name: 'Swati'
      },
      suk: {
        terminologic: null,
        iso6391: null,
        name: 'Sukuma'
      },
      sun: {
        terminologic: null,
        iso6391: 'su',
        name: 'Sundanese'
      },
      sus: {
        terminologic: null,
        iso6391: null,
        name: 'Susu'
      },
      sux: {
        terminologic: null,
        iso6391: null,
        name: 'Sumerian'
      },
      swa: {
        terminologic: null,
        iso6391: 'sw',
        name: 'Swahili'
      },
      swe: {
        terminologic: null,
        iso6391: 'sv',
        name: 'Swedish'
      },
      syc: {
        terminologic: null,
        iso6391: null,
        name: 'Classical Syriac'
      },
      syr: {
        terminologic: null,
        iso6391: null,
        name: 'Syriac'
      },
      tah: {
        terminologic: null,
        iso6391: 'ty',
        name: 'Tahitian'
      },
      tai: {
        terminologic: null,
        iso6391: null,
        name: 'Tai languages'
      },
      tam: {
        terminologic: null,
        iso6391: 'ta',
        name: 'Tamil'
      },
      tat: {
        terminologic: null,
        iso6391: 'tt',
        name: 'Tatar'
      },
      tel: {
        terminologic: null,
        iso6391: 'te',
        name: 'Telugu'
      },
      tem: {
        terminologic: null,
        iso6391: null,
        name: 'Timne'
      },
      ter: {
        terminologic: null,
        iso6391: null,
        name: 'Tereno'
      },
      tet: {
        terminologic: null,
        iso6391: null,
        name: 'Tetum'
      },
      tgk: {
        terminologic: null,
        iso6391: 'tg',
        name: 'Tajik'
      },
      tgl: {
        terminologic: null,
        iso6391: 'tl',
        name: 'Tagalog'
      },
      tha: {
        terminologic: null,
        iso6391: 'th',
        name: 'Thai'
      },
      tib: {
        terminologic: 'bod',
        iso6391: 'bo',
        name: 'Tibetan'
      },
      tig: {
        terminologic: null,
        iso6391: null,
        name: 'Tigre'
      },
      tir: {
        terminologic: null,
        iso6391: 'ti',
        name: 'Tigrinya'
      },
      tiv: {
        terminologic: null,
        iso6391: null,
        name: 'Tiv'
      },
      tkl: {
        terminologic: null,
        iso6391: null,
        name: 'Tokelau'
      },
      tlh: {
        terminologic: null,
        iso6391: null,
        name: 'Klingon; tlhIngan-Hol'
      },
      tli: {
        terminologic: null,
        iso6391: null,
        name: 'Tlingit'
      },
      tmh: {
        terminologic: null,
        iso6391: null,
        name: 'Tamashek'
      },
      tog: {
        terminologic: null,
        iso6391: null,
        name: 'Tonga (Nyasa)'
      },
      ton: {
        terminologic: null,
        iso6391: 'to',
        name: 'Tonga (Tonga Islands)'
      },
      tpi: {
        terminologic: null,
        iso6391: null,
        name: 'Tok Pisin'
      },
      tsi: {
        terminologic: null,
        iso6391: null,
        name: 'Tsimshian'
      },
      tsn: {
        terminologic: null,
        iso6391: 'tn',
        name: 'Tswana'
      },
      tso: {
        terminologic: null,
        iso6391: 'ts',
        name: 'Tsonga'
      },
      tuk: {
        terminologic: null,
        iso6391: 'tk',
        name: 'Turkmen'
      },
      tum: {
        terminologic: null,
        iso6391: null,
        name: 'Tumbuka'
      },
      tup: {
        terminologic: null,
        iso6391: null,
        name: 'Tupi languages'
      },
      tur: {
        terminologic: null,
        iso6391: 'tr',
        name: 'Turkish'
      },
      tut: {
        terminologic: null,
        iso6391: null,
        name: 'Altaic languages'
      },
      tvl: {
        terminologic: null,
        iso6391: null,
        name: 'Tuvalu'
      },
      twi: {
        terminologic: null,
        iso6391: 'tw',
        name: 'Twi'
      },
      tyv: {
        terminologic: null,
        iso6391: null,
        name: 'Tuvinian'
      },
      udm: {
        terminologic: null,
        iso6391: null,
        name: 'Udmurt'
      },
      uga: {
        terminologic: null,
        iso6391: null,
        name: 'Ugaritic'
      },
      uig: {
        terminologic: null,
        iso6391: 'ug',
        name: 'Uighur; Uyghur'
      },
      ukr: {
        terminologic: null,
        iso6391: 'uk',
        name: 'Ukrainian'
      },
      umb: {
        terminologic: null,
        iso6391: null,
        name: 'Umbundu'
      },
      und: {
        terminologic: null,
        iso6391: null,
        name: 'Undetermined'
      },
      urd: {
        terminologic: null,
        iso6391: 'ur',
        name: 'Urdu'
      },
      uzb: {
        terminologic: null,
        iso6391: 'uz',
        name: 'Uzbek'
      },
      vai: {
        terminologic: null,
        iso6391: null,
        name: 'Vai'
      },
      ven: {
        terminologic: null,
        iso6391: 've',
        name: 'Venda'
      },
      vie: {
        terminologic: null,
        iso6391: 'vi',
        name: 'Vietnamese'
      },
      vol: {
        terminologic: null,
        iso6391: 'vo',
        name: 'Volapük'
      },
      vot: {
        terminologic: null,
        iso6391: null,
        name: 'Votic'
      },
      wak: {
        terminologic: null,
        iso6391: null,
        name: 'Wakashan languages'
      },
      wal: {
        terminologic: null,
        iso6391: null,
        name: 'Walamo'
      },
      war: {
        terminologic: null,
        iso6391: null,
        name: 'Waray'
      },
      was: {
        terminologic: null,
        iso6391: null,
        name: 'Washo'
      },
      wel: {
        terminologic: 'cym',
        iso6391: 'cy',
        name: 'Welsh'
      },
      wen: {
        terminologic: null,
        iso6391: null,
        name: 'Sorbian languages'
      },
      wln: {
        terminologic: null,
        iso6391: 'wa',
        name: 'Walloon'
      },
      wol: {
        terminologic: null,
        iso6391: 'wo',
        name: 'Wolof'
      },
      xal: {
        terminologic: null,
        iso6391: null,
        name: 'Kalmyk; Oirat'
      },
      xho: {
        terminologic: null,
        iso6391: 'xh',
        name: 'Xhosa'
      },
      yao: {
        terminologic: null,
        iso6391: null,
        name: 'Yao'
      },
      yap: {
        terminologic: null,
        iso6391: null,
        name: 'Yapese'
      },
      yid: {
        terminologic: null,
        iso6391: 'yi',
        name: 'Yiddish'
      },
      yor: {
        terminologic: null,
        iso6391: 'yo',
        name: 'Yoruba'
      },
      ypk: {
        terminologic: null,
        iso6391: null,
        name: 'Yupik languages'
      },
      zap: {
        terminologic: null,
        iso6391: null,
        name: 'Zapotec'
      },
      zbl: {
        terminologic: null,
        iso6391: null,
        name: 'Blissymbols; Blissymbolics; Bliss'
      },
      zen: {
        terminologic: null,
        iso6391: null,
        name: 'Zenaga'
      },
      zgh: {
        terminologic: null,
        iso6391: null,
        name: 'Standard Moroccan Tamazight'
      },
      zha: {
        terminologic: null,
        iso6391: 'za',
        name: 'Zhuang; Chuang'
      },
      zho: {
        bibliographic: 'chi',
        iso6391: 'zh',
        name: 'Chinese'
      },
      znd: {
        terminologic: null,
        iso6391: null,
        name: 'Zande languages'
      },
      zul: {
        terminologic: null,
        iso6391: 'zu',
        name: 'Zulu'
      },
      zun: {
        terminologic: null,
        iso6391: null,
        name: 'Zuni'
      },
      zxx: {
        terminologic: null,
        iso6391: null,
        name: 'No linguistic content; Not applicable'
      },
      zza: {
        terminologic: null,
        iso6391: null,
        name: 'Zaza; Dimili; Dimli; Kirdki; Kirmanjki; Zazaki'
      }
    }
  },
  function(module, exports, __webpack_require__) {
    void function() {
      var cheerio,
        cleaner,
        extractor,
        getCleanedDoc,
        getParsedDoc,
        getTopNode,
        unfluff
      cheerio = __webpack_require__(56)
      extractor = __webpack_require__(117)
      cleaner = __webpack_require__(121)
      module.exports = unfluff = function(html, language) {
        var doc, lng, pageData, topNode
        doc = cheerio.load(html)
        lng = language || extractor.lang(doc)
        pageData = {
          title: extractor.title(doc),
          softTitle: extractor.softTitle(doc),
          date: extractor.date(doc),
          author: extractor.author(doc),
          publisher: extractor.publisher(doc),
          copyright: extractor.copyright(doc),
          favicon: extractor.favicon(doc),
          description: extractor.description(doc),
          keywords: extractor.keywords(doc),
          lang: lng,
          canonicalLink: extractor.canonicalLink(doc),
          tags: extractor.tags(doc),
          image: extractor.image(doc)
        }
        cleaner(doc)
        topNode = extractor.calculateBestNode(doc, lng)
        pageData.videos = extractor.videos(doc, topNode)
        pageData.links = extractor.links(doc, topNode, lng)
        pageData.text = extractor.text(doc, topNode, lng)
        return pageData
      }
      unfluff.lazy = function(html, language) {
        return {
          title: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.title_
              ? this.title_
              : (this.title_ = extractor.title(doc))
          },
          softTitle: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.softTitle_
              ? this.softTitle_
              : (this.softTitle_ = extractor.softTitle(doc))
          },
          date: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.date_
              ? this.date_
              : (this.date_ = extractor.date(doc))
          },
          copyright: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.copyright_
              ? this.copyright_
              : (this.copyright_ = extractor.copyright(doc))
          },
          author: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.author_
              ? this.author_
              : (this.author_ = extractor.author(doc))
          },
          publisher: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.publisher_
              ? this.publisher_
              : (this.publisher_ = extractor.publisher(doc))
          },
          favicon: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.favicon_
              ? this.favicon_
              : (this.favicon_ = extractor.favicon(doc))
          },
          description: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.description_
              ? this.description_
              : (this.description_ = extractor.description(doc))
          },
          keywords: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.keywords_
              ? this.keywords_
              : (this.keywords_ = extractor.keywords(doc))
          },
          lang: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.language_
              ? this.language_
              : (this.language_ = language || extractor.lang(doc))
          },
          canonicalLink: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.canonicalLink_
              ? this.canonicalLink_
              : (this.canonicalLink_ = extractor.canonicalLink(doc))
          },
          tags: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.tags_
              ? this.tags_
              : (this.tags_ = extractor.tags(doc))
          },
          image: function() {
            var doc
            doc = getParsedDoc.call(this, html)
            return null != this.image_
              ? this.image_
              : (this.image_ = extractor.image(doc))
          },
          videos: function() {
            var doc, topNode
            if (null != this.videos_) return this.videos_
            doc = getCleanedDoc.call(this, html)
            topNode = getTopNode.call(this, doc, this.lang())
            return (this.videos_ = extractor.videos(doc, topNode))
          },
          text: function() {
            var doc, topNode
            if (null != this.text_) return this.text_
            doc = getCleanedDoc.call(this, html)
            topNode = getTopNode.call(this, doc, this.lang())
            return (this.text_ = extractor.text(doc, topNode, this.lang()))
          },
          links: function() {
            var doc, topNode
            if (null != this.links_) return this.links_
            doc = getCleanedDoc.call(this, html)
            topNode = getTopNode.call(this, doc, this.lang())
            return (this.links_ = extractor.links(doc, topNode, this.lang()))
          }
        }
      }
      getParsedDoc = function(html) {
        return null != this.doc_ ? this.doc_ : (this.doc_ = cheerio.load(html))
      }
      getTopNode = function(doc, lng) {
        return null != this.topNode_
          ? this.topNode_
          : (this.topNode_ = extractor.calculateBestNode(doc, lng))
      }
      getCleanedDoc = function(html) {
        var doc
        if (null != this.cleanedDoc_) return this.cleanedDoc_
        doc = getParsedDoc.call(this, html)
        this.cleanedDoc_ = cleaner(doc)
        return this.cleanedDoc_
      }
    }.call(this)
  },
  function(module, exports, __webpack_require__) {
    exports = module.exports = __webpack_require__(19)
    exports.version = __webpack_require__(116).version
  },
  function(module, exports, __webpack_require__) {
    ;(function(process) {
      function normalizeArray(parts, allowAboveRoot) {
        var up = 0
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i]
          if (last === '.') {
            parts.splice(i, 1)
          } else if (last === '..') {
            parts.splice(i, 1)
            up++
          } else if (up) {
            parts.splice(i, 1)
            up--
          }
        }
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..')
          }
        }
        return parts
      }
      var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
      var splitPath = function(filename) {
        return splitPathRe.exec(filename).slice(1)
      }
      exports.resolve = function() {
        var resolvedPath = '',
          resolvedAbsolute = false
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? arguments[i] : process.cwd()
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings')
          } else if (!path) {
            continue
          }
          resolvedPath = path + '/' + resolvedPath
          resolvedAbsolute = path.charAt(0) === '/'
        }
        resolvedPath = normalizeArray(
          filter(resolvedPath.split('/'), function(p) {
            return !!p
          }),
          !resolvedAbsolute
        ).join('/')
        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.'
      }
      exports.normalize = function(path) {
        var isAbsolute = exports.isAbsolute(path),
          trailingSlash = substr(path, -1) === '/'
        path = normalizeArray(
          filter(path.split('/'), function(p) {
            return !!p
          }),
          !isAbsolute
        ).join('/')
        if (!path && !isAbsolute) {
          path = '.'
        }
        if (path && trailingSlash) {
          path += '/'
        }
        return (isAbsolute ? '/' : '') + path
      }
      exports.isAbsolute = function(path) {
        return path.charAt(0) === '/'
      }
      exports.join = function() {
        var paths = Array.prototype.slice.call(arguments, 0)
        return exports.normalize(
          filter(paths, function(p, index) {
            if (typeof p !== 'string') {
              throw new TypeError('Arguments to path.join must be strings')
            }
            return p
          }).join('/')
        )
      }
      exports.relative = function(from, to) {
        from = exports.resolve(from).substr(1)
        to = exports.resolve(to).substr(1)
        function trim(arr) {
          var start = 0
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break
          }
          var end = arr.length - 1
          for (; end >= 0; end--) {
            if (arr[end] !== '') break
          }
          if (start > end) return []
          return arr.slice(start, end - start + 1)
        }
        var fromParts = trim(from.split('/'))
        var toParts = trim(to.split('/'))
        var length = Math.min(fromParts.length, toParts.length)
        var samePartsLength = length
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i
            break
          }
        }
        var outputParts = []
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..')
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength))
        return outputParts.join('/')
      }
      exports.sep = '/'
      exports.delimiter = ':'
      exports.dirname = function(path) {
        var result = splitPath(path),
          root = result[0],
          dir = result[1]
        if (!root && !dir) {
          return '.'
        }
        if (dir) {
          dir = dir.substr(0, dir.length - 1)
        }
        return root + dir
      }
      exports.basename = function(path, ext) {
        var f = splitPath(path)[2]
        if (ext && f.substr(-1 * ext.length) === ext) {
          f = f.substr(0, f.length - ext.length)
        }
        return f
      }
      exports.extname = function(path) {
        return splitPath(path)[3]
      }
      function filter(xs, f) {
        if (xs.filter) return xs.filter(f)
        var res = []
        for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i])
        }
        return res
      }
      var substr =
        'ab'.substr(-1) === 'b'
          ? function(str, start, len) {
              return str.substr(start, len)
            }
          : function(str, start, len) {
              if (start < 0) start = str.length + start
              return str.substr(start, len)
            }
    }.call(exports, __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray
    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
    var code =
      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63
    function placeHoldersCount(b64) {
      var len = b64.length
      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }
      return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
    }
    function byteLength(b64) {
      return b64.length * 3 / 4 - placeHoldersCount(b64)
    }
    function toByteArray(b64) {
      var i, l, tmp, placeHolders, arr
      var len = b64.length
      placeHolders = placeHoldersCount(b64)
      arr = new Arr(len * 3 / 4 - placeHolders)
      l = placeHolders > 0 ? len - 4 : len
      var L = 0
      for (i = 0; i < l; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)]
        arr[L++] = (tmp >> 16) & 255
        arr[L++] = (tmp >> 8) & 255
        arr[L++] = tmp & 255
      }
      if (placeHolders === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[L++] = tmp & 255
      } else if (placeHolders === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[L++] = (tmp >> 8) & 255
        arr[L++] = tmp & 255
      }
      return arr
    }
    function tripletToBase64(num) {
      return (
        lookup[(num >> 18) & 63] +
        lookup[(num >> 12) & 63] +
        lookup[(num >> 6) & 63] +
        lookup[num & 63]
      )
    }
    function encodeChunk(uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }
    function fromByteArray(uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3
      var output = ''
      var parts = []
      var maxChunkLength = 16383
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(
          encodeChunk(
            uint8,
            i,
            i + maxChunkLength > len2 ? len2 : i + maxChunkLength
          )
        )
      }
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        output += lookup[tmp >> 2]
        output += lookup[(tmp << 4) & 63]
        output += '=='
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1]
        output += lookup[tmp >> 10]
        output += lookup[(tmp >> 4) & 63]
        output += lookup[(tmp << 2) & 63]
        output += '='
      }
      parts.push(output)
      return parts.join('')
    }
  },
  function(module, exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = nBytes * 8 - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? nBytes - 1 : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]
      i += d
      e = s & ((1 << -nBits) - 1)
      s >>= -nBits
      nBits += eLen
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
      m = e & ((1 << -nBits) - 1)
      e >>= -nBits
      nBits += mLen
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = nBytes * 8 - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0
      var i = isLE ? 0 : nBytes - 1
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
      value = Math.abs(value)
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }
        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }
      for (
        ;
        mLen >= 8;
        buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8
      ) {}
      e = (e << mLen) | m
      eLen += mLen
      for (
        ;
        eLen > 0;
        buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8
      ) {}
      buffer[offset + i - d] |= s * 128
    }
  },
  function(module, exports, __webpack_require__) {
    var decodeMap = __webpack_require__(61)
    module.exports = decodeCodePoint
    function decodeCodePoint(codePoint) {
      if ((codePoint >= 55296 && codePoint <= 57343) || codePoint > 1114111) {
        return '�'
      }
      if (codePoint in decodeMap) {
        codePoint = decodeMap[codePoint]
      }
      var output = ''
      if (codePoint > 65535) {
        codePoint -= 65536
        output += String.fromCharCode(((codePoint >>> 10) & 1023) | 55296)
        codePoint = 56320 | (codePoint & 1023)
      }
      output += String.fromCharCode(codePoint)
      return output
    }
  },
  function(module, exports) {
    module.exports = {
      '0': 65533,
      '128': 8364,
      '130': 8218,
      '131': 402,
      '132': 8222,
      '133': 8230,
      '134': 8224,
      '135': 8225,
      '136': 710,
      '137': 8240,
      '138': 352,
      '139': 8249,
      '140': 338,
      '142': 381,
      '145': 8216,
      '146': 8217,
      '147': 8220,
      '148': 8221,
      '149': 8226,
      '150': 8211,
      '151': 8212,
      '152': 732,
      '153': 8482,
      '154': 353,
      '155': 8250,
      '156': 339,
      '158': 382,
      '159': 376
    }
  },
  function(module, exports) {
    module.exports = {
      Aacute: 'Á',
      aacute: 'á',
      Abreve: 'Ă',
      abreve: 'ă',
      ac: '∾',
      acd: '∿',
      acE: '∾̳',
      Acirc: 'Â',
      acirc: 'â',
      acute: '´',
      Acy: 'А',
      acy: 'а',
      AElig: 'Æ',
      aelig: 'æ',
      af: '⁡',
      Afr: '𝔄',
      afr: '𝔞',
      Agrave: 'À',
      agrave: 'à',
      alefsym: 'ℵ',
      aleph: 'ℵ',
      Alpha: 'Α',
      alpha: 'α',
      Amacr: 'Ā',
      amacr: 'ā',
      amalg: '⨿',
      amp: '&',
      AMP: '&',
      andand: '⩕',
      And: '⩓',
      and: '∧',
      andd: '⩜',
      andslope: '⩘',
      andv: '⩚',
      ang: '∠',
      ange: '⦤',
      angle: '∠',
      angmsdaa: '⦨',
      angmsdab: '⦩',
      angmsdac: '⦪',
      angmsdad: '⦫',
      angmsdae: '⦬',
      angmsdaf: '⦭',
      angmsdag: '⦮',
      angmsdah: '⦯',
      angmsd: '∡',
      angrt: '∟',
      angrtvb: '⊾',
      angrtvbd: '⦝',
      angsph: '∢',
      angst: 'Å',
      angzarr: '⍼',
      Aogon: 'Ą',
      aogon: 'ą',
      Aopf: '𝔸',
      aopf: '𝕒',
      apacir: '⩯',
      ap: '≈',
      apE: '⩰',
      ape: '≊',
      apid: '≋',
      apos: "'",
      ApplyFunction: '⁡',
      approx: '≈',
      approxeq: '≊',
      Aring: 'Å',
      aring: 'å',
      Ascr: '𝒜',
      ascr: '𝒶',
      Assign: '≔',
      ast: '*',
      asymp: '≈',
      asympeq: '≍',
      Atilde: 'Ã',
      atilde: 'ã',
      Auml: 'Ä',
      auml: 'ä',
      awconint: '∳',
      awint: '⨑',
      backcong: '≌',
      backepsilon: '϶',
      backprime: '‵',
      backsim: '∽',
      backsimeq: '⋍',
      Backslash: '∖',
      Barv: '⫧',
      barvee: '⊽',
      barwed: '⌅',
      Barwed: '⌆',
      barwedge: '⌅',
      bbrk: '⎵',
      bbrktbrk: '⎶',
      bcong: '≌',
      Bcy: 'Б',
      bcy: 'б',
      bdquo: '„',
      becaus: '∵',
      because: '∵',
      Because: '∵',
      bemptyv: '⦰',
      bepsi: '϶',
      bernou: 'ℬ',
      Bernoullis: 'ℬ',
      Beta: 'Β',
      beta: 'β',
      beth: 'ℶ',
      between: '≬',
      Bfr: '𝔅',
      bfr: '𝔟',
      bigcap: '⋂',
      bigcirc: '◯',
      bigcup: '⋃',
      bigodot: '⨀',
      bigoplus: '⨁',
      bigotimes: '⨂',
      bigsqcup: '⨆',
      bigstar: '★',
      bigtriangledown: '▽',
      bigtriangleup: '△',
      biguplus: '⨄',
      bigvee: '⋁',
      bigwedge: '⋀',
      bkarow: '⤍',
      blacklozenge: '⧫',
      blacksquare: '▪',
      blacktriangle: '▴',
      blacktriangledown: '▾',
      blacktriangleleft: '◂',
      blacktriangleright: '▸',
      blank: '␣',
      blk12: '▒',
      blk14: '░',
      blk34: '▓',
      block: '█',
      bne: '=⃥',
      bnequiv: '≡⃥',
      bNot: '⫭',
      bnot: '⌐',
      Bopf: '𝔹',
      bopf: '𝕓',
      bot: '⊥',
      bottom: '⊥',
      bowtie: '⋈',
      boxbox: '⧉',
      boxdl: '┐',
      boxdL: '╕',
      boxDl: '╖',
      boxDL: '╗',
      boxdr: '┌',
      boxdR: '╒',
      boxDr: '╓',
      boxDR: '╔',
      boxh: '─',
      boxH: '═',
      boxhd: '┬',
      boxHd: '╤',
      boxhD: '╥',
      boxHD: '╦',
      boxhu: '┴',
      boxHu: '╧',
      boxhU: '╨',
      boxHU: '╩',
      boxminus: '⊟',
      boxplus: '⊞',
      boxtimes: '⊠',
      boxul: '┘',
      boxuL: '╛',
      boxUl: '╜',
      boxUL: '╝',
      boxur: '└',
      boxuR: '╘',
      boxUr: '╙',
      boxUR: '╚',
      boxv: '│',
      boxV: '║',
      boxvh: '┼',
      boxvH: '╪',
      boxVh: '╫',
      boxVH: '╬',
      boxvl: '┤',
      boxvL: '╡',
      boxVl: '╢',
      boxVL: '╣',
      boxvr: '├',
      boxvR: '╞',
      boxVr: '╟',
      boxVR: '╠',
      bprime: '‵',
      breve: '˘',
      Breve: '˘',
      brvbar: '¦',
      bscr: '𝒷',
      Bscr: 'ℬ',
      bsemi: '⁏',
      bsim: '∽',
      bsime: '⋍',
      bsolb: '⧅',
      bsol: '\\',
      bsolhsub: '⟈',
      bull: '•',
      bullet: '•',
      bump: '≎',
      bumpE: '⪮',
      bumpe: '≏',
      Bumpeq: '≎',
      bumpeq: '≏',
      Cacute: 'Ć',
      cacute: 'ć',
      capand: '⩄',
      capbrcup: '⩉',
      capcap: '⩋',
      cap: '∩',
      Cap: '⋒',
      capcup: '⩇',
      capdot: '⩀',
      CapitalDifferentialD: 'ⅅ',
      caps: '∩︀',
      caret: '⁁',
      caron: 'ˇ',
      Cayleys: 'ℭ',
      ccaps: '⩍',
      Ccaron: 'Č',
      ccaron: 'č',
      Ccedil: 'Ç',
      ccedil: 'ç',
      Ccirc: 'Ĉ',
      ccirc: 'ĉ',
      Cconint: '∰',
      ccups: '⩌',
      ccupssm: '⩐',
      Cdot: 'Ċ',
      cdot: 'ċ',
      cedil: '¸',
      Cedilla: '¸',
      cemptyv: '⦲',
      cent: '¢',
      centerdot: '·',
      CenterDot: '·',
      cfr: '𝔠',
      Cfr: 'ℭ',
      CHcy: 'Ч',
      chcy: 'ч',
      check: '✓',
      checkmark: '✓',
      Chi: 'Χ',
      chi: 'χ',
      circ: 'ˆ',
      circeq: '≗',
      circlearrowleft: '↺',
      circlearrowright: '↻',
      circledast: '⊛',
      circledcirc: '⊚',
      circleddash: '⊝',
      CircleDot: '⊙',
      circledR: '®',
      circledS: 'Ⓢ',
      CircleMinus: '⊖',
      CirclePlus: '⊕',
      CircleTimes: '⊗',
      cir: '○',
      cirE: '⧃',
      cire: '≗',
      cirfnint: '⨐',
      cirmid: '⫯',
      cirscir: '⧂',
      ClockwiseContourIntegral: '∲',
      CloseCurlyDoubleQuote: '”',
      CloseCurlyQuote: '’',
      clubs: '♣',
      clubsuit: '♣',
      colon: ':',
      Colon: '∷',
      Colone: '⩴',
      colone: '≔',
      coloneq: '≔',
      comma: ',',
      commat: '@',
      comp: '∁',
      compfn: '∘',
      complement: '∁',
      complexes: 'ℂ',
      cong: '≅',
      congdot: '⩭',
      Congruent: '≡',
      conint: '∮',
      Conint: '∯',
      ContourIntegral: '∮',
      copf: '𝕔',
      Copf: 'ℂ',
      coprod: '∐',
      Coproduct: '∐',
      copy: '©',
      COPY: '©',
      copysr: '℗',
      CounterClockwiseContourIntegral: '∳',
      crarr: '↵',
      cross: '✗',
      Cross: '⨯',
      Cscr: '𝒞',
      cscr: '𝒸',
      csub: '⫏',
      csube: '⫑',
      csup: '⫐',
      csupe: '⫒',
      ctdot: '⋯',
      cudarrl: '⤸',
      cudarrr: '⤵',
      cuepr: '⋞',
      cuesc: '⋟',
      cularr: '↶',
      cularrp: '⤽',
      cupbrcap: '⩈',
      cupcap: '⩆',
      CupCap: '≍',
      cup: '∪',
      Cup: '⋓',
      cupcup: '⩊',
      cupdot: '⊍',
      cupor: '⩅',
      cups: '∪︀',
      curarr: '↷',
      curarrm: '⤼',
      curlyeqprec: '⋞',
      curlyeqsucc: '⋟',
      curlyvee: '⋎',
      curlywedge: '⋏',
      curren: '¤',
      curvearrowleft: '↶',
      curvearrowright: '↷',
      cuvee: '⋎',
      cuwed: '⋏',
      cwconint: '∲',
      cwint: '∱',
      cylcty: '⌭',
      dagger: '†',
      Dagger: '‡',
      daleth: 'ℸ',
      darr: '↓',
      Darr: '↡',
      dArr: '⇓',
      dash: '‐',
      Dashv: '⫤',
      dashv: '⊣',
      dbkarow: '⤏',
      dblac: '˝',
      Dcaron: 'Ď',
      dcaron: 'ď',
      Dcy: 'Д',
      dcy: 'д',
      ddagger: '‡',
      ddarr: '⇊',
      DD: 'ⅅ',
      dd: 'ⅆ',
      DDotrahd: '⤑',
      ddotseq: '⩷',
      deg: '°',
      Del: '∇',
      Delta: 'Δ',
      delta: 'δ',
      demptyv: '⦱',
      dfisht: '⥿',
      Dfr: '𝔇',
      dfr: '𝔡',
      dHar: '⥥',
      dharl: '⇃',
      dharr: '⇂',
      DiacriticalAcute: '´',
      DiacriticalDot: '˙',
      DiacriticalDoubleAcute: '˝',
      DiacriticalGrave: '`',
      DiacriticalTilde: '˜',
      diam: '⋄',
      diamond: '⋄',
      Diamond: '⋄',
      diamondsuit: '♦',
      diams: '♦',
      die: '¨',
      DifferentialD: 'ⅆ',
      digamma: 'ϝ',
      disin: '⋲',
      div: '÷',
      divide: '÷',
      divideontimes: '⋇',
      divonx: '⋇',
      DJcy: 'Ђ',
      djcy: 'ђ',
      dlcorn: '⌞',
      dlcrop: '⌍',
      dollar: '$',
      Dopf: '𝔻',
      dopf: '𝕕',
      Dot: '¨',
      dot: '˙',
      DotDot: '⃜',
      doteq: '≐',
      doteqdot: '≑',
      DotEqual: '≐',
      dotminus: '∸',
      dotplus: '∔',
      dotsquare: '⊡',
      doublebarwedge: '⌆',
      DoubleContourIntegral: '∯',
      DoubleDot: '¨',
      DoubleDownArrow: '⇓',
      DoubleLeftArrow: '⇐',
      DoubleLeftRightArrow: '⇔',
      DoubleLeftTee: '⫤',
      DoubleLongLeftArrow: '⟸',
      DoubleLongLeftRightArrow: '⟺',
      DoubleLongRightArrow: '⟹',
      DoubleRightArrow: '⇒',
      DoubleRightTee: '⊨',
      DoubleUpArrow: '⇑',
      DoubleUpDownArrow: '⇕',
      DoubleVerticalBar: '∥',
      DownArrowBar: '⤓',
      downarrow: '↓',
      DownArrow: '↓',
      Downarrow: '⇓',
      DownArrowUpArrow: '⇵',
      DownBreve: '̑',
      downdownarrows: '⇊',
      downharpoonleft: '⇃',
      downharpoonright: '⇂',
      DownLeftRightVector: '⥐',
      DownLeftTeeVector: '⥞',
      DownLeftVectorBar: '⥖',
      DownLeftVector: '↽',
      DownRightTeeVector: '⥟',
      DownRightVectorBar: '⥗',
      DownRightVector: '⇁',
      DownTeeArrow: '↧',
      DownTee: '⊤',
      drbkarow: '⤐',
      drcorn: '⌟',
      drcrop: '⌌',
      Dscr: '𝒟',
      dscr: '𝒹',
      DScy: 'Ѕ',
      dscy: 'ѕ',
      dsol: '⧶',
      Dstrok: 'Đ',
      dstrok: 'đ',
      dtdot: '⋱',
      dtri: '▿',
      dtrif: '▾',
      duarr: '⇵',
      duhar: '⥯',
      dwangle: '⦦',
      DZcy: 'Џ',
      dzcy: 'џ',
      dzigrarr: '⟿',
      Eacute: 'É',
      eacute: 'é',
      easter: '⩮',
      Ecaron: 'Ě',
      ecaron: 'ě',
      Ecirc: 'Ê',
      ecirc: 'ê',
      ecir: '≖',
      ecolon: '≕',
      Ecy: 'Э',
      ecy: 'э',
      eDDot: '⩷',
      Edot: 'Ė',
      edot: 'ė',
      eDot: '≑',
      ee: 'ⅇ',
      efDot: '≒',
      Efr: '𝔈',
      efr: '𝔢',
      eg: '⪚',
      Egrave: 'È',
      egrave: 'è',
      egs: '⪖',
      egsdot: '⪘',
      el: '⪙',
      Element: '∈',
      elinters: '⏧',
      ell: 'ℓ',
      els: '⪕',
      elsdot: '⪗',
      Emacr: 'Ē',
      emacr: 'ē',
      empty: '∅',
      emptyset: '∅',
      EmptySmallSquare: '◻',
      emptyv: '∅',
      EmptyVerySmallSquare: '▫',
      emsp13: ' ',
      emsp14: ' ',
      emsp: ' ',
      ENG: 'Ŋ',
      eng: 'ŋ',
      ensp: ' ',
      Eogon: 'Ę',
      eogon: 'ę',
      Eopf: '𝔼',
      eopf: '𝕖',
      epar: '⋕',
      eparsl: '⧣',
      eplus: '⩱',
      epsi: 'ε',
      Epsilon: 'Ε',
      epsilon: 'ε',
      epsiv: 'ϵ',
      eqcirc: '≖',
      eqcolon: '≕',
      eqsim: '≂',
      eqslantgtr: '⪖',
      eqslantless: '⪕',
      Equal: '⩵',
      equals: '=',
      EqualTilde: '≂',
      equest: '≟',
      Equilibrium: '⇌',
      equiv: '≡',
      equivDD: '⩸',
      eqvparsl: '⧥',
      erarr: '⥱',
      erDot: '≓',
      escr: 'ℯ',
      Escr: 'ℰ',
      esdot: '≐',
      Esim: '⩳',
      esim: '≂',
      Eta: 'Η',
      eta: 'η',
      ETH: 'Ð',
      eth: 'ð',
      Euml: 'Ë',
      euml: 'ë',
      euro: '€',
      excl: '!',
      exist: '∃',
      Exists: '∃',
      expectation: 'ℰ',
      exponentiale: 'ⅇ',
      ExponentialE: 'ⅇ',
      fallingdotseq: '≒',
      Fcy: 'Ф',
      fcy: 'ф',
      female: '♀',
      ffilig: 'ﬃ',
      fflig: 'ﬀ',
      ffllig: 'ﬄ',
      Ffr: '𝔉',
      ffr: '𝔣',
      filig: 'ﬁ',
      FilledSmallSquare: '◼',
      FilledVerySmallSquare: '▪',
      fjlig: 'fj',
      flat: '♭',
      fllig: 'ﬂ',
      fltns: '▱',
      fnof: 'ƒ',
      Fopf: '𝔽',
      fopf: '𝕗',
      forall: '∀',
      ForAll: '∀',
      fork: '⋔',
      forkv: '⫙',
      Fouriertrf: 'ℱ',
      fpartint: '⨍',
      frac12: '½',
      frac13: '⅓',
      frac14: '¼',
      frac15: '⅕',
      frac16: '⅙',
      frac18: '⅛',
      frac23: '⅔',
      frac25: '⅖',
      frac34: '¾',
      frac35: '⅗',
      frac38: '⅜',
      frac45: '⅘',
      frac56: '⅚',
      frac58: '⅝',
      frac78: '⅞',
      frasl: '⁄',
      frown: '⌢',
      fscr: '𝒻',
      Fscr: 'ℱ',
      gacute: 'ǵ',
      Gamma: 'Γ',
      gamma: 'γ',
      Gammad: 'Ϝ',
      gammad: 'ϝ',
      gap: '⪆',
      Gbreve: 'Ğ',
      gbreve: 'ğ',
      Gcedil: 'Ģ',
      Gcirc: 'Ĝ',
      gcirc: 'ĝ',
      Gcy: 'Г',
      gcy: 'г',
      Gdot: 'Ġ',
      gdot: 'ġ',
      ge: '≥',
      gE: '≧',
      gEl: '⪌',
      gel: '⋛',
      geq: '≥',
      geqq: '≧',
      geqslant: '⩾',
      gescc: '⪩',
      ges: '⩾',
      gesdot: '⪀',
      gesdoto: '⪂',
      gesdotol: '⪄',
      gesl: '⋛︀',
      gesles: '⪔',
      Gfr: '𝔊',
      gfr: '𝔤',
      gg: '≫',
      Gg: '⋙',
      ggg: '⋙',
      gimel: 'ℷ',
      GJcy: 'Ѓ',
      gjcy: 'ѓ',
      gla: '⪥',
      gl: '≷',
      glE: '⪒',
      glj: '⪤',
      gnap: '⪊',
      gnapprox: '⪊',
      gne: '⪈',
      gnE: '≩',
      gneq: '⪈',
      gneqq: '≩',
      gnsim: '⋧',
      Gopf: '𝔾',
      gopf: '𝕘',
      grave: '`',
      GreaterEqual: '≥',
      GreaterEqualLess: '⋛',
      GreaterFullEqual: '≧',
      GreaterGreater: '⪢',
      GreaterLess: '≷',
      GreaterSlantEqual: '⩾',
      GreaterTilde: '≳',
      Gscr: '𝒢',
      gscr: 'ℊ',
      gsim: '≳',
      gsime: '⪎',
      gsiml: '⪐',
      gtcc: '⪧',
      gtcir: '⩺',
      gt: '>',
      GT: '>',
      Gt: '≫',
      gtdot: '⋗',
      gtlPar: '⦕',
      gtquest: '⩼',
      gtrapprox: '⪆',
      gtrarr: '⥸',
      gtrdot: '⋗',
      gtreqless: '⋛',
      gtreqqless: '⪌',
      gtrless: '≷',
      gtrsim: '≳',
      gvertneqq: '≩︀',
      gvnE: '≩︀',
      Hacek: 'ˇ',
      hairsp: ' ',
      half: '½',
      hamilt: 'ℋ',
      HARDcy: 'Ъ',
      hardcy: 'ъ',
      harrcir: '⥈',
      harr: '↔',
      hArr: '⇔',
      harrw: '↭',
      Hat: '^',
      hbar: 'ℏ',
      Hcirc: 'Ĥ',
      hcirc: 'ĥ',
      hearts: '♥',
      heartsuit: '♥',
      hellip: '…',
      hercon: '⊹',
      hfr: '𝔥',
      Hfr: 'ℌ',
      HilbertSpace: 'ℋ',
      hksearow: '⤥',
      hkswarow: '⤦',
      hoarr: '⇿',
      homtht: '∻',
      hookleftarrow: '↩',
      hookrightarrow: '↪',
      hopf: '𝕙',
      Hopf: 'ℍ',
      horbar: '―',
      HorizontalLine: '─',
      hscr: '𝒽',
      Hscr: 'ℋ',
      hslash: 'ℏ',
      Hstrok: 'Ħ',
      hstrok: 'ħ',
      HumpDownHump: '≎',
      HumpEqual: '≏',
      hybull: '⁃',
      hyphen: '‐',
      Iacute: 'Í',
      iacute: 'í',
      ic: '⁣',
      Icirc: 'Î',
      icirc: 'î',
      Icy: 'И',
      icy: 'и',
      Idot: 'İ',
      IEcy: 'Е',
      iecy: 'е',
      iexcl: '¡',
      iff: '⇔',
      ifr: '𝔦',
      Ifr: 'ℑ',
      Igrave: 'Ì',
      igrave: 'ì',
      ii: 'ⅈ',
      iiiint: '⨌',
      iiint: '∭',
      iinfin: '⧜',
      iiota: '℩',
      IJlig: 'Ĳ',
      ijlig: 'ĳ',
      Imacr: 'Ī',
      imacr: 'ī',
      image: 'ℑ',
      ImaginaryI: 'ⅈ',
      imagline: 'ℐ',
      imagpart: 'ℑ',
      imath: 'ı',
      Im: 'ℑ',
      imof: '⊷',
      imped: 'Ƶ',
      Implies: '⇒',
      incare: '℅',
      in: '∈',
      infin: '∞',
      infintie: '⧝',
      inodot: 'ı',
      intcal: '⊺',
      int: '∫',
      Int: '∬',
      integers: 'ℤ',
      Integral: '∫',
      intercal: '⊺',
      Intersection: '⋂',
      intlarhk: '⨗',
      intprod: '⨼',
      InvisibleComma: '⁣',
      InvisibleTimes: '⁢',
      IOcy: 'Ё',
      iocy: 'ё',
      Iogon: 'Į',
      iogon: 'į',
      Iopf: '𝕀',
      iopf: '𝕚',
      Iota: 'Ι',
      iota: 'ι',
      iprod: '⨼',
      iquest: '¿',
      iscr: '𝒾',
      Iscr: 'ℐ',
      isin: '∈',
      isindot: '⋵',
      isinE: '⋹',
      isins: '⋴',
      isinsv: '⋳',
      isinv: '∈',
      it: '⁢',
      Itilde: 'Ĩ',
      itilde: 'ĩ',
      Iukcy: 'І',
      iukcy: 'і',
      Iuml: 'Ï',
      iuml: 'ï',
      Jcirc: 'Ĵ',
      jcirc: 'ĵ',
      Jcy: 'Й',
      jcy: 'й',
      Jfr: '𝔍',
      jfr: '𝔧',
      jmath: 'ȷ',
      Jopf: '𝕁',
      jopf: '𝕛',
      Jscr: '𝒥',
      jscr: '𝒿',
      Jsercy: 'Ј',
      jsercy: 'ј',
      Jukcy: 'Є',
      jukcy: 'є',
      Kappa: 'Κ',
      kappa: 'κ',
      kappav: 'ϰ',
      Kcedil: 'Ķ',
      kcedil: 'ķ',
      Kcy: 'К',
      kcy: 'к',
      Kfr: '𝔎',
      kfr: '𝔨',
      kgreen: 'ĸ',
      KHcy: 'Х',
      khcy: 'х',
      KJcy: 'Ќ',
      kjcy: 'ќ',
      Kopf: '𝕂',
      kopf: '𝕜',
      Kscr: '𝒦',
      kscr: '𝓀',
      lAarr: '⇚',
      Lacute: 'Ĺ',
      lacute: 'ĺ',
      laemptyv: '⦴',
      lagran: 'ℒ',
      Lambda: 'Λ',
      lambda: 'λ',
      lang: '⟨',
      Lang: '⟪',
      langd: '⦑',
      langle: '⟨',
      lap: '⪅',
      Laplacetrf: 'ℒ',
      laquo: '«',
      larrb: '⇤',
      larrbfs: '⤟',
      larr: '←',
      Larr: '↞',
      lArr: '⇐',
      larrfs: '⤝',
      larrhk: '↩',
      larrlp: '↫',
      larrpl: '⤹',
      larrsim: '⥳',
      larrtl: '↢',
      latail: '⤙',
      lAtail: '⤛',
      lat: '⪫',
      late: '⪭',
      lates: '⪭︀',
      lbarr: '⤌',
      lBarr: '⤎',
      lbbrk: '❲',
      lbrace: '{',
      lbrack: '[',
      lbrke: '⦋',
      lbrksld: '⦏',
      lbrkslu: '⦍',
      Lcaron: 'Ľ',
      lcaron: 'ľ',
      Lcedil: 'Ļ',
      lcedil: 'ļ',
      lceil: '⌈',
      lcub: '{',
      Lcy: 'Л',
      lcy: 'л',
      ldca: '⤶',
      ldquo: '“',
      ldquor: '„',
      ldrdhar: '⥧',
      ldrushar: '⥋',
      ldsh: '↲',
      le: '≤',
      lE: '≦',
      LeftAngleBracket: '⟨',
      LeftArrowBar: '⇤',
      leftarrow: '←',
      LeftArrow: '←',
      Leftarrow: '⇐',
      LeftArrowRightArrow: '⇆',
      leftarrowtail: '↢',
      LeftCeiling: '⌈',
      LeftDoubleBracket: '⟦',
      LeftDownTeeVector: '⥡',
      LeftDownVectorBar: '⥙',
      LeftDownVector: '⇃',
      LeftFloor: '⌊',
      leftharpoondown: '↽',
      leftharpoonup: '↼',
      leftleftarrows: '⇇',
      leftrightarrow: '↔',
      LeftRightArrow: '↔',
      Leftrightarrow: '⇔',
      leftrightarrows: '⇆',
      leftrightharpoons: '⇋',
      leftrightsquigarrow: '↭',
      LeftRightVector: '⥎',
      LeftTeeArrow: '↤',
      LeftTee: '⊣',
      LeftTeeVector: '⥚',
      leftthreetimes: '⋋',
      LeftTriangleBar: '⧏',
      LeftTriangle: '⊲',
      LeftTriangleEqual: '⊴',
      LeftUpDownVector: '⥑',
      LeftUpTeeVector: '⥠',
      LeftUpVectorBar: '⥘',
      LeftUpVector: '↿',
      LeftVectorBar: '⥒',
      LeftVector: '↼',
      lEg: '⪋',
      leg: '⋚',
      leq: '≤',
      leqq: '≦',
      leqslant: '⩽',
      lescc: '⪨',
      les: '⩽',
      lesdot: '⩿',
      lesdoto: '⪁',
      lesdotor: '⪃',
      lesg: '⋚︀',
      lesges: '⪓',
      lessapprox: '⪅',
      lessdot: '⋖',
      lesseqgtr: '⋚',
      lesseqqgtr: '⪋',
      LessEqualGreater: '⋚',
      LessFullEqual: '≦',
      LessGreater: '≶',
      lessgtr: '≶',
      LessLess: '⪡',
      lesssim: '≲',
      LessSlantEqual: '⩽',
      LessTilde: '≲',
      lfisht: '⥼',
      lfloor: '⌊',
      Lfr: '𝔏',
      lfr: '𝔩',
      lg: '≶',
      lgE: '⪑',
      lHar: '⥢',
      lhard: '↽',
      lharu: '↼',
      lharul: '⥪',
      lhblk: '▄',
      LJcy: 'Љ',
      ljcy: 'љ',
      llarr: '⇇',
      ll: '≪',
      Ll: '⋘',
      llcorner: '⌞',
      Lleftarrow: '⇚',
      llhard: '⥫',
      lltri: '◺',
      Lmidot: 'Ŀ',
      lmidot: 'ŀ',
      lmoustache: '⎰',
      lmoust: '⎰',
      lnap: '⪉',
      lnapprox: '⪉',
      lne: '⪇',
      lnE: '≨',
      lneq: '⪇',
      lneqq: '≨',
      lnsim: '⋦',
      loang: '⟬',
      loarr: '⇽',
      lobrk: '⟦',
      longleftarrow: '⟵',
      LongLeftArrow: '⟵',
      Longleftarrow: '⟸',
      longleftrightarrow: '⟷',
      LongLeftRightArrow: '⟷',
      Longleftrightarrow: '⟺',
      longmapsto: '⟼',
      longrightarrow: '⟶',
      LongRightArrow: '⟶',
      Longrightarrow: '⟹',
      looparrowleft: '↫',
      looparrowright: '↬',
      lopar: '⦅',
      Lopf: '𝕃',
      lopf: '𝕝',
      loplus: '⨭',
      lotimes: '⨴',
      lowast: '∗',
      lowbar: '_',
      LowerLeftArrow: '↙',
      LowerRightArrow: '↘',
      loz: '◊',
      lozenge: '◊',
      lozf: '⧫',
      lpar: '(',
      lparlt: '⦓',
      lrarr: '⇆',
      lrcorner: '⌟',
      lrhar: '⇋',
      lrhard: '⥭',
      lrm: '‎',
      lrtri: '⊿',
      lsaquo: '‹',
      lscr: '𝓁',
      Lscr: 'ℒ',
      lsh: '↰',
      Lsh: '↰',
      lsim: '≲',
      lsime: '⪍',
      lsimg: '⪏',
      lsqb: '[',
      lsquo: '‘',
      lsquor: '‚',
      Lstrok: 'Ł',
      lstrok: 'ł',
      ltcc: '⪦',
      ltcir: '⩹',
      lt: '<',
      LT: '<',
      Lt: '≪',
      ltdot: '⋖',
      lthree: '⋋',
      ltimes: '⋉',
      ltlarr: '⥶',
      ltquest: '⩻',
      ltri: '◃',
      ltrie: '⊴',
      ltrif: '◂',
      ltrPar: '⦖',
      lurdshar: '⥊',
      luruhar: '⥦',
      lvertneqq: '≨︀',
      lvnE: '≨︀',
      macr: '¯',
      male: '♂',
      malt: '✠',
      maltese: '✠',
      Map: '⤅',
      map: '↦',
      mapsto: '↦',
      mapstodown: '↧',
      mapstoleft: '↤',
      mapstoup: '↥',
      marker: '▮',
      mcomma: '⨩',
      Mcy: 'М',
      mcy: 'м',
      mdash: '—',
      mDDot: '∺',
      measuredangle: '∡',
      MediumSpace: ' ',
      Mellintrf: 'ℳ',
      Mfr: '𝔐',
      mfr: '𝔪',
      mho: '℧',
      micro: 'µ',
      midast: '*',
      midcir: '⫰',
      mid: '∣',
      middot: '·',
      minusb: '⊟',
      minus: '−',
      minusd: '∸',
      minusdu: '⨪',
      MinusPlus: '∓',
      mlcp: '⫛',
      mldr: '…',
      mnplus: '∓',
      models: '⊧',
      Mopf: '𝕄',
      mopf: '𝕞',
      mp: '∓',
      mscr: '𝓂',
      Mscr: 'ℳ',
      mstpos: '∾',
      Mu: 'Μ',
      mu: 'μ',
      multimap: '⊸',
      mumap: '⊸',
      nabla: '∇',
      Nacute: 'Ń',
      nacute: 'ń',
      nang: '∠⃒',
      nap: '≉',
      napE: '⩰̸',
      napid: '≋̸',
      napos: 'ŉ',
      napprox: '≉',
      natural: '♮',
      naturals: 'ℕ',
      natur: '♮',
      nbsp: ' ',
      nbump: '≎̸',
      nbumpe: '≏̸',
      ncap: '⩃',
      Ncaron: 'Ň',
      ncaron: 'ň',
      Ncedil: 'Ņ',
      ncedil: 'ņ',
      ncong: '≇',
      ncongdot: '⩭̸',
      ncup: '⩂',
      Ncy: 'Н',
      ncy: 'н',
      ndash: '–',
      nearhk: '⤤',
      nearr: '↗',
      neArr: '⇗',
      nearrow: '↗',
      ne: '≠',
      nedot: '≐̸',
      NegativeMediumSpace: '​',
      NegativeThickSpace: '​',
      NegativeThinSpace: '​',
      NegativeVeryThinSpace: '​',
      nequiv: '≢',
      nesear: '⤨',
      nesim: '≂̸',
      NestedGreaterGreater: '≫',
      NestedLessLess: '≪',
      NewLine: '\n',
      nexist: '∄',
      nexists: '∄',
      Nfr: '𝔑',
      nfr: '𝔫',
      ngE: '≧̸',
      nge: '≱',
      ngeq: '≱',
      ngeqq: '≧̸',
      ngeqslant: '⩾̸',
      nges: '⩾̸',
      nGg: '⋙̸',
      ngsim: '≵',
      nGt: '≫⃒',
      ngt: '≯',
      ngtr: '≯',
      nGtv: '≫̸',
      nharr: '↮',
      nhArr: '⇎',
      nhpar: '⫲',
      ni: '∋',
      nis: '⋼',
      nisd: '⋺',
      niv: '∋',
      NJcy: 'Њ',
      njcy: 'њ',
      nlarr: '↚',
      nlArr: '⇍',
      nldr: '‥',
      nlE: '≦̸',
      nle: '≰',
      nleftarrow: '↚',
      nLeftarrow: '⇍',
      nleftrightarrow: '↮',
      nLeftrightarrow: '⇎',
      nleq: '≰',
      nleqq: '≦̸',
      nleqslant: '⩽̸',
      nles: '⩽̸',
      nless: '≮',
      nLl: '⋘̸',
      nlsim: '≴',
      nLt: '≪⃒',
      nlt: '≮',
      nltri: '⋪',
      nltrie: '⋬',
      nLtv: '≪̸',
      nmid: '∤',
      NoBreak: '⁠',
      NonBreakingSpace: ' ',
      nopf: '𝕟',
      Nopf: 'ℕ',
      Not: '⫬',
      not: '¬',
      NotCongruent: '≢',
      NotCupCap: '≭',
      NotDoubleVerticalBar: '∦',
      NotElement: '∉',
      NotEqual: '≠',
      NotEqualTilde: '≂̸',
      NotExists: '∄',
      NotGreater: '≯',
      NotGreaterEqual: '≱',
      NotGreaterFullEqual: '≧̸',
      NotGreaterGreater: '≫̸',
      NotGreaterLess: '≹',
      NotGreaterSlantEqual: '⩾̸',
      NotGreaterTilde: '≵',
      NotHumpDownHump: '≎̸',
      NotHumpEqual: '≏̸',
      notin: '∉',
      notindot: '⋵̸',
      notinE: '⋹̸',
      notinva: '∉',
      notinvb: '⋷',
      notinvc: '⋶',
      NotLeftTriangleBar: '⧏̸',
      NotLeftTriangle: '⋪',
      NotLeftTriangleEqual: '⋬',
      NotLess: '≮',
      NotLessEqual: '≰',
      NotLessGreater: '≸',
      NotLessLess: '≪̸',
      NotLessSlantEqual: '⩽̸',
      NotLessTilde: '≴',
      NotNestedGreaterGreater: '⪢̸',
      NotNestedLessLess: '⪡̸',
      notni: '∌',
      notniva: '∌',
      notnivb: '⋾',
      notnivc: '⋽',
      NotPrecedes: '⊀',
      NotPrecedesEqual: '⪯̸',
      NotPrecedesSlantEqual: '⋠',
      NotReverseElement: '∌',
      NotRightTriangleBar: '⧐̸',
      NotRightTriangle: '⋫',
      NotRightTriangleEqual: '⋭',
      NotSquareSubset: '⊏̸',
      NotSquareSubsetEqual: '⋢',
      NotSquareSuperset: '⊐̸',
      NotSquareSupersetEqual: '⋣',
      NotSubset: '⊂⃒',
      NotSubsetEqual: '⊈',
      NotSucceeds: '⊁',
      NotSucceedsEqual: '⪰̸',
      NotSucceedsSlantEqual: '⋡',
      NotSucceedsTilde: '≿̸',
      NotSuperset: '⊃⃒',
      NotSupersetEqual: '⊉',
      NotTilde: '≁',
      NotTildeEqual: '≄',
      NotTildeFullEqual: '≇',
      NotTildeTilde: '≉',
      NotVerticalBar: '∤',
      nparallel: '∦',
      npar: '∦',
      nparsl: '⫽⃥',
      npart: '∂̸',
      npolint: '⨔',
      npr: '⊀',
      nprcue: '⋠',
      nprec: '⊀',
      npreceq: '⪯̸',
      npre: '⪯̸',
      nrarrc: '⤳̸',
      nrarr: '↛',
      nrArr: '⇏',
      nrarrw: '↝̸',
      nrightarrow: '↛',
      nRightarrow: '⇏',
      nrtri: '⋫',
      nrtrie: '⋭',
      nsc: '⊁',
      nsccue: '⋡',
      nsce: '⪰̸',
      Nscr: '𝒩',
      nscr: '𝓃',
      nshortmid: '∤',
      nshortparallel: '∦',
      nsim: '≁',
      nsime: '≄',
      nsimeq: '≄',
      nsmid: '∤',
      nspar: '∦',
      nsqsube: '⋢',
      nsqsupe: '⋣',
      nsub: '⊄',
      nsubE: '⫅̸',
      nsube: '⊈',
      nsubset: '⊂⃒',
      nsubseteq: '⊈',
      nsubseteqq: '⫅̸',
      nsucc: '⊁',
      nsucceq: '⪰̸',
      nsup: '⊅',
      nsupE: '⫆̸',
      nsupe: '⊉',
      nsupset: '⊃⃒',
      nsupseteq: '⊉',
      nsupseteqq: '⫆̸',
      ntgl: '≹',
      Ntilde: 'Ñ',
      ntilde: 'ñ',
      ntlg: '≸',
      ntriangleleft: '⋪',
      ntrianglelefteq: '⋬',
      ntriangleright: '⋫',
      ntrianglerighteq: '⋭',
      Nu: 'Ν',
      nu: 'ν',
      num: '#',
      numero: '№',
      numsp: ' ',
      nvap: '≍⃒',
      nvdash: '⊬',
      nvDash: '⊭',
      nVdash: '⊮',
      nVDash: '⊯',
      nvge: '≥⃒',
      nvgt: '>⃒',
      nvHarr: '⤄',
      nvinfin: '⧞',
      nvlArr: '⤂',
      nvle: '≤⃒',
      nvlt: '<⃒',
      nvltrie: '⊴⃒',
      nvrArr: '⤃',
      nvrtrie: '⊵⃒',
      nvsim: '∼⃒',
      nwarhk: '⤣',
      nwarr: '↖',
      nwArr: '⇖',
      nwarrow: '↖',
      nwnear: '⤧',
      Oacute: 'Ó',
      oacute: 'ó',
      oast: '⊛',
      Ocirc: 'Ô',
      ocirc: 'ô',
      ocir: '⊚',
      Ocy: 'О',
      ocy: 'о',
      odash: '⊝',
      Odblac: 'Ő',
      odblac: 'ő',
      odiv: '⨸',
      odot: '⊙',
      odsold: '⦼',
      OElig: 'Œ',
      oelig: 'œ',
      ofcir: '⦿',
      Ofr: '𝔒',
      ofr: '𝔬',
      ogon: '˛',
      Ograve: 'Ò',
      ograve: 'ò',
      ogt: '⧁',
      ohbar: '⦵',
      ohm: 'Ω',
      oint: '∮',
      olarr: '↺',
      olcir: '⦾',
      olcross: '⦻',
      oline: '‾',
      olt: '⧀',
      Omacr: 'Ō',
      omacr: 'ō',
      Omega: 'Ω',
      omega: 'ω',
      Omicron: 'Ο',
      omicron: 'ο',
      omid: '⦶',
      ominus: '⊖',
      Oopf: '𝕆',
      oopf: '𝕠',
      opar: '⦷',
      OpenCurlyDoubleQuote: '“',
      OpenCurlyQuote: '‘',
      operp: '⦹',
      oplus: '⊕',
      orarr: '↻',
      Or: '⩔',
      or: '∨',
      ord: '⩝',
      order: 'ℴ',
      orderof: 'ℴ',
      ordf: 'ª',
      ordm: 'º',
      origof: '⊶',
      oror: '⩖',
      orslope: '⩗',
      orv: '⩛',
      oS: 'Ⓢ',
      Oscr: '𝒪',
      oscr: 'ℴ',
      Oslash: 'Ø',
      oslash: 'ø',
      osol: '⊘',
      Otilde: 'Õ',
      otilde: 'õ',
      otimesas: '⨶',
      Otimes: '⨷',
      otimes: '⊗',
      Ouml: 'Ö',
      ouml: 'ö',
      ovbar: '⌽',
      OverBar: '‾',
      OverBrace: '⏞',
      OverBracket: '⎴',
      OverParenthesis: '⏜',
      para: '¶',
      parallel: '∥',
      par: '∥',
      parsim: '⫳',
      parsl: '⫽',
      part: '∂',
      PartialD: '∂',
      Pcy: 'П',
      pcy: 'п',
      percnt: '%',
      period: '.',
      permil: '‰',
      perp: '⊥',
      pertenk: '‱',
      Pfr: '𝔓',
      pfr: '𝔭',
      Phi: 'Φ',
      phi: 'φ',
      phiv: 'ϕ',
      phmmat: 'ℳ',
      phone: '☎',
      Pi: 'Π',
      pi: 'π',
      pitchfork: '⋔',
      piv: 'ϖ',
      planck: 'ℏ',
      planckh: 'ℎ',
      plankv: 'ℏ',
      plusacir: '⨣',
      plusb: '⊞',
      pluscir: '⨢',
      plus: '+',
      plusdo: '∔',
      plusdu: '⨥',
      pluse: '⩲',
      PlusMinus: '±',
      plusmn: '±',
      plussim: '⨦',
      plustwo: '⨧',
      pm: '±',
      Poincareplane: 'ℌ',
      pointint: '⨕',
      popf: '𝕡',
      Popf: 'ℙ',
      pound: '£',
      prap: '⪷',
      Pr: '⪻',
      pr: '≺',
      prcue: '≼',
      precapprox: '⪷',
      prec: '≺',
      preccurlyeq: '≼',
      Precedes: '≺',
      PrecedesEqual: '⪯',
      PrecedesSlantEqual: '≼',
      PrecedesTilde: '≾',
      preceq: '⪯',
      precnapprox: '⪹',
      precneqq: '⪵',
      precnsim: '⋨',
      pre: '⪯',
      prE: '⪳',
      precsim: '≾',
      prime: '′',
      Prime: '″',
      primes: 'ℙ',
      prnap: '⪹',
      prnE: '⪵',
      prnsim: '⋨',
      prod: '∏',
      Product: '∏',
      profalar: '⌮',
      profline: '⌒',
      profsurf: '⌓',
      prop: '∝',
      Proportional: '∝',
      Proportion: '∷',
      propto: '∝',
      prsim: '≾',
      prurel: '⊰',
      Pscr: '𝒫',
      pscr: '𝓅',
      Psi: 'Ψ',
      psi: 'ψ',
      puncsp: ' ',
      Qfr: '𝔔',
      qfr: '𝔮',
      qint: '⨌',
      qopf: '𝕢',
      Qopf: 'ℚ',
      qprime: '⁗',
      Qscr: '𝒬',
      qscr: '𝓆',
      quaternions: 'ℍ',
      quatint: '⨖',
      quest: '?',
      questeq: '≟',
      quot: '"',
      QUOT: '"',
      rAarr: '⇛',
      race: '∽̱',
      Racute: 'Ŕ',
      racute: 'ŕ',
      radic: '√',
      raemptyv: '⦳',
      rang: '⟩',
      Rang: '⟫',
      rangd: '⦒',
      range: '⦥',
      rangle: '⟩',
      raquo: '»',
      rarrap: '⥵',
      rarrb: '⇥',
      rarrbfs: '⤠',
      rarrc: '⤳',
      rarr: '→',
      Rarr: '↠',
      rArr: '⇒',
      rarrfs: '⤞',
      rarrhk: '↪',
      rarrlp: '↬',
      rarrpl: '⥅',
      rarrsim: '⥴',
      Rarrtl: '⤖',
      rarrtl: '↣',
      rarrw: '↝',
      ratail: '⤚',
      rAtail: '⤜',
      ratio: '∶',
      rationals: 'ℚ',
      rbarr: '⤍',
      rBarr: '⤏',
      RBarr: '⤐',
      rbbrk: '❳',
      rbrace: '}',
      rbrack: ']',
      rbrke: '⦌',
      rbrksld: '⦎',
      rbrkslu: '⦐',
      Rcaron: 'Ř',
      rcaron: 'ř',
      Rcedil: 'Ŗ',
      rcedil: 'ŗ',
      rceil: '⌉',
      rcub: '}',
      Rcy: 'Р',
      rcy: 'р',
      rdca: '⤷',
      rdldhar: '⥩',
      rdquo: '”',
      rdquor: '”',
      rdsh: '↳',
      real: 'ℜ',
      realine: 'ℛ',
      realpart: 'ℜ',
      reals: 'ℝ',
      Re: 'ℜ',
      rect: '▭',
      reg: '®',
      REG: '®',
      ReverseElement: '∋',
      ReverseEquilibrium: '⇋',
      ReverseUpEquilibrium: '⥯',
      rfisht: '⥽',
      rfloor: '⌋',
      rfr: '𝔯',
      Rfr: 'ℜ',
      rHar: '⥤',
      rhard: '⇁',
      rharu: '⇀',
      rharul: '⥬',
      Rho: 'Ρ',
      rho: 'ρ',
      rhov: 'ϱ',
      RightAngleBracket: '⟩',
      RightArrowBar: '⇥',
      rightarrow: '→',
      RightArrow: '→',
      Rightarrow: '⇒',
      RightArrowLeftArrow: '⇄',
      rightarrowtail: '↣',
      RightCeiling: '⌉',
      RightDoubleBracket: '⟧',
      RightDownTeeVector: '⥝',
      RightDownVectorBar: '⥕',
      RightDownVector: '⇂',
      RightFloor: '⌋',
      rightharpoondown: '⇁',
      rightharpoonup: '⇀',
      rightleftarrows: '⇄',
      rightleftharpoons: '⇌',
      rightrightarrows: '⇉',
      rightsquigarrow: '↝',
      RightTeeArrow: '↦',
      RightTee: '⊢',
      RightTeeVector: '⥛',
      rightthreetimes: '⋌',
      RightTriangleBar: '⧐',
      RightTriangle: '⊳',
      RightTriangleEqual: '⊵',
      RightUpDownVector: '⥏',
      RightUpTeeVector: '⥜',
      RightUpVectorBar: '⥔',
      RightUpVector: '↾',
      RightVectorBar: '⥓',
      RightVector: '⇀',
      ring: '˚',
      risingdotseq: '≓',
      rlarr: '⇄',
      rlhar: '⇌',
      rlm: '‏',
      rmoustache: '⎱',
      rmoust: '⎱',
      rnmid: '⫮',
      roang: '⟭',
      roarr: '⇾',
      robrk: '⟧',
      ropar: '⦆',
      ropf: '𝕣',
      Ropf: 'ℝ',
      roplus: '⨮',
      rotimes: '⨵',
      RoundImplies: '⥰',
      rpar: ')',
      rpargt: '⦔',
      rppolint: '⨒',
      rrarr: '⇉',
      Rrightarrow: '⇛',
      rsaquo: '›',
      rscr: '𝓇',
      Rscr: 'ℛ',
      rsh: '↱',
      Rsh: '↱',
      rsqb: ']',
      rsquo: '’',
      rsquor: '’',
      rthree: '⋌',
      rtimes: '⋊',
      rtri: '▹',
      rtrie: '⊵',
      rtrif: '▸',
      rtriltri: '⧎',
      RuleDelayed: '⧴',
      ruluhar: '⥨',
      rx: '℞',
      Sacute: 'Ś',
      sacute: 'ś',
      sbquo: '‚',
      scap: '⪸',
      Scaron: 'Š',
      scaron: 'š',
      Sc: '⪼',
      sc: '≻',
      sccue: '≽',
      sce: '⪰',
      scE: '⪴',
      Scedil: 'Ş',
      scedil: 'ş',
      Scirc: 'Ŝ',
      scirc: 'ŝ',
      scnap: '⪺',
      scnE: '⪶',
      scnsim: '⋩',
      scpolint: '⨓',
      scsim: '≿',
      Scy: 'С',
      scy: 'с',
      sdotb: '⊡',
      sdot: '⋅',
      sdote: '⩦',
      searhk: '⤥',
      searr: '↘',
      seArr: '⇘',
      searrow: '↘',
      sect: '§',
      semi: ';',
      seswar: '⤩',
      setminus: '∖',
      setmn: '∖',
      sext: '✶',
      Sfr: '𝔖',
      sfr: '𝔰',
      sfrown: '⌢',
      sharp: '♯',
      SHCHcy: 'Щ',
      shchcy: 'щ',
      SHcy: 'Ш',
      shcy: 'ш',
      ShortDownArrow: '↓',
      ShortLeftArrow: '←',
      shortmid: '∣',
      shortparallel: '∥',
      ShortRightArrow: '→',
      ShortUpArrow: '↑',
      shy: '­',
      Sigma: 'Σ',
      sigma: 'σ',
      sigmaf: 'ς',
      sigmav: 'ς',
      sim: '∼',
      simdot: '⩪',
      sime: '≃',
      simeq: '≃',
      simg: '⪞',
      simgE: '⪠',
      siml: '⪝',
      simlE: '⪟',
      simne: '≆',
      simplus: '⨤',
      simrarr: '⥲',
      slarr: '←',
      SmallCircle: '∘',
      smallsetminus: '∖',
      smashp: '⨳',
      smeparsl: '⧤',
      smid: '∣',
      smile: '⌣',
      smt: '⪪',
      smte: '⪬',
      smtes: '⪬︀',
      SOFTcy: 'Ь',
      softcy: 'ь',
      solbar: '⌿',
      solb: '⧄',
      sol: '/',
      Sopf: '𝕊',
      sopf: '𝕤',
      spades: '♠',
      spadesuit: '♠',
      spar: '∥',
      sqcap: '⊓',
      sqcaps: '⊓︀',
      sqcup: '⊔',
      sqcups: '⊔︀',
      Sqrt: '√',
      sqsub: '⊏',
      sqsube: '⊑',
      sqsubset: '⊏',
      sqsubseteq: '⊑',
      sqsup: '⊐',
      sqsupe: '⊒',
      sqsupset: '⊐',
      sqsupseteq: '⊒',
      square: '□',
      Square: '□',
      SquareIntersection: '⊓',
      SquareSubset: '⊏',
      SquareSubsetEqual: '⊑',
      SquareSuperset: '⊐',
      SquareSupersetEqual: '⊒',
      SquareUnion: '⊔',
      squarf: '▪',
      squ: '□',
      squf: '▪',
      srarr: '→',
      Sscr: '𝒮',
      sscr: '𝓈',
      ssetmn: '∖',
      ssmile: '⌣',
      sstarf: '⋆',
      Star: '⋆',
      star: '☆',
      starf: '★',
      straightepsilon: 'ϵ',
      straightphi: 'ϕ',
      strns: '¯',
      sub: '⊂',
      Sub: '⋐',
      subdot: '⪽',
      subE: '⫅',
      sube: '⊆',
      subedot: '⫃',
      submult: '⫁',
      subnE: '⫋',
      subne: '⊊',
      subplus: '⪿',
      subrarr: '⥹',
      subset: '⊂',
      Subset: '⋐',
      subseteq: '⊆',
      subseteqq: '⫅',
      SubsetEqual: '⊆',
      subsetneq: '⊊',
      subsetneqq: '⫋',
      subsim: '⫇',
      subsub: '⫕',
      subsup: '⫓',
      succapprox: '⪸',
      succ: '≻',
      succcurlyeq: '≽',
      Succeeds: '≻',
      SucceedsEqual: '⪰',
      SucceedsSlantEqual: '≽',
      SucceedsTilde: '≿',
      succeq: '⪰',
      succnapprox: '⪺',
      succneqq: '⪶',
      succnsim: '⋩',
      succsim: '≿',
      SuchThat: '∋',
      sum: '∑',
      Sum: '∑',
      sung: '♪',
      sup1: '¹',
      sup2: '²',
      sup3: '³',
      sup: '⊃',
      Sup: '⋑',
      supdot: '⪾',
      supdsub: '⫘',
      supE: '⫆',
      supe: '⊇',
      supedot: '⫄',
      Superset: '⊃',
      SupersetEqual: '⊇',
      suphsol: '⟉',
      suphsub: '⫗',
      suplarr: '⥻',
      supmult: '⫂',
      supnE: '⫌',
      supne: '⊋',
      supplus: '⫀',
      supset: '⊃',
      Supset: '⋑',
      supseteq: '⊇',
      supseteqq: '⫆',
      supsetneq: '⊋',
      supsetneqq: '⫌',
      supsim: '⫈',
      supsub: '⫔',
      supsup: '⫖',
      swarhk: '⤦',
      swarr: '↙',
      swArr: '⇙',
      swarrow: '↙',
      swnwar: '⤪',
      szlig: 'ß',
      Tab: '\t',
      target: '⌖',
      Tau: 'Τ',
      tau: 'τ',
      tbrk: '⎴',
      Tcaron: 'Ť',
      tcaron: 'ť',
      Tcedil: 'Ţ',
      tcedil: 'ţ',
      Tcy: 'Т',
      tcy: 'т',
      tdot: '⃛',
      telrec: '⌕',
      Tfr: '𝔗',
      tfr: '𝔱',
      there4: '∴',
      therefore: '∴',
      Therefore: '∴',
      Theta: 'Θ',
      theta: 'θ',
      thetasym: 'ϑ',
      thetav: 'ϑ',
      thickapprox: '≈',
      thicksim: '∼',
      ThickSpace: '  ',
      ThinSpace: ' ',
      thinsp: ' ',
      thkap: '≈',
      thksim: '∼',
      THORN: 'Þ',
      thorn: 'þ',
      tilde: '˜',
      Tilde: '∼',
      TildeEqual: '≃',
      TildeFullEqual: '≅',
      TildeTilde: '≈',
      timesbar: '⨱',
      timesb: '⊠',
      times: '×',
      timesd: '⨰',
      tint: '∭',
      toea: '⤨',
      topbot: '⌶',
      topcir: '⫱',
      top: '⊤',
      Topf: '𝕋',
      topf: '𝕥',
      topfork: '⫚',
      tosa: '⤩',
      tprime: '‴',
      trade: '™',
      TRADE: '™',
      triangle: '▵',
      triangledown: '▿',
      triangleleft: '◃',
      trianglelefteq: '⊴',
      triangleq: '≜',
      triangleright: '▹',
      trianglerighteq: '⊵',
      tridot: '◬',
      trie: '≜',
      triminus: '⨺',
      TripleDot: '⃛',
      triplus: '⨹',
      trisb: '⧍',
      tritime: '⨻',
      trpezium: '⏢',
      Tscr: '𝒯',
      tscr: '𝓉',
      TScy: 'Ц',
      tscy: 'ц',
      TSHcy: 'Ћ',
      tshcy: 'ћ',
      Tstrok: 'Ŧ',
      tstrok: 'ŧ',
      twixt: '≬',
      twoheadleftarrow: '↞',
      twoheadrightarrow: '↠',
      Uacute: 'Ú',
      uacute: 'ú',
      uarr: '↑',
      Uarr: '↟',
      uArr: '⇑',
      Uarrocir: '⥉',
      Ubrcy: 'Ў',
      ubrcy: 'ў',
      Ubreve: 'Ŭ',
      ubreve: 'ŭ',
      Ucirc: 'Û',
      ucirc: 'û',
      Ucy: 'У',
      ucy: 'у',
      udarr: '⇅',
      Udblac: 'Ű',
      udblac: 'ű',
      udhar: '⥮',
      ufisht: '⥾',
      Ufr: '𝔘',
      ufr: '𝔲',
      Ugrave: 'Ù',
      ugrave: 'ù',
      uHar: '⥣',
      uharl: '↿',
      uharr: '↾',
      uhblk: '▀',
      ulcorn: '⌜',
      ulcorner: '⌜',
      ulcrop: '⌏',
      ultri: '◸',
      Umacr: 'Ū',
      umacr: 'ū',
      uml: '¨',
      UnderBar: '_',
      UnderBrace: '⏟',
      UnderBracket: '⎵',
      UnderParenthesis: '⏝',
      Union: '⋃',
      UnionPlus: '⊎',
      Uogon: 'Ų',
      uogon: 'ų',
      Uopf: '𝕌',
      uopf: '𝕦',
      UpArrowBar: '⤒',
      uparrow: '↑',
      UpArrow: '↑',
      Uparrow: '⇑',
      UpArrowDownArrow: '⇅',
      updownarrow: '↕',
      UpDownArrow: '↕',
      Updownarrow: '⇕',
      UpEquilibrium: '⥮',
      upharpoonleft: '↿',
      upharpoonright: '↾',
      uplus: '⊎',
      UpperLeftArrow: '↖',
      UpperRightArrow: '↗',
      upsi: 'υ',
      Upsi: 'ϒ',
      upsih: 'ϒ',
      Upsilon: 'Υ',
      upsilon: 'υ',
      UpTeeArrow: '↥',
      UpTee: '⊥',
      upuparrows: '⇈',
      urcorn: '⌝',
      urcorner: '⌝',
      urcrop: '⌎',
      Uring: 'Ů',
      uring: 'ů',
      urtri: '◹',
      Uscr: '𝒰',
      uscr: '𝓊',
      utdot: '⋰',
      Utilde: 'Ũ',
      utilde: 'ũ',
      utri: '▵',
      utrif: '▴',
      uuarr: '⇈',
      Uuml: 'Ü',
      uuml: 'ü',
      uwangle: '⦧',
      vangrt: '⦜',
      varepsilon: 'ϵ',
      varkappa: 'ϰ',
      varnothing: '∅',
      varphi: 'ϕ',
      varpi: 'ϖ',
      varpropto: '∝',
      varr: '↕',
      vArr: '⇕',
      varrho: 'ϱ',
      varsigma: 'ς',
      varsubsetneq: '⊊︀',
      varsubsetneqq: '⫋︀',
      varsupsetneq: '⊋︀',
      varsupsetneqq: '⫌︀',
      vartheta: 'ϑ',
      vartriangleleft: '⊲',
      vartriangleright: '⊳',
      vBar: '⫨',
      Vbar: '⫫',
      vBarv: '⫩',
      Vcy: 'В',
      vcy: 'в',
      vdash: '⊢',
      vDash: '⊨',
      Vdash: '⊩',
      VDash: '⊫',
      Vdashl: '⫦',
      veebar: '⊻',
      vee: '∨',
      Vee: '⋁',
      veeeq: '≚',
      vellip: '⋮',
      verbar: '|',
      Verbar: '‖',
      vert: '|',
      Vert: '‖',
      VerticalBar: '∣',
      VerticalLine: '|',
      VerticalSeparator: '❘',
      VerticalTilde: '≀',
      VeryThinSpace: ' ',
      Vfr: '𝔙',
      vfr: '𝔳',
      vltri: '⊲',
      vnsub: '⊂⃒',
      vnsup: '⊃⃒',
      Vopf: '𝕍',
      vopf: '𝕧',
      vprop: '∝',
      vrtri: '⊳',
      Vscr: '𝒱',
      vscr: '𝓋',
      vsubnE: '⫋︀',
      vsubne: '⊊︀',
      vsupnE: '⫌︀',
      vsupne: '⊋︀',
      Vvdash: '⊪',
      vzigzag: '⦚',
      Wcirc: 'Ŵ',
      wcirc: 'ŵ',
      wedbar: '⩟',
      wedge: '∧',
      Wedge: '⋀',
      wedgeq: '≙',
      weierp: '℘',
      Wfr: '𝔚',
      wfr: '𝔴',
      Wopf: '𝕎',
      wopf: '𝕨',
      wp: '℘',
      wr: '≀',
      wreath: '≀',
      Wscr: '𝒲',
      wscr: '𝓌',
      xcap: '⋂',
      xcirc: '◯',
      xcup: '⋃',
      xdtri: '▽',
      Xfr: '𝔛',
      xfr: '𝔵',
      xharr: '⟷',
      xhArr: '⟺',
      Xi: 'Ξ',
      xi: 'ξ',
      xlarr: '⟵',
      xlArr: '⟸',
      xmap: '⟼',
      xnis: '⋻',
      xodot: '⨀',
      Xopf: '𝕏',
      xopf: '𝕩',
      xoplus: '⨁',
      xotime: '⨂',
      xrarr: '⟶',
      xrArr: '⟹',
      Xscr: '𝒳',
      xscr: '𝓍',
      xsqcup: '⨆',
      xuplus: '⨄',
      xutri: '△',
      xvee: '⋁',
      xwedge: '⋀',
      Yacute: 'Ý',
      yacute: 'ý',
      YAcy: 'Я',
      yacy: 'я',
      Ycirc: 'Ŷ',
      ycirc: 'ŷ',
      Ycy: 'Ы',
      ycy: 'ы',
      yen: '¥',
      Yfr: '𝔜',
      yfr: '𝔶',
      YIcy: 'Ї',
      yicy: 'ї',
      Yopf: '𝕐',
      yopf: '𝕪',
      Yscr: '𝒴',
      yscr: '𝓎',
      YUcy: 'Ю',
      yucy: 'ю',
      yuml: 'ÿ',
      Yuml: 'Ÿ',
      Zacute: 'Ź',
      zacute: 'ź',
      Zcaron: 'Ž',
      zcaron: 'ž',
      Zcy: 'З',
      zcy: 'з',
      Zdot: 'Ż',
      zdot: 'ż',
      zeetrf: 'ℨ',
      ZeroWidthSpace: '​',
      Zeta: 'Ζ',
      zeta: 'ζ',
      zfr: '𝔷',
      Zfr: 'ℨ',
      ZHcy: 'Ж',
      zhcy: 'ж',
      zigrarr: '⇝',
      zopf: '𝕫',
      Zopf: 'ℤ',
      Zscr: '𝒵',
      zscr: '𝓏',
      zwj: '‍',
      zwnj: '‌'
    }
  },
  function(module, exports) {
    module.exports = {
      Aacute: 'Á',
      aacute: 'á',
      Acirc: 'Â',
      acirc: 'â',
      acute: '´',
      AElig: 'Æ',
      aelig: 'æ',
      Agrave: 'À',
      agrave: 'à',
      amp: '&',
      AMP: '&',
      Aring: 'Å',
      aring: 'å',
      Atilde: 'Ã',
      atilde: 'ã',
      Auml: 'Ä',
      auml: 'ä',
      brvbar: '¦',
      Ccedil: 'Ç',
      ccedil: 'ç',
      cedil: '¸',
      cent: '¢',
      copy: '©',
      COPY: '©',
      curren: '¤',
      deg: '°',
      divide: '÷',
      Eacute: 'É',
      eacute: 'é',
      Ecirc: 'Ê',
      ecirc: 'ê',
      Egrave: 'È',
      egrave: 'è',
      ETH: 'Ð',
      eth: 'ð',
      Euml: 'Ë',
      euml: 'ë',
      frac12: '½',
      frac14: '¼',
      frac34: '¾',
      gt: '>',
      GT: '>',
      Iacute: 'Í',
      iacute: 'í',
      Icirc: 'Î',
      icirc: 'î',
      iexcl: '¡',
      Igrave: 'Ì',
      igrave: 'ì',
      iquest: '¿',
      Iuml: 'Ï',
      iuml: 'ï',
      laquo: '«',
      lt: '<',
      LT: '<',
      macr: '¯',
      micro: 'µ',
      middot: '·',
      nbsp: ' ',
      not: '¬',
      Ntilde: 'Ñ',
      ntilde: 'ñ',
      Oacute: 'Ó',
      oacute: 'ó',
      Ocirc: 'Ô',
      ocirc: 'ô',
      Ograve: 'Ò',
      ograve: 'ò',
      ordf: 'ª',
      ordm: 'º',
      Oslash: 'Ø',
      oslash: 'ø',
      Otilde: 'Õ',
      otilde: 'õ',
      Ouml: 'Ö',
      ouml: 'ö',
      para: '¶',
      plusmn: '±',
      pound: '£',
      quot: '"',
      QUOT: '"',
      raquo: '»',
      reg: '®',
      REG: '®',
      sect: '§',
      shy: '­',
      sup1: '¹',
      sup2: '²',
      sup3: '³',
      szlig: 'ß',
      THORN: 'Þ',
      thorn: 'þ',
      times: '×',
      Uacute: 'Ú',
      uacute: 'ú',
      Ucirc: 'Û',
      ucirc: 'û',
      Ugrave: 'Ù',
      ugrave: 'ù',
      uml: '¨',
      Uuml: 'Ü',
      uuml: 'ü',
      Yacute: 'Ý',
      yacute: 'ý',
      yen: '¥',
      yuml: 'ÿ'
    }
  },
  function(module, exports) {
    module.exports = {
      amp: '&',
      apos: "'",
      gt: '>',
      lt: '<',
      quot: '"'
    }
  },
  function(module, exports) {
    module.exports = function isBuffer(arg) {
      return (
        arg &&
        typeof arg === 'object' &&
        typeof arg.copy === 'function' &&
        typeof arg.fill === 'function' &&
        typeof arg.readUInt8 === 'function'
      )
    }
  },
  function(module, exports) {
    if (typeof Object.create === 'function') {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        })
      }
    } else {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor
        var TempCtor = function() {}
        TempCtor.prototype = superCtor.prototype
        ctor.prototype = new TempCtor()
        ctor.prototype.constructor = ctor
      }
    }
  },
  function(module, exports, __webpack_require__) {
    var ElementType = __webpack_require__(9)
    var re_whitespace = /\s+/g
    var NodePrototype = __webpack_require__(30)
    var ElementPrototype = __webpack_require__(68)
    function DomHandler(callback, options, elementCB) {
      if (typeof callback === 'object') {
        elementCB = options
        options = callback
        callback = null
      } else if (typeof options === 'function') {
        elementCB = options
        options = defaultOpts
      }
      this._callback = callback
      this._options = options || defaultOpts
      this._elementCB = elementCB
      this.dom = []
      this._done = false
      this._tagStack = []
    }
    var defaultOpts = {
      normalizeWhitespace: false
    }
    DomHandler.prototype.onreset = function() {
      DomHandler.call(this, this._callback, this._options, this._elementCB)
    }
    DomHandler.prototype.onend = function() {
      if (this._done) return
      this._done = true
      this._handleCallback(null)
    }
    DomHandler.prototype._handleCallback = DomHandler.prototype.onerror = function(
      error
    ) {
      if (typeof this._callback === 'function') {
        this._callback(error, this.dom)
      } else {
        if (error) throw error
      }
    }
    DomHandler.prototype.onclosetag = function() {
      var elem = this._tagStack.pop()
      if (this._elementCB) this._elementCB(elem)
    }
    DomHandler.prototype._addDomElement = function(element) {
      var parent = this._tagStack[this._tagStack.length - 1]
      var siblings = parent ? parent.children : this.dom
      var previousSibling = siblings[siblings.length - 1]
      element.next = null
      if (this._options.withDomLvl1) {
        element.__proto__ =
          element.type === 'tag' ? ElementPrototype : NodePrototype
      }
      if (previousSibling) {
        element.prev = previousSibling
        previousSibling.next = element
      } else {
        element.prev = null
      }
      siblings.push(element)
      element.parent = parent || null
    }
    DomHandler.prototype.onopentag = function(name, attribs) {
      var element = {
        type:
          name === 'script'
            ? ElementType.Script
            : name === 'style' ? ElementType.Style : ElementType.Tag,
        name: name,
        attribs: attribs,
        children: []
      }
      this._addDomElement(element)
      this._tagStack.push(element)
    }
    DomHandler.prototype.ontext = function(data) {
      var normalize =
        this._options.normalizeWhitespace || this._options.ignoreWhitespace
      var lastTag
      if (
        !this._tagStack.length &&
        this.dom.length &&
        (lastTag = this.dom[this.dom.length - 1]).type === ElementType.Text
      ) {
        if (normalize) {
          lastTag.data = (lastTag.data + data).replace(re_whitespace, ' ')
        } else {
          lastTag.data += data
        }
      } else {
        if (
          this._tagStack.length &&
          (lastTag = this._tagStack[this._tagStack.length - 1]) &&
          (lastTag = lastTag.children[lastTag.children.length - 1]) &&
          lastTag.type === ElementType.Text
        ) {
          if (normalize) {
            lastTag.data = (lastTag.data + data).replace(re_whitespace, ' ')
          } else {
            lastTag.data += data
          }
        } else {
          if (normalize) {
            data = data.replace(re_whitespace, ' ')
          }
          this._addDomElement({
            data: data,
            type: ElementType.Text
          })
        }
      }
    }
    DomHandler.prototype.oncomment = function(data) {
      var lastTag = this._tagStack[this._tagStack.length - 1]
      if (lastTag && lastTag.type === ElementType.Comment) {
        lastTag.data += data
        return
      }
      var element = {
        data: data,
        type: ElementType.Comment
      }
      this._addDomElement(element)
      this._tagStack.push(element)
    }
    DomHandler.prototype.oncdatastart = function() {
      var element = {
        children: [
          {
            data: '',
            type: ElementType.Text
          }
        ],
        type: ElementType.CDATA
      }
      this._addDomElement(element)
      this._tagStack.push(element)
    }
    DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function() {
      this._tagStack.pop()
    }
    DomHandler.prototype.onprocessinginstruction = function(name, data) {
      this._addDomElement({
        name: name,
        data: data,
        type: ElementType.Directive
      })
    }
    module.exports = DomHandler
  },
  function(module, exports, __webpack_require__) {
    var NodePrototype = __webpack_require__(30)
    var ElementPrototype = (module.exports = Object.create(NodePrototype))
    var domLvl1 = {
      tagName: 'name'
    }
    Object.keys(domLvl1).forEach(function(key) {
      var shorthand = domLvl1[key]
      Object.defineProperty(ElementPrototype, key, {
        get: function() {
          return this[shorthand] || null
        },
        set: function(val) {
          this[shorthand] = val
          return val
        }
      })
    })
  },
  function(module, exports, __webpack_require__) {
    var index = __webpack_require__(8),
      DomHandler = index.DomHandler,
      DomUtils = index.DomUtils
    function FeedHandler(callback, options) {
      this.init(callback, options)
    }
    __webpack_require__(16).inherits(FeedHandler, DomHandler)
    FeedHandler.prototype.init = DomHandler
    function getElements(what, where) {
      return DomUtils.getElementsByTagName(what, where, true)
    }
    function getOneElement(what, where) {
      return DomUtils.getElementsByTagName(what, where, true, 1)[0]
    }
    function fetch(what, where, recurse) {
      return DomUtils.getText(
        DomUtils.getElementsByTagName(what, where, recurse, 1)
      ).trim()
    }
    function addConditionally(obj, prop, what, where, recurse) {
      var tmp = fetch(what, where, recurse)
      if (tmp) obj[prop] = tmp
    }
    var isValidFeed = function(value) {
      return value === 'rss' || value === 'feed' || value === 'rdf:RDF'
    }
    FeedHandler.prototype.onend = function() {
      var feed = {},
        feedRoot = getOneElement(isValidFeed, this.dom),
        tmp,
        childs
      if (feedRoot) {
        if (feedRoot.name === 'feed') {
          childs = feedRoot.children
          feed.type = 'atom'
          addConditionally(feed, 'id', 'id', childs)
          addConditionally(feed, 'title', 'title', childs)
          if (
            (tmp = getOneElement('link', childs)) &&
            (tmp = tmp.attribs) &&
            (tmp = tmp.href)
          )
            feed.link = tmp
          addConditionally(feed, 'description', 'subtitle', childs)
          if ((tmp = fetch('updated', childs))) feed.updated = new Date(tmp)
          addConditionally(feed, 'author', 'email', childs, true)
          feed.items = getElements('entry', childs).map(function(item) {
            var entry = {},
              tmp
            item = item.children
            addConditionally(entry, 'id', 'id', item)
            addConditionally(entry, 'title', 'title', item)
            if (
              (tmp = getOneElement('link', item)) &&
              (tmp = tmp.attribs) &&
              (tmp = tmp.href)
            )
              entry.link = tmp
            addConditionally(entry, 'description', 'summary', item)
            if ((tmp = fetch('updated', item))) entry.pubDate = new Date(tmp)
            return entry
          })
        } else {
          childs = getOneElement('channel', feedRoot.children).children
          feed.type = feedRoot.name.substr(0, 3)
          feed.id = ''
          addConditionally(feed, 'title', 'title', childs)
          addConditionally(feed, 'link', 'link', childs)
          addConditionally(feed, 'description', 'description', childs)
          if ((tmp = fetch('lastBuildDate', childs)))
            feed.updated = new Date(tmp)
          addConditionally(feed, 'author', 'managingEditor', childs, true)
          feed.items = getElements('item', feedRoot.children).map(function(
            item
          ) {
            var entry = {},
              tmp
            item = item.children
            addConditionally(entry, 'id', 'guid', item)
            addConditionally(entry, 'title', 'title', item)
            addConditionally(entry, 'link', 'link', item)
            addConditionally(entry, 'description', 'description', item)
            if ((tmp = fetch('pubDate', item))) entry.pubDate = new Date(tmp)
            return entry
          })
        }
      }
      this.dom = feed
      DomHandler.prototype._handleCallback.call(
        this,
        feedRoot ? null : Error("couldn't find root of feed")
      )
    }
    module.exports = FeedHandler
  },
  function(module, exports, __webpack_require__) {
    module.exports = Stream
    var Parser = __webpack_require__(31)
    function Stream(options) {
      Parser.call(this, new Cbs(this), options)
    }
    __webpack_require__(16).inherits(Stream, Parser)
    Stream.prototype.readable = true
    function Cbs(scope) {
      this.scope = scope
    }
    var EVENTS = __webpack_require__(8).EVENTS
    Object.keys(EVENTS).forEach(function(name) {
      if (EVENTS[name] === 0) {
        Cbs.prototype['on' + name] = function() {
          this.scope.emit(name)
        }
      } else if (EVENTS[name] === 1) {
        Cbs.prototype['on' + name] = function(a) {
          this.scope.emit(name, a)
        }
      } else if (EVENTS[name] === 2) {
        Cbs.prototype['on' + name] = function(a, b) {
          this.scope.emit(name, a, b)
        }
      } else {
        throw Error('wrong number of arguments!')
      }
    })
  },
  function(module, exports) {},
  function(module, exports, __webpack_require__) {
    'use strict'
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function')
      }
    }
    var Buffer = __webpack_require__(22).Buffer
    function copyBuffer(src, target, offset) {
      src.copy(target, offset)
    }
    module.exports = (function() {
      function BufferList() {
        _classCallCheck(this, BufferList)
        this.head = null
        this.tail = null
        this.length = 0
      }
      BufferList.prototype.push = function push(v) {
        var entry = {
          data: v,
          next: null
        }
        if (this.length > 0) this.tail.next = entry
        else this.head = entry
        this.tail = entry
        ++this.length
      }
      BufferList.prototype.unshift = function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        }
        if (this.length === 0) this.tail = entry
        this.head = entry
        ++this.length
      }
      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return
        var ret = this.head.data
        if (this.length === 1) this.head = this.tail = null
        else this.head = this.head.next
        --this.length
        return ret
      }
      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null
        this.length = 0
      }
      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return ''
        var p = this.head
        var ret = '' + p.data
        while ((p = p.next)) {
          ret += s + p.data
        }
        return ret
      }
      BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0)
        if (this.length === 1) return this.head.data
        var ret = Buffer.allocUnsafe(n >>> 0)
        var p = this.head
        var i = 0
        while (p) {
          copyBuffer(p.data, ret, i)
          i += p.data.length
          p = p.next
        }
        return ret
      }
      return BufferList
    })()
  },
  function(module, exports, __webpack_require__) {
    var apply = Function.prototype.apply
    exports.setTimeout = function() {
      return new Timeout(
        apply.call(setTimeout, window, arguments),
        clearTimeout
      )
    }
    exports.setInterval = function() {
      return new Timeout(
        apply.call(setInterval, window, arguments),
        clearInterval
      )
    }
    exports.clearTimeout = exports.clearInterval = function(timeout) {
      if (timeout) {
        timeout.close()
      }
    }
    function Timeout(id, clearFn) {
      this._id = id
      this._clearFn = clearFn
    }
    Timeout.prototype.unref = Timeout.prototype.ref = function() {}
    Timeout.prototype.close = function() {
      this._clearFn.call(window, this._id)
    }
    exports.enroll = function(item, msecs) {
      clearTimeout(item._idleTimeoutId)
      item._idleTimeout = msecs
    }
    exports.unenroll = function(item) {
      clearTimeout(item._idleTimeoutId)
      item._idleTimeout = -1
    }
    exports._unrefActive = exports.active = function(item) {
      clearTimeout(item._idleTimeoutId)
      var msecs = item._idleTimeout
      if (msecs >= 0) {
        item._idleTimeoutId = setTimeout(function onTimeout() {
          if (item._onTimeout) item._onTimeout()
        }, msecs)
      }
    }
    __webpack_require__(74)
    exports.setImmediate = setImmediate
    exports.clearImmediate = clearImmediate
  },
  function(module, exports, __webpack_require__) {
    ;(function(global, process) {
      ;(function(global, undefined) {
        'use strict'
        if (global.setImmediate) {
          return
        }
        var nextHandle = 1
        var tasksByHandle = {}
        var currentlyRunningATask = false
        var doc = global.document
        var registerImmediate
        function setImmediate(callback) {
          if (typeof callback !== 'function') {
            callback = new Function('' + callback)
          }
          var args = new Array(arguments.length - 1)
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1]
          }
          var task = {
            callback: callback,
            args: args
          }
          tasksByHandle[nextHandle] = task
          registerImmediate(nextHandle)
          return nextHandle++
        }
        function clearImmediate(handle) {
          delete tasksByHandle[handle]
        }
        function run(task) {
          var callback = task.callback
          var args = task.args
          switch (args.length) {
            case 0:
              callback()
              break

            case 1:
              callback(args[0])
              break

            case 2:
              callback(args[0], args[1])
              break

            case 3:
              callback(args[0], args[1], args[2])
              break

            default:
              callback.apply(undefined, args)
              break
          }
        }
        function runIfPresent(handle) {
          if (currentlyRunningATask) {
            setTimeout(runIfPresent, 0, handle)
          } else {
            var task = tasksByHandle[handle]
            if (task) {
              currentlyRunningATask = true
              try {
                run(task)
              } finally {
                clearImmediate(handle)
                currentlyRunningATask = false
              }
            }
          }
        }
        function installNextTickImplementation() {
          registerImmediate = function(handle) {
            process.nextTick(function() {
              runIfPresent(handle)
            })
          }
        }
        function canUsePostMessage() {
          if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true
            var oldOnMessage = global.onmessage
            global.onmessage = function() {
              postMessageIsAsynchronous = false
            }
            global.postMessage('', '*')
            global.onmessage = oldOnMessage
            return postMessageIsAsynchronous
          }
        }
        function installPostMessageImplementation() {
          var messagePrefix = 'setImmediate$' + Math.random() + '$'
          var onGlobalMessage = function(event) {
            if (
              event.source === global &&
              typeof event.data === 'string' &&
              event.data.indexOf(messagePrefix) === 0
            ) {
              runIfPresent(+event.data.slice(messagePrefix.length))
            }
          }
          if (global.addEventListener) {
            global.addEventListener('message', onGlobalMessage, false)
          } else {
            global.attachEvent('onmessage', onGlobalMessage)
          }
          registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, '*')
          }
        }
        function installMessageChannelImplementation() {
          var channel = new MessageChannel()
          channel.port1.onmessage = function(event) {
            var handle = event.data
            runIfPresent(handle)
          }
          registerImmediate = function(handle) {
            channel.port2.postMessage(handle)
          }
        }
        function installReadyStateChangeImplementation() {
          var html = doc.documentElement
          registerImmediate = function(handle) {
            var script = doc.createElement('script')
            script.onreadystatechange = function() {
              runIfPresent(handle)
              script.onreadystatechange = null
              html.removeChild(script)
              script = null
            }
            html.appendChild(script)
          }
        }
        function installSetTimeoutImplementation() {
          registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle)
          }
        }
        var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global)
        attachTo = attachTo && attachTo.setTimeout ? attachTo : global
        if ({}.toString.call(global.process) === '[object process]') {
          installNextTickImplementation()
        } else if (canUsePostMessage()) {
          installPostMessageImplementation()
        } else if (global.MessageChannel) {
          installMessageChannelImplementation()
        } else if (doc && 'onreadystatechange' in doc.createElement('script')) {
          installReadyStateChangeImplementation()
        } else {
          installSetTimeoutImplementation()
        }
        attachTo.setImmediate = setImmediate
        attachTo.clearImmediate = clearImmediate
      })(
        typeof self === 'undefined'
          ? typeof global === 'undefined' ? this : global
          : self
      )
    }.call(exports, __webpack_require__(5), __webpack_require__(1)))
  },
  function(module, exports, __webpack_require__) {
    ;(function(global) {
      module.exports = deprecate
      function deprecate(fn, msg) {
        if (config('noDeprecation')) {
          return fn
        }
        var warned = false
        function deprecated() {
          if (!warned) {
            if (config('throwDeprecation')) {
              throw new Error(msg)
            } else if (config('traceDeprecation')) {
              console.trace(msg)
            } else {
              console.warn(msg)
            }
            warned = true
          }
          return fn.apply(this, arguments)
        }
        return deprecated
      }
      function config(name) {
        try {
          if (!global.localStorage) return false
        } catch (_) {
          return false
        }
        var val = global.localStorage[name]
        if (null == val) return false
        return String(val).toLowerCase() === 'true'
      }
    }.call(exports, __webpack_require__(5)))
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    module.exports = PassThrough
    var Transform = __webpack_require__(35)
    var util = __webpack_require__(2)
    util.inherits = __webpack_require__(0)
    util.inherits(PassThrough, Transform)
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options)
      Transform.call(this, options)
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk)
    }
  },
  function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(23)
  },
  function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(6)
  },
  function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(21).Transform
  },
  function(module, exports, __webpack_require__) {
    module.exports = __webpack_require__(21).PassThrough
  },
  function(module, exports, __webpack_require__) {
    ;(function(process) {
      exports = module.exports = __webpack_require__(36)
      exports.Stream = __webpack_require__(12)
      exports.Readable = exports
      exports.Writable = __webpack_require__(37)
      exports.Duplex = __webpack_require__(10)
      exports.Transform = __webpack_require__(38)
      exports.PassThrough = __webpack_require__(84)
      if (!process.browser && process.env.READABLE_STREAM === 'disable') {
        module.exports = __webpack_require__(12)
      }
    }.call(exports, __webpack_require__(1)))
  },
  function(module, exports) {
    module.exports =
      Array.isArray ||
      function(arr) {
        return Object.prototype.toString.call(arr) == '[object Array]'
      }
  },
  function(module, exports) {},
  function(module, exports, __webpack_require__) {
    module.exports = PassThrough
    var Transform = __webpack_require__(38)
    var util = __webpack_require__(2)
    util.inherits = __webpack_require__(0)
    util.inherits(PassThrough, Transform)
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options)
      Transform.call(this, options)
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk)
    }
  },
  function(module, exports, __webpack_require__) {
    module.exports = ProxyHandler
    function ProxyHandler(cbs) {
      this._cbs = cbs || {}
    }
    var EVENTS = __webpack_require__(8).EVENTS
    Object.keys(EVENTS).forEach(function(name) {
      if (EVENTS[name] === 0) {
        name = 'on' + name
        ProxyHandler.prototype[name] = function() {
          if (this._cbs[name]) this._cbs[name]()
        }
      } else if (EVENTS[name] === 1) {
        name = 'on' + name
        ProxyHandler.prototype[name] = function(a) {
          if (this._cbs[name]) this._cbs[name](a)
        }
      } else if (EVENTS[name] === 2) {
        name = 'on' + name
        ProxyHandler.prototype[name] = function(a, b) {
          if (this._cbs[name]) this._cbs[name](a, b)
        }
      } else {
        throw Error('wrong number of arguments')
      }
    })
  },
  function(module, exports, __webpack_require__) {
    var DomUtils = module.exports
    ;[
      __webpack_require__(87),
      __webpack_require__(94),
      __webpack_require__(95),
      __webpack_require__(96),
      __webpack_require__(97),
      __webpack_require__(98)
    ].forEach(function(ext) {
      Object.keys(ext).forEach(function(key) {
        DomUtils[key] = ext[key].bind(DomUtils)
      })
    })
  },
  function(module, exports, __webpack_require__) {
    var ElementType = __webpack_require__(9),
      getOuterHTML = __webpack_require__(39),
      isTag = ElementType.isTag
    module.exports = {
      getInnerHTML: getInnerHTML,
      getOuterHTML: getOuterHTML,
      getText: getText
    }
    function getInnerHTML(elem, opts) {
      return elem.children
        ? elem.children
            .map(function(elem) {
              return getOuterHTML(elem, opts)
            })
            .join('')
        : ''
    }
    function getText(elem) {
      if (Array.isArray(elem)) return elem.map(getText).join('')
      if (isTag(elem) || elem.type === ElementType.CDATA)
        return getText(elem.children)
      if (elem.type === ElementType.Text) return elem.data
      return ''
    }
  },
  function(module, exports, __webpack_require__) {
    var encode = __webpack_require__(89),
      decode = __webpack_require__(90)
    exports.decode = function(data, level) {
      return (!level || level <= 0 ? decode.XML : decode.HTML)(data)
    }
    exports.decodeStrict = function(data, level) {
      return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data)
    }
    exports.encode = function(data, level) {
      return (!level || level <= 0 ? encode.XML : encode.HTML)(data)
    }
    exports.encodeXML = encode.XML
    exports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML
    exports.decodeXML = exports.decodeXMLStrict = decode.XML
    exports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML
    exports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict =
      decode.HTMLStrict
    exports.escape = encode.escape
  },
  function(module, exports, __webpack_require__) {
    var inverseXML = getInverseObj(__webpack_require__(40)),
      xmlReplacer = getInverseReplacer(inverseXML)
    exports.XML = getInverse(inverseXML, xmlReplacer)
    var inverseHTML = getInverseObj(__webpack_require__(41)),
      htmlReplacer = getInverseReplacer(inverseHTML)
    exports.HTML = getInverse(inverseHTML, htmlReplacer)
    function getInverseObj(obj) {
      return Object.keys(obj)
        .sort()
        .reduce(function(inverse, name) {
          inverse[obj[name]] = '&' + name + ';'
          return inverse
        }, {})
    }
    function getInverseReplacer(inverse) {
      var single = [],
        multiple = []
      Object.keys(inverse).forEach(function(k) {
        if (k.length === 1) {
          single.push('\\' + k)
        } else {
          multiple.push(k)
        }
      })
      multiple.unshift('[' + single.join('') + ']')
      return new RegExp(multiple.join('|'), 'g')
    }
    var re_nonASCII = /[^\0-\x7F]/g,
      re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g
    function singleCharReplacer(c) {
      return (
        '&#x' +
        c
          .charCodeAt(0)
          .toString(16)
          .toUpperCase() +
        ';'
      )
    }
    function astralReplacer(c) {
      var high = c.charCodeAt(0)
      var low = c.charCodeAt(1)
      var codePoint = (high - 55296) * 1024 + low - 56320 + 65536
      return '&#x' + codePoint.toString(16).toUpperCase() + ';'
    }
    function getInverse(inverse, re) {
      function func(name) {
        return inverse[name]
      }
      return function(data) {
        return data
          .replace(re, func)
          .replace(re_astralSymbols, astralReplacer)
          .replace(re_nonASCII, singleCharReplacer)
      }
    }
    var re_xmlChars = getInverseReplacer(inverseXML)
    function escapeXML(data) {
      return data
        .replace(re_xmlChars, singleCharReplacer)
        .replace(re_astralSymbols, astralReplacer)
        .replace(re_nonASCII, singleCharReplacer)
    }
    exports.escape = escapeXML
  },
  function(module, exports, __webpack_require__) {
    var entityMap = __webpack_require__(41),
      legacyMap = __webpack_require__(91),
      xmlMap = __webpack_require__(40),
      decodeCodePoint = __webpack_require__(92)
    var decodeXMLStrict = getStrictDecoder(xmlMap),
      decodeHTMLStrict = getStrictDecoder(entityMap)
    function getStrictDecoder(map) {
      var keys = Object.keys(map).join('|'),
        replace = getReplacer(map)
      keys += '|#[xX][\\da-fA-F]+|#\\d+'
      var re = new RegExp('&(?:' + keys + ');', 'g')
      return function(str) {
        return String(str).replace(re, replace)
      }
    }
    var decodeHTML = (function() {
      var legacy = Object.keys(legacyMap).sort(sorter)
      var keys = Object.keys(entityMap).sort(sorter)
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ';?'
          j++
        } else {
          keys[i] += ';'
        }
      }
      var re = new RegExp(
          '&(?:' + keys.join('|') + '|#[xX][\\da-fA-F]+;?|#\\d+;?)',
          'g'
        ),
        replace = getReplacer(entityMap)
      function replacer(str) {
        if (str.substr(-1) !== ';') str += ';'
        return replace(str)
      }
      return function(str) {
        return String(str).replace(re, replacer)
      }
    })()
    function sorter(a, b) {
      return a < b ? 1 : -1
    }
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === '#') {
          if (str.charAt(2) === 'X' || str.charAt(2) === 'x') {
            return decodeCodePoint(parseInt(str.substr(3), 16))
          }
          return decodeCodePoint(parseInt(str.substr(2), 10))
        }
        return map[str.slice(1, -1)]
      }
    }
    module.exports = {
      XML: decodeXMLStrict,
      HTML: decodeHTML,
      HTMLStrict: decodeHTMLStrict
    }
  },
  function(module, exports) {
    module.exports = {
      Aacute: 'Á',
      aacute: 'á',
      Acirc: 'Â',
      acirc: 'â',
      acute: '´',
      AElig: 'Æ',
      aelig: 'æ',
      Agrave: 'À',
      agrave: 'à',
      amp: '&',
      AMP: '&',
      Aring: 'Å',
      aring: 'å',
      Atilde: 'Ã',
      atilde: 'ã',
      Auml: 'Ä',
      auml: 'ä',
      brvbar: '¦',
      Ccedil: 'Ç',
      ccedil: 'ç',
      cedil: '¸',
      cent: '¢',
      copy: '©',
      COPY: '©',
      curren: '¤',
      deg: '°',
      divide: '÷',
      Eacute: 'É',
      eacute: 'é',
      Ecirc: 'Ê',
      ecirc: 'ê',
      Egrave: 'È',
      egrave: 'è',
      ETH: 'Ð',
      eth: 'ð',
      Euml: 'Ë',
      euml: 'ë',
      frac12: '½',
      frac14: '¼',
      frac34: '¾',
      gt: '>',
      GT: '>',
      Iacute: 'Í',
      iacute: 'í',
      Icirc: 'Î',
      icirc: 'î',
      iexcl: '¡',
      Igrave: 'Ì',
      igrave: 'ì',
      iquest: '¿',
      Iuml: 'Ï',
      iuml: 'ï',
      laquo: '«',
      lt: '<',
      LT: '<',
      macr: '¯',
      micro: 'µ',
      middot: '·',
      nbsp: ' ',
      not: '¬',
      Ntilde: 'Ñ',
      ntilde: 'ñ',
      Oacute: 'Ó',
      oacute: 'ó',
      Ocirc: 'Ô',
      ocirc: 'ô',
      Ograve: 'Ò',
      ograve: 'ò',
      ordf: 'ª',
      ordm: 'º',
      Oslash: 'Ø',
      oslash: 'ø',
      Otilde: 'Õ',
      otilde: 'õ',
      Ouml: 'Ö',
      ouml: 'ö',
      para: '¶',
      plusmn: '±',
      pound: '£',
      quot: '"',
      QUOT: '"',
      raquo: '»',
      reg: '®',
      REG: '®',
      sect: '§',
      shy: '­',
      sup1: '¹',
      sup2: '²',
      sup3: '³',
      szlig: 'ß',
      THORN: 'Þ',
      thorn: 'þ',
      times: '×',
      Uacute: 'Ú',
      uacute: 'ú',
      Ucirc: 'Û',
      ucirc: 'û',
      Ugrave: 'Ù',
      ugrave: 'ù',
      uml: '¨',
      Uuml: 'Ü',
      uuml: 'ü',
      Yacute: 'Ý',
      yacute: 'ý',
      yen: '¥',
      yuml: 'ÿ'
    }
  },
  function(module, exports, __webpack_require__) {
    var decodeMap = __webpack_require__(93)
    module.exports = decodeCodePoint
    function decodeCodePoint(codePoint) {
      if ((codePoint >= 55296 && codePoint <= 57343) || codePoint > 1114111) {
        return '�'
      }
      if (codePoint in decodeMap) {
        codePoint = decodeMap[codePoint]
      }
      var output = ''
      if (codePoint > 65535) {
        codePoint -= 65536
        output += String.fromCharCode(((codePoint >>> 10) & 1023) | 55296)
        codePoint = 56320 | (codePoint & 1023)
      }
      output += String.fromCharCode(codePoint)
      return output
    }
  },
  function(module, exports) {
    module.exports = {
      '0': 65533,
      '128': 8364,
      '130': 8218,
      '131': 402,
      '132': 8222,
      '133': 8230,
      '134': 8224,
      '135': 8225,
      '136': 710,
      '137': 8240,
      '138': 352,
      '139': 8249,
      '140': 338,
      '142': 381,
      '145': 8216,
      '146': 8217,
      '147': 8220,
      '148': 8221,
      '149': 8226,
      '150': 8211,
      '151': 8212,
      '152': 732,
      '153': 8482,
      '154': 353,
      '155': 8250,
      '156': 339,
      '158': 382,
      '159': 376
    }
  },
  function(module, exports) {
    var getChildren = (exports.getChildren = function(elem) {
      return elem.children
    })
    var getParent = (exports.getParent = function(elem) {
      return elem.parent
    })
    exports.getSiblings = function(elem) {
      var parent = getParent(elem)
      return parent ? getChildren(parent) : [elem]
    }
    exports.getAttributeValue = function(elem, name) {
      return elem.attribs && elem.attribs[name]
    }
    exports.hasAttrib = function(elem, name) {
      return !!elem.attribs && hasOwnProperty.call(elem.attribs, name)
    }
    exports.getName = function(elem) {
      return elem.name
    }
  },
  function(module, exports) {
    exports.removeElement = function(elem) {
      if (elem.prev) elem.prev.next = elem.next
      if (elem.next) elem.next.prev = elem.prev
      if (elem.parent) {
        var childs = elem.parent.children
        childs.splice(childs.lastIndexOf(elem), 1)
      }
    }
    exports.replaceElement = function(elem, replacement) {
      var prev = (replacement.prev = elem.prev)
      if (prev) {
        prev.next = replacement
      }
      var next = (replacement.next = elem.next)
      if (next) {
        next.prev = replacement
      }
      var parent = (replacement.parent = elem.parent)
      if (parent) {
        var childs = parent.children
        childs[childs.lastIndexOf(elem)] = replacement
      }
    }
    exports.appendChild = function(elem, child) {
      child.parent = elem
      if (elem.children.push(child) !== 1) {
        var sibling = elem.children[elem.children.length - 2]
        sibling.next = child
        child.prev = sibling
        child.next = null
      }
    }
    exports.append = function(elem, next) {
      var parent = elem.parent,
        currNext = elem.next
      next.next = currNext
      next.prev = elem
      elem.next = next
      next.parent = parent
      if (currNext) {
        currNext.prev = next
        if (parent) {
          var childs = parent.children
          childs.splice(childs.lastIndexOf(currNext), 0, next)
        }
      } else if (parent) {
        parent.children.push(next)
      }
    }
    exports.prepend = function(elem, prev) {
      var parent = elem.parent
      if (parent) {
        var childs = parent.children
        childs.splice(childs.lastIndexOf(elem), 0, prev)
      }
      if (elem.prev) {
        elem.prev.next = prev
      }
      prev.parent = parent
      prev.prev = elem.prev
      prev.next = elem
      elem.prev = prev
    }
  },
  function(module, exports, __webpack_require__) {
    var isTag = __webpack_require__(9).isTag
    module.exports = {
      filter: filter,
      find: find,
      findOneChild: findOneChild,
      findOne: findOne,
      existsOne: existsOne,
      findAll: findAll
    }
    function filter(test, element, recurse, limit) {
      if (!Array.isArray(element)) element = [element]
      if (typeof limit !== 'number' || !isFinite(limit)) {
        limit = Infinity
      }
      return find(test, element, recurse !== false, limit)
    }
    function find(test, elems, recurse, limit) {
      var result = [],
        childs
      for (var i = 0, j = elems.length; i < j; i++) {
        if (test(elems[i])) {
          result.push(elems[i])
          if (--limit <= 0) break
        }
        childs = elems[i].children
        if (recurse && childs && childs.length > 0) {
          childs = find(test, childs, recurse, limit)
          result = result.concat(childs)
          limit -= childs.length
          if (limit <= 0) break
        }
      }
      return result
    }
    function findOneChild(test, elems) {
      for (var i = 0, l = elems.length; i < l; i++) {
        if (test(elems[i])) return elems[i]
      }
      return null
    }
    function findOne(test, elems) {
      var elem = null
      for (var i = 0, l = elems.length; i < l && !elem; i++) {
        if (!isTag(elems[i])) {
          continue
        } else if (test(elems[i])) {
          elem = elems[i]
        } else if (elems[i].children.length > 0) {
          elem = findOne(test, elems[i].children)
        }
      }
      return elem
    }
    function existsOne(test, elems) {
      for (var i = 0, l = elems.length; i < l; i++) {
        if (
          isTag(elems[i]) &&
          (test(elems[i]) ||
            (elems[i].children.length > 0 &&
              existsOne(test, elems[i].children)))
        ) {
          return true
        }
      }
      return false
    }
    function findAll(test, elems) {
      var result = []
      for (var i = 0, j = elems.length; i < j; i++) {
        if (!isTag(elems[i])) continue
        if (test(elems[i])) result.push(elems[i])
        if (elems[i].children.length > 0) {
          result = result.concat(findAll(test, elems[i].children))
        }
      }
      return result
    }
  },
  function(module, exports, __webpack_require__) {
    var ElementType = __webpack_require__(9)
    var isTag = (exports.isTag = ElementType.isTag)
    exports.testElement = function(options, element) {
      for (var key in options) {
        if (!options.hasOwnProperty(key));
        else if (key === 'tag_name') {
          if (!isTag(element) || !options.tag_name(element.name)) {
            return false
          }
        } else if (key === 'tag_type') {
          if (!options.tag_type(element.type)) return false
        } else if (key === 'tag_contains') {
          if (isTag(element) || !options.tag_contains(element.data)) {
            return false
          }
        } else if (!element.attribs || !options[key](element.attribs[key])) {
          return false
        }
      }
      return true
    }
    var Checks = {
      tag_name: function(name) {
        if (typeof name === 'function') {
          return function(elem) {
            return isTag(elem) && name(elem.name)
          }
        } else if (name === '*') {
          return isTag
        } else {
          return function(elem) {
            return isTag(elem) && elem.name === name
          }
        }
      },
      tag_type: function(type) {
        if (typeof type === 'function') {
          return function(elem) {
            return type(elem.type)
          }
        } else {
          return function(elem) {
            return elem.type === type
          }
        }
      },
      tag_contains: function(data) {
        if (typeof data === 'function') {
          return function(elem) {
            return !isTag(elem) && data(elem.data)
          }
        } else {
          return function(elem) {
            return !isTag(elem) && elem.data === data
          }
        }
      }
    }
    function getAttribCheck(attrib, value) {
      if (typeof value === 'function') {
        return function(elem) {
          return elem.attribs && value(elem.attribs[attrib])
        }
      } else {
        return function(elem) {
          return elem.attribs && elem.attribs[attrib] === value
        }
      }
    }
    function combineFuncs(a, b) {
      return function(elem) {
        return a(elem) || b(elem)
      }
    }
    exports.getElements = function(options, element, recurse, limit) {
      var funcs = Object.keys(options).map(function(key) {
        var value = options[key]
        return key in Checks ? Checks[key](value) : getAttribCheck(key, value)
      })
      return funcs.length === 0
        ? []
        : this.filter(funcs.reduce(combineFuncs), element, recurse, limit)
    }
    exports.getElementById = function(id, element, recurse) {
      if (!Array.isArray(element)) element = [element]
      return this.findOne(getAttribCheck('id', id), element, recurse !== false)
    }
    exports.getElementsByTagName = function(name, element, recurse, limit) {
      return this.filter(Checks.tag_name(name), element, recurse, limit)
    }
    exports.getElementsByTagType = function(type, element, recurse, limit) {
      return this.filter(Checks.tag_type(type), element, recurse, limit)
    }
  },
  function(module, exports) {
    exports.removeSubsets = function(nodes) {
      var idx = nodes.length,
        node,
        ancestor,
        replace
      while (--idx > -1) {
        node = ancestor = nodes[idx]
        nodes[idx] = null
        replace = true
        while (ancestor) {
          if (nodes.indexOf(ancestor) > -1) {
            replace = false
            nodes.splice(idx, 1)
            break
          }
          ancestor = ancestor.parent
        }
        if (replace) {
          nodes[idx] = node
        }
      }
      return nodes
    }
    var POSITION = {
      DISCONNECTED: 1,
      PRECEDING: 2,
      FOLLOWING: 4,
      CONTAINS: 8,
      CONTAINED_BY: 16
    }
    var comparePos = (exports.compareDocumentPosition = function(nodeA, nodeB) {
      var aParents = []
      var bParents = []
      var current, sharedParent, siblings, aSibling, bSibling, idx
      if (nodeA === nodeB) {
        return 0
      }
      current = nodeA
      while (current) {
        aParents.unshift(current)
        current = current.parent
      }
      current = nodeB
      while (current) {
        bParents.unshift(current)
        current = current.parent
      }
      idx = 0
      while (aParents[idx] === bParents[idx]) {
        idx++
      }
      if (idx === 0) {
        return POSITION.DISCONNECTED
      }
      sharedParent = aParents[idx - 1]
      siblings = sharedParent.children
      aSibling = aParents[idx]
      bSibling = bParents[idx]
      if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
          return POSITION.FOLLOWING | POSITION.CONTAINED_BY
        }
        return POSITION.FOLLOWING
      } else {
        if (sharedParent === nodeA) {
          return POSITION.PRECEDING | POSITION.CONTAINS
        }
        return POSITION.PRECEDING
      }
    })
    exports.uniqueSort = function(nodes) {
      var idx = nodes.length,
        node,
        position
      nodes = nodes.slice()
      while (--idx > -1) {
        node = nodes[idx]
        position = nodes.indexOf(node)
        if (position > -1 && position < idx) {
          nodes.splice(idx, 1)
        }
      }
      nodes.sort(function(a, b) {
        var relative = comparePos(a, b)
        if (relative & POSITION.PRECEDING) {
          return -1
        } else if (relative & POSITION.FOLLOWING) {
          return 1
        }
        return 0
      })
      return nodes
    }
  },
  function(module, exports, __webpack_require__) {
    module.exports = CollectingHandler
    function CollectingHandler(cbs) {
      this._cbs = cbs || {}
      this.events = []
    }
    var EVENTS = __webpack_require__(8).EVENTS
    Object.keys(EVENTS).forEach(function(name) {
      if (EVENTS[name] === 0) {
        name = 'on' + name
        CollectingHandler.prototype[name] = function() {
          this.events.push([name])
          if (this._cbs[name]) this._cbs[name]()
        }
      } else if (EVENTS[name] === 1) {
        name = 'on' + name
        CollectingHandler.prototype[name] = function(a) {
          this.events.push([name, a])
          if (this._cbs[name]) this._cbs[name](a)
        }
      } else if (EVENTS[name] === 2) {
        name = 'on' + name
        CollectingHandler.prototype[name] = function(a, b) {
          this.events.push([name, a, b])
          if (this._cbs[name]) this._cbs[name](a, b)
        }
      } else {
        throw Error('wrong number of arguments')
      }
    })
    CollectingHandler.prototype.onreset = function() {
      this.events = []
      if (this._cbs.onreset) this._cbs.onreset()
    }
    CollectingHandler.prototype.restart = function() {
      if (this._cbs.onreset) this._cbs.onreset()
      for (var i = 0, len = this.events.length; i < len; i++) {
        if (this._cbs[this.events[i][0]]) {
          var num = this.events[i].length
          if (num === 1) {
            this._cbs[this.events[i][0]]()
          } else if (num === 2) {
            this._cbs[this.events[i][0]](this.events[i][1])
          } else {
            this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2])
          }
        }
      }
    }
  },
  function(module, exports) {
    module.exports = function(module) {
      if (!module.webpackPolyfill) {
        module.deprecate = function() {}
        module.paths = []
        if (!module.children) module.children = []
        Object.defineProperty(module, 'loaded', {
          enumerable: true,
          get: function() {
            return module.l
          }
        })
        Object.defineProperty(module, 'id', {
          enumerable: true,
          get: function() {
            return module.i
          }
        })
        module.webpackPolyfill = 1
      }
      return module
    }
  },
  function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3),
      utils = __webpack_require__(13),
      isTag = utils.isTag,
      domEach = utils.domEach,
      hasOwn = Object.prototype.hasOwnProperty,
      camelCase = utils.camelCase,
      cssCase = utils.cssCase,
      rspace = /\s+/,
      dataAttrPrefix = 'data-',
      primitives = {
        null: null,
        true: true,
        false: false
      },
      rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
      rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/
    var getAttr = function(elem, name) {
      if (!elem || !isTag(elem)) return
      if (!elem.attribs) {
        elem.attribs = {}
      }
      if (!name) {
        return elem.attribs
      }
      if (hasOwn.call(elem.attribs, name)) {
        return elem.attribs[name]
      }
    }
    var setAttr = function(el, name, value) {
      if (value === null) {
        removeAttribute(el, name)
      } else {
        el.attribs[name] = value + ''
      }
    }
    var attr = (exports.attr = function(name, value) {
      if (typeof name === 'object' || value !== undefined) {
        if (typeof value === 'function') {
          return domEach(this, function(i, el) {
            setAttr(el, name, value.call(el, i, el.attribs[name]))
          })
        }
        return domEach(this, function(i, el) {
          if (!isTag(el)) return
          if (typeof name === 'object') {
            _.each(name, function(name, key) {
              el.attribs[key] = name + ''
            })
          } else {
            setAttr(el, name, value)
          }
        })
      }
      return getAttr(this[0], name)
    })
    var setData = function(el, name, value) {
      if (typeof name === 'object') return _.extend(el.data, name)
      if (typeof name === 'string' && value !== undefined) {
        el.data[name] = value
      } else if (typeof name === 'object') {
        _.exend(el.data, name)
      }
    }
    var readData = function(el, name) {
      var readAll = arguments.length === 1
      var domNames, domName, jsNames, jsName, value, idx, length
      if (readAll) {
        domNames = Object.keys(el.attribs).filter(function(attrName) {
          return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix
        })
        jsNames = domNames.map(function(domName) {
          return camelCase(domName.slice(dataAttrPrefix.length))
        })
      } else {
        domNames = [dataAttrPrefix + cssCase(name)]
        jsNames = [name]
      }
      for (idx = 0, length = domNames.length; idx < length; ++idx) {
        domName = domNames[idx]
        jsName = jsNames[idx]
        if (hasOwn.call(el.attribs, domName)) {
          value = el.attribs[domName]
          if (hasOwn.call(primitives, value)) {
            value = primitives[value]
          } else if (value === String(Number(value))) {
            value = Number(value)
          } else if (rbrace.test(value)) {
            value = JSON.parse(value)
          }
          el.data[jsName] = value
        }
      }
      return readAll ? el.data : value
    }
    var data = (exports.data = function(name, value) {
      var elem = this[0]
      if (!elem || !isTag(elem)) return
      if (!elem.data) {
        elem.data = {}
      }
      if (!name) {
        return readData(elem)
      }
      if (typeof name === 'object' || value !== undefined) {
        domEach(this, function(i, el) {
          setData(el, name, value)
        })
        return this
      } else if (hasOwn.call(elem.data, name)) {
        return elem.data[name]
      }
      return readData(elem, name)
    })
    var val = (exports.val = function(value) {
      var querying = arguments.length === 0,
        element = this[0]
      if (!element) return
      switch (element.name) {
        case 'textarea':
          return this.text(value)

        case 'input':
          switch (this.attr('type')) {
            case 'radio':
              var queryString =
                'input[type=radio][name=' + this.attr('name') + ']:checked'
              var parentEl, root
              parentEl = this.closest('form')
              if (parentEl.length === 0) {
                root = (this.parents().last()[0] || this[0]).root
                parentEl = this._make(root)
              }
              if (querying) {
                return parentEl.find(queryString).attr('value')
              } else {
                parentEl.find(':checked').removeAttr('checked')
                parentEl
                  .find('input[type=radio][value="' + value + '"]')
                  .attr('checked', '')
                return this
              }
              break

            default:
              return this.attr('value', value)
          }
          return

        case 'select':
          var option = this.find('option:selected'),
            returnValue
          if (option === undefined) return undefined
          if (!querying) {
            if (
              !this.attr().hasOwnProperty('multiple') &&
              typeof value == 'object'
            ) {
              return this
            }
            if (typeof value != 'object') {
              value = [value]
            }
            this.find('option').removeAttr('selected')
            for (var i = 0; i < value.length; i++) {
              this.find('option[value="' + value[i] + '"]').attr('selected', '')
            }
            return this
          }
          returnValue = option.attr('value')
          if (this.attr().hasOwnProperty('multiple')) {
            returnValue = []
            domEach(option, function(i, el) {
              returnValue.push(el.attribs.value)
            })
          }
          return returnValue

        case 'option':
          if (!querying) {
            this.attr('value', value)
            return this
          }
          return this.attr('value')
      }
    })
    var removeAttribute = function(elem, name) {
      if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return
      if (name === elem.attribs[name] && rboolean.test(elem.attribs[name]))
        elem.attribs[name] = false
      else delete elem.attribs[name]
    }
    var removeAttr = (exports.removeAttr = function(name) {
      domEach(this, function(i, elem) {
        removeAttribute(elem, name)
      })
      return this
    })
    var hasClass = (exports.hasClass = function(className) {
      return _.any(this, function(elem) {
        var attrs = elem.attribs,
          clazz = attrs && attrs['class'],
          idx = -1,
          end
        if (clazz) {
          while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
            end = idx + className.length
            if (
              (idx === 0 || rspace.test(clazz[idx - 1])) &&
              (end === clazz.length || rspace.test(clazz[end]))
            ) {
              return true
            }
          }
        }
      })
    })
    var addClass = (exports.addClass = function(value) {
      if (typeof value === 'function') {
        return domEach(this, function(i, el) {
          var className = el.attribs['class'] || ''
          addClass.call([el], value.call(el, i, className))
        })
      }
      if (!value || typeof value !== 'string') return this
      var classNames = value.split(rspace),
        numElements = this.length
      for (var i = 0; i < numElements; i++) {
        if (!isTag(this[i])) continue
        var className = getAttr(this[i], 'class'),
          numClasses,
          setClass
        if (!className) {
          setAttr(this[i], 'class', classNames.join(' ').trim())
        } else {
          setClass = ' ' + className + ' '
          numClasses = classNames.length
          for (var j = 0; j < numClasses; j++) {
            var appendClass = classNames[j] + ' '
            if (!~setClass.indexOf(' ' + appendClass)) setClass += appendClass
          }
          setAttr(this[i], 'class', setClass.trim())
        }
      }
      return this
    })
    var splitClass = function(className) {
      return className ? className.trim().split(rspace) : []
    }
    var removeClass = (exports.removeClass = function(value) {
      var classes, numClasses, removeAll
      if (typeof value === 'function') {
        return domEach(this, function(i, el) {
          removeClass.call([el], value.call(el, i, el.attribs['class'] || ''))
        })
      }
      classes = splitClass(value)
      numClasses = classes.length
      removeAll = arguments.length === 0
      return domEach(this, function(i, el) {
        if (!isTag(el)) return
        if (removeAll) {
          el.attribs.class = ''
        } else {
          var elClasses = splitClass(el.attribs.class),
            index,
            changed
          for (var j = 0; j < numClasses; j++) {
            index = elClasses.indexOf(classes[j])
            if (index >= 0) {
              elClasses.splice(index, 1)
              changed = true
              j--
            }
          }
          if (changed) {
            el.attribs.class = elClasses.join(' ')
          }
        }
      })
    })
    var toggleClass = (exports.toggleClass = function(value, stateVal) {
      if (typeof value === 'function') {
        return domEach(this, function(i, el) {
          toggleClass.call(
            [el],
            value.call(el, i, el.attribs['class'] || '', stateVal),
            stateVal
          )
        })
      }
      if (!value || typeof value !== 'string') return this
      var classNames = value.split(rspace),
        numClasses = classNames.length,
        state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0,
        numElements = this.length,
        elementClasses,
        index
      for (var i = 0; i < numElements; i++) {
        if (!isTag(this[i])) continue
        elementClasses = splitClass(this[i].attribs.class)
        for (var j = 0; j < numClasses; j++) {
          index = elementClasses.indexOf(classNames[j])
          if (state >= 0 && index < 0) {
            elementClasses.push(classNames[j])
          } else if (state <= 0 && index >= 0) {
            elementClasses.splice(index, 1)
          }
        }
        this[i].attribs.class = elementClasses.join(' ')
      }
      return this
    })
    var is = (exports.is = function(selector) {
      if (selector) {
        return this.filter(selector).length > 0
      }
      return false
    })
  },
  function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3),
      select = __webpack_require__(42),
      utils = __webpack_require__(13),
      domEach = utils.domEach,
      uniqueSort = __webpack_require__(8).DomUtils.uniqueSort,
      isTag = utils.isTag
    var find = (exports.find = function(selector) {
      var elems = _.reduce(
        this,
        function(memo, elem) {
          return memo.concat(_.filter(elem.children, isTag))
        },
        []
      )
      return this._make(select(selector, elems, this.options))
    })
    var parent = (exports.parent = function(selector) {
      var set = []
      var $set
      domEach(this, function(idx, elem) {
        var parentElem = elem.parent
        if (parentElem && set.indexOf(parentElem) < 0) {
          set.push(parentElem)
        }
      })
      if (arguments.length) {
        set = filter.call(set, selector, this)
      }
      return this._make(set)
    })
    var parents = (exports.parents = function(selector) {
      var parentNodes = []
      this.get()
        .reverse()
        .forEach(function(elem) {
          traverseParents(
            this,
            elem.parent,
            selector,
            Infinity
          ).forEach(function(node) {
            if (parentNodes.indexOf(node) === -1) {
              parentNodes.push(node)
            }
          })
        }, this)
      return this._make(parentNodes)
    })
    var parentsUntil = (exports.parentsUntil = function(selector, filter) {
      var parentNodes = [],
        untilNode,
        untilNodes
      if (typeof selector === 'string') {
        untilNode = select(selector, this.parents().toArray(), this.options)[0]
      } else if (selector && selector.cheerio) {
        untilNodes = selector.toArray()
      } else if (selector) {
        untilNode = selector
      }
      this.toArray()
        .reverse()
        .forEach(function(elem) {
          while ((elem = elem.parent)) {
            if (
              (untilNode && elem !== untilNode) ||
              (untilNodes && untilNodes.indexOf(elem) === -1) ||
              (!untilNode && !untilNodes)
            ) {
              if (isTag(elem) && parentNodes.indexOf(elem) === -1) {
                parentNodes.push(elem)
              }
            } else {
              break
            }
          }
        }, this)
      return this._make(
        filter ? select(filter, parentNodes, this.options) : parentNodes
      )
    })
    var closest = (exports.closest = function(selector) {
      var set = []
      if (!selector) {
        return this._make(set)
      }
      domEach(
        this,
        function(idx, elem) {
          var closestElem = traverseParents(this, elem, selector, 1)[0]
          if (closestElem && set.indexOf(closestElem) < 0) {
            set.push(closestElem)
          }
        }.bind(this)
      )
      return this._make(set)
    })
    var next = (exports.next = function(selector) {
      if (!this[0]) {
        return this
      }
      var elems = []
      _.forEach(this, function(elem) {
        while ((elem = elem.next)) {
          if (isTag(elem)) {
            elems.push(elem)
            return
          }
        }
      })
      return selector ? filter.call(elems, selector, this) : this._make(elems)
    })
    var nextAll = (exports.nextAll = function(selector) {
      if (!this[0]) {
        return this
      }
      var elems = []
      _.forEach(this, function(elem) {
        while ((elem = elem.next)) {
          if (isTag(elem) && elems.indexOf(elem) === -1) {
            elems.push(elem)
          }
        }
      })
      return selector ? filter.call(elems, selector, this) : this._make(elems)
    })
    var nextUntil = (exports.nextUntil = function(selector, filterSelector) {
      if (!this[0]) {
        return this
      }
      var elems = [],
        untilNode,
        untilNodes
      if (typeof selector === 'string') {
        untilNode = select(selector, this.nextAll().get(), this.options)[0]
      } else if (selector && selector.cheerio) {
        untilNodes = selector.get()
      } else if (selector) {
        untilNode = selector
      }
      _.forEach(this, function(elem) {
        while ((elem = elem.next)) {
          if (
            (untilNode && elem !== untilNode) ||
            (untilNodes && untilNodes.indexOf(elem) === -1) ||
            (!untilNode && !untilNodes)
          ) {
            if (isTag(elem) && elems.indexOf(elem) === -1) {
              elems.push(elem)
            }
          } else {
            break
          }
        }
      })
      return filterSelector
        ? filter.call(elems, filterSelector, this)
        : this._make(elems)
    })
    var prev = (exports.prev = function(selector) {
      if (!this[0]) {
        return this
      }
      var elems = []
      _.forEach(this, function(elem) {
        while ((elem = elem.prev)) {
          if (isTag(elem)) {
            elems.push(elem)
            return
          }
        }
      })
      return selector ? filter.call(elems, selector, this) : this._make(elems)
    })
    var prevAll = (exports.prevAll = function(selector) {
      if (!this[0]) {
        return this
      }
      var elems = []
      _.forEach(this, function(elem) {
        while ((elem = elem.prev)) {
          if (isTag(elem) && elems.indexOf(elem) === -1) {
            elems.push(elem)
          }
        }
      })
      return selector ? filter.call(elems, selector, this) : this._make(elems)
    })
    var prevUntil = (exports.prevUntil = function(selector, filterSelector) {
      if (!this[0]) {
        return this
      }
      var elems = [],
        untilNode,
        untilNodes
      if (typeof selector === 'string') {
        untilNode = select(selector, this.prevAll().get(), this.options)[0]
      } else if (selector && selector.cheerio) {
        untilNodes = selector.get()
      } else if (selector) {
        untilNode = selector
      }
      _.forEach(this, function(elem) {
        while ((elem = elem.prev)) {
          if (
            (untilNode && elem !== untilNode) ||
            (untilNodes && untilNodes.indexOf(elem) === -1) ||
            (!untilNode && !untilNodes)
          ) {
            if (isTag(elem) && elems.indexOf(elem) === -1) {
              elems.push(elem)
            }
          } else {
            break
          }
        }
      })
      return filterSelector
        ? filter.call(elems, filterSelector, this)
        : this._make(elems)
    })
    var siblings = (exports.siblings = function(selector) {
      var parent = this.parent()
      var elems = _.filter(
        parent ? parent.children() : this.siblingsAndMe(),
        function(elem) {
          return isTag(elem) && !this.is(elem)
        },
        this
      )
      if (selector !== undefined) {
        return filter.call(elems, selector, this)
      } else {
        return this._make(elems)
      }
    })
    var children = (exports.children = function(selector) {
      var elems = _.reduce(
        this,
        function(memo, elem) {
          return memo.concat(_.filter(elem.children, isTag))
        },
        []
      )
      if (selector === undefined) return this._make(elems)
      else if (typeof selector === 'number') return this._make(elems[selector])
      return filter.call(elems, selector, this)
    })
    var contents = (exports.contents = function() {
      return this._make(
        _.reduce(
          this,
          function(all, elem) {
            all.push.apply(all, elem.children)
            return all
          },
          []
        )
      )
    })
    var each = (exports.each = function(fn) {
      var i = 0,
        len = this.length
      while (i < len && fn.call(this[i], i, this[i]) !== false) ++i
      return this
    })
    var map = (exports.map = function(fn) {
      return this._make(
        _.reduce(
          this,
          function(memo, el, i) {
            var val = fn.call(el, i, el)
            return val == null ? memo : memo.concat(val)
          },
          []
        )
      )
    })
    var filter = (exports.filter = function(match, container) {
      container = container || this
      var make = _.bind(container._make, container)
      var filterFn
      if (typeof match === 'string') {
        filterFn = select.compile(match, container.options)
      } else if (typeof match === 'function') {
        filterFn = function(el, i) {
          return match.call(el, i, el)
        }
      } else if (match.cheerio) {
        filterFn = match.is.bind(match)
      } else {
        filterFn = function(el) {
          return match === el
        }
      }
      return make(_.filter(this, filterFn))
    })
    var first = (exports.first = function() {
      return this.length > 1 ? this._make(this[0]) : this
    })
    var last = (exports.last = function() {
      return this.length > 1 ? this._make(this[this.length - 1]) : this
    })
    var eq = (exports.eq = function(i) {
      i = +i
      if (i === 0 && this.length <= 1) return this
      if (i < 0) i = this.length + i
      return this[i] ? this._make(this[i]) : this._make([])
    })
    var get = (exports.get = function(i) {
      if (i == null) {
        return Array.prototype.slice.call(this)
      } else {
        return this[i < 0 ? this.length + i : i]
      }
    })
    var slice = (exports.slice = function() {
      return this._make([].slice.apply(this, arguments))
    })
    function traverseParents(self, elem, selector, limit) {
      var elems = []
      while (elem && elems.length < limit) {
        if (!selector || filter.call([elem], selector, self).length) {
          elems.push(elem)
        }
        elem = elem.parent
      }
      return elems
    }
    var end = (exports.end = function() {
      return this.prevObject || this._make([])
    })
    var add = (exports.add = function(other, context) {
      var selection = this._make(other, context)
      var contents = uniqueSort(selection.get().concat(this.get()))
      for (var i = 0; i < contents.length; ++i) {
        selection[i] = contents[i]
      }
      selection.length = contents.length
      return selection
    })
  },
  function(module, exports, __webpack_require__) {
    var ElementType = __webpack_require__(25),
      isTag = ElementType.isTag
    module.exports = {
      getInnerHTML: getInnerHTML,
      getOuterHTML: getOuterHTML,
      getText: getText
    }
    function getInnerHTML(elem) {
      return elem.children ? elem.children.map(getOuterHTML).join('') : ''
    }
    var booleanAttribs = {
      __proto__: null,
      async: true,
      autofocus: true,
      autoplay: true,
      checked: true,
      controls: true,
      defer: true,
      disabled: true,
      hidden: true,
      loop: true,
      multiple: true,
      open: true,
      readonly: true,
      required: true,
      scoped: true,
      selected: true
    }
    var emptyTags = {
      __proto__: null,
      area: true,
      base: true,
      basefont: true,
      br: true,
      col: true,
      frame: true,
      hr: true,
      img: true,
      input: true,
      isindex: true,
      link: true,
      meta: true,
      param: true,
      embed: true
    }
    function getOuterHTML(elem) {
      switch (elem.type) {
        case ElementType.Text:
          return elem.data

        case ElementType.Comment:
          return '\x3c!--' + elem.data + '--\x3e'

        case ElementType.Directive:
          return '<' + elem.data + '>'

        case ElementType.CDATA:
          return '<!CDATA ' + getInnerHTML(elem) + ']]>'
      }
      var ret = '<' + elem.name
      if ('attribs' in elem) {
        for (var attr in elem.attribs) {
          if (elem.attribs.hasOwnProperty(attr)) {
            ret += ' ' + attr
            var value = elem.attribs[attr]
            if (value == null) {
              if (!(attr in booleanAttribs)) {
                ret += '=""'
              }
            } else {
              ret += '="' + value + '"'
            }
          }
        }
      }
      if (elem.name in emptyTags && elem.children.length === 0) {
        return ret + ' />'
      } else {
        return ret + '>' + getInnerHTML(elem) + '</' + elem.name + '>'
      }
    }
    function getText(elem) {
      if (Array.isArray(elem)) return elem.map(getText).join('')
      if (isTag(elem) || elem.type === ElementType.CDATA)
        return getText(elem.children)
      if (elem.type === ElementType.Text) return elem.data
      return ''
    }
  },
  function(module, exports) {
    var getChildren = (exports.getChildren = function(elem) {
      return elem.children
    })
    var getParent = (exports.getParent = function(elem) {
      return elem.parent
    })
    exports.getSiblings = function(elem) {
      var parent = getParent(elem)
      return parent ? getChildren(parent) : [elem]
    }
    exports.getAttributeValue = function(elem, name) {
      return elem.attribs && elem.attribs[name]
    }
    exports.hasAttrib = function(elem, name) {
      return hasOwnProperty.call(elem.attribs, name)
    }
    exports.getName = function(elem) {
      return elem.name
    }
  },
  function(module, exports) {
    exports.removeElement = function(elem) {
      if (elem.prev) elem.prev.next = elem.next
      if (elem.next) elem.next.prev = elem.prev
      if (elem.parent) {
        var childs = elem.parent.children
        childs.splice(childs.lastIndexOf(elem), 1)
      }
    }
    exports.replaceElement = function(elem, replacement) {
      var prev = (replacement.prev = elem.prev)
      if (prev) {
        prev.next = replacement
      }
      var next = (replacement.next = elem.next)
      if (next) {
        next.prev = replacement
      }
      var parent = (replacement.parent = elem.parent)
      if (parent) {
        var childs = parent.children
        childs[childs.lastIndexOf(elem)] = replacement
      }
    }
    exports.appendChild = function(elem, child) {
      child.parent = elem
      if (elem.children.push(child) !== 1) {
        var sibling = elem.children[elem.children.length - 2]
        sibling.next = child
        child.prev = sibling
        child.next = null
      }
    }
    exports.append = function(elem, next) {
      var parent = elem.parent,
        currNext = elem.next
      next.next = currNext
      next.prev = elem
      elem.next = next
      next.parent = parent
      if (currNext) {
        currNext.prev = next
        if (parent) {
          var childs = parent.children
          childs.splice(childs.lastIndexOf(currNext), 0, next)
        }
      } else if (parent) {
        parent.children.push(next)
      }
    }
    exports.prepend = function(elem, prev) {
      var parent = elem.parent
      if (parent) {
        var childs = parent.children
        childs.splice(childs.lastIndexOf(elem), 0, prev)
      }
      if (elem.prev) {
        elem.prev.next = prev
      }
      prev.parent = parent
      prev.prev = elem.prev
      prev.next = elem
      elem.prev = prev
    }
  },
  function(module, exports, __webpack_require__) {
    var isTag = __webpack_require__(25).isTag
    module.exports = {
      filter: filter,
      find: find,
      findOneChild: findOneChild,
      findOne: findOne,
      existsOne: existsOne,
      findAll: findAll
    }
    function filter(test, element, recurse, limit) {
      if (!Array.isArray(element)) element = [element]
      if (typeof limit !== 'number' || !isFinite(limit)) {
        limit = Infinity
      }
      return find(test, element, recurse !== false, limit)
    }
    function find(test, elems, recurse, limit) {
      var result = [],
        childs
      for (var i = 0, j = elems.length; i < j; i++) {
        if (test(elems[i])) {
          result.push(elems[i])
          if (--limit <= 0) break
        }
        childs = elems[i].children
        if (recurse && childs && childs.length > 0) {
          childs = find(test, childs, recurse, limit)
          result = result.concat(childs)
          limit -= childs.length
          if (limit <= 0) break
        }
      }
      return result
    }
    function findOneChild(test, elems) {
      for (var i = 0, l = elems.length; i < l; i++) {
        if (test(elems[i])) return elems[i]
      }
      return null
    }
    function findOne(test, elems) {
      var elem = null
      for (var i = 0, l = elems.length; i < l && !elem; i++) {
        if (!isTag(elems[i])) {
          continue
        } else if (test(elems[i])) {
          elem = elems[i]
        } else if (elems[i].children.length > 0) {
          elem = findOne(test, elems[i].children)
        }
      }
      return elem
    }
    function existsOne(test, elems) {
      for (var i = 0, l = elems.length; i < l; i++) {
        if (
          isTag(elems[i]) &&
          (test(elems[i]) ||
            (elems[i].children.length > 0 &&
              existsOne(test, elems[i].children)))
        ) {
          return true
        }
      }
      return false
    }
    function findAll(test, elems) {
      var result = []
      for (var i = 0, j = elems.length; i < j; i++) {
        if (!isTag(elems[i])) continue
        if (test(elems[i])) result.push(elems[i])
        if (elems[i].children.length > 0) {
          result = result.concat(findAll(test, elems[i].children))
        }
      }
      return result
    }
  },
  function(module, exports, __webpack_require__) {
    var ElementType = __webpack_require__(25)
    var isTag = (exports.isTag = ElementType.isTag)
    exports.testElement = function(options, element) {
      for (var key in options) {
        if (!options.hasOwnProperty(key));
        else if (key === 'tag_name') {
          if (!isTag(element) || !options.tag_name(element.name)) {
            return false
          }
        } else if (key === 'tag_type') {
          if (!options.tag_type(element.type)) return false
        } else if (key === 'tag_contains') {
          if (isTag(element) || !options.tag_contains(element.data)) {
            return false
          }
        } else if (!element.attribs || !options[key](element.attribs[key])) {
          return false
        }
      }
      return true
    }
    var Checks = {
      tag_name: function(name) {
        if (typeof name === 'function') {
          return function(elem) {
            return isTag(elem) && name(elem.name)
          }
        } else if (name === '*') {
          return isTag
        } else {
          return function(elem) {
            return isTag(elem) && elem.name === name
          }
        }
      },
      tag_type: function(type) {
        if (typeof type === 'function') {
          return function(elem) {
            return type(elem.type)
          }
        } else {
          return function(elem) {
            return elem.type === type
          }
        }
      },
      tag_contains: function(data) {
        if (typeof data === 'function') {
          return function(elem) {
            return !isTag(elem) && data(elem.data)
          }
        } else {
          return function(elem) {
            return !isTag(elem) && elem.data === data
          }
        }
      }
    }
    function getAttribCheck(attrib, value) {
      if (typeof value === 'function') {
        return function(elem) {
          return elem.attribs && value(elem.attribs[attrib])
        }
      } else {
        return function(elem) {
          return elem.attribs && elem.attribs[attrib] === value
        }
      }
    }
    function combineFuncs(a, b) {
      return function(elem) {
        return a(elem) || b(elem)
      }
    }
    exports.getElements = function(options, element, recurse, limit) {
      var funcs = Object.keys(options).map(function(key) {
        var value = options[key]
        return key in Checks ? Checks[key](value) : getAttribCheck(key, value)
      })
      return funcs.length === 0
        ? []
        : this.filter(funcs.reduce(combineFuncs), element, recurse, limit)
    }
    exports.getElementById = function(id, element, recurse) {
      if (!Array.isArray(element)) element = [element]
      return this.findOne(getAttribCheck('id', id), element, recurse !== false)
    }
    exports.getElementsByTagName = function(name, element, recurse, limit) {
      return this.filter(Checks.tag_name(name), element, recurse, limit)
    }
    exports.getElementsByTagType = function(type, element, recurse, limit) {
      return this.filter(Checks.tag_type(type), element, recurse, limit)
    }
  },
  function(module, exports) {
    exports.removeSubsets = function(nodes) {
      var idx = nodes.length,
        node,
        ancestor,
        replace
      while (--idx > -1) {
        node = ancestor = nodes[idx]
        nodes[idx] = null
        replace = true
        while (ancestor) {
          if (nodes.indexOf(ancestor) > -1) {
            replace = false
            nodes.splice(idx, 1)
            break
          }
          ancestor = ancestor.parent
        }
        if (replace) {
          nodes[idx] = node
        }
      }
      return nodes
    }
  },
  function(module, exports, __webpack_require__) {
    var BaseFuncs = __webpack_require__(15),
      trueFunc = BaseFuncs.trueFunc,
      falseFunc = BaseFuncs.falseFunc
    module.exports = function nthCheck(formula) {
      return compile(parse(formula))
    }
    module.exports.parse = parse
    module.exports.compile = compile
    var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/
    function parse(formula) {
      formula = formula.trim().toLowerCase()
      if (formula === 'even') {
        return [2, 0]
      } else if (formula === 'odd') {
        return [2, 1]
      } else {
        var parsed = formula.match(re_nthElement)
        if (!parsed) {
          throw new SyntaxError(
            "n-th rule couldn't be parsed ('" + formula + "')"
          )
        }
        var a
        if (parsed[1]) {
          a = parseInt(parsed[1], 10)
          if (!a) {
            if (parsed[1].charAt(0) === '-') a = -1
            else a = 1
          }
        } else a = 0
        return [a, parsed[3] ? parseInt((parsed[2] || '') + parsed[3], 10) : 0]
      }
    }
    function compile(parsed) {
      var a = parsed[0],
        b = parsed[1] - 1
      if (b < 0 && a <= 0) return falseFunc
      if (a === -1)
        return function(pos) {
          return pos <= b
        }
      if (a === 0)
        return function(pos) {
          return pos === b
        }
      if (a === 1)
        return b < 0
          ? trueFunc
          : function(pos) {
              return pos >= b
            }
      var bMod = b % a
      if (bMod < 0) bMod += a
      if (a > 1) {
        return function(pos) {
          return pos >= b && pos % a === bMod
        }
      }
      a *= -1
      return function(pos) {
        return pos <= b && pos % a === bMod
      }
    }
  },
  function(module, exports, __webpack_require__) {
    module.exports = compile
    module.exports.compileUnsafe = compileUnsafe
    var parse = __webpack_require__(111),
      DomUtils = __webpack_require__(14),
      isTag = DomUtils.isTag,
      Rules = __webpack_require__(112),
      sortRules = __webpack_require__(113),
      BaseFuncs = __webpack_require__(15),
      trueFunc = BaseFuncs.trueFunc,
      falseFunc = BaseFuncs.falseFunc
    function compile(selector, options) {
      var next = compileUnsafe(selector, options)
      return function base(elem) {
        return isTag(elem) && next(elem)
      }
    }
    function compileUnsafe(selector, options) {
      return parse(selector, options)
        .map(compileRules)
        .reduce(reduceRules, falseFunc)
    }
    function compileRules(arr) {
      if (arr.length === 0) return falseFunc
      return sortRules(arr).reduce(function(func, rule) {
        if (func === falseFunc) return func
        return Rules[rule.type](func, rule)
      }, trueFunc)
    }
    function reduceRules(a, b) {
      if (b === falseFunc || a === trueFunc) {
        return a
      }
      if (a === falseFunc || b === trueFunc) {
        return b
      }
      return function combine(elem) {
        return a(elem) || b(elem)
      }
    }
    var Pseudos = __webpack_require__(24),
      filters = Pseudos.filters,
      isParent = Pseudos.pseudos.parent,
      existsOne = DomUtils.existsOne,
      getChildren = DomUtils.getChildren
    filters.not = function(next, select) {
      var func = compileUnsafe(select)
      if (func === falseFunc) return next
      if (func === trueFunc) return falseFunc
      return function(elem) {
        return !func(elem) && next(elem)
      }
    }
    filters.has = function(next, selector) {
      var func = compile(selector)
      if (func === falseFunc) return falseFunc
      if (func === trueFunc)
        return function(elem) {
          return isParent(elem) && next(elem)
        }
      return function has(elem) {
        return next(elem) && existsOne(func, getChildren(elem))
      }
    }
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    module.exports = parse
    var re_ws = /^\s/,
      re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
      re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi,
      re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])(.*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/
    var actionTypes = {
      __proto__: null,
      undefined: 'exists',
      '': 'equals',
      '~': 'element',
      '^': 'start',
      $: 'end',
      '*': 'any',
      '!': 'not',
      '|': 'hyphen'
    }
    var simpleSelectors = {
      __proto__: null,
      '>': 'child',
      '<': 'parent',
      '~': 'sibling',
      '+': 'adjacent'
    }
    var attribSelectors = {
      __proto__: null,
      '#': ['id', 'equals'],
      '.': ['class', 'element']
    }
    function funescape(_, escaped, escapedWhitespace) {
      var high = '0x' + escaped - 65536
      return high !== high || escapedWhitespace
        ? escaped
        : high < 0
          ? String.fromCharCode(high + 65536)
          : String.fromCharCode((high >> 10) | 55296, (high & 1023) | 56320)
    }
    function unescapeCSS(str) {
      return str.replace(re_escape, funescape)
    }
    function getClosingPos(selector) {
      var pos = 1,
        counter = 1,
        len = selector.length
      for (; counter > 0 && pos < len; pos++) {
        if (selector.charAt(pos) === '(') counter++
        else if (selector.charAt(pos) === ')') counter--
      }
      return pos
    }
    function parse(selector, options) {
      selector = (selector + '').trimLeft()
      var subselects = [],
        tokens = [],
        sawWS = false,
        data,
        firstChar,
        name
      function getName() {
        var sub = selector.match(re_name)[0]
        selector = selector.substr(sub.length)
        return unescapeCSS(sub)
      }
      while (selector !== '') {
        if (re_name.test(selector)) {
          if (sawWS) {
            tokens.push({
              type: 'descendant'
            })
            sawWS = false
          }
          name = getName()
          if (
            !options ||
            ('lowerCaseTags' in options
              ? options.lowerCaseTags
              : !options.xmlMode)
          ) {
            name = name.toLowerCase()
          }
          tokens.push({
            type: 'tag',
            name: name
          })
        } else if (re_ws.test(selector)) {
          sawWS = true
          selector = selector.trimLeft()
        } else {
          firstChar = selector.charAt(0)
          selector = selector.substr(1)
          if (firstChar in simpleSelectors) {
            tokens.push({
              type: simpleSelectors[firstChar]
            })
            selector = selector.trimLeft()
            sawWS = false
            continue
          } else if (firstChar === ',') {
            if (tokens.length === 0) {
              throw new SyntaxError('empty sub-selector')
            }
            subselects.push(tokens)
            tokens = []
            selector = selector.trimLeft()
            sawWS = false
            continue
          } else if (sawWS) {
            tokens.push({
              type: 'descendant'
            })
            sawWS = false
          }
          if (firstChar === '*') {
            tokens.push({
              type: 'universal'
            })
          } else if (firstChar in attribSelectors) {
            tokens.push({
              type: 'attribute',
              name: attribSelectors[firstChar][0],
              action: attribSelectors[firstChar][1],
              value: getName(),
              ignoreCase: false
            })
          } else if (firstChar === '[') {
            data = selector.match(re_attr)
            if (!data) {
              throw new SyntaxError('Malformed attribute selector: ' + selector)
            }
            selector = selector.substr(data[0].length)
            name = unescapeCSS(data[1])
            if (
              !options ||
              ('lowerCaseAttributeNames' in options
                ? options.lowerCaseAttributeNames
                : !options.xmlMode)
            ) {
              name = name.toLowerCase()
            }
            tokens.push({
              type: 'attribute',
              name: name,
              action: actionTypes[data[2]],
              value: unescapeCSS(data[4] || data[5] || ''),
              ignoreCase: !!data[6]
            })
          } else if (firstChar === ':') {
            name = getName().toLowerCase()
            data = null
            if (selector.charAt(0) === '(') {
              var pos = getClosingPos(selector)
              data = selector.substr(1, pos - 2)
              selector = selector.substr(pos)
            }
            tokens.push({
              type: 'pseudo',
              name: name,
              data: data
            })
          } else {
            throw new SyntaxError('Unmatched selector: ' + firstChar + selector)
          }
        }
      }
      if (subselects.length > 0 && tokens.length === 0) {
        throw new SyntaxError('empty sub-selector')
      }
      subselects.push(tokens)
      return subselects
    }
  },
  function(module, exports, __webpack_require__) {
    var DomUtils = __webpack_require__(14),
      isTag = DomUtils.isTag,
      getParent = DomUtils.getParent,
      getChildren = DomUtils.getChildren,
      getSiblings = DomUtils.getSiblings,
      getName = DomUtils.getName
    module.exports = {
      __proto__: null,
      attribute: __webpack_require__(43).compile,
      pseudo: __webpack_require__(24).compile,
      tag: function(next, data) {
        var name = data.name
        return function tag(elem) {
          return getName(elem) === name && next(elem)
        }
      },
      descendant: function(next) {
        return function descendant(elem) {
          var found = false
          while (!found && (elem = getParent(elem))) {
            found = next(elem)
          }
          return found
        }
      },
      parent: function(next) {
        return function parent(elem) {
          return getChildren(elem).some(next)
        }
      },
      child: function(next) {
        return function child(elem) {
          var parent = getParent(elem)
          return !!parent && next(parent)
        }
      },
      sibling: function(next) {
        return function sibling(elem) {
          var siblings = getSiblings(elem)
          for (var i = 0; i < siblings.length; i++) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) break
              if (next(siblings[i])) return true
            }
          }
          return false
        }
      },
      adjacent: function(next) {
        return function adjacent(elem) {
          var siblings = getSiblings(elem),
            lastElement
          for (var i = 0; i < siblings.length; i++) {
            if (isTag(siblings[i])) {
              if (siblings[i] === elem) break
              lastElement = siblings[i]
            }
          }
          return !!lastElement && next(lastElement)
        }
      },
      universal: function(next) {
        return next
      }
    }
  },
  function(module, exports) {
    module.exports = sortByProcedure
    var ATTRIBUTE = 1
    var procedure = {
      __proto__: null,
      universal: 5,
      tag: 3,
      attribute: ATTRIBUTE,
      pseudo: 0,
      descendant: -1,
      child: -1,
      parent: -1,
      sibling: -1,
      adjacent: -1
    }
    var attributes = {
      __proto__: null,
      exists: 8,
      equals: 7,
      not: 6,
      start: 5,
      end: 4,
      any: 3,
      hyphen: 2,
      element: 1
    }
    function sortByProcedure(arr) {
      for (var i = 1; i < arr.length; i++) {
        var procNew = procedure[arr[i].type]
        if (procNew < 0) continue
        for (var j = i - 1; j >= 0; j--) {
          if (
            procNew > procedure[arr[j].type] ||
            !(
              procNew === ATTRIBUTE &&
              procedure[arr[j].type] === ATTRIBUTE &&
              attributes[arr[i].action] <= attributes[arr[j].action]
            )
          )
            break
          var tmp = arr[j + 1]
          arr[j + 1] = arr[j]
          arr[j] = tmp
        }
      }
      return arr
    }
  },
  function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3),
      parse = __webpack_require__(20),
      $ = __webpack_require__(44),
      updateDOM = parse.update,
      evaluate = parse.evaluate,
      utils = __webpack_require__(13),
      domEach = utils.domEach,
      encode = utils.encode,
      slice = Array.prototype.slice
    exports._makeDomArray = function makeDomArray(elem) {
      if (elem == null) {
        return []
      } else if (elem.cheerio) {
        return elem.get()
      } else if (Array.isArray(elem)) {
        return _.flatten(elem.map(makeDomArray, this))
      } else if (typeof elem === 'string') {
        return evaluate(elem, this.options)
      } else {
        return [elem]
      }
    }
    var _insert = function(concatenator) {
      return function() {
        var self = this,
          elems = slice.call(arguments),
          dom = this._makeDomArray(elems)
        if (typeof elems[0] === 'function') {
          return domEach(this, function(i, el) {
            dom = self._makeDomArray(elems[0].call(el, i, $.html(el.children)))
            concatenator(dom, el.children, el)
          })
        } else {
          return domEach(this, function(i, el) {
            concatenator(dom, el.children, el)
          })
        }
      }
    }
    var uniqueSplice = function(
      array,
      spliceIdx,
      spliceCount,
      newElems,
      parent
    ) {
      var spliceArgs = [spliceIdx, spliceCount].concat(newElems),
        prev = array[spliceIdx - 1] || null,
        next = array[spliceIdx] || null
      var idx, len, prevIdx, node, oldParent
      for (idx = 0, len = newElems.length; idx < len; ++idx) {
        node = newElems[idx]
        oldParent = node.parent || node.root
        prevIdx = oldParent && oldParent.children.indexOf(newElems[idx])
        if (oldParent && prevIdx > -1) {
          oldParent.children.splice(prevIdx, 1)
          if (parent === oldParent && spliceIdx > prevIdx) {
            spliceArgs[0]--
          }
        }
        node.root = null
        node.parent = parent
        if (node.prev) {
          node.prev.next = node.next || null
        }
        if (node.next) {
          node.next.prev = node.prev || null
        }
        node.prev = newElems[idx - 1] || prev
        node.next = newElems[idx + 1] || next
      }
      if (prev) {
        prev.next = newElems[0]
      }
      if (next) {
        next.prev = newElems[newElems.length - 1]
      }
      return array.splice.apply(array, spliceArgs)
    }
    var append = (exports.append = _insert(function(dom, children, parent) {
      uniqueSplice(children, children.length, 0, dom, parent)
    }))
    var prepend = (exports.prepend = _insert(function(dom, children, parent) {
      uniqueSplice(children, 0, 0, dom, parent)
    }))
    var after = (exports.after = function() {
      var elems = slice.call(arguments),
        dom = this._makeDomArray(elems),
        self = this
      domEach(this, function(i, el) {
        var parent = el.parent || el.root
        if (!parent) {
          return
        }
        var siblings = parent.children,
          index = siblings.indexOf(el)
        if (!~index) return
        if (typeof elems[0] === 'function') {
          dom = self._makeDomArray(elems[0].call(el, i))
        }
        uniqueSplice(siblings, ++index, 0, dom, parent)
      })
      return this
    })
    var before = (exports.before = function() {
      var elems = slice.call(arguments),
        dom = this._makeDomArray(elems),
        self = this
      domEach(this, function(i, el) {
        var parent = el.parent || el.root
        if (!parent) {
          return
        }
        var siblings = parent.children,
          index = siblings.indexOf(el)
        if (!~index) return
        if (typeof elems[0] === 'function') {
          dom = self._makeDomArray(elems[0].call(el, i))
        }
        uniqueSplice(siblings, index, 0, dom, parent)
      })
      return this
    })
    var remove = (exports.remove = function(selector) {
      var elems = this
      if (selector) elems = elems.filter(selector)
      domEach(elems, function(i, el) {
        var parent = el.parent || el.root
        if (!parent) {
          return
        }
        var siblings = parent.children,
          index = siblings.indexOf(el)
        if (!~index) return
        siblings.splice(index, 1)
        if (el.prev) {
          el.prev.next = el.next
        }
        if (el.next) {
          el.next.prev = el.prev
        }
        el.prev = el.next = el.parent = el.root = null
      })
      return this
    })
    var replaceWith = (exports.replaceWith = function(content) {
      var self = this
      domEach(this, function(i, el) {
        var parent = el.parent || el.root
        if (!parent) {
          return
        }
        var siblings = parent.children,
          dom = self._makeDomArray(
            typeof content === 'function' ? content.call(el, i, el) : content
          ),
          index
        updateDOM(dom, null)
        index = siblings.indexOf(el)
        uniqueSplice(siblings, index, 1, dom, parent)
        el.parent = el.prev = el.next = el.root = null
      })
      return this
    })
    var empty = (exports.empty = function() {
      domEach(this, function(i, el) {
        _.each(el.children, function(el) {
          el.next = el.prev = el.parent = null
        })
        el.children.length = 0
      })
      return this
    })
    var html = (exports.html = function(str) {
      if (str === undefined) {
        if (!this[0] || !this[0].children) return null
        return $.html(this[0].children, this.options)
      }
      var opts = this.options
      domEach(this, function(i, el) {
        _.each(el.children, function(el) {
          el.next = el.prev = el.parent = null
        })
        var content = str.cheerio ? str.clone().get() : evaluate(str, opts)
        updateDOM(content, el)
      })
      return this
    })
    var toString = (exports.toString = function() {
      return $.html(this)
    })
    var text = (exports.text = function(str) {
      if (str === undefined) {
        return $.text(this)
      } else if (typeof str === 'function') {
        return domEach(this, function(i, el) {
          var $el = [el]
          return text.call($el, str.call(el, i, $.text($el)))
        })
      }
      domEach(this, function(i, el) {
        _.each(el.children, function(el) {
          el.next = el.prev = el.parent = null
        })
        var elem = {
          data: str,
          type: 'text',
          parent: el,
          prev: null,
          next: null,
          children: []
        }
        updateDOM(elem, el)
      })
      return this
    })
    var clone = (exports.clone = function() {
      return this._make($.html(this))
    })
  },
  function(module, exports, __webpack_require__) {
    var _ = __webpack_require__(3),
      domEach = __webpack_require__(13).domEach
    var toString = Object.prototype.toString
    exports.css = function(prop, val) {
      if (arguments.length === 2 || toString.call(prop) === '[object Object]') {
        return domEach(this, function(idx, el) {
          setCss(el, prop, val, idx)
        })
      } else {
        return getCss(this[0], prop)
      }
    }
    function setCss(el, prop, val, idx) {
      if ('string' == typeof prop) {
        var styles = getCss(el)
        if (typeof val === 'function') {
          val = val.call(el, idx, el)
        }
        if (val === '') {
          delete styles[prop]
        } else if (val != null) {
          styles[prop] = val
        }
        el.attribs.style = stringify(styles)
      } else if ('object' == typeof prop) {
        Object.keys(prop).forEach(function(k) {
          setCss(el, k, prop[k])
        })
      }
    }
    function getCss(el, prop) {
      var styles = parse(el.attribs.style)
      if (typeof prop === 'string') {
        return styles[prop]
      } else if (Array.isArray(prop)) {
        return _.pick(styles, prop)
      } else {
        return styles
      }
    }
    function stringify(obj) {
      return Object.keys(obj || {}).reduce(function(str, prop) {
        return (str += '' + (str ? ' ' : '') + prop + ': ' + obj[prop] + ';')
      }, '')
    }
    function parse(styles) {
      styles = (styles || '').trim()
      if (!styles) return {}
      return styles.split(';').reduce(function(obj, str) {
        var n = str.indexOf(':')
        if (n < 1 || n === str.length - 1) return obj
        obj[str.slice(0, n).trim()] = str.slice(n + 1).trim()
        return obj
      }, {})
    }
  },
  function(module, exports) {
    module.exports = {
      _from: 'cheerio@~0.17.0',
      _id: 'cheerio@0.17.0',
      _inBundle: false,
      _integrity: 'sha1-+lrkLMYBIRM9KW0LRtmDIV9yaOo=',
      _location: '/cheerio',
      _phantomChildren: {
        'core-util-is': '1.0.2',
        entities: '1.1.1',
        inherits: '2.0.3'
      },
      _requested: {
        type: 'range',
        registry: true,
        raw: 'cheerio@~0.17.0',
        name: 'cheerio',
        escapedName: 'cheerio',
        rawSpec: '~0.17.0',
        saveSpec: null,
        fetchSpec: '~0.17.0'
      },
      _requiredBy: ['/@knod/unfluff'],
      _resolved: 'https://registry.npmjs.org/cheerio/-/cheerio-0.17.0.tgz',
      _shasum: 'fa5ae42cc60121133d296d0b46d983215f7268ea',
      _spec: 'cheerio@~0.17.0',
      _where:
        'C:\\Users\\Francis\\Downloads\\result\\result\\node_modules\\@knod\\unfluff',
      author: {
        name: 'Matt Mueller',
        email: 'mattmuelle@gmail.com',
        url: 'mat.io'
      },
      bugs: {
        url: 'https://github.com/MatthewMueller/cheerio/issues'
      },
      bundleDependencies: false,
      dependencies: {
        CSSselect: '~0.4.0',
        'dom-serializer': '~0.0.0',
        entities: '~1.1.1',
        htmlparser2: '~3.7.2',
        lodash: '~2.4.1'
      },
      deprecated: false,
      description:
        'Tiny, fast, and elegant implementation of core jQuery designed specifically for the server',
      devDependencies: {
        benchmark: '~1.0.0',
        'expect.js': '~0.3.1',
        jsdom: '~0.8.9',
        jshint: '~2.3.0',
        mocha: '*',
        xyz: '~0.3.0'
      },
      engines: {
        node: '>= 0.6'
      },
      homepage: 'https://github.com/MatthewMueller/cheerio#readme',
      keywords: [
        'htmlparser',
        'jquery',
        'selector',
        'scraper',
        'parser',
        'html'
      ],
      main: './index.js',
      name: 'cheerio',
      repository: {
        type: 'git',
        url: 'git://github.com/MatthewMueller/cheerio.git'
      },
      scripts: {
        test: 'make test'
      },
      version: '0.17.0'
    }
  },
  function(module, exports, __webpack_require__) {
    void function() {
      var _,
        addSiblings,
        biggestTitleChunk,
        cleanText,
        cleanTitle,
        formatter,
        getObjectTag,
        getScore,
        getSiblingsContent,
        getSiblingsScore,
        getVideoAttrs,
        isBoostable,
        isHighlinkDensity,
        isNodescoreThresholdMet,
        isTableAndNoParaExist,
        postCleanup,
        rawTitle,
        stopwords,
        updateNodeCount,
        updateScore
      _ = __webpack_require__(3)
      stopwords = __webpack_require__(45)
      formatter = __webpack_require__(119)
      module.exports = {
        date: function(doc) {
          var cache$, cache$1, cache$2, cache$3, cache$4, dateCandidates
          dateCandidates = doc(
            "meta[property='article:published_time'],     meta[itemprop*='datePublished'], meta[name='dcterms.modified'],     meta[name='dcterms.date'],     meta[name='DC.date.issued'],  meta[name='dc.date.issued'],     meta[name='dc.date.modified'], meta[name='dc.date.created'],     meta[name='DC.date'],     meta[name='DC.Date'],     meta[name='dc.date'],     meta[name='date'],     time[itemprop*='pubDate'],     time[itemprop*='pubdate'],     span[itemprop*='datePublished'],     span[property*='datePublished'],     p[itemprop*='datePublished'],     p[property*='datePublished'],     div[itemprop*='datePublished'],     div[property*='datePublished'],     li[itemprop*='datePublished'],     li[property*='datePublished'],     time,     span[class*='date'],     p[class*='date'],     div[class*='date']"
          )
          return (
            (null != dateCandidates &&
            null != (cache$ = dateCandidates.first()) &&
            null != (cache$1 = cache$.attr('content'))
              ? cache$1.trim()
              : void 0) ||
            (null != dateCandidates &&
            null != (cache$2 = dateCandidates.first()) &&
            null != (cache$3 = cache$2.attr('datetime'))
              ? cache$3.trim()
              : void 0) ||
            cleanText(
              null != dateCandidates &&
              null != (cache$4 = dateCandidates.first())
                ? cache$4.text()
                : void 0
            ) ||
            null
          )
        },
        copyright: function(doc) {
          var cache$, copyright, copyrightCandidates, text
          copyrightCandidates = doc(
            "p[class*='copyright'], div[class*='copyright'], span[class*='copyright'], li[class*='copyright'],     p[id*='copyright'], div[id*='copyright'], span[id*='copyright'], li[id*='copyright']"
          )
          text =
            null != copyrightCandidates &&
            null != (cache$ = copyrightCandidates.first())
              ? cache$.text()
              : void 0
          if (!text) {
            text = doc('body')
              .text()
              .replace(/\s*[\r\n]+\s*/g, '. ')
            if (!(text.indexOf('©') > 0)) return null
          }
          copyright = text
            .replace(/.*?©(\s*copyright)?([^,;:.|\r\n]+).*/gi, '$2')
            .trim()
          return cleanText(copyright)
        },
        author: function(doc) {
          var authorCandidates,
            authorList,
            cache$,
            cache$1,
            cache$2,
            cache$3,
            cache$4,
            cache$5,
            fallbackAuthor
          authorCandidates = doc(
            "meta[property='article:author'],     meta[property='og:article:author'], meta[name='author'],     meta[name='dcterms.creator'],     meta[name='DC.creator'],     meta[name='DC.Creator'],     meta[name='dc.creator'],     meta[name='creator']"
          )
          authorList = []
          authorCandidates.each(function() {
            var author, cache$, cache$1
            author =
              null != (cache$ = doc(this)) &&
              null != (cache$1 = cache$.attr('content'))
                ? cache$1.trim()
                : void 0
            if (author) return authorList.push(author)
          })
          if (authorList.length === 0) {
            fallbackAuthor =
              (null != (cache$ = doc("span[class*='author']").first())
                ? cache$.text()
                : void 0) ||
              (null != (cache$1 = doc("p[class*='author']").first())
                ? cache$1.text()
                : void 0) ||
              (null != (cache$2 = doc("div[class*='author']").first())
                ? cache$2.text()
                : void 0) ||
              (null != (cache$3 = doc("span[class*='byline']").first())
                ? cache$3.text()
                : void 0) ||
              (null != (cache$4 = doc("p[class*='byline']").first())
                ? cache$4.text()
                : void 0) ||
              (null != (cache$5 = doc("div[class*='byline']").first())
                ? cache$5.text()
                : void 0)
            if (fallbackAuthor) authorList.push(cleanText(fallbackAuthor))
          }
          return authorList
        },
        publisher: function(doc) {
          var cache$, cache$1, publisherCandidates
          publisherCandidates = doc(
            "meta[property='og:site_name'],     meta[name='dc.publisher'],     meta[name='DC.publisher'],     meta[name='DC.Publisher']"
          )
          if (
            null != publisherCandidates &&
            null != (cache$ = publisherCandidates.first()) &&
            null != (cache$1 = cache$.attr('content'))
          )
            return cache$1.trim()
        },
        title: function(doc) {
          var titleText
          titleText = rawTitle(doc)
          return cleanTitle(titleText, ['|', ' - ', '»', ':'])
        },
        softTitle: function(doc) {
          var titleText
          titleText = rawTitle(doc)
          return cleanTitle(titleText, ['|', ' - ', '»'])
        },
        text: function(doc, topNode, lang) {
          if (topNode) {
            topNode = postCleanup(doc, topNode, lang)
            return formatter(doc, topNode, lang)
          } else {
            return ''
          }
        },
        image: function(doc) {
          var images
          images = doc(
            "meta[property='og:image'], meta[itemprop=image], meta[name='twitter:image:src'], meta[name='twitter:image'], meta[name='twitter:image0']"
          )
          if (images.length > 0 && images.first().attr('content'))
            return images.first().attr('content')
          return null
        },
        links: function(doc, topNode, lang) {
          var gatherLinks, links
          links = []
          gatherLinks = function(doc, topNode) {
            var nodes
            nodes = topNode.find('a')
            return nodes.each(function() {
              var href, text
              href = doc(this).attr('href')
              text = doc(this).html()
              if (href && text)
                return links.push({
                  text: text,
                  href: href
                })
            })
          }
          if (topNode) {
            topNode = postCleanup(doc, topNode, lang)
            gatherLinks(doc, topNode)
          }
          return links
        },
        videos: function(doc, topNode) {
          var candidates, results, urls, videoList
          videoList = []
          candidates = doc(topNode).find('iframe, embed, object, video')
          candidates.each(function() {
            var candidate, tag
            candidate = doc(this)
            tag = candidate[0].name
            if (tag === 'embed') {
              if (
                candidate.parent() &&
                candidate.parent()[0].name === 'object'
              ) {
                return videoList.push(getObjectTag(doc, candidate))
              } else {
                return videoList.push(getVideoAttrs(doc, candidate))
              }
            } else if (tag === 'object') {
              return videoList.push(getObjectTag(doc, candidate))
            } else if (tag === 'iframe' || tag === 'video') {
              return videoList.push(getVideoAttrs(doc, candidate))
            }
          })
          urls = []
          results = []
          _.each(videoList, function(vid) {
            if (
              vid &&
              vid.height &&
              vid.width &&
              urls.indexOf(vid.src) === -1
            ) {
              results.push(vid)
              return urls.push(vid.src)
            }
          })
          return results
        },
        favicon: function(doc) {
          var tag
          tag = doc('link').filter(function() {
            var cache$
            return (
              (null != (cache$ = doc(this).attr('rel'))
                ? cache$.toLowerCase()
                : void 0) === 'shortcut icon'
            )
          })
          return tag.attr('href')
        },
        lang: function(doc) {
          var cache$, l, tag, value
          l = null != (cache$ = doc('html')) ? cache$.attr('lang') : void 0
          if (!l) {
            tag =
              doc('meta[name=lang]') || doc('meta[http-equiv=content-language]')
            l = null != tag ? tag.attr('content') : void 0
          }
          if (l) {
            value = l.slice(0, +1 + 1 || 9e9)
            if (/^[A-Za-z]{2}$/.test(value)) return value.toLowerCase()
          }
          return null
        },
        description: function(doc) {
          var cache$, cache$1, tag
          tag = doc("meta[name=description], meta[property='og:description']")
          if (
            null != tag &&
            null != (cache$ = tag.first()) &&
            null != (cache$1 = cache$.attr('content'))
          )
            return cache$1.trim()
        },
        keywords: function(doc) {
          var tag
          tag = doc('meta[name=keywords]')
          if (null != tag) return tag.attr('content')
        },
        canonicalLink: function(doc) {
          var tag
          tag = doc('link[rel=canonical]')
          if (null != tag) return tag.attr('href')
        },
        tags: function(doc) {
          var elements, tags
          elements = doc("a[rel='tag']")
          if (elements.length === 0) {
            elements = doc(
              "a[href*='/tag/'], a[href*='/tags/'], a[href*='/topic/'], a[href*='?keyword=']"
            )
            if (elements.length === 0) return []
          }
          tags = []
          elements.each(function() {
            var el, tag
            el = doc(this)
            tag = el.text().trim()
            tag.replace(/[\s\t\n]+/g, '')
            if (tag && tag.length > 0) return tags.push(tag)
          })
          return _.uniq(tags)
        },
        calculateBestNode: function(doc, lang) {
          var bottomNegativescoreNodes,
            cnt,
            i,
            negativeScoring,
            nodesNumber,
            nodesToCheck,
            nodesWithText,
            parentNodes,
            startingBoost,
            topNode,
            topNodeScore
          topNode = null
          nodesToCheck = doc('p, pre, td')
          startingBoost = 1
          cnt = 0
          i = 0
          parentNodes = []
          nodesWithText = []
          nodesToCheck.each(function() {
            var highLinkDensity, node, textNode, wordStats
            node = doc(this)
            textNode = node.text()
            wordStats = stopwords(textNode, lang)
            highLinkDensity = isHighlinkDensity(doc, node)
            if (wordStats.stopwordCount > 2 && !highLinkDensity)
              return nodesWithText.push(node)
          })
          nodesNumber = nodesWithText.length
          negativeScoring = 0
          bottomNegativescoreNodes = nodesNumber * 0.25
          _.each(nodesWithText, function(node) {
            var booster,
              boostScore,
              negscore,
              parentNode,
              parentParentNode,
              textNode,
              upscore,
              wordStats
            boostScore = 0
            if (isBoostable(doc, node, lang) === true)
              if (cnt >= 0) {
                boostScore = 1 / startingBoost * 50
                startingBoost += 1
              }
            if (nodesNumber > 15)
              if (nodesNumber - i <= bottomNegativescoreNodes) {
                booster = bottomNegativescoreNodes - (nodesNumber - i)
                boostScore = -1 * Math.pow(booster, 2)
                negscore = Math.abs(boostScore) + negativeScoring
                if (negscore > 40) boostScore = 5
              }
            textNode = node.text()
            wordStats = stopwords(textNode, lang)
            upscore = Math.floor(wordStats.stopwordCount + boostScore)
            parentNode = node.parent()
            updateScore(parentNode, upscore)
            updateNodeCount(parentNode, 1)
            if (parentNodes.indexOf(parentNode[0]) === -1)
              parentNodes.push(parentNode[0])
            parentParentNode = parentNode.parent()
            if (parentParentNode) {
              updateNodeCount(parentParentNode, 1)
              updateScore(parentParentNode, upscore / 2)
              if (parentNodes.indexOf(parentParentNode[0]) === -1)
                parentNodes.push(parentParentNode[0])
            }
            cnt += 1
            return (i += 1)
          })
          topNodeScore = 0
          _.each(parentNodes, function(e) {
            var score
            score = getScore(doc(e))
            if (score > topNodeScore) {
              topNode = e
              topNodeScore = score
            }
            if (topNode === null) return (topNode = e)
          })
          return doc(topNode)
        }
      }
      getVideoAttrs = function(doc, node) {
        var data, el
        el = doc(node)
        return (data = {
          src: el.attr('src'),
          height: el.attr('height'),
          width: el.attr('width')
        })
      }
      getObjectTag = function(doc, node) {
        var src, srcNode, video
        srcNode = node.find('param[name=movie]')
        if (!(srcNode.length > 0)) return null
        src = srcNode.attr('value')
        video = getVideoAttrs(doc, node)
        video.src = src
        return video
      }
      biggestTitleChunk = function(title, splitter) {
        var largeTextIndex, largeTextLength, titlePieces
        largeTextLength = 0
        largeTextIndex = 0
        titlePieces = title.split(splitter)
        _.each(titlePieces, function(piece, i) {
          if (piece.length > largeTextLength) {
            largeTextLength = piece.length
            return (largeTextIndex = i)
          }
        })
        return titlePieces[largeTextIndex]
      }
      isBoostable = function(doc, node, lang) {
        var boostable,
          maxStepsawayFromNode,
          minimumStopwordCount,
          nodes,
          stepsAway
        stepsAway = 0
        minimumStopwordCount = 5
        maxStepsawayFromNode = 3
        nodes = node.prevAll()
        boostable = false
        nodes.each(function() {
          var currentNode, currentNodeTag, paraText, wordStats
          currentNode = doc(this)
          currentNodeTag = currentNode[0].name
          if (currentNodeTag === 'p') {
            if (stepsAway >= maxStepsawayFromNode) {
              boostable = false
              return false
            }
            paraText = currentNode.text()
            wordStats = stopwords(paraText, lang)
            if (wordStats.stopwordCount > minimumStopwordCount) {
              boostable = true
              return false
            }
            return (stepsAway += 1)
          }
        })
        return boostable
      }
      addSiblings = function(doc, topNode, lang) {
        var baselinescoreSiblingsPara, sibs
        baselinescoreSiblingsPara = getSiblingsScore(doc, topNode, lang)
        sibs = topNode.prevAll()
        sibs.each(function() {
          var currentNode, ps
          currentNode = doc(this)
          ps = getSiblingsContent(
            doc,
            lang,
            currentNode,
            baselinescoreSiblingsPara
          )
          return _.each(ps, function(p) {
            return topNode.prepend('<p>' + p + '</p>')
          })
        })
        return topNode
      }
      getSiblingsContent = function(
        doc,
        lang,
        currentSibling,
        baselinescoreSiblingsPara
      ) {
        var potentialParagraphs, ps
        if (
          currentSibling[0].name === 'p' &&
          currentSibling.text().length > 0
        ) {
          return [currentSibling]
        } else {
          potentialParagraphs = currentSibling.find('p')
          if (potentialParagraphs === null) {
            return null
          } else {
            ps = []
            potentialParagraphs.each(function() {
              var firstParagraph,
                highLinkDensity,
                paragraphScore,
                score,
                siblingBaselineScore,
                txt,
                wordStats
              firstParagraph = doc(this)
              txt = firstParagraph.text()
              if (txt.length > 0) {
                wordStats = stopwords(txt, lang)
                paragraphScore = wordStats.stopwordCount
                siblingBaselineScore = 0.3
                highLinkDensity = isHighlinkDensity(doc, firstParagraph)
                score = baselinescoreSiblingsPara * siblingBaselineScore
                if (score < paragraphScore && !highLinkDensity)
                  return ps.push(txt)
              }
            })
            return ps
          }
        }
      }
      getSiblingsScore = function(doc, topNode, lang) {
        var base, nodesToCheck, paragraphsNumber, paragraphsScore
        base = 1e5
        paragraphsNumber = 0
        paragraphsScore = 0
        nodesToCheck = topNode.find('p')
        nodesToCheck.each(function() {
          var highLinkDensity, node, textNode, wordStats
          node = doc(this)
          textNode = node.text()
          wordStats = stopwords(textNode, lang)
          highLinkDensity = isHighlinkDensity(doc, node)
          if (wordStats.stopwordCount > 2 && !highLinkDensity) {
            paragraphsNumber += 1
            return (paragraphsScore += wordStats.stopwordCount)
          }
        })
        if (paragraphsNumber > 0) base = paragraphsScore / paragraphsNumber
        return base
      }
      updateScore = function(node, addToScore) {
        var currentScore, newScore, scoreString
        currentScore = 0
        scoreString = node.attr('gravityScore')
        if (scoreString) currentScore = parseInt(scoreString)
        newScore = currentScore + addToScore
        return node.attr('gravityScore', newScore)
      }
      updateNodeCount = function(node, addToCount) {
        var countString, currentScore, newScore
        currentScore = 0
        countString = node.attr('gravityNodes')
        if (countString) currentScore = parseInt(countString)
        newScore = currentScore + addToCount
        return node.attr('gravityNodes', newScore)
      }
      isHighlinkDensity = function(doc, node) {
        var links,
          linkText,
          linkWords,
          numberOfLinks,
          numberOfLinkWords,
          numberOfWords,
          percentLinkWords,
          sb,
          score,
          txt,
          words
        links = node.find('a')
        if (!(links.length > 0)) return false
        txt = node.text()
        words = txt.split(' ')
        numberOfWords = words.length
        sb = []
        links.each(function() {
          return sb.push(doc(this).text())
        })
        linkText = sb.join(' ')
        linkWords = linkText.split(' ')
        numberOfLinkWords = linkWords.length
        numberOfLinks = links.length
        percentLinkWords = numberOfLinkWords / numberOfWords
        score = percentLinkWords * numberOfLinks
        return score >= 1
      }
      getScore = function(node) {
        var grvScoreString
        grvScoreString = node.attr('gravityScore')
        if (!grvScoreString) {
          return 0
        } else {
          return parseInt(grvScoreString)
        }
      }
      isTableAndNoParaExist = function(doc, e) {
        var subParagraphs, subParagraphs2
        subParagraphs = e.find('p')
        subParagraphs.each(function() {
          var p, txt
          p = doc(this)
          txt = p.text()
          if (txt.length < 25) return doc(p).remove()
        })
        subParagraphs2 = e.find('p')
        if (
          subParagraphs2.length === 0 &&
          !(e[0].name === 'td' || e[0].name === 'ul' || e[0].name === 'ol')
        ) {
          return true
        } else {
          return false
        }
      }
      isNodescoreThresholdMet = function(doc, node, e) {
        var currentNodeScore, thresholdScore, topNodeScore
        topNodeScore = getScore(node)
        currentNodeScore = getScore(e)
        thresholdScore = topNodeScore * 0.08
        if (
          currentNodeScore < thresholdScore &&
          !(
            e[0].name === 'td' ||
            e[0].name === 'ul' ||
            e[0].name === 'ol' ||
            e[0].name === 'blockquote'
          )
        ) {
          return false
        } else {
          return true
        }
      }
      postCleanup = function(doc, targetNode, lang) {
        var node
        node = addSiblings(doc, targetNode, lang)
        node.children().each(function() {
          var e, eTag
          e = doc(this)
          eTag = e[0].name
          if (!(eTag === 'p' || eTag === 'a'))
            if (
              isHighlinkDensity(doc, e) ||
              isTableAndNoParaExist(doc, e) ||
              !isNodescoreThresholdMet(doc, node, e)
            ) {
              return doc(e).remove()
            }
        })
        return node
      }
      cleanText = function(text) {
        return text
          .replace(/[\r\n\t]/g, ' ')
          .replace(/\s\s+/g, ' ')
          .replace(/<!--.+?-->/g, '')
          .replace(/�/g, '')
          .trim()
      }
      cleanTitle = function(title, delimiters) {
        var titleText, usedDelimeter
        titleText = title || ''
        usedDelimeter = false
        _.each(delimiters, function(c) {
          if (titleText.indexOf(c) >= 0 && !usedDelimeter) {
            titleText = biggestTitleChunk(titleText, c)
            return (usedDelimeter = true)
          }
        })
        return cleanText(titleText)
      }
      rawTitle = function(doc) {
        var cache$,
          cache$1,
          cache$2,
          cache$3,
          cache$4,
          cache$5,
          cache$6,
          cache$7,
          cache$8,
          cache$9,
          gotTitle,
          titleText
        gotTitle = false
        titleText = ''
        _.each(
          [
            null != (cache$ = doc("meta[property='og:title']")) &&
            null != (cache$1 = cache$.first())
              ? cache$1.attr('content')
              : void 0,
            null != (cache$2 = doc("h1[class*='title']")) &&
            null != (cache$3 = cache$2.first())
              ? cache$3.text()
              : void 0,
            null != (cache$4 = doc('title')) &&
            null != (cache$5 = cache$4.first())
              ? cache$5.text()
              : void 0,
            null != (cache$6 = doc('h1')) && null != (cache$7 = cache$6.first())
              ? cache$7.text()
              : void 0,
            null != (cache$8 = doc('h2')) && null != (cache$9 = cache$8.first())
              ? cache$9.text()
              : void 0
          ],
          function(candidate) {
            if (candidate && candidate.trim() && !gotTitle) {
              titleText = candidate.trim()
              return (gotTitle = true)
            }
          }
        )
        return titleText
      }
    }.call(this)
  },
  function(module, exports) {
    module.exports = {
      ar: [
        'فى',
        'في',
        'كل',
        'لم',
        'لن',
        'له',
        'من',
        'هو',
        'هي',
        'قوة',
        'كما',
        'لها',
        'منذ',
        'وقد',
        'ولا',
        'نفسه',
        'لقاء',
        'مقابل',
        'هناك',
        'وقال',
        'وكان',
        'نهاية',
        'وقالت',
        'وكانت',
        'للامم',
        'فيه',
        'كلم',
        'لكن',
        'وفي',
        'وقف',
        'ولم',
        'ومن',
        'وهو',
        'وهي',
        'يوم',
        'فيها',
        'منها',
        'مليار',
        'لوكالة',
        'يكون',
        'يمكن',
        'مليون',
        'حيث',
        'اكد',
        'الا',
        'اما',
        'امس',
        'السابق',
        'التى',
        'التي',
        'اكثر',
        'ايار',
        'ايضا',
        'ثلاثة',
        'الذاتي',
        'الاخيرة',
        'الثاني',
        'الثانية',
        'الذى',
        'الذي',
        'الان',
        'امام',
        'ايام',
        'خلال',
        'حوالى',
        'الذين',
        'الاول',
        'الاولى',
        'بين',
        'ذلك',
        'دون',
        'حول',
        'حين',
        'الف',
        'الى',
        'انه',
        'اول',
        'ضمن',
        'انها',
        'جميع',
        'الماضي',
        'الوقت',
        'المقبل',
        'اليوم',
        'ـ',
        'ف',
        'و',
        'و6',
        'قد',
        'لا',
        'ما',
        'مع',
        'مساء',
        'هذا',
        'واحد',
        'واضاف',
        'واضافت',
        'فان',
        'قبل',
        'قال',
        'كان',
        'لدى',
        'نحو',
        'هذه',
        'وان',
        'واكد',
        'كانت',
        'واوضح',
        'مايو',
        'ب',
        'ا',
        'أ',
        '،',
        'عشر',
        'عدد',
        'عدة',
        'عشرة',
        'عدم',
        'عام',
        'عاما',
        'عن',
        'عند',
        'عندما',
        'على',
        'عليه',
        'عليها',
        'زيارة',
        'سنة',
        'سنوات',
        'تم',
        'ضد',
        'بعد',
        'بعض',
        'اعادة',
        'اعلنت',
        'بسبب',
        'حتى',
        'اذا',
        'احد',
        'اثر',
        'برس',
        'باسم',
        'غدا',
        'شخصا',
        'صباح',
        'اطار',
        'اربعة',
        'اخرى',
        'بان',
        'اجل',
        'غير',
        'بشكل',
        'حاليا',
        'بن',
        'به',
        'ثم',
        'اف',
        'ان',
        'او',
        'اي',
        'بها',
        'صفر'
      ],
      bg: [
        'а',
        'автентичен',
        'аз',
        'ако',
        'ала',
        'бе',
        'без',
        'беше',
        'би',
        'бивш',
        'бивша',
        'бившо',
        'бил',
        'била',
        'били',
        'било',
        'благодаря',
        'близо',
        'бъдат',
        'бъде',
        'бяха',
        'в',
        'вас',
        'ваш',
        'ваша',
        'вероятно',
        'вече',
        'взема',
        'ви',
        'вие',
        'винаги',
        'внимава',
        'време',
        'все',
        'всеки',
        'всички',
        'всичко',
        'всяка',
        'във',
        'въпреки',
        'върху',
        'г',
        'ги',
        'главен',
        'главна',
        'главно',
        'глас',
        'го',
        'година',
        'години',
        'годишен',
        'д',
        'да',
        'дали',
        'два',
        'двама',
        'двамата',
        'две',
        'двете',
        'ден',
        'днес',
        'дни',
        'до',
        'добра',
        'добре',
        'добро',
        'добър',
        'докато',
        'докога',
        'дори',
        'досега',
        'доста',
        'друг',
        'друга',
        'други',
        'е',
        'евтин',
        'едва',
        'един',
        'една',
        'еднаква',
        'еднакви',
        'еднакъв',
        'едно',
        'екип',
        'ето',
        'живот',
        'за',
        'забавям',
        'зад',
        'заедно',
        'заради',
        'засега',
        'заспал',
        'затова',
        'защо',
        'защото',
        'и',
        'из',
        'или',
        'им',
        'има',
        'имат',
        'иска',
        'й',
        'каза',
        'как',
        'каква',
        'какво',
        'както',
        'какъв',
        'като',
        'кога',
        'когато',
        'което',
        'които',
        'кой',
        'който',
        'колко',
        'която',
        'къде',
        'където',
        'към',
        'лесен',
        'лесно',
        'ли',
        'лош',
        'м',
        'май',
        'малко',
        'ме',
        'между',
        'мек',
        'мен',
        'месец',
        'ми',
        'много',
        'мнозина',
        'мога',
        'могат',
        'може',
        'мокър',
        'моля',
        'момента',
        'му',
        'н',
        'на',
        'над',
        'назад',
        'най',
        'направи',
        'напред',
        'например',
        'нас',
        'не',
        'него',
        'нещо',
        'нея',
        'ни',
        'ние',
        'никой',
        'нито',
        'нищо',
        'но',
        'нов',
        'нова',
        'нови',
        'новина',
        'някои',
        'някой',
        'няколко',
        'няма',
        'обаче',
        'около',
        'освен',
        'особено',
        'от',
        'отгоре',
        'отново',
        'още',
        'пак',
        'по',
        'повече',
        'повечето',
        'под',
        'поне',
        'поради',
        'после',
        'почти',
        'прави',
        'пред',
        'преди',
        'през',
        'при',
        'пък',
        'първата',
        'първи',
        'първо',
        'пъти',
        'равен',
        'равна',
        'с',
        'са',
        'сам',
        'само',
        'се',
        'сега',
        'си',
        'син',
        'скоро',
        'след',
        'следващ',
        'сме',
        'смях',
        'според',
        'сред',
        'срещу',
        'сте',
        'съм',
        'със',
        'също',
        'т',
        'тази',
        'така',
        'такива',
        'такъв',
        'там',
        'твой',
        'те',
        'тези',
        'ти',
        'т.н.',
        'то',
        'това',
        'тогава',
        'този',
        'той',
        'толкова',
        'точно',
        'три',
        'трябва',
        'тук',
        'тъй',
        'тя',
        'тях',
        'у',
        'утре',
        'харесва',
        'хиляди',
        'ч',
        'часа',
        'че',
        'често',
        'чрез',
        'ще',
        'щом',
        'юмрук',
        'я',
        'як'
      ],
      cs: [
        'ačkoli',
        'ahoj',
        'ale',
        'anebo',
        'ano',
        'asi',
        'aspoň',
        'během',
        'bez',
        'beze',
        'blízko',
        'bohužel',
        'brzo',
        'bude',
        'budeme',
        'budeš',
        'budete',
        'budou',
        'budu',
        'byl',
        'byla',
        'byli',
        'bylo',
        'byly',
        'bys',
        'čau',
        'chce',
        'chceme',
        'chceš',
        'chcete',
        'chci',
        'chtějí',
        'chtít',
        "chut'",
        'chuti',
        'co',
        'čtrnáct',
        'čtyři',
        'dál',
        'dále',
        'daleko',
        'děkovat',
        'děkujeme',
        'děkuji',
        'den',
        'deset',
        'devatenáct',
        'devět',
        'do',
        'dobrý',
        'docela',
        'dva',
        'dvacet',
        'dvanáct',
        'dvě',
        'hodně',
        'já',
        'jak',
        'jde',
        'je',
        'jeden',
        'jedenáct',
        'jedna',
        'jedno',
        'jednou',
        'jedou',
        'jeho',
        'její',
        'jejich',
        'jemu',
        'jen',
        'jenom',
        'ještě',
        'jestli',
        'jestliže',
        'jí',
        'jich',
        'jím',
        'jimi',
        'jinak',
        'jsem',
        'jsi',
        'jsme',
        'jsou',
        'jste',
        'kam',
        'kde',
        'kdo',
        'kdy',
        'když',
        'ke',
        'kolik',
        'kromě',
        'která',
        'které',
        'kteří',
        'který',
        'kvůli',
        'má',
        'mají',
        'málo',
        'mám',
        'máme',
        'máš',
        'máte',
        'mé',
        'mě',
        'mezi',
        'mí',
        'mít',
        'mně',
        'mnou',
        'moc',
        'mohl',
        'mohou',
        'moje',
        'moji',
        'možná',
        'můj',
        'musí',
        'může',
        'my',
        'na',
        'nad',
        'nade',
        'nám',
        'námi',
        'naproti',
        'nás',
        'náš',
        'naše',
        'naši',
        'ne',
        'ně',
        'nebo',
        'nebyl',
        'nebyla',
        'nebyli',
        'nebyly',
        'něco',
        'nedělá',
        'nedělají',
        'nedělám',
        'neděláme',
        'neděláš',
        'neděláte',
        'nějak',
        'nejsi',
        'někde',
        'někdo',
        'nemají',
        'nemáme',
        'nemáte',
        'neměl',
        'němu',
        'není',
        'nestačí',
        'nevadí',
        'než',
        'nic',
        'nich',
        'ním',
        'nimi',
        'nula',
        'od',
        'ode',
        'on',
        'ona',
        'oni',
        'ono',
        'ony',
        'osm',
        'osmnáct',
        'pak',
        'patnáct',
        'pět',
        'po',
        'pořád',
        'potom',
        'pozdě',
        'před',
        'přes',
        'přese',
        'pro',
        'proč',
        'prosím',
        'prostě',
        'proti',
        'protože',
        'rovně',
        'se',
        'sedm',
        'sedmnáct',
        'šest',
        'šestnáct',
        'skoro',
        'smějí',
        'smí',
        'snad',
        'spolu',
        'sta',
        'sté',
        'sto',
        'ta',
        'tady',
        'tak',
        'takhle',
        'taky',
        'tam',
        'tamhle',
        'tamhleto',
        'tamto',
        'tě',
        'tebe',
        'tebou',
        "ted'",
        'tedy',
        'ten',
        'ti',
        'tisíc',
        'tisíce',
        'to',
        'tobě',
        'tohle',
        'toto',
        'třeba',
        'tři',
        'třináct',
        'trošku',
        'tvá',
        'tvé',
        'tvoje',
        'tvůj',
        'ty',
        'určitě',
        'už',
        'vám',
        'vámi',
        'vás',
        'váš',
        'vaše',
        'vaši',
        've',
        'večer',
        'vedle',
        'vlastně',
        'všechno',
        'všichni',
        'vůbec',
        'vy',
        'vždy',
        'za',
        'zač',
        'zatímco',
        'ze',
        'že'
      ],
      da: [
        'af',
        'alle',
        'andet',
        'andre',
        'at',
        'begge',
        'da',
        'de',
        'den',
        'denne',
        'der',
        'deres',
        'det',
        'dette',
        'dig',
        'din',
        'dog',
        'du',
        'ej',
        'eller',
        'en',
        'end',
        'ene',
        'eneste',
        'enhver',
        'et',
        'fem',
        'fire',
        'flere',
        'fleste',
        'for',
        'fordi',
        'forrige',
        'fra',
        'få',
        'før',
        'god',
        'han',
        'hans',
        'har',
        'hendes',
        'her',
        'hun',
        'hvad',
        'hvem',
        'hver',
        'hvilken',
        'hvis',
        'hvor',
        'hvordan',
        'hvorfor',
        'hvornår',
        'i',
        'ikke',
        'ind',
        'ingen',
        'intet',
        'jeg',
        'jeres',
        'kan',
        'kom',
        'kommer',
        'lav',
        'lidt',
        'lille',
        'man',
        'mand',
        'mange',
        'med',
        'meget',
        'men',
        'mens',
        'mere',
        'mig',
        'ned',
        'ni',
        'nogen',
        'noget',
        'ny',
        'nyt',
        'nær',
        'næste',
        'næsten',
        'og',
        'op',
        'otte',
        'over',
        'på',
        'se',
        'seks',
        'ses',
        'som',
        'stor',
        'store',
        'syv',
        'ti',
        'til',
        'to',
        'tre',
        'ud',
        'var'
      ],
      de: [
        'der',
        'die',
        'und',
        'in',
        'den',
        'von',
        'zu',
        'mit',
        'ist',
        'das',
        'des',
        'im',
        'für',
        'auf',
        'sich',
        'dem',
        'Die',
        'nicht',
        'ein',
        'eine',
        'als',
        'auch',
        'an',
        'es',
        'er',
        'aus',
        'bei',
        'werden',
        'sie',
        'nach',
        'Der',
        'sind',
        'war',
        'wurde',
        'wird',
        'einer',
        'Das',
        'hat',
        'am',
        'wie',
        'um',
        'Sie',
        'zum',
        'oder',
        'einen',
        'über',
        'dass',
        'einem',
        'noch',
        'bis',
        'nur',
        'vor',
        'zur',
        'durch',
        'so',
        'haben',
        'aber',
        'ich',
        'In',
        'man',
        'mehr',
        'wir',
        'daß',
        'kann',
        'sein',
        'vom',
        'Es',
        'unter',
        'Ich',
        'hatte',
        'gegen',
        'Im',
        'Er',
        'wenn',
        'dieser',
        'seine',
        'eines',
        'können',
        'diese',
        'wieder',
        'wurden',
        'dann',
        'was',
        'schon',
        'Jahr',
        'zwei',
        'seiner',
        'Jahre',
        'Jahren',
        'ihre',
        'gibt',
        'zwischen',
        'Ein',
        'immer',
        'waren',
        'Zeit',
        'Uhr',
        'keine',
        'Wir',
        'sei',
        'habe',
        'sehr',
        'hier',
        'alle',
        'Nach',
        'ab',
        'sowie',
        'da',
        'beim',
        'heute',
        'seit',
        'diesem',
        'uns',
        'soll',
        'Und',
        'Deutschland',
        'Mit',
        'anderen',
        'jedoch',
        'ihr',
        'damit',
        'ersten',
        'drei',
        'Auch',
        'doch',
        'ihm',
        'seinen',
        'Stadt',
        'etwa',
        'sagte',
        'ihn',
        'Eine',
        'sondern',
        'bereits',
        'müssen',
        'ohne',
        'Menschen',
        'will',
        'Prozent',
        'ihrer',
        'worden',
        'Bei',
        'selbst',
        'jetzt',
        'of',
        'Als',
        'seinem',
        'neue',
        'muss',
        'allem',
        'neuen',
        'Ende',
        'nun',
        'Von',
        'geht',
        'ihren',
        'SPD',
        'So',
        'Für',
        'weil',
        'wo',
        'mich',
        'mir',
        'Aber',
        'Am',
        'Diese',
        'ganz',
        'dieses',
        'etwas',
        'andere',
        'Geschichte',
        'Frau',
        'liegt',
        'Wenn',
        'ins',
        'gut',
        'einmal',
        'konnte',
        'Euro',
        'du',
        'denn',
        'viele',
        'Auf',
        'machen',
        'Herr',
        'Leben',
        'the',
        'diesen',
        'erst',
        'lassen',
        'Wie',
        'dort',
        'beiden',
        'erste',
        'The',
        'Teil',
        'deutschen',
        'weiter',
        'also',
        'viel',
        'sollte',
        'dabei',
        'Millionen',
        'Was',
        'später',
        'hatten',
        'während',
        'Welt',
        'ISBN',
        'sagt',
        'denen',
        'wollen',
        'steht',
        'Da',
        'kommt',
        'kein',
        'vier',
        'nichts',
        'de',
        'allerdings',
        'Seite',
        'ob',
        'dazu',
        'gab',
        's',
        'letzten',
        'kam',
        'USA',
        'wegen',
        'dies',
        'zurück',
        'großen',
        'kommen',
        'alles',
        'rund',
        'ja',
        'sollen',
        'deren',
        'dafür',
        'Doch',
        'Kinder',
        'wäre',
        'Frage',
        'weitere',
        'würde',
        'dessen',
        'große',
        'Januar',
        'zwar',
        'darauf',
        'Arbeit',
        'Beispiel',
        'September',
        'zusammen',
        'einige',
        'Land',
        'allen',
        'fast',
        'Frauen',
        'März',
        'Namen',
        'Unternehmen',
        'ihrem',
        'davon',
        'Mann',
        'Mai',
        'Platz',
        'deutsche',
        'werde',
        'Oktober',
        'muß',
        'Literatur',
        'Art',
        'ihnen',
        'Deutschen',
        'fünf',
        'gilt',
        'sehen',
        'könnte',
        'Dezember',
        'stehen',
        'sogar',
        'seien',
        'Wer',
        'Seit',
        'August',
        'bin',
        'Beifall',
        'Fall',
        'Juni',
        'eigenen',
        'November',
        'mal',
        'Film',
        'finden',
        'sagen',
        'Regierung',
        'April',
        'München',
        'oft',
        'Dies',
        'lange',
        'ebenfalls',
        'bekannt',
        'Präsident',
        'wohl',
        'CDU/CSU',
        'Zu',
        'gehört',
        'Man',
        'weniger',
        'gerade',
        'statt',
        'aller',
        'Juli',
        'möchte',
        'Weg',
        'Entwicklung',
        'zunächst',
        'ging',
        'Mark',
        'Bild',
        'möglich',
        'gar',
        'besonders',
        'hätte',
        'macht',
        'Politik',
        'geben',
        'Tag',
        'Ihnen',
        'Februar',
        'Hier',
        'Gemeinde',
        'wenig',
        'gewesen',
        'Europa',
        'gehen',
        'gemacht',
        'welche',
        'New',
        'gegenüber',
        'heißt',
        'Familie',
        'Union',
        'tun',
        'Jahrhundert',
        'einfach',
        'Frankfurt',
        'deutlich',
        'Dabei',
        'neben',
        'sollten',
        'Kirche',
        'keinen',
        'Artikel',
        'Ihre',
        'Peter',
        'Thema',
        'besteht',
        'vielen',
        'nie',
        'bzw.',
        'Aus',
        'Zeitung',
        'wollte',
        'Kommission',
        'seines',
        'Hamburg',
        'hätten',
        'Geld',
        'meine',
        'Dr',
        'kaum',
        'zweiten',
        'Während',
        'lässt',
        'Anfang',
        'Um',
        'Ort',
        'weiß',
        'findet',
        'Bereich',
        'Haus',
        'anderem',
        'Mal',
        'deshalb',
        'alten',
        'erhalten',
        'zehn',
        'Zum',
        'bisher',
        'meisten',
        'darüber',
        'würden',
        'hin',
        'Form',
        'An',
        'bleibt',
        'sieht',
        'Gesellschaft',
        'Berliner',
        'Den',
        'vergangenen',
        'bezeichnet',
        'Nr.',
        'Ziel',
        'je',
        'weit',
        'Grund',
        'sechs',
        'darf',
        'Rolle',
        'Deutsche',
        'wissen',
        'jeder',
        'zeigt',
        'Damit',
        'Denn',
        'mehrere',
        'nächsten',
        'Vor',
        'Dann',
        'schließlich',
        'kleinen',
        'Durch',
        'Michael',
        'km',
        'Lage',
        'Gruppe',
        'Band',
        'damals',
        'Spiel',
        'Sohn',
        'Dr.',
        'stark',
        'Universität',
        'Hilfe',
        'besser',
        'hinter',
        'meist',
        'Seine',
        'St.',
        'stellt',
        'Tage',
        'unsere',
        'daher',
        'Nur',
        'wirklich',
        'führt',
        'Dieser',
        'beispielsweise',
        'kurz',
        'Bericht',
        'gleich',
        'weiteren',
        'Straße',
        'bleiben',
        'Wirtschaft',
        'Siehe',
        'Zukunft',
        'eher',
        'Bedeutung',
        'Recht',
        'insbesondere',
        'Bevölkerung',
        'schnell',
        'nehmen',
        'Verlag',
        'CDU',
        'Tod',
        'Alle',
        'solche',
        'neu',
        'Bundesregierung',
        'pro',
        'Frankreich',
        'Jahres',
        'konnten',
        'Ihr',
        'ließ',
        'Du',
        'kleine',
        'Europäischen',
        'Vater',
        'genannt',
        'lang',
        'Titel',
        'Rahmen',
        'Wort',
        'eigentlich',
        'erhielt',
        'einigen',
        'Woche',
        'FC',
        'Musik',
        'dagegen',
        'Sein',
        'allein',
        'Einsatz',
        'genau',
        'begann',
        'innerhalb',
        'unserer',
        'Partei',
        'Polizei',
        'Wasser',
        'bringen',
        'deutscher',
        'natürlich',
        'eigene',
        'Wochen',
        'insgesamt',
        'Außerdem',
        'Bis',
        'halten',
        'politischen',
        'musste',
        'Parlament',
        'Meter',
        'Hand',
        'Zahl',
        'stellen',
        'gesagt',
        'führen',
        'daran',
        'Erfolg',
        'befindet',
        'Zur',
        'verschiedenen',
        'Probleme',
        'Unter',
        'Abgeordneten',
        'Milliarden',
        'nahm',
        'stand',
        'geworden',
        'c',
        'liegen',
        'erstmals',
        'Sprache',
        'Fragen',
        'nämlich',
        'Ja',
        'Kollegen',
        'Männer',
        'Nicht',
        'Wolfgang',
        'Problem',
        'Mutter',
        'Minuten',
        'Weitere',
        'Mitte',
        'Mitglied',
        'Jahrhunderts',
        'Krieg',
        'Hans',
        'könnten',
        'Thomas',
        'Über',
        'Personen',
        'Friedrich',
        'ca.',
        'ebenso',
        'machte',
        'York',
        'vielleicht',
        'Stelle',
        'derzeit',
        'Ländern',
        'Höhe',
        'verwendet',
        'gute',
        'überhaupt',
        'Länder',
        'Angaben',
        'führte',
        'gegeben',
        'Tel.',
        'klar',
        'Karl',
        'europäischen',
        'sicher',
        'Saison',
        'Programm',
        'erreicht',
        'GRÜNEN',
        'beide',
        'Sonntag',
        'sowohl',
        'Region',
        'alte',
        'Staaten',
        'Paris',
        'Beginn',
        'Buch',
        'zweite',
        'ganze',
        'hinaus',
        'König',
        'Morgen',
        'handelt',
        'fand',
        'Schweiz',
        'jeweils',
        'Weise',
        'DM',
        'fest',
        'per',
        'blieb',
        'Mitglieder',
        'Richtung',
        'Heute',
        'Stunden',
        'leicht',
        'Leute',
        'wobei',
        'gehören',
        'bietet',
        'Wien',
        'politische',
        'Folge',
        'Blick',
        'aufgrund',
        'Entscheidung',
        'Dort',
        'Neben',
        'hält',
        'Gebiet',
        'gemeinsam',
        'erklärt',
        'direkt',
        'könne',
        'Daten',
        'recht',
        'schwer',
        'Bayern',
        'jeden',
        'Name',
        'Schule',
        'GmbH',
        'dürfen',
        'laut',
        'Seiten',
        'Bürger',
        'Eltern',
        'dpa',
        'Meinung',
        'Werke',
        'Jetzt',
        'letzte',
        'Spieler',
        'bald',
        'London',
        'häufig',
        'heutigen',
        'Einwohner',
        'acht',
        'eben',
        'Internet',
        'Markt',
        'dich',
        'Nein',
        'Situation',
        'System',
        'zuvor',
        'Möglichkeit',
        'Freitag',
        'mein',
        'Mannheim',
        'Fenster',
        'Kosten',
        'inzwischen',
        'kamen',
        'John',
        'sieben',
        'bekommen',
        'erreichen',
        'unser',
        'Verfügung',
        'Köln',
        'Dazu',
        'besten',
        'Zusammenhang',
        'Reihe',
        'Kritik',
        'richtig',
        'Liste',
        'Herren',
        'Augen',
        'taz',
        'zeigen',
        'siehe',
        'hohen',
        'spielte',
        'leben',
        'völlig',
        'Neue',
        'ihres',
        'spielt',
        'Sicherheit',
        'weiterhin',
        'hoch',
        'nachdem',
        'gegründet',
        'erneut',
        'sah',
        'z.',
        'wer',
        'Informationen',
        'anders',
        'spielen',
        'Dieses',
        'gleichen',
        'Kultur',
        'größten',
        'eingesetzt',
        'Unterstützung',
        'Beim',
        'erklärte',
        'Allerdings',
        'Firma',
        'Amt',
        'Kopf',
        'trotz',
        'Erst',
        'gebracht',
        'gestellt',
        'läuft',
        'schließen',
        'Bilder',
        'nimmt',
        'Mitarbeiter',
        'BÜNDNIS',
        'Deshalb',
        'verschiedene',
        'zudem',
        'Werk',
        'Ergebnis',
        'Heinrich',
        'Bau',
        'ehemaligen',
        'Preis',
        'Tochter',
        'Stuttgart',
        'Samstag',
        'Bad',
        'Verfahren',
        'Kind',
        'früher',
        'Paul',
        'darin',
        'paar',
        'Punkt',
        'Weblinks',
        'Nun',
        'Maßnahmen',
        'Österreich',
        'Wilhelm',
        'Herrn',
        'z.B.',
        'Noch',
        'Staat',
        'Zusammenarbeit',
        'knapp',
        'Nacht',
        'einzelnen',
        'trat',
        'gestern',
        'Team',
        'Osten',
        'scheint',
        'Mannschaft',
        'Tagen',
        'internationalen',
        'jede',
        'mindestens',
        'teilweise',
        'einzige',
        'Soldaten',
        'setzt',
        'gefunden',
        'Kunst',
        'lediglich',
        'öffentlichen',
        'bedeutet',
        'Raum',
        'gewann',
        'Kampf',
        'Martin',
        'Ist',
        'Begriff',
        'Hause',
        'entwickelt',
        'Wahl',
        'Schon',
        'arbeiten',
        'größte',
        'Donnerstag',
        'Ab',
        'Viele',
        'Quellen',
        'Nachdem',
        'dadurch',
        'Italien',
        'erster',
        'gekommen',
        'dir',
        'Mittwoch',
        'danach',
        'stellte',
        'her',
        'zahlreiche',
        'Landes',
        'Gesetz',
        'Monaten',
        'PDS',
        'Rat',
        'Franz',
        'Verein',
        'sonst',
        'Frankfurter',
        'Meine',
        'Klaus',
        'Karriere',
        'müsse',
        'meiner',
        'anderer',
        'zuletzt',
        'Monate',
        'Alter',
        'hohe',
        'Interesse',
        'Regie',
        'Montag',
        'genommen',
        'lag',
        'Sommer',
        'spricht',
        'Trainer',
        'Liebe',
        'jedem',
        '/DIE',
        'Westen',
        'guten',
        'Kilometer',
        'Johann',
        'gesehen',
        'darunter',
        'solchen',
        'indem',
        'Mittel',
        'oben',
        'Schweizer',
        'wichtig',
        'Hälfte',
        'Regel',
        'obwohl',
        'Bürgermeister',
        'Aufgabe',
        'Spiele',
        'folgenden',
        'Dienstag',
        'version',
        'Sache',
        'sprechen',
        'Gemeinden',
        'electronic',
        'for',
        'Norden',
        'außerdem',
        'Antrag',
        'gleichzeitig',
        'ganzen',
        'Politiker',
        'gehörte',
        'großer',
        'China',
        'Nähe',
        'bereit',
        'setzte',
        'Druck',
        'tatsächlich',
        'Gott',
        'frei',
        'Grünen',
        'zumindest',
        'Opfer',
        'genug',
        'versucht',
        'bevor'
      ],
      el: [
        'αλλα',
        'αν',
        'αντι',
        'απο',
        'αυτα',
        'αυτεσ',
        'αυτη',
        'αυτο',
        'αυτοι',
        'αυτοσ',
        'αυτουσ',
        'αυτων',
        'για',
        'δε',
        'δεν',
        'εαν',
        'ειμαι',
        'ειμαστε',
        'ειναι',
        'εισαι',
        'ειστε',
        'εκεινα',
        'εκεινεσ',
        'εκεινη',
        'εκεινο',
        'εκεινοι',
        'εκεινοσ',
        'εκεινουσ',
        'εκεινων',
        'ενω',
        'επι',
        'η',
        'θα',
        'ισωσ',
        'κ',
        'και',
        'κατα',
        'κι',
        'μα',
        'με',
        'μετα',
        'μη',
        'μην',
        'να',
        'ο',
        'οι',
        'ομωσ',
        'οπωσ',
        'οσο',
        'οτι',
        'παρα',
        'ποια',
        'ποιεσ',
        'ποιο',
        'ποιοι',
        'ποιοσ',
        'ποιουσ',
        'ποιων',
        'που',
        'προσ',
        'πωσ',
        'σε',
        'στη',
        'στην',
        'στο',
        'στον',
        'τα',
        'την',
        'τησ',
        'το',
        'τον',
        'τοτε',
        'του',
        'των',
        'ωσ'
      ],
      en: [
        "a's",
        'able',
        'about',
        'above',
        'according',
        'accordingly',
        'across',
        'actually',
        'after',
        'afterwards',
        'again',
        'against',
        "ain't",
        'all',
        'allow',
        'allows',
        'almost',
        'alone',
        'along',
        'already',
        'also',
        'although',
        'always',
        'am',
        'among',
        'amongst',
        'an',
        'and',
        'another',
        'any',
        'anybody',
        'anyhow',
        'anyone',
        'anything',
        'anyway',
        'anyways',
        'anywhere',
        'apart',
        'appear',
        'appreciate',
        'appropriate',
        'are',
        "aren't",
        'around',
        'as',
        'aside',
        'ask',
        'asking',
        'associated',
        'at',
        'available',
        'away',
        'awfully',
        'be',
        'became',
        'because',
        'become',
        'becomes',
        'becoming',
        'been',
        'before',
        'beforehand',
        'behind',
        'being',
        'believe',
        'below',
        'beside',
        'besides',
        'best',
        'better',
        'between',
        'beyond',
        'both',
        'brief',
        'but',
        'by',
        'c',
        "c'mon",
        "c's",
        'came',
        'campaign',
        'can',
        "can't",
        'cannot',
        'cant',
        'cause',
        'causes',
        'certain',
        'certainly',
        'changes',
        'clearly',
        'co',
        'com',
        'come',
        'comes',
        'concerning',
        'consequently',
        'consider',
        'considering',
        'contain',
        'containing',
        'contains',
        'corresponding',
        'could',
        "couldn't",
        'course',
        'currently',
        'definitely',
        'described',
        'despite',
        'did',
        "didn't",
        'different',
        'do',
        'does',
        "doesn't",
        'doing',
        "don't",
        'done',
        'down',
        'downwards',
        'during',
        'each',
        'edu',
        'eight',
        'either',
        'else',
        'elsewhere',
        'enough',
        'endorsed',
        'entirely',
        'especially',
        'et',
        'etc',
        'even',
        'ever',
        'every',
        'everybody',
        'everyone',
        'everything',
        'everywhere',
        'ex',
        'exactly',
        'example',
        'except',
        'far',
        'few',
        'fifth',
        'first',
        'financial',
        'five',
        'followed',
        'following',
        'follows',
        'for',
        'former',
        'formerly',
        'forth',
        'four',
        'from',
        'further',
        'furthermore',
        'get',
        'gets',
        'getting',
        'given',
        'gives',
        'go',
        'goes',
        'going',
        'gone',
        'got',
        'gotten',
        'greetings',
        'had',
        "hadn't",
        'happens',
        'hardly',
        'has',
        "hasn't",
        'have',
        "haven't",
        'having',
        'he',
        "he's",
        'hello',
        'help',
        'hence',
        'her',
        'here',
        "here's",
        'hereafter',
        'hereby',
        'herein',
        'hereupon',
        'hers',
        'herself',
        'hi',
        'him',
        'himself',
        'his',
        'hither',
        'hopefully',
        'how',
        'howbeit',
        'however',
        "i'd",
        "i'll",
        "i'm",
        "i've",
        'if',
        'ignored',
        'immediate',
        'in',
        'inasmuch',
        'inc',
        'indeed',
        'indicate',
        'indicated',
        'indicates',
        'inner',
        'insofar',
        'instead',
        'into',
        'inward',
        'is',
        "isn't",
        'it',
        "it'd",
        "it'll",
        "it's",
        'its',
        'itself',
        'just',
        'keep',
        'keeps',
        'kept',
        'know',
        'knows',
        'known',
        'last',
        'lately',
        'later',
        'latter',
        'latterly',
        'least',
        'less',
        'lest',
        'let',
        "let's",
        'like',
        'liked',
        'likely',
        'little',
        'look',
        'looking',
        'looks',
        'ltd',
        'mainly',
        'many',
        'may',
        'maybe',
        'me',
        'mean',
        'meanwhile',
        'merely',
        'might',
        'more',
        'moreover',
        'most',
        'mostly',
        'much',
        'must',
        'my',
        'myself',
        'name',
        'namely',
        'nd',
        'near',
        'nearly',
        'necessary',
        'need',
        'needs',
        'neither',
        'never',
        'nevertheless',
        'new',
        'next',
        'nine',
        'no',
        'nobody',
        'non',
        'none',
        'noone',
        'nor',
        'normally',
        'not',
        'nothing',
        'novel',
        'now',
        'nowhere',
        'obviously',
        'of',
        'off',
        'often',
        'oh',
        'ok',
        'okay',
        'old',
        'on',
        'once',
        'one',
        'ones',
        'only',
        'onto',
        'or',
        'other',
        'others',
        'otherwise',
        'ought',
        'our',
        'ours',
        'ourselves',
        'out',
        'outside',
        'over',
        'overall',
        'own',
        'particular',
        'particularly',
        'per',
        'perhaps',
        'placed',
        'please',
        'plus',
        'possible',
        'presumably',
        'probably',
        'provides',
        'quite',
        'quote',
        'quarterly',
        'rather',
        'really',
        'reasonably',
        'regarding',
        'regardless',
        'regards',
        'relatively',
        'respectively',
        'right',
        'said',
        'same',
        'saw',
        'say',
        'saying',
        'says',
        'second',
        'secondly',
        'see',
        'seeing',
        'seem',
        'seemed',
        'seeming',
        'seems',
        'seen',
        'self',
        'selves',
        'sensible',
        'sent',
        'serious',
        'seriously',
        'seven',
        'several',
        'shall',
        'she',
        'should',
        "shouldn't",
        'since',
        'six',
        'so',
        'some',
        'somebody',
        'somehow',
        'someone',
        'something',
        'sometime',
        'sometimes',
        'somewhat',
        'somewhere',
        'soon',
        'sorry',
        'specified',
        'specify',
        'specifying',
        'still',
        'sub',
        'such',
        'sup',
        'sure',
        "t's",
        'take',
        'taken',
        'tell',
        'tends',
        'than',
        'thank',
        'thanks',
        'thanx',
        'that',
        "that's",
        'thats',
        'the',
        'their',
        'theirs',
        'them',
        'themselves',
        'then',
        'thence',
        'there',
        "there's",
        'thereafter',
        'thereby',
        'therefore',
        'therein',
        'theres',
        'thereupon',
        'these',
        'they',
        "they'd",
        "they'll",
        "they're",
        "they've",
        'think',
        'third',
        'this',
        'thorough',
        'thoroughly',
        'those',
        'though',
        'three',
        'through',
        'throughout',
        'thru',
        'thus',
        'to',
        'together',
        'too',
        'took',
        'toward',
        'towards',
        'tried',
        'tries',
        'truly',
        'try',
        'trying',
        'twice',
        'two',
        'under',
        'unfortunately',
        'unless',
        'unlikely',
        'until',
        'unto',
        'up',
        'upon',
        'us',
        'use',
        'used',
        'useful',
        'uses',
        'using',
        'usually',
        'uucp',
        'value',
        'various',
        'very',
        'via',
        'viz',
        'vs',
        'want',
        'wants',
        'was',
        "wasn't",
        'way',
        'we',
        "we'd",
        "we'll",
        "we're",
        "we've",
        'welcome',
        'well',
        'went',
        'were',
        "weren't",
        'what',
        "what's",
        'whatever',
        'when',
        'whence',
        'whenever',
        'where',
        "where's",
        'whereafter',
        'whereas',
        'whereby',
        'wherein',
        'whereupon',
        'wherever',
        'whether',
        'which',
        'while',
        'whither',
        'who',
        "who's",
        'whoever',
        'whole',
        'whom',
        'whose',
        'why',
        'will',
        'willing',
        'wish',
        'with',
        'within',
        'without',
        "won't",
        'wonder',
        'would',
        'would',
        "wouldn't",
        'yes',
        'yet',
        'you',
        "you'd",
        "you'll",
        "you're",
        "you've",
        'your',
        'yours',
        'yourself',
        'yourselves',
        'zero',
        'official',
        'sharply',
        'criticized'
      ],
      es: [
        'de',
        'la',
        'que',
        'el',
        'en',
        'y',
        'a',
        'los',
        'del',
        'se',
        'las',
        'por',
        'un',
        'para',
        'con',
        'no',
        'una',
        'su',
        'al',
        'lo',
        'como',
        'más',
        'pero',
        'sus',
        'le',
        'ya',
        'o',
        'este',
        'sí',
        'porque',
        'esta',
        'entre',
        'cuando',
        'muy',
        'sin',
        'sobre',
        'también',
        'me',
        'hasta',
        'hay',
        'donde',
        'quien',
        'desde',
        'todo',
        'nos',
        'durante',
        'todos',
        'uno',
        'les',
        'ni',
        'contra',
        'otros',
        'ese',
        'eso',
        'ante',
        'ellos',
        'e',
        'esto',
        'mí',
        'antes',
        'algunos',
        'qué',
        'unos',
        'yo',
        'otro',
        'otras',
        'otra',
        'él',
        'tanto',
        'esa',
        'estos',
        'mucho',
        'quienes',
        'nada',
        'muchos',
        'cual',
        'poco',
        'ella',
        'estar',
        'estas',
        'algunas',
        'algo',
        'nosotros',
        'mi',
        'mis',
        'tú',
        'te',
        'ti',
        'tu',
        'tus',
        'ellas',
        'nosotras',
        'vosotros',
        'vosotras',
        'os',
        'mío',
        'mía',
        'míos',
        'mías',
        'tuyo',
        'tuya',
        'tuyos',
        'tuyas',
        'suyo',
        'suya',
        'suyos',
        'suyas',
        'nuestro',
        'nuestra',
        'nuestros',
        'nuestras',
        'vuestro',
        'vuestra',
        'vuestros',
        'vuestras',
        'esos',
        'esas',
        'estoy',
        'estás',
        'está',
        'estamos',
        'estáis',
        'están',
        'esté',
        'estés',
        'estemos',
        'estéis',
        'estén',
        'estaré',
        'estarás',
        'estará',
        'estaremos',
        'estaréis',
        'estarán',
        'estaría',
        'estarías',
        'estaríamos',
        'estaríais',
        'estarían',
        'estaba',
        'estabas',
        'estábamos',
        'estabais',
        'estaban',
        'estuve',
        'estuviste',
        'estuvo',
        'estuvimos',
        'estuvisteis',
        'estuvieron',
        'estuviera',
        'estuvieras',
        'estuviéramos',
        'estuvierais',
        'estuvieran',
        'estuviese',
        'estuvieses',
        'estuviésemos',
        'estuvieseis',
        'estuviesen',
        'estando',
        'estado',
        'estada',
        'estados',
        'estadas',
        'estad',
        'he',
        'has',
        'ha',
        'hemos',
        'habéis',
        'han',
        'haya',
        'hayas',
        'hayamos',
        'hayáis',
        'hayan',
        'habré',
        'habrás',
        'habrá',
        'habremos',
        'habréis',
        'habrán',
        'habría',
        'habrías',
        'habríamos',
        'habríais',
        'habrían',
        'había',
        'habías',
        'habíamos',
        'habíais',
        'habían',
        'hube',
        'hubiste',
        'hubo',
        'hubimos',
        'hubisteis',
        'hubieron',
        'hubiera',
        'hubieras',
        'hubiéramos',
        'hubierais',
        'hubieran',
        'hubiese',
        'hubieses',
        'hubiésemos',
        'hubieseis',
        'hubiesen',
        'habiendo',
        'habido',
        'habida',
        'habidos',
        'habidas',
        'soy',
        'eres',
        'es',
        'somos',
        'sois',
        'son',
        'sea',
        'seas',
        'seamos',
        'seáis',
        'sean',
        'seré',
        'serás',
        'será',
        'seremos',
        'seréis',
        'serán',
        'sería',
        'serías',
        'seríamos',
        'seríais',
        'serían',
        'era',
        'eras',
        'éramos',
        'erais',
        'eran',
        'fui',
        'fuiste',
        'fue',
        'fuimos',
        'fuisteis',
        'fueron',
        'fuera',
        'fueras',
        'fuéramos',
        'fuerais',
        'fueran',
        'fuese',
        'fueses',
        'fuésemos',
        'fueseis',
        'fuesen',
        'siendo',
        'sido',
        'tengo',
        'tienes',
        'tiene',
        'tenemos',
        'tenéis',
        'tienen',
        'tenga',
        'tengas',
        'tengamos',
        'tengáis',
        'tengan',
        'tendré',
        'tendrás',
        'tendrá',
        'tendremos',
        'tendréis',
        'tendrán',
        'tendría',
        'tendrías',
        'tendríamos',
        'tendríais',
        'tendrían',
        'tenía',
        'tenías',
        'teníamos',
        'teníais',
        'tenían',
        'tuve',
        'tuviste',
        'tuvo',
        'tuvimos',
        'tuvisteis',
        'tuvieron',
        'tuviera',
        'tuvieras',
        'tuviéramos',
        'tuvierais',
        'tuvieran',
        'tuviese',
        'tuvieses',
        'tuviésemos',
        'tuvieseis',
        'tuviesen',
        'teniendo',
        'tenido',
        'tenida',
        'tenidos',
        'tenidas',
        'tened'
      ],
      fi: [
        'alla',
        'ansiosta',
        'ehkä',
        'ei',
        'enemmän',
        'ennen',
        'etessa',
        'f',
        'haikki',
        'he',
        'hitaasti',
        'hoikein',
        'hyvin',
        'hän',
        'ilman',
        'ja',
        'jos',
        'jälkeen',
        'kanssa',
        'kaukana',
        'kenties',
        'keskellä',
        'kesken',
        'koskaan',
        'kuinkan',
        'kukka',
        'kylliksi',
        'kyllä',
        'liian',
        'lla',
        'lla',
        'luona',
        'lähellä',
        'läpi',
        'me',
        'miksi',
        'mikä',
        'milloin',
        'milloinkan',
        'minä',
        'missä',
        'miten',
        'nopeasti',
        'nyt',
        'oikea',
        'oikealla',
        'paljon',
        'siellä',
        'sinä',
        'ssa',
        'sta',
        'suoraan',
        'tai',
        'takana',
        'takia',
        'tarpeeksi',
        'te',
        'tässä',
        'ulkopuolella',
        'vahemmän',
        'vasen',
        'vasenmalla',
        'vastan',
        'vielä',
        'vieressä',
        'vähän',
        'yhdessä',
        'ylös'
      ],
      fr: [
        'au',
        'aux',
        'avec',
        'ce',
        'ces',
        'dans',
        'de',
        'des',
        'du',
        'elle',
        'en',
        'et',
        'eux',
        'il',
        'je',
        'la',
        'le',
        'leur',
        'lui',
        'ma',
        'mais',
        'me',
        'même',
        'mes',
        'moi',
        'mon',
        'ne',
        'nos',
        'notre',
        'nous',
        'on',
        'ou',
        'par',
        'pas',
        'pour',
        'qu',
        'que',
        'qui',
        'sa',
        'se',
        'ses',
        'son',
        'sur',
        'ta',
        'te',
        'tes',
        'toi',
        'ton',
        'tu',
        'un',
        'une',
        'vos',
        'votre',
        'vous',
        'c',
        'd',
        'j',
        'l',
        'à',
        'm',
        'n',
        's',
        't',
        'y',
        'été',
        'étée',
        'étées',
        'étés',
        'étant',
        'suis',
        'es',
        'est',
        'sommes',
        'êtes',
        'sont',
        'serai',
        'seras',
        'sera',
        'serons',
        'serez',
        'seront',
        'serais',
        'serait',
        'serions',
        'seriez',
        'seraient',
        'étais',
        'était',
        'étions',
        'étiez',
        'étaient',
        'fus',
        'fut',
        'fûmes',
        'fûtes',
        'furent',
        'sois',
        'soit',
        'soyons',
        'soyez',
        'soient',
        'fusse',
        'fusses',
        'fût',
        'fussions',
        'fussiez',
        'fussent',
        'ayant',
        'eu',
        'eue',
        'eues',
        'eus',
        'ai',
        'as',
        'avons',
        'avez',
        'ont',
        'aurai',
        'auras',
        'aura',
        'aurons',
        'aurez',
        'auront',
        'aurais',
        'aurait',
        'aurions',
        'auriez',
        'auraient',
        'avais',
        'avait',
        'avions',
        'aviez',
        'avaient',
        'eut',
        'eûmes',
        'eûtes',
        'eurent',
        'aie',
        'aies',
        'ait',
        'ayons',
        'ayez',
        'aient',
        'eusse',
        'eusses',
        'eût',
        'eussions',
        'eussiez',
        'eussent',
        'ceci',
        'celà',
        'cet',
        'cette',
        'ici',
        'ils',
        'les',
        'leurs',
        'quel',
        'quels',
        'quelle',
        'quelles',
        'sans',
        'soi'
      ],
      hu: [
        'a',
        'á',
        'ahogy',
        'ahol',
        'aki',
        'akik',
        'akkor',
        'alatt',
        'által',
        'általában',
        'amely',
        'amelyek',
        'amelyekben',
        'amelyeket',
        'amelyet',
        'amelynek',
        'ami',
        'amit',
        'amolyan',
        'amp',
        'amíg',
        'amikor',
        'át',
        'abban',
        'ahhoz',
        'annak',
        'arra',
        'arról',
        'az',
        'azok',
        'azon',
        'azt',
        'azzal',
        'azért',
        'aztán',
        'azután',
        'azonban',
        'b',
        'bár',
        'be',
        'belül',
        'benne',
        'c',
        'cikk',
        'cikkek',
        'cikkeket',
        'csak',
        'd',
        'de',
        'e',
        'é',
        'eddig',
        'egész',
        'egy',
        'egyes',
        'egyetlen',
        'egyéb',
        'egyik',
        'egyre',
        'ekkor',
        'el',
        'elég',
        'ellen',
        'elő',
        'először',
        'előtt',
        'első',
        'én',
        'éppen',
        'ebben',
        'ehhez',
        'emilyen',
        'ennek',
        'erre',
        'ez',
        'ezt',
        'ezek',
        'ezen',
        'ezzel',
        'ezért',
        'és',
        'f',
        'fel',
        'felé',
        'g',
        'h',
        'hanem',
        'hiszen',
        'hogy',
        'hogyan',
        'i',
        'í',
        'igen',
        'így',
        'illetve',
        'ill.',
        'ill',
        'ilyen',
        'ilyenkor',
        'is',
        'ison',
        'ismét',
        'itt',
        'j',
        'jó',
        'jól',
        'jobban',
        'k',
        'kell',
        'kellett',
        'keresztül',
        'keressünk',
        'ki',
        'kívül',
        'között',
        'közül',
        'l',
        'legalább',
        'lehet',
        'lehetett',
        'legyen',
        'lenne',
        'lenni',
        'lesz',
        'lett',
        'm',
        'maga',
        'magát',
        'majd',
        'majd',
        'már',
        'más',
        'másik',
        'meg',
        'még',
        'mellett',
        'mert',
        'mely',
        'melyek',
        'mi',
        'mit',
        'míg',
        'miért',
        'milyen',
        'mikor',
        'minden',
        'mindent',
        'mindenki',
        'mindig',
        'mint',
        'mintha',
        'mivel',
        'most',
        'n',
        'nagy',
        'nagyobb',
        'nagyon',
        'ne',
        'néha',
        'nekem',
        'neki',
        'nem',
        'néhány',
        'nélkül',
        'nincs',
        'o',
        'ó',
        'olyan',
        'ott',
        'össze',
        'ö',
        'ő',
        'ők',
        'őket',
        'p',
        'pedig',
        'persze',
        'q',
        'r',
        'rá',
        's',
        'saját',
        'sem',
        'semmi',
        'sok',
        'sokat',
        'sokkal',
        'sz',
        'számára',
        'szemben',
        'szerint',
        'szinte',
        't',
        'talán',
        'tehát',
        'teljes',
        'tovább',
        'továbbá',
        'több',
        'u',
        'ú',
        'úgy',
        'ugyanis',
        'új',
        'újabb',
        'újra',
        'után',
        'utána',
        'utolsó',
        'ü',
        'ű',
        'v',
        'vagy',
        'vagyis',
        'valaki',
        'valamely',
        'valami',
        'valamint',
        'való',
        'vagyok',
        'van',
        'vannak',
        'volt',
        'voltam',
        'voltak',
        'voltunk',
        'vissza',
        'vele',
        'viszont',
        'volna',
        'számolnak',
        'szólnak',
        'szól',
        'w',
        'x',
        'y',
        'z',
        'zs',
        'a',
        'ahogy',
        'ahol',
        'aki',
        'akkor',
        'alatt',
        'általában',
        'által',
        'amely',
        'amíg',
        'amikor',
        'ami',
        'amolyan',
        'arra',
        'át',
        'az',
        'azért',
        'azonban',
        'azon',
        'aztán',
        'azt',
        'azután',
        'azzal',
        'bár',
        'be',
        'belül',
        'benne',
        'cikk',
        'csak',
        'de',
        'eddig',
        'egész',
        'egy',
        'egyéb',
        'egyes',
        'egyetlen',
        'egyik',
        'egyre',
        'ekkor',
        'el',
        'elég',
        'ellen',
        'elő',
        'először',
        'előtt',
        'első',
        'emilyen',
        'én',
        'éppen',
        'erre',
        'és',
        'e',
        'ez',
        'ezen',
        'ezért',
        'ezzel',
        'fel',
        'felé',
        'hanem',
        'hiszen',
        'hogy',
        'hogyan',
        'igen',
        'így',
        'ill.',
        'illetve',
        'ill',
        'ilyen',
        'ilyenkor',
        'ismét',
        'ison',
        'itt',
        'jó',
        'jobban',
        'jól',
        'kell',
        'keres',
        'keresztül',
        'ki',
        'kívül',
        'között',
        'közül',
        'legalább',
        'legyen',
        'lehet',
        'lenni',
        'lett',
        'maga',
        'maga',
        'majd',
        'már',
        'más',
        'másik',
        'még',
        'meg',
        'mellett',
        'mely',
        'mert',
        'miért',
        'míg',
        'mikor',
        'milyen',
        'minden',
        'mindenki',
        'mindig',
        'mi',
        'mint',
        'mintha',
        'mivel',
        'most',
        'nagy',
        'nagyobb',
        'nagyon',
        'ne',
        'néha',
        'néhány',
        'neki',
        'nélkül',
        'nem',
        'nincs',
        'ők',
        'olyan',
        'ő',
        'össze',
        'ott',
        'pedig',
        'persze',
        'rá',
        'saját',
        's',
        'sem',
        'semmi',
        'sokkal',
        'sok',
        'számára',
        'számol',
        'szemben',
        'szerint',
        'szinte',
        'szól',
        'talán',
        'tehát',
        'teljes',
        'továbbá',
        'tovább',
        'úgy',
        'ugyanis',
        'új',
        'újabb',
        'újra',
        'utána',
        'után',
        'utolsó',
        'vagy',
        'vagyis',
        'valaki',
        'valamely',
        'valami',
        'valamint',
        'való',
        'van',
        'vissza',
        'viszont',
        'volt'
      ],
      id: [
        'a',
        'abad',
        'acara',
        'aceh',
        'ada',
        'adalah',
        'adanya',
        'adapun',
        'agak',
        'agaknya',
        'agama',
        'agar',
        'agustus',
        'air',
        'akan',
        'akankah',
        'akhir',
        'akhiri',
        'akhirnya',
        'akibat',
        'aku',
        'akulah',
        'alam',
        'album',
        'amat',
        'amatlah',
        'amerika',
        'anak',
        'and',
        'anda',
        'andalah',
        'anggota',
        'antar',
        'antara',
        'antarabangsa',
        'antaranya',
        'apa',
        'apaan',
        'apabila',
        'apakah',
        'apalagi',
        'apatah',
        'api',
        'april',
        'artikel',
        'artinya',
        'as',
        'asal',
        'asalkan',
        'asas',
        'asia',
        'asing',
        'atas',
        'atau',
        'ataukah',
        'ataupun',
        'australia',
        'awal',
        'awalnya',
        'awam',
        'b',
        'badan',
        'bagai',
        'bagaikan',
        'bagaimana',
        'bagaimanakah',
        'bagaimanapun',
        'bagainamakah',
        'bagi',
        'bagian',
        'bahagian',
        'bahan',
        'baharu',
        'bahasa',
        'bahawa',
        'bahkan',
        'bahwa',
        'bahwasannya',
        'bahwasanya',
        'baik',
        'baiknya',
        'bakal',
        'bakalan',
        'balik',
        'bandar',
        'bangsa',
        'bank',
        'banyak',
        'bapak',
        'barang',
        'barangan',
        'barat',
        'baru',
        'baru-baru',
        'bawah',
        'beberapa',
        'begini',
        'beginian',
        'beginikah',
        'beginilah',
        'begitu',
        'begitukah',
        'begitulah',
        'begitupun',
        'bekas',
        'bekerja',
        'belakang',
        'belakangan',
        'belanda',
        'beli',
        'beliau',
        'belum',
        'belumlah',
        'benar',
        'benarkah',
        'benarlah',
        'bentuk',
        'berada',
        'berakhir',
        'berakhirlah',
        'berakhirnya',
        'berapa',
        'berapakah',
        'berapalah',
        'berapapun',
        'berarti',
        'berasal',
        'berat',
        'berawal',
        'berbagai',
        'berbanding',
        'berbeda',
        'berdasarkan',
        'berdatangan',
        'berharap',
        'berhasil',
        'beri',
        'berikan',
        'berikut',
        'berikutan',
        'berikutnya',
        'berita',
        'berjalan',
        'berjaya',
        'berjumlah',
        'berkaitan',
        'berkali',
        'berkali-kali',
        'berkata',
        'berkehendak',
        'berkeinginan',
        'berkenaan',
        'berlainan',
        'berlaku',
        'berlalu',
        'berlangsung',
        'berlebihan',
        'bermacam',
        'bermacam-macam',
        'bermain',
        'bermaksud',
        'bermula',
        'bernama',
        'bernilai',
        'bersama',
        'bersama-sama',
        'bersiap',
        'bertanya',
        'bertemu',
        'berturut',
        'bertutur',
        'berubah',
        'berujar',
        'berupa',
        'besar',
        'besok',
        'betul',
        'betulkah',
        'bhd',
        'biasa',
        'biasanya',
        'bidang',
        'bila',
        'bilakah',
        'bilion',
        'bintang',
        'bisa',
        'bisakah',
        'blog',
        'bn',
        'bola',
        'boleh',
        'bolehkah',
        'bolehlah',
        'buat',
        'bukan',
        'bukankah',
        'bukanlah',
        'bukannya',
        'buku',
        'bulan',
        'bumi',
        'bung',
        'bursa',
        'cadangan',
        'cara',
        'caranya',
        'catch',
        'china',
        'click',
        'code',
        'copyright',
        'cukup',
        'cukupkah',
        'cukuplah',
        'cuma',
        'daerah',
        'dagangan',
        'dahulu',
        'dalam',
        'dan',
        'dana',
        'dapat',
        'dari',
        'daripada',
        'dasar',
        'data',
        'datang',
        'datuk',
        'dekat',
        'demi',
        'demikian',
        'demikianlah',
        'dengan',
        'depan',
        'derivatives',
        'desa',
        'desember',
        'detik',
        'dewan',
        'di',
        'dia',
        'diadakan',
        'diakhiri',
        'diakhirinya',
        'dialah',
        'dianggap',
        'diantara',
        'diantaranya',
        'diberi',
        'diberikan',
        'diberikannya',
        'dibuat',
        'dibuatnya',
        'dibuka',
        'dicatatkan',
        'didapat',
        'didatangkan',
        'didirikan',
        'diduga',
        'digunakan',
        'diibaratkan',
        'diibaratkannya',
        'diingat',
        'diingatkan',
        'diinginkan',
        'dijangka',
        'dijawab',
        'dijelaskan',
        'dijelaskannya',
        'dikarenakan',
        'dikatakan',
        'dikatakannya',
        'dikenal',
        'dikerjakan',
        'diketahui',
        'diketahuinya',
        'dikira',
        'dilakukan',
        'dilalui',
        'dilihat',
        'dimaksud',
        'dimaksudkan',
        'dimaksudkannya',
        'dimaksudnya',
        'dimana',
        'diminta',
        'dimintai',
        'dimisalkan',
        'dimulai',
        'dimulailah',
        'dimulainya',
        'dimungkinkan',
        'dini',
        'diniagakan',
        'dipastikan',
        'diperbuat',
        'diperbuatnya',
        'dipergunakan',
        'diperkirakan',
        'diperlihatkan',
        'diperlukan',
        'diperlukannya',
        'dipersoalkan',
        'dipertanyakan',
        'dipunyai',
        'diri',
        'dirilis',
        'dirinya',
        'dis',
        'disampaikan',
        'disebut',
        'disebutkan',
        'disebutkannya',
        'disember',
        'disini',
        'disinilah',
        'distrik',
        'ditambahkan',
        'ditandaskan',
        'ditanya',
        'ditanyai',
        'ditanyakan',
        'ditegaskan',
        'ditemukan',
        'ditujukan',
        'ditunjuk',
        'ditunjuki',
        'ditunjukkan',
        'ditunjukkannya',
        'ditunjuknya',
        'ditutup',
        'dituturkan',
        'dituturkannya',
        'diucapkan',
        'diucapkannya',
        'diungkapkan',
        'document.write',
        'dolar',
        'dong',
        'dr',
        'dua',
        'dulu',
        'dunia',
        'effective',
        'ekonomi',
        'eksekutif',
        'eksport',
        'empat',
        'enam',
        'enggak',
        'enggaknya',
        'entah',
        'entahlah',
        'era',
        'eropa',
        'err',
        'faedah',
        'feb',
        'film',
        'gat',
        'gedung',
        'gelar',
        'gettracker',
        'global',
        'grup',
        'guna',
        'gunakan',
        'gunung',
        'hadap',
        'hadapan',
        'hal',
        'hampir',
        'hanya',
        'hanyalah',
        'harga',
        'hari',
        'harian',
        'harus',
        'haruslah',
        'harusnya',
        'hasil',
        'hendak',
        'hendaklah',
        'hendaknya',
        'hidup',
        'hingga',
        'https',
        'hubungan',
        'hukum',
        'hutan',
        'i',
        'ia',
        'iaitu',
        'ialah',
        'ibarat',
        'ibaratkan',
        'ibaratnya',
        'ibu',
        'ii',
        'iklan',
        'ikut',
        'ilmu',
        'indeks',
        'india',
        'indonesia',
        'industri',
        'informasi',
        'ingat',
        'inggris',
        'ingin',
        'inginkah',
        'inginkan',
        'ini',
        'inikah',
        'inilah',
        'internasional',
        'islam',
        'isnin',
        'isu',
        'italia',
        'itu',
        'itukah',
        'itulah',
        'jabatan',
        'jadi',
        'jadilah',
        'jadinya',
        'jakarta',
        'jalan',
        'jalur',
        'jaman',
        'jan',
        'jangan',
        'jangankan',
        'janganlah',
        'januari',
        'jauh',
        'jawa',
        'jawab',
        'jawaban',
        'jawabnya',
        'jawatan',
        'jawatankuasa',
        'jelas',
        'jelaskan',
        'jelaslah',
        'jelasnya',
        'jenis',
        'jepang',
        'jepun',
        'jerman',
        'jika',
        'jikalau',
        'jiwa',
        'jual',
        'jualan',
        'juga',
        'julai',
        'jumaat',
        'jumat',
        'jumlah',
        'jumlahnya',
        'jun',
        'juni',
        'justru',
        'juta',
        'kabar',
        'kabupaten',
        'kadar',
        'kala',
        'kalangan',
        'kalau',
        'kalaulah',
        'kalaupun',
        'kali',
        'kalian',
        'kalimantan',
        'kami',
        'kamilah',
        'kamis',
        'kamu',
        'kamulah',
        'kan',
        'kantor',
        'kapal',
        'kapan',
        'kapankah',
        'kapanpun',
        'karena',
        'karenanya',
        'karya',
        'kasus',
        'kata',
        'katakan',
        'katakanlah',
        'katanya',
        'kaunter',
        'kawasan',
        'ke',
        'keadaan',
        'kebetulan',
        'kebutuhan',
        'kecamatan',
        'kecil',
        'kedua',
        'kedua-dua',
        'keduanya',
        'kedudukan',
        'kegiatan',
        'kehidupan',
        'keinginan',
        'kejadian',
        'kekal',
        'kelamaan',
        'kelihatan',
        'kelihatannya',
        'kelima',
        'kelompok',
        'keluar',
        'keluarga',
        'kelurahan',
        'kembali',
        'kementerian',
        'kemudahan',
        'kemudian',
        'kemungkinan',
        'kemungkinannya',
        'kenaikan',
        'kenapa',
        'kenyataan',
        'kepada',
        'kepadanya',
        'kepala',
        'kepentingan',
        'keputusan',
        'kerajaan',
        'kerana',
        'kereta',
        'kerja',
        'kerjasama',
        'kes',
        'kesampaian',
        'keselamatan',
        'keseluruhan',
        'keseluruhannya',
        'kesempatan',
        'kesihatan',
        'keterangan',
        'keterlaluan',
        'ketiga',
        'ketika',
        'ketua',
        'keuntungan',
        'kewangan',
        'khamis',
        'khusus',
        'khususnya',
        'kini',
        'kinilah',
        'kira',
        'kira-kira',
        'kiranya',
        'kita',
        'kitalah',
        'klci',
        'klibor',
        'klik',
        'km',
        'kok',
        'komentar',
        'kompas',
        'komposit',
        'kondisi',
        'kontrak',
        'korban',
        'korea',
        'kos',
        'kota',
        'kuala',
        'kuasa',
        'kukuh',
        'kumpulan',
        'kurang',
        'kurangnya',
        'lagi',
        'lagian',
        'lagu',
        'lah',
        'lain',
        'lainnya',
        'laku',
        'lalu',
        'lama',
        'lamanya',
        'langkah',
        'langsung',
        'lanjut',
        'lanjutnya',
        'laporan',
        'laut',
        'lebih',
        'lembaga',
        'lepas',
        'lewat',
        'lima',
        'lingkungan',
        'login',
        'lokasi',
        'lot',
        'luar',
        'luas',
        'lumpur',
        'mac',
        'macam',
        'mahkamah',
        'mahu',
        'majlis',
        'maka',
        'makanan',
        'makanya',
        'makin',
        'maklumat',
        'malah',
        'malahan',
        'malam',
        'malaysia',
        'mampu',
        'mampukah',
        'mana',
        'manakala',
        'manalagi',
        'mantan',
        'manusia',
        'masa',
        'masalah',
        'masalahnya',
        'masih',
        'masihkah',
        'masing',
        'masing-masing',
        'masuk',
        'masyarakat',
        'mata',
        'mau',
        'maupun',
        'measure',
        'media',
        'mei',
        'melainkan',
        'melakukan',
        'melalui',
        'melawan',
        'melihat',
        'melihatnya',
        'memandangkan',
        'memang',
        'memastikan',
        'membantu',
        'membawa',
        'memberi',
        'memberikan',
        'membolehkan',
        'membuat',
        'memerlukan',
        'memihak',
        'memiliki',
        'meminta',
        'memintakan',
        'memisalkan',
        'memperbuat',
        'mempergunakan',
        'memperkirakan',
        'memperlihatkan',
        'mempersiapkan',
        'mempersoalkan',
        'mempertanyakan',
        'mempunyai',
        'memulai',
        'memungkinkan',
        'menaiki',
        'menambah',
        'menambahkan',
        'menandaskan',
        'menanti',
        'menantikan',
        'menanya',
        'menanyai',
        'menanyakan',
        'menarik',
        'menawarkan',
        'mencapai',
        'mencari',
        'mencatatkan',
        'mendapat',
        'mendapatkan',
        'mendatang',
        'mendatangi',
        'mendatangkan',
        'menegaskan',
        'menerima',
        'menerusi',
        'mengadakan',
        'mengakhiri',
        'mengaku',
        'mengalami',
        'mengambil',
        'mengapa',
        'mengatakan',
        'mengatakannya',
        'mengenai',
        'mengerjakan',
        'mengetahui',
        'menggalakkan',
        'menggunakan',
        'menghadapi',
        'menghendaki',
        'mengibaratkan',
        'mengibaratkannya',
        'mengikut',
        'mengingat',
        'mengingatkan',
        'menginginkan',
        'mengira',
        'mengucapkan',
        'mengucapkannya',
        'mengumumkan',
        'mengungkapkan',
        'mengurangkan',
        'meninggal',
        'meningkat',
        'meningkatkan',
        'menjadi',
        'menjalani',
        'menjawab',
        'menjelang',
        'menjelaskan',
        'menokok',
        'menteri',
        'menuju',
        'menunjuk',
        'menunjuki',
        'menunjukkan',
        'menunjuknya',
        'menurut',
        'menuturkan',
        'menyaksikan',
        'menyampaikan',
        'menyangkut',
        'menyatakan',
        'menyebabkan',
        'menyebutkan',
        'menyediakan',
        'menyeluruh',
        'menyiapkan',
        'merasa',
        'mereka',
        'merekalah',
        'merosot',
        'merupakan',
        'meski',
        'meskipun',
        'mesyuarat',
        'metrotv',
        'meyakini',
        'meyakinkan',
        'milik',
        'militer',
        'minat',
        'minggu',
        'minta',
        'minyak',
        'mirip',
        'misal',
        'misalkan',
        'misalnya',
        'mobil',
        'modal',
        'mohd',
        'mudah',
        'mula',
        'mulai',
        'mulailah',
        'mulanya',
        'muncul',
        'mungkin',
        'mungkinkah',
        'musik',
        'musim',
        'nah',
        'naik',
        'nama',
        'namun',
        'nanti',
        'nantinya',
        'nasional',
        'negara',
        'negara-negara',
        'negeri',
        'new',
        'niaga',
        'nilai',
        'nomor',
        'noun',
        'nov',
        'november',
        'numeral',
        'numeralia',
        'nya',
        'nyaris',
        'nyatanya',
        'of',
        'ogos',
        'okt',
        'oktober',
        'olah',
        'oleh',
        'olehnya',
        'operasi',
        'orang',
        'organisasi',
        'pada',
        'padahal',
        'padanya',
        'pagetracker',
        'pagi',
        'pak',
        'paling',
        'pameran',
        'panjang',
        'pantas',
        'papan',
        'para',
        'paras',
        'parlimen',
        'partai',
        'parti',
        'particle',
        'pasar',
        'pasaran',
        'password',
        'pasti',
        'pastilah',
        'pasukan',
        'paticle',
        'pegawai',
        'pejabat',
        'pekan',
        'pekerja',
        'pelabur',
        'pelaburan',
        'pelancongan',
        'pelanggan',
        'pelbagai',
        'peluang',
        'pemain',
        'pembangunan',
        'pemberita',
        'pembinaan',
        'pemerintah',
        'pemerintahan',
        'pemimpin',
        'pendapatan',
        'pendidikan',
        'penduduk',
        'penerbangan',
        'pengarah',
        'pengeluaran',
        'pengerusi',
        'pengguna',
        'penggunaan',
        'pengurusan',
        'peniaga',
        'peningkatan',
        'penting',
        'pentingnya',
        'per',
        'perancis',
        'perang',
        'peratus',
        'percuma',
        'perdagangan',
        'perdana',
        'peringkat',
        'perjanjian',
        'perkara',
        'perkhidmatan',
        'perladangan',
        'perlu',
        'perlukah',
        'perlunya',
        'permintaan',
        'pernah',
        'perniagaan',
        'persekutuan',
        'persen',
        'persidangan',
        'persoalan',
        'pertama',
        'pertandingan',
        'pertanyaan',
        'pertanyakan',
        'pertubuhan',
        'pertumbuhan',
        'perubahan',
        'perusahaan',
        'pesawat',
        'peserta',
        'petang',
        'pihak',
        'pihaknya',
        'pilihan',
        'pinjaman',
        'polis',
        'polisi',
        'politik',
        'pos',
        'posisi',
        'presiden',
        'prestasi',
        'produk',
        'program',
        'projek',
        'pronomia',
        'pronoun',
        'proses',
        'proton',
        'provinsi',
        'pt',
        'pubdate',
        'pukul',
        'pula',
        'pulau',
        'pun',
        'punya',
        'pusat',
        'rabu',
        'radio',
        'raja',
        'rakan',
        'rakyat',
        'ramai',
        'rantau',
        'rasa',
        'rasanya',
        'rata',
        'raya',
        'rendah',
        'republik',
        'resmi',
        'ribu',
        'ringgit',
        'root',
        'ruang',
        'rumah',
        'rupa',
        'rupanya',
        'saat',
        'saatnya',
        'sabah',
        'sabtu',
        'sahaja',
        'saham',
        'saja',
        'sajalah',
        'sakit',
        'salah',
        'saling',
        'sama',
        'sama-sama',
        'sambil',
        'sampai',
        'sampaikan',
        'sana',
        'sangat',
        'sangatlah',
        'sarawak',
        'satu',
        'sawit',
        'saya',
        'sayalah',
        'sdn',
        'se',
        'sebab',
        'sebabnya',
        'sebagai',
        'sebagaimana',
        'sebagainya',
        'sebagian',
        'sebahagian',
        'sebaik',
        'sebaiknya',
        'sebaliknya',
        'sebanyak',
        'sebarang',
        'sebegini',
        'sebegitu',
        'sebelah',
        'sebelum',
        'sebelumnya',
        'sebenarnya',
        'seberapa',
        'sebesar',
        'sebetulnya',
        'sebisanya',
        'sebuah',
        'sebut',
        'sebutlah',
        'sebutnya',
        'secara',
        'secukupnya',
        'sedang',
        'sedangkan',
        'sedemikian',
        'sedikit',
        'sedikitnya',
        'seenaknya',
        'segala',
        'segalanya',
        'segera',
        'segi',
        'seharusnya',
        'sehingga',
        'seingat',
        'sejak',
        'sejarah',
        'sejauh',
        'sejenak',
        'sejumlah',
        'sekadar',
        'sekadarnya',
        'sekali',
        'sekali-kali',
        'sekalian',
        'sekaligus',
        'sekalipun',
        'sekarang',
        'sekaranglah',
        'sekecil',
        'seketika',
        'sekiranya',
        'sekitar',
        'sekitarnya',
        'sekolah',
        'sektor',
        'sekurang',
        'sekurangnya',
        'sekuriti',
        'sela',
        'selagi',
        'selain',
        'selaku',
        'selalu',
        'selama',
        'selama-lamanya',
        'selamanya',
        'selanjutnya',
        'selasa',
        'selatan',
        'selepas',
        'seluruh',
        'seluruhnya',
        'semacam',
        'semakin',
        'semalam',
        'semampu',
        'semampunya',
        'semasa',
        'semasih',
        'semata',
        'semaunya',
        'sementara',
        'semisal',
        'semisalnya',
        'sempat',
        'semua',
        'semuanya',
        'semula',
        'sen',
        'sendiri',
        'sendirian',
        'sendirinya',
        'senin',
        'seolah',
        'seolah-olah',
        'seorang',
        'sepak',
        'sepanjang',
        'sepantasnya',
        'sepantasnyalah',
        'seperlunya',
        'seperti',
        'sepertinya',
        'sepihak',
        'sept',
        'september',
        'serangan',
        'serantau',
        'seri',
        'serikat',
        'sering',
        'seringnya',
        'serta',
        'serupa',
        'sesaat',
        'sesama',
        'sesampai',
        'sesegera',
        'sesekali',
        'seseorang',
        'sesi',
        'sesuai',
        'sesuatu',
        'sesuatunya',
        'sesudah',
        'sesudahnya',
        'setelah',
        'setempat',
        'setengah',
        'seterusnya',
        'setiap',
        'setiausaha',
        'setiba',
        'setibanya',
        'setidak',
        'setidaknya',
        'setinggi',
        'seusai',
        'sewaktu',
        'siap',
        'siapa',
        'siapakah',
        'siapapun',
        'siaran',
        'sidang',
        'singapura',
        'sini',
        'sinilah',
        'sistem',
        'soal',
        'soalnya',
        'sokongan',
        'sri',
        'stasiun',
        'suara',
        'suatu',
        'sudah',
        'sudahkah',
        'sudahlah',
        'sukan',
        'suku',
        'sumber',
        'sungai',
        'supaya',
        'surat',
        'susut',
        'syarikat',
        'syed',
        'tadi',
        'tadinya',
        'tahap',
        'tahu',
        'tahun',
        'tak',
        'tama',
        'tambah',
        'tambahnya',
        'tampak',
        'tampaknya',
        'tampil',
        'tan',
        'tanah',
        'tandas',
        'tandasnya',
        'tanggal',
        'tanpa',
        'tanya',
        'tanyakan',
        'tanyanya',
        'tapi',
        'tawaran',
        'tegas',
        'tegasnya',
        'teknologi',
        'telah',
        'televisi',
        'teman',
        'tempat',
        'tempatan',
        'tempo',
        'tempoh',
        'tenaga',
        'tengah',
        'tentang',
        'tentara',
        'tentu',
        'tentulah',
        'tentunya',
        'tepat',
        'terakhir',
        'terasa',
        'terbaik',
        'terbang',
        'terbanyak',
        'terbesar',
        'terbuka',
        'terdahulu',
        'terdapat',
        'terdiri',
        'terhadap',
        'terhadapnya',
        'teringat',
        'terjadi',
        'terjadilah',
        'terjadinya',
        'terkait',
        'terkenal',
        'terkira',
        'terlalu',
        'terlebih',
        'terletak',
        'terlihat',
        'termasuk',
        'ternyata',
        'tersampaikan',
        'tersebut',
        'tersebutlah',
        'tertentu',
        'tertuju',
        'terus',
        'terutama',
        'testimoni',
        'testimony',
        'tetap',
        'tetapi',
        'the',
        'tiada',
        'tiap',
        'tiba',
        'tidak',
        'tidakkah',
        'tidaklah',
        'tidaknya',
        'tiga',
        'tim',
        'timbalan',
        'timur',
        'tindakan',
        'tinggal',
        'tinggi',
        'tingkat',
        'toh',
        'tokoh',
        'try',
        'tun',
        'tunai',
        'tunjuk',
        'turun',
        'turut',
        'tutur',
        'tuturnya',
        'tv',
        'uang',
        'ucap',
        'ucapnya',
        'udara',
        'ujar',
        'ujarnya',
        'umum',
        'umumnya',
        'unescape',
        'ungkap',
        'ungkapnya',
        'unit',
        'universitas',
        'untuk',
        'untung',
        'upaya',
        'urus',
        'usah',
        'usaha',
        'usai',
        'user',
        'utama',
        'utara',
        'var',
        'versi',
        'waduh',
        'wah',
        'wahai',
        'wakil',
        'waktu',
        'waktunya',
        'walau',
        'walaupun',
        'wang',
        'wanita',
        'warga',
        'warta',
        'wib',
        'wilayah',
        'wong',
        'word',
        'ya',
        'yaitu',
        'yakin',
        'yakni',
        'yang',
        'zaman'
      ],
      it: [
        'ad',
        'al',
        'allo',
        'ai',
        'agli',
        'all',
        'agl',
        'alla',
        'alle',
        'con',
        'col',
        'coi',
        'da',
        'dal',
        'dallo',
        'dai',
        'dagli',
        'dall',
        'dagl',
        'dalla',
        'dalle',
        'di',
        'del',
        'dello',
        'dei',
        'degli',
        'dell',
        'degl',
        'della',
        'delle',
        'in',
        'nel',
        'nello',
        'nei',
        'negli',
        'nell',
        'negl',
        'nella',
        'nelle',
        'su',
        'sul',
        'sullo',
        'sui',
        'sugli',
        'sull',
        'sugl',
        'sulla',
        'sulle',
        'per',
        'tra',
        'contro',
        'io',
        'tu',
        'lui',
        'lei',
        'noi',
        'voi',
        'loro',
        'mio',
        'mia',
        'miei',
        'mie',
        'tuo',
        'tua',
        'tuoi',
        'tue',
        'suo',
        'sua',
        'suoi',
        'sue',
        'nostro',
        'nostra',
        'nostri',
        'nostre',
        'vostro',
        'vostra',
        'vostri',
        'vostre',
        'mi',
        'ti',
        'ci',
        'vi',
        'lo',
        'la',
        'li',
        'le',
        'gli',
        'ne',
        'il',
        'un',
        'uno',
        'una',
        'ma',
        'ed',
        'se',
        'perchè',
        'perché',
        'perche',
        'anche',
        'come',
        'dov',
        'dove',
        'che',
        'chi',
        'cui',
        'non',
        'più',
        'piu',
        'quale',
        'quanto',
        'quanti',
        'quanta',
        'quante',
        'quello',
        'quelli',
        'quella',
        'quelle',
        'questo',
        'questi',
        'questa',
        'queste',
        'si',
        'tutto',
        'tutti',
        'a',
        'c',
        'e',
        'i',
        'l',
        'o',
        'ho',
        'hai',
        'ha',
        'abbiamo',
        'avete',
        'hanno',
        'abbia',
        'abbiate',
        'abbiano',
        'avrò',
        'avro',
        'avrai',
        'avrà',
        'avra',
        'avremo',
        'avrete',
        'avranno',
        'avrei',
        'avresti',
        'avrebbe',
        'avremmo',
        'avreste',
        'avrebbero',
        'avevo',
        'avevi',
        'aveva',
        'avevamo',
        'avevate',
        'avevano',
        'ebbi',
        'avesti',
        'ebbe',
        'avemmo',
        'aveste',
        'ebbero',
        'avessi',
        'avesse',
        'avessimo',
        'avessero',
        'avendo',
        'avuto',
        'avuta',
        'avuti',
        'avute',
        'sono',
        'sei',
        'è',
        'é',
        'e',
        'siamo',
        'siete',
        'sia',
        'siate',
        'siano',
        'sarà',
        'sarai',
        'sarò',
        'saro',
        'saremo',
        'sarete',
        'saranno',
        'sarei',
        'saresti',
        'sarebbe',
        'saremmo',
        'sareste',
        'sarebbero',
        'ero',
        'eri',
        'era',
        'eravamo',
        'eravate',
        'erano',
        'fui',
        'fosti',
        'fu',
        'fummo',
        'foste',
        'furono',
        'fossi',
        'fosse',
        'fossimo',
        'fossero',
        'essendo',
        'faccio',
        'fai',
        'facciamo',
        'fanno',
        'faccia',
        'facciate',
        'facciano',
        'farà',
        'farai',
        'farò',
        'faremo',
        'farete',
        'faranno',
        'farei',
        'faresti',
        'farebbe',
        'faremmo',
        'fareste',
        'farebbero',
        'facevo',
        'facevi',
        'faceva',
        'facevamo',
        'facevate',
        'facevano',
        'feci',
        'facesti',
        'fece',
        'facemmo',
        'faceste',
        'fecero',
        'facessi',
        'facesse',
        'facessimo',
        'facessero',
        'facendo',
        'sto',
        'stai',
        'sta',
        'stiamo',
        'stanno',
        'stia',
        'stiate',
        'stiano',
        'starà',
        'starai',
        'starò',
        'staremo',
        'starete',
        'staranno',
        'starei',
        'staresti',
        'starebbe',
        'staremmo',
        'stareste',
        'starebbero',
        'stavo',
        'stavi',
        'stava',
        'stavamo',
        'stavate',
        'stavano',
        'stetti',
        'stesti',
        'stette',
        'stemmo',
        'steste',
        'stettero',
        'stessi',
        'stesse',
        'stessimo',
        'stessero',
        'stando'
      ],
      ko: [
        '을',
        '의',
        '에',
        '이',
        '를',
        '으로',
        '은',
        '는',
        '가',
        '로',
        '하고',
        '과',
        '에서',
        '도',
        '와',
        '이다',
        '고',
        '부터',
        '까지',
        '께',
        '에는',
        '이라고',
        '만',
        '라고',
        '보다',
        '에도',
        '다',
        '토록',
        '에게',
        '나',
        '대로',
        '에서는',
        '이나',
        '이며',
        '요',
        '든',
        '으로써',
        '같이',
        '로는',
        '밖에',
        '과의',
        '며',
        '로부터',
        '처럼',
        '아',
        '라',
        '여',
        '으로는',
        '이고',
        '에서의',
        '이라는',
        '만에',
        '으로부터',
        '에서도',
        '와의',
        '엔',
        '만을',
        '부터는',
        '만의',
        '야',
        '까지의',
        '과는',
        '치고',
        '과를',
        '으로의',
        '까지는',
        '보다는',
        '만이',
        '에만',
        '로의'
      ],
      nb: [
        'alle',
        'andre',
        'arbeid',
        'av',
        'begge',
        'bort',
        'bra',
        'bruke',
        'da',
        'denne',
        'der',
        'deres',
        'det',
        'din',
        'disse',
        'du',
        'eller',
        'en',
        'ene',
        'eneste',
        'enhver',
        'enn',
        'er',
        'et',
        'folk',
        'for',
        'fordi',
        'forsÛke',
        'fra',
        'fÅ',
        'fÛr',
        'fÛrst',
        'gjorde',
        'gjÛre',
        'god',
        'gÅ',
        'ha',
        'hadde',
        'han',
        'hans',
        'hennes',
        'her',
        'hva',
        'hvem',
        'hver',
        'hvilken',
        'hvis',
        'hvor',
        'hvordan',
        'hvorfor',
        'ikke',
        'inn',
        'innen',
        'kan',
        'kunne',
        'lage',
        'lang',
        'lik',
        'like',
        'makt',
        'mange',
        'med',
        'meg',
        'meget',
        'men',
        'mens',
        'mer',
        'mest',
        'min',
        'mye',
        'mÅ',
        'mÅte',
        'navn',
        'nei',
        'ny',
        'nÅ',
        'nÅr',
        'og',
        'ogsÅ',
        'om',
        'opp',
        'oss',
        'over',
        'part',
        'punkt',
        'pÅ',
        'rett',
        'riktig',
        'samme',
        'sant',
        'si',
        'siden',
        'sist',
        'skulle',
        'slik',
        'slutt',
        'som',
        'start',
        'stille',
        'tid',
        'til',
        'tilbake',
        'tilstand',
        'under',
        'ut',
        'uten',
        'var',
        'ved',
        'verdi',
        'vi',
        'vil',
        'ville',
        'vite',
        'vÅr',
        'vÖre',
        'vÖrt',
        'Å'
      ],
      no: [
        'aan',
        'af',
        'al',
        'als',
        'bij',
        'dan',
        'dat',
        'die',
        'dit',
        'een',
        'en',
        'er',
        'had',
        'heb',
        'hem',
        'het',
        'hij',
        'hoe',
        'hun',
        'ik',
        'in',
        'is',
        'je',
        'kan',
        'me',
        'men',
        'met',
        'mij',
        'nog',
        'nu',
        'of',
        'ons',
        'ook',
        'te',
        'tot',
        'uit',
        'van',
        'was',
        'wat',
        'we',
        'wel',
        'wij',
        'zal',
        'ze',
        'zei',
        'zij',
        'zo',
        'zou'
      ],
      pl: [
        'a',
        'aby',
        'ach',
        'acz',
        'aczkolwiek',
        'aj',
        'albo',
        'ale',
        'ależ',
        'ani',
        'aż',
        'bardziej',
        'bardzo',
        'bo',
        'bowiem',
        'by',
        'byli',
        'bynajmniej',
        'być',
        'był',
        'była',
        'było',
        'były',
        'będzie',
        'będą',
        'cali',
        'cała',
        'cały',
        'ci',
        'cię',
        'ciebie',
        'co',
        'cokolwiek',
        'coś',
        'czasami',
        'czasem',
        'czemu',
        'czy',
        'czyli',
        'daleko',
        'dla',
        'dlaczego',
        'dlatego',
        'do',
        'dobrze',
        'dokąd',
        'dość',
        'dużo',
        'dwa',
        'dwaj',
        'dwie',
        'dwoje',
        'dziś',
        'dzisiaj',
        'gdy',
        'gdyby',
        'gdyż',
        'gdzie',
        'gdziekolwiek',
        'gdzieś',
        'i',
        'ich',
        'ile',
        'im',
        'inna',
        'inne',
        'inny',
        'innych',
        'iż',
        'ja',
        'ją',
        'jak',
        'jakaś',
        'jakby',
        'jaki',
        'jakichś',
        'jakie',
        'jakiś',
        'jakiż',
        'jakkolwiek',
        'jako',
        'jakoś',
        'je',
        'jeden',
        'jedna',
        'jedno',
        'jednak',
        'jednakże',
        'jego',
        'jej',
        'jemu',
        'jest',
        'jestem',
        'jeszcze',
        'jeśli',
        'jeżeli',
        'już',
        'ją',
        'każdy',
        'kiedy',
        'kilka',
        'kimś',
        'kto',
        'ktokolwiek',
        'ktoś',
        'która',
        'które',
        'którego',
        'której',
        'który',
        'których',
        'którym',
        'którzy',
        'ku',
        'lat',
        'lecz',
        'lub',
        'ma',
        'mają',
        'mało',
        'mam',
        'mi',
        'mimo',
        'między',
        'mną',
        'mnie',
        'mogą',
        'moi',
        'moim',
        'moja',
        'moje',
        'może',
        'możliwe',
        'można',
        'mój',
        'mu',
        'musi',
        'my',
        'na',
        'nad',
        'nam',
        'nami',
        'nas',
        'nasi',
        'nasz',
        'nasza',
        'nasze',
        'naszego',
        'naszych',
        'natomiast',
        'natychmiast',
        'nawet',
        'nią',
        'nic',
        'nich',
        'nie',
        'niech',
        'niego',
        'niej',
        'niemu',
        'nigdy',
        'nim',
        'nimi',
        'niż',
        'no',
        'o',
        'obok',
        'od',
        'około',
        'on',
        'ona',
        'one',
        'oni',
        'ono',
        'oraz',
        'oto',
        'owszem',
        'pan',
        'pana',
        'pani',
        'po',
        'pod',
        'podczas',
        'pomimo',
        'ponad',
        'ponieważ',
        'powinien',
        'powinna',
        'powinni',
        'powinno',
        'poza',
        'prawie',
        'przecież',
        'przed',
        'przede',
        'przedtem',
        'przez',
        'przy',
        'roku',
        'również',
        'sam',
        'sama',
        'są',
        'się',
        'skąd',
        'sobie',
        'sobą',
        'sposób',
        'swoje',
        'ta',
        'tak',
        'taka',
        'taki',
        'takie',
        'także',
        'tam',
        'te',
        'tego',
        'tej',
        'temu',
        'ten',
        'teraz',
        'też',
        'to',
        'tobą',
        'tobie',
        'toteż',
        'trzeba',
        'tu',
        'tutaj',
        'twoi',
        'twoim',
        'twoja',
        'twoje',
        'twym',
        'twój',
        'ty',
        'tych',
        'tylko',
        'tym',
        'u',
        'w',
        'wam',
        'wami',
        'was',
        'wasz',
        'wasza',
        'wasze',
        'we',
        'według',
        'wiele',
        'wielu',
        'więc',
        'więcej',
        'wszyscy',
        'wszystkich',
        'wszystkie',
        'wszystkim',
        'wszystko',
        'wtedy',
        'wy',
        'właśnie',
        'z',
        'za',
        'zapewne',
        'zawsze',
        'ze',
        'zł',
        'znowu',
        'znów',
        'został',
        'żaden',
        'żadna',
        'żadne',
        'żadnych',
        'że',
        'żeby'
      ],
      pt: [
        'a',
        'à',
        'abril',
        'agosto',
        'ainda',
        'ano',
        'anos',
        'ao',
        'aos',
        'apenas',
        'as',
        'às',
        'até',
        'brasil',
        'com',
        'como',
        'contra',
        'da',
        'das',
        'de',
        'depois',
        'deve',
        'dezembro',
        'dia',
        'disse',
        'diz',
        'do',
        'dois',
        'dos',
        'e',
        'é',
        'ela',
        'ele',
        'em',
        'entre',
        'era',
        'está',
        'estado',
        'estão',
        'eu',
        'foi',
        'folha',
        'foram',
        'governo',
        'grande',
        'há',
        'hoje',
        'isso',
        'já',
        'local',
        'maio',
        'maior',
        'mais',
        'mas',
        'mercado',
        'mesmo',
        'mil',
        'milhões',
        'muito',
        'mundo',
        'na',
        'não',
        'nas',
        'no',
        'nos',
        'o',
        'ontem',
        'os',
        'ou',
        'país',
        'para',
        'paulo',
        'pela',
        'pelo',
        'pessoas',
        'pode',
        'por',
        'porque',
        'presidente',
        'quando',
        'que',
        'quem',
        'r',
        'rio',
        'são',
        'se',
        'segundo',
        'sem',
        'ser',
        'será',
        'seu',
        'seus',
        'só',
        'sobre',
        'sua',
        'também',
        'tem',
        'ter',
        'todos',
        'três',
        'um',
        'uma',
        'us',
        'vaia',
        'à',
        'acordo',
        'afirmou',
        'agora',
        'ainda',
        'além',
        'alguns',
        'ano',
        'anos',
        'antes',
        'ao',
        'aos',
        'apenas',
        'as',
        'às',
        'assim',
        'até',
        'banco',
        'bem',
        'brasil',
        'brasileira',
        'brasileiro',
        'brasília',
        'cada',
        'carlos',
        'casa',
        'caso',
        'cerca',
        'cidade',
        'com',
        'como',
        'congresso',
        'contra',
        'da',
        'das',
        'de',
        'depois',
        'desde',
        'deve',
        'dia',
        'dias',
        'dinheiro',
        'disse',
        'diz',
        'do',
        'dois',
        'dos',
        'duas',
        'durante',
        'e',
        'é',
        'economia',
        'ela',
        'ele',
        'eles',
        'em',
        'empresa',
        'empresas',
        'entre',
        'era',
        'especial',
        'essa',
        'esse',
        'esta',
        'está',
        'estado',
        'estão',
        'estava',
        'este',
        'eu',
        'eua',
        'exemplo',
        'faz',
        'fazer',
        'federal',
        'fernando',
        'fevereiro',
        'fhc',
        'filme',
        'final',
        'foi',
        'folha',
        'foram',
        'forma',
        'governo',
        'grande',
        'grupo',
        'há',
        'henrique',
        'história',
        'hoje',
        'inflação',
        'isso',
        'já',
        'janeiro',
        'josé',
        'lei',
        'local',
        'maior',
        'mais',
        'março',
        'mas',
        'me',
        'melhor',
        'menos',
        'mercado',
        'mês',
        'meses',
        'mesmo',
        'mil',
        'milhões',
        'ministro',
        'muito',
        'mundo',
        'na',
        'nacional',
        'nada',
        'não',
        'nas',
        'nem',
        'no',
        'nos',
        'nova',
        'novo',
        'o',
        'onde',
        'ontem',
        'os',
        'ou',
        'outra',
        'outro',
        'outros',
        'outubro',
        'país',
        'para',
        'parte',
        'partir',
        'passado',
        'paulo',
        'pela',
        'pelo',
        'pelos',
        'pessoas',
        'plano',
        'pode',
        'polícia',
        'política',
        'por',
        'porque',
        'preços',
        'presidente',
        'primeira',
        'primeiro',
        'programa',
        'projeto',
        'público',
        'qual',
        'qualquer',
        'quando',
        'quatro',
        'que',
        'quem',
        'r',
        'real',
        'reportagem',
        'rio',
        'são',
        'se',
        'segundo',
        'seja',
        'sem',
        'semana',
        'sempre',
        'sendo',
        'ser',
        'será',
        'seria',
        'seu',
        'seus',
        'sistema',
        'só',
        'sobre',
        'sp',
        'sua',
        'suas',
        'também',
        'tem',
        'têm',
        'tempo',
        'ter',
        'todo',
        'todos',
        'trabalho',
        'três',
        'tudo',
        'um',
        'uma',
        'us',
        'vai',
        'vez',
        'vida',
        'vocêa',
        'à',
        'acordo',
        'afirma',
        'afirmou',
        'agora',
        'ainda',
        'além',
        'alguns',
        'ano',
        'anos',
        'antes',
        'ao',
        'aos',
        'apenas',
        'após',
        'aqui',
        'área',
        'as',
        'às',
        'assim',
        'até',
        'aumento',
        'banco',
        'bem',
        'bilhões',
        'bom',
        'brasil',
        'brasileira',
        'brasileiro',
        'brasília',
        'cada',
        'câmara',
        'campanha',
        'candidato',
        'carlos',
        'casa',
        'caso',
        'central',
        'centro',
        'cerca',
        'cidade',
        'cinco',
        'cinema',
        'coisa',
        'com',
        'como',
        'congresso',
        'conta',
        'contra',
        'da',
        'dar',
        'das',
        'de',
        'depois',
        'deputado',
        'desde',
        'deve',
        'dia',
        'dias',
        'dinheiro',
        'direito',
        'diretor',
        'disse',
        'diz',
        'do',
        'dois',
        'dos',
        'duas',
        'durante',
        'e',
        'é',
        'economia',
        'econômica',
        'ela',
        'ele',
        'eles',
        'em',
        'empresa',
        'empresas',
        'enquanto',
        'então',
        'entre',
        'equipe',
        'era',
        'especial',
        'essa',
        'esse',
        'esta',
        'está',
        'estado',
        'estados',
        'estão',
        'estava',
        'este',
        'eu',
        'eua',
        'exemplo',
        'falta',
        'fato',
        'faz',
        'fazer',
        'federal',
        'fernando',
        'fez',
        'fhc',
        'ficou',
        'filho',
        'filme',
        'fim',
        'final',
        'foi',
        'folha',
        'fora',
        'foram',
        'forma',
        'governo',
        'grande',
        'grupo',
        'há',
        'havia',
        'henrique',
        'história',
        'hoje',
        'inflação',
        'início',
        'isso',
        'já',
        'janeiro',
        'jogo',
        'josé',
        'junho',
        'julho',
        'juros',
        'justiça',
        'lado',
        'lei',
        'livro',
        'local',
        'lugar',
        'maior',
        'mais',
        'mas',
        'me',
        'média',
        'meio',
        'melhor',
        'menos',
        'mercado',
        'mês',
        'meses',
        'mesma',
        'mesmo',
        'meu',
        'mil',
        'milhões',
        'minha',
        'ministério',
        'ministro',
        'momento',
        'muito',
        'mulher',
        'mundo',
        'na',
        'nacional',
        'nada',
        'não',
        'nas',
        'nem',
        'neste',
        'no',
        'noite',
        'nome',
        'nos',
        'nós',
        'nova',
        'novembro',
        'novo',
        'num',
        'numa',
        'número',
        'o',
        'onde',
        'ontem',
        'os',
        'ou',
        'outra',
        'outras',
        'outro',
        'outros',
        'país',
        'países',
        'para',
        'parte',
        'partido',
        'partir',
        'passado',
        'paulo',
        'pela',
        'pelo',
        'pelos',
        'período',
        'pesquisa',
        'pessoas',
        'plano',
        'pode',
        'podem',
        'poder',
        'polícia',
        'política',
        'pontos',
        'por',
        'porque',
        'pouco',
        'prazo',
        'preço',
        'preços',
        'presidente',
        'primeira',
        'primeiro',
        'problema',
        'problemas',
        'processo',
        'produção',
        'produtos',
        'programa',
        'projeto',
        'próprio',
        'pt',
        'público',
        'qual',
        'qualquer',
        'quando',
        'quanto',
        'quase',
        'quatro',
        'que',
        'quem',
        'quer',
        'r',
        'real',
        'recursos',
        'região',
        'relação',
        'reportagem',
        'rio',
        'são',
        'saúde',
        'se',
        'segundo',
        'seja',
        'sem',
        'semana',
        'sempre',
        'sendo',
        'ser',
        'será',
        'serão',
        'seria',
        'setembro',
        'setor',
        'seu',
        'seus',
        'sido',
        'silva',
        'sistema',
        'só',
        'sobre',
        'social',
        'sociedade',
        'sp',
        'sua',
        'suas',
        'sucursal',
        'sul',
        'também',
        'tão',
        'tel',
        'tem',
        'têm',
        'tempo',
        'ter',
        'teve',
        'tinha',
        'toda',
        'todas',
        'todo',
        'todos',
        'trabalho',
        'três',
        'tudo',
        'último',
        'um',
        'uma',
        'us',
        'vai',
        'valor',
        'vão',
        'vem',
        'vez',
        'vezes',
        'vida',
        'você',
        'zona'
      ],
      ru: [
        'а',
        'е',
        'и',
        'ж',
        'м',
        'о',
        'на',
        'не',
        'ни',
        'об',
        'но',
        'он',
        'мне',
        'мои',
        'мож',
        'она',
        'они',
        'оно',
        'мной',
        'много',
        'многочисленное',
        'многочисленная',
        'многочисленные',
        'многочисленный',
        'мною',
        'мой',
        'мог',
        'могут',
        'можно',
        'может',
        'можхо',
        'мор',
        'моя',
        'моё',
        'мочь',
        'над',
        'нее',
        'оба',
        'нам',
        'нем',
        'нами',
        'ними',
        'мимо',
        'немного',
        'одной',
        'одного',
        'менее',
        'однажды',
        'однако',
        'меня',
        'нему',
        'меньше',
        'ней',
        'наверху',
        'него',
        'ниже',
        'мало',
        'надо',
        'один',
        'одиннадцать',
        'одиннадцатый',
        'назад',
        'наиболее',
        'недавно',
        'миллионов',
        'недалеко',
        'между',
        'низко',
        'меля',
        'нельзя',
        'нибудь',
        'непрерывно',
        'наконец',
        'никогда',
        'никуда',
        'нас',
        'наш',
        'нет',
        'нею',
        'неё',
        'них',
        'мира',
        'наша',
        'наше',
        'наши',
        'ничего',
        'начала',
        'нередко',
        'несколько',
        'обычно',
        'опять',
        'около',
        'мы',
        'ну',
        'нх',
        'от',
        'отовсюду',
        'особенно',
        'нужно',
        'очень',
        'отсюда',
        'в',
        'во',
        'вон',
        'вниз',
        'внизу',
        'вокруг',
        'вот',
        'восемнадцать',
        'восемнадцатый',
        'восемь',
        'восьмой',
        'вверх',
        'вам',
        'вами',
        'важное',
        'важная',
        'важные',
        'важный',
        'вдали',
        'везде',
        'ведь',
        'вас',
        'ваш',
        'ваша',
        'ваше',
        'ваши',
        'впрочем',
        'весь',
        'вдруг',
        'вы',
        'все',
        'второй',
        'всем',
        'всеми',
        'времени',
        'время',
        'всему',
        'всего',
        'всегда',
        'всех',
        'всею',
        'всю',
        'вся',
        'всё',
        'всюду',
        'г',
        'год',
        'говорил',
        'говорит',
        'года',
        'году',
        'где',
        'да',
        'ее',
        'за',
        'из',
        'ли',
        'же',
        'им',
        'до',
        'по',
        'ими',
        'под',
        'иногда',
        'довольно',
        'именно',
        'долго',
        'позже',
        'более',
        'должно',
        'пожалуйста',
        'значит',
        'иметь',
        'больше',
        'пока',
        'ему',
        'имя',
        'пор',
        'пора',
        'потом',
        'потому',
        'после',
        'почему',
        'почти',
        'посреди',
        'ей',
        'два',
        'две',
        'двенадцать',
        'двенадцатый',
        'двадцать',
        'двадцатый',
        'двух',
        'его',
        'дел',
        'или',
        'без',
        'день',
        'занят',
        'занята',
        'занято',
        'заняты',
        'действительно',
        'давно',
        'девятнадцать',
        'девятнадцатый',
        'девять',
        'девятый',
        'даже',
        'алло',
        'жизнь',
        'далеко',
        'близко',
        'здесь',
        'дальше',
        'для',
        'лет',
        'зато',
        'даром',
        'первый',
        'перед',
        'затем',
        'зачем',
        'лишь',
        'десять',
        'десятый',
        'ею',
        'её',
        'их',
        'бы',
        'еще',
        'при',
        'был',
        'про',
        'процентов',
        'против',
        'просто',
        'бывает',
        'бывь',
        'если',
        'люди',
        'была',
        'были',
        'было',
        'будем',
        'будет',
        'будете',
        'будешь',
        'прекрасно',
        'буду',
        'будь',
        'будто',
        'будут',
        'ещё',
        'пятнадцать',
        'пятнадцатый',
        'друго',
        'другое',
        'другой',
        'другие',
        'другая',
        'других',
        'есть',
        'пять',
        'быть',
        'лучше',
        'пятый',
        'к',
        'ком',
        'конечно',
        'кому',
        'кого',
        'когда',
        'которой',
        'которого',
        'которая',
        'которые',
        'который',
        'которых',
        'кем',
        'каждое',
        'каждая',
        'каждые',
        'каждый',
        'кажется',
        'как',
        'какой',
        'какая',
        'кто',
        'кроме',
        'куда',
        'кругом',
        'с',
        'т',
        'у',
        'я',
        'та',
        'те',
        'уж',
        'со',
        'то',
        'том',
        'снова',
        'тому',
        'совсем',
        'того',
        'тогда',
        'тоже',
        'собой',
        'тобой',
        'собою',
        'тобою',
        'сначала',
        'только',
        'уметь',
        'тот',
        'тою',
        'хорошо',
        'хотеть',
        'хочешь',
        'хоть',
        'хотя',
        'свое',
        'свои',
        'твой',
        'своей',
        'своего',
        'своих',
        'свою',
        'твоя',
        'твоё',
        'раз',
        'уже',
        'сам',
        'там',
        'тем',
        'чем',
        'сама',
        'сами',
        'теми',
        'само',
        'рано',
        'самом',
        'самому',
        'самой',
        'самого',
        'семнадцать',
        'семнадцатый',
        'самим',
        'самими',
        'самих',
        'саму',
        'семь',
        'чему',
        'раньше',
        'сейчас',
        'чего',
        'сегодня',
        'себе',
        'тебе',
        'сеаой',
        'человек',
        'разве',
        'теперь',
        'себя',
        'тебя',
        'седьмой',
        'спасибо',
        'слишком',
        'так',
        'такое',
        'такой',
        'такие',
        'также',
        'такая',
        'сих',
        'тех',
        'чаще',
        'четвертый',
        'через',
        'часто',
        'шестой',
        'шестнадцать',
        'шестнадцатый',
        'шесть',
        'четыре',
        'четырнадцать',
        'четырнадцатый',
        'сколько',
        'сказал',
        'сказала',
        'сказать',
        'ту',
        'ты',
        'три',
        'эта',
        'эти',
        'что',
        'это',
        'чтоб',
        'этом',
        'этому',
        'этой',
        'этого',
        'чтобы',
        'этот',
        'стал',
        'туда',
        'этим',
        'этими',
        'рядом',
        'тринадцать',
        'тринадцатый',
        'этих',
        'третий',
        'тут',
        'эту',
        'суть',
        'чуть',
        'тысяч'
      ],
      sv: [
        'kunna',
        'om',
        'ovan',
        'enligt',
        'i enlighet med detta',
        'över',
        'faktiskt',
        'efter',
        'efteråt',
        'igen',
        'mot',
        'är inte',
        'alla',
        'tillåta',
        'tillåter',
        'nästan',
        'ensam',
        'längs',
        'redan',
        'också',
        'även om',
        'alltid',
        'am',
        'bland',
        'bland',
        'en',
        'och',
        'en annan',
        'någon',
        'någon',
        'hur som helst',
        'någon',
        'något',
        'ändå',
        'ändå',
        'var som helst',
        'isär',
        'visas',
        'uppskatta',
        'lämpligt',
        'är',
        'inte',
        'runt',
        'som',
        'åt sidan',
        'be',
        'frågar',
        'associerad',
        'vid',
        'tillgängliga',
        'bort',
        'väldigt',
        'vara',
        'blev',
        'eftersom',
        'bli',
        'blir',
        'blir',
        'varit',
        'innan',
        'förhand',
        'bakom',
        'vara',
        'tro',
        'nedan',
        'bredvid',
        'förutom',
        'bäst',
        'bättre',
        'mellan',
        'bortom',
        'både',
        'kort',
        'men',
        'genom',
        'c',
        "c'mon",
        'c: s',
        'kom',
        'kampanj',
        'kan',
        'kan inte',
        'kan inte',
        'cant',
        'orsaka',
        'orsaker',
        'viss',
        'säkerligen',
        'förändringar',
        'klart',
        'co',
        'com',
        'komma',
        'kommer',
        'om',
        'följaktligen',
        'överväga',
        'överväger',
        'innehålla',
        'innehållande',
        'innehåller',
        'motsvarande',
        'kunde',
        'kunde inte',
        'kurs',
        'närvarande',
        'definitivt',
        'beskrivits',
        'trots',
        'gjorde',
        'inte',
        'olika',
        'göra',
        'gör',
        'inte',
        'gör',
        'inte',
        'gjort',
        'ned',
        'nedåt',
        'under',
        'varje',
        'edu',
        'åtta',
        'antingen',
        'annars',
        'någon annanstans',
        'tillräckligt',
        'godkändes',
        'helt',
        'speciellt',
        'et',
        'etc',
        'även',
        'någonsin',
        'varje',
        'alla',
        'alla',
        'allt',
        'överallt',
        'ex',
        'exakt',
        'exempel',
        'utom',
        'långt',
        'få',
        'femte',
        'först',
        'finansiella',
        'fem',
        'följt',
        'efter',
        'följer',
        'för',
        'fd',
        'tidigare',
        'framåt',
        'fyra',
        'från',
        'ytterligare',
        'dessutom',
        'få',
        'blir',
        'få',
        'given',
        'ger',
        'gå',
        'går',
        'gå',
        'borta',
        'fick',
        'fått',
        'hälsningar',
        'hade',
        'hade inte',
        'händer',
        'knappast',
        'har',
        'har inte',
        'ha',
        'har inte',
        'med',
        'han',
        'han är',
        'hallå',
        'hjälpa',
        'hence',
        'henne',
        'här',
        'här finns',
        'härefter',
        'härmed',
        'häri',
        'härpå',
        'hennes',
        'själv',
        'hej',
        'honom',
        'själv',
        'hans',
        'hit',
        'förhoppningsvis',
        'hur',
        'howbeit',
        'dock',
        'jag skulle',
        'jag ska',
        'jag är',
        'jag har',
        'om',
        'ignoreras',
        'omedelbar',
        'i',
        'eftersom',
        'inc',
        'indeed',
        'indikera',
        'indikerade',
        'indikerar',
        'inre',
        'mån',
        'istället',
        'in',
        'inåt',
        'är',
        'är inte',
        'den',
        'det skulle',
        'det ska',
        'det är',
        'dess',
        'själv',
        'bara',
        'hålla',
        'håller',
        'hålls',
        'vet',
        'vet',
        'känd',
        'sista',
        'nyligen',
        'senare',
        'senare',
        'latterly',
        'minst',
        'mindre',
        'lest',
        'låt',
        'låt oss',
        'liknande',
        'gillade',
        'sannolikt',
        'lite',
        'ser',
        'ser',
        'ser',
        'ltd',
        'huvudsakligen',
        'många',
        'kan',
        'kanske',
        'mig',
        'betyda',
        'under tiden',
        'endast',
        'kanske',
        'mer',
        'dessutom',
        'mest',
        'mestadels',
        'mycket',
        'måste',
        'min',
        'själv',
        'namn',
        'nämligen',
        'nd',
        'nära',
        'nästan',
        'nödvändigt',
        'behöver',
        'behov',
        'varken',
        'aldrig',
        'ändå',
        'ny',
        'nästa',
        'nio',
        'ingen',
        'ingen',
        'icke',
        'ingen',
        'ingen',
        'eller',
        'normalt',
        'inte',
        'ingenting',
        'roman',
        'nu',
        'ingenstans',
        'uppenbarligen',
        'av',
        'off',
        'ofta',
        'oh',
        'ok',
        'okay',
        'gammal',
        'på',
        'en gång',
        'ett',
        'ettor',
        'endast',
        'på',
        'eller',
        'andra',
        'andra',
        'annars',
        'borde',
        'vår',
        'vårt',
        'oss',
        'ut',
        'utanför',
        'över',
        'övergripande',
        'egen',
        'särskilt',
        'särskilt',
        'per',
        'kanske',
        'placeras',
        'vänligen',
        'plus',
        'möjligt',
        'förmodligen',
        'förmodligen',
        'ger',
        'ganska',
        'citera',
        'kvartalsvis',
        'snarare',
        'verkligen',
        'rimligen',
        'om',
        'oavsett',
        'gäller',
        'relativt',
        'respektive',
        'höger',
        'sa',
        'samma',
        'såg',
        'säga',
        'säger',
        'säger',
        'andra',
        'det andra',
        'se',
        'ser',
        'verkar',
        'verkade',
        'informationsproblem',
        'verkar',
        'sett',
        'själv',
        'själva',
        'förnuftig',
        'skickas',
        'allvarlig',
        'allvarligt',
        'sju',
        'flera',
        'skall',
        'hon',
        'bör',
        'bör inte',
        'eftersom',
        'sex',
        'så',
        'några',
        'någon',
        'på något sätt',
        'någon',
        'något',
        'sometime',
        'ibland',
        'något',
        'någonstans',
        'snart',
        'sorry',
        'specificerade',
        'ange',
        'ange',
        'fortfarande',
        'sub',
        'sådan',
        'sup',
        'säker',
        't s',
        'ta',
        'tas',
        'berätta',
        'tenderar',
        'än',
        'tacka',
        'tack',
        'thanx',
        'att',
        'det är',
        'brinner',
        'den',
        'deras',
        'deras',
        'dem',
        'själva',
        'sedan',
        'därifrån',
        'där',
        'det finns',
        'därefter',
        'därigenom',
        'därför',
        'däri',
        'theres',
        'därpå',
        'dessa',
        'de',
        'de hade',
        'de kommer',
        'de är',
        'de har',
        'tror',
        'tredje',
        'detta',
        'grundlig',
        'grundligt',
        'de',
        'though',
        'tre',
        'genom',
        'hela',
        'thru',
        'sålunda',
        'till',
        'tillsammans',
        'alltför',
        'tog',
        'mot',
        'mot',
        'försökte',
        'försöker',
        'verkligt',
        'försök',
        'försöker',
        'två gånger',
        'två',
        'enligt',
        'tyvärr',
        'såvida inte',
        'osannolikt',
        'tills',
        'åt',
        'upp',
        'på',
        'oss',
        'använda',
        'används',
        'användbar',
        'använder',
        'användning',
        'vanligtvis',
        'uucp',
        'värde',
        'olika',
        'mycket',
        'via',
        'viz',
        'vs',
        'vill',
        'vill',
        'var',
        'var inte',
        'sätt',
        'vi',
        'vi skulle',
        'vi kommer',
        'vi är',
        'vi har',
        'välkommen',
        'väl',
        'gick',
        'var',
        'var inte',
        'vad',
        'vad är',
        'oavsett',
        'när',
        'varifrån',
        'närhelst',
        'där',
        'var är',
        'varefter',
        'medan',
        'varigenom',
        'vari',
        'varpå',
        'varhelst',
        'huruvida',
        'som',
        'medan',
        'dit',
        'som',
        'vem är',
        'vem',
        'hela',
        'vem',
        'vars',
        'varför',
        'kommer',
        'villig',
        'önskar',
        'med',
        'inom',
        'utan',
        'kommer inte',
        'undrar',
        'skulle',
        'skulle inte',
        'ja',
        'ännu',
        'ni',
        'du skulle',
        'kommer du',
        'du är',
        'du har',
        'din',
        'själv',
        'er',
        'noll',
        'tjänsteman',
        'skarpt',
        'kritiserade'
      ],
      th: [
        'เก็บ',
        'เกิด',
        'เกิน',
        'เกินๆ',
        'เกี่ยวเนื่อง',
        'เกี่ยวกัน',
        'เกี่ยวกับ',
        'เกี่ยวข้อง',
        'เกี่ยวๆ',
        'เกือบ',
        'เกือบจะ',
        'เกือบๆ',
        'เขา',
        'เข้า',
        'เข้าใจ',
        'เขียน',
        'เคย',
        'เคยๆ',
        'เฉกเช่น',
        'เฉพาะ',
        'เฉย',
        'เฉยๆ',
        'เช่น',
        'เช่นเคย',
        'เช่นเดียวกัน',
        'เช่นเดียวกับ',
        'เช่นเมื่อ',
        'เช่นใด',
        'เช่นไร',
        'เช่นก่อน',
        'เช่นกัน',
        'เช่นดัง',
        'เช่นดังเก่า',
        'เช่นดังก่อน',
        'เช่นดังที่',
        'เช่นดังว่า',
        'เช่นที่',
        'เช่นที่เคย',
        'เช่นที่ว่า',
        'เช่นนั้น',
        'เช่นนั้นเอง',
        'เช่นนี้',
        'เชื่อ',
        'เชื่อถือ',
        'เชื่อมั่น',
        'เชื่อว่า',
        'เดิม',
        'เดิมที',
        'เดิมๆ',
        'เดียว',
        'เดี๋ยว',
        'เดี๋ยวก่อน',
        'เดียวกัน',
        'เดียวกับ',
        'เดี๋ยวนั้น',
        'เดี๋ยวนี้',
        'เต็มไปด้วย',
        'เต็มไปหมด',
        'เต็มๆ',
        'เถอะ',
        'เถิด',
        'เท่า',
        'เท่าใด',
        'เท่าไร',
        'เท่าไหร่',
        'เท่ากัน',
        'เท่ากับ',
        'เท่าที่',
        'เท่านั้น',
        'เท่านี้',
        'เธอ',
        'เน้น',
        'เนี่ย',
        'เนี่ยเอง',
        'เป็น',
        'เป็นเพื่อ',
        'เป็นแต่',
        'เป็นด้วย',
        'เป็นดัง',
        'เป็นต้น',
        'เป็นอัน',
        'เป็นอันมาก',
        'เป็นอาทิ',
        'เปลี่ยน',
        'เปลี่ยนแปลง',
        'เผื่อ',
        'เผื่อจะ',
        'เผื่อที่',
        'เผื่อว่า',
        'เพราะ',
        'เพราะฉะนั้น',
        'เพราะว่า',
        'เพิ่ง',
        'เพิ่งจะ',
        'เพิ่ม',
        'เพิ่มเติม',
        'เพี',
        'เพียง',
        'เพียงเพื่อ',
        'เพียงแค่',
        'เพียงแต่',
        'เพียงใด',
        'เพียงไหน',
        'เพียงพอ',
        'เพื่อ',
        'เพื่อให้',
        'เพื่อที่',
        'เพื่อว่า',
        'เมื่อ',
        'เมื่อเช้า',
        'เมื่อเย็น',
        'เมื่อใด',
        'เมื่อไร',
        'เมื่อไหร่',
        'เมื่อก่อน',
        'เมื่อครั้ง',
        'เมื่อครั้งก่อน',
        'เมื่อคราว',
        'เมื่อคราวก่อน',
        'เมื่อคราวที่',
        'เมื่อคืน',
        'เมื่อนั้น',
        'เมื่อนี้',
        'เมื่อวันวาน',
        'เมื่อวาน',
        'เยอะ',
        'เยอะแยะ',
        'เร็ว',
        'เร็วๆ',
        'เรา',
        'เราๆ',
        'เริ่ม',
        'เรียก',
        'เรียบ',
        'เรื่อย',
        'เรื่อยๆ',
        'เล็ก',
        'เล็กน้อย',
        'เล็กๆ',
        'เลย',
        'เล่าว่า',
        'เสร็จ',
        'เสร็จแล้ว',
        'เสียแล้ว',
        'เสียจน',
        'เสียด้วย',
        'เสียนี่',
        'เหตุ',
        'เหตุไร',
        'เหตุนั้น',
        'เหตุนี้',
        'เหตุมด',
        'เห็นแก่',
        'เห็นควร',
        'เห็นจะ',
        'เห็นว่า',
        'เหล่า',
        'เหล่านั้น',
        'เหล่านี้',
        'เหลือ',
        'เหลือเกิน',
        'เอง',
        'เอ็ง',
        'เอา',
        'แก',
        'แก่',
        'แก้ไข',
        'แค่',
        'แค่เพียง',
        'แค่ไหน',
        'แค่จะ',
        'แค่นั้น',
        'แค่นี้',
        'แค่ว่า',
        'แด่',
        'แต่',
        'แต่เดิม',
        'แต่เพียง',
        'แต่เมื่อ',
        'แต่ไร',
        'แต่ไหน',
        'แต่ก็',
        'แต่ก่อน',
        'แต่จะ',
        'แต่ต้อง',
        'แต่ถ้า',
        'แต่ทว่า',
        'แต่ที่',
        'แต่นั้น',
        'แต่ละ',
        'แต่ว่า',
        'แต่อย่างใด',
        'แท้',
        'แท้จริง',
        'แบบ',
        'แม้',
        'แม้แต่',
        'แม้กระทั่ง',
        'แม้นว่า',
        'แม้ว่า',
        'แยะ',
        'แล้ว',
        'แล้วเสร็จ',
        'แล้วแต่',
        'แล้วกัน',
        'แสดง',
        'แสดงว่า',
        'แห่ง',
        'แห่งโน้น',
        'แห่งใด',
        'แห่งไหน',
        'แห่งนั้น',
        'แห่งนี้',
        'แหละ',
        'โดย',
        'โดยเฉพาะ',
        'โดยเฉพาะอย่าง',
        'โดยเมื่อ',
        'โดยเร็ว',
        'โดยแท้',
        'โดยแท้จริง',
        'โดยง่าย',
        'โดยดี',
        'โดยดุษฎี',
        'โดยตลอด',
        'โดยทั่ว',
        'โดยทั่วไป',
        'โดยทั่วกัน',
        'โดยทั่วถึง',
        'โดยที่',
        'โดยนัย',
        'โดยปกติ',
        'โดยมัก',
        'โดยมักจะ',
        'โดยมาก',
        'โดยรวม',
        'โดยรวมๆ',
        'โดยละม่อม',
        'โดยลําดับ',
        'โดยส่วนใหญ่',
        'โดยส่วนมาก',
        'โดยส่วนรวม',
        'โต',
        'โตๆ',
        'ใกล้',
        'ใกล้ๆ',
        'ใคร',
        'ใคร่',
        'ใคร่จะ',
        'ใช่',
        'ใช้',
        'ใช่ไหม',
        'ใด',
        'ใดๆ',
        'ใต้',
        'ใน',
        'ในเมื่อ',
        'ในช่วง',
        'ในที่',
        'ในระหว่าง',
        'ให้',
        'ให้แก่',
        'ใหญ่',
        'ใหญ่โต',
        'ไกล',
        'ไกลๆ',
        'ไง',
        'ไฉน',
        'ได้',
        'ได้แก่',
        'ได้แต่',
        'ได้ที่',
        'ได้มา',
        'ได้รับ',
        'ไป',
        'ไม่',
        'ไม่เป็นไร',
        'ไม่ใช่',
        'ไม่ค่อย',
        'ไม่ค่อยเป็น',
        'ไม่ค่อยจะ',
        'ไม่ว่า',
        'ไร',
        'ไหน',
        'ไหนๆ',
        'ก็',
        'ก็แค่',
        'ก็แล้วแต่',
        'ก็ได้',
        'ก็คือ',
        'ก็จะ',
        'ก็ดี',
        'ก็ต่อเมื่อ',
        'ก็ตาม',
        'ก็ตามแต่',
        'ก็ตามที',
        'กระทั่ง',
        'กระทํา',
        'กระนั้น',
        'กระผม',
        'กลับ',
        'กล่าว',
        'กล่าวคือ',
        'กลุ่ม',
        'กลุ่มก้อน',
        'กลุ่มๆ',
        'กว่า',
        'กว้าง',
        'กว้างขวาง',
        'กว้างๆ',
        'ก่อน',
        'ก่อนหน้า',
        'ก่อนหน้านี้',
        'ก่อนๆ',
        'กัน',
        'กันเถอะ',
        'กันเอง',
        'กันและกัน',
        'กันไหม',
        'กันดีไหม',
        'กันดีกว่า',
        'กันนะ',
        'กับ',
        'การ',
        'กําลัง',
        'กําลังจะ',
        'กําหนด',
        'กู',
        'ขณะ',
        'ขณะเดียวกัน',
        'ขณะใด',
        'ขณะใดๆ',
        'ขณะที่',
        'ขณะนั้น',
        'ขณะนี้',
        'ขณะหนึ่ง',
        'ขวาง',
        'ขวางๆ',
        'ขอ',
        'ของ',
        'ขั้น',
        'ข้า',
        'ข้าง',
        'ข้างเคียง',
        'ข้างต้น',
        'ข้างบน',
        'ข้างล่าง',
        'ข้างๆ',
        'ขาด',
        'ข้าพเจ้า',
        'ข้าฯ',
        'ขึ้น',
        'คง',
        'คงจะ',
        'คงอยู่',
        'ครบ',
        'ครบครัน',
        'ครบถ้วน',
        'ครั้ง',
        'ครั้งใด',
        'ครั้งไหน',
        'ครั้งกระนั้น',
        'ครั้งก่อน',
        'ครั้งครา',
        'ครั้งคราว',
        'ครั้งที่',
        'ครั้งนั้น',
        'ครั้งนี้',
        'ครั้งละ',
        'ครั้งหนึ่ง',
        'ครั้งหลัง',
        'ครั้งหลังสุด',
        'ครั้งๆ',
        'ครัน',
        'ครับ',
        'ครา',
        'คราใด',
        'คราไหน',
        'คราที่',
        'ครานั้น',
        'ครานี้',
        'คราว',
        'คราวโน้น',
        'คราวใด',
        'คราวไหน',
        'คราวก่อน',
        'คราวที่',
        'คราวนั้น',
        'คราวนี้',
        'คราวละ',
        'คราวหน้า',
        'คราวหนึ่ง',
        'คราวหลัง',
        'คราวๆ',
        'คราหนึ่ง',
        'คล้าย',
        'คล้ายกัน',
        'คล้ายกันกับ',
        'คล้ายกับ',
        'คล้ายกับว่า',
        'คล้ายว่า',
        'ควร',
        'ความ',
        'ค่อน',
        'ค่อนข้าง',
        'ค่อนข้างจะ',
        'ค่อนมาทาง',
        'ค่อย',
        'ค่อยไปทาง',
        'ค่อยๆ',
        'คะ',
        'ค่ะ',
        'คํา',
        'คิด',
        'คิดว่า',
        'คือ',
        'คุณ',
        'คุณๆ',
        'ง่าย',
        'ง่ายๆ',
        'จง',
        'จด',
        'จนเมื่อ',
        'จนแม้',
        'จนแม้น',
        'จนกระทั่ง',
        'จนกว่า',
        'จนขณะนี้',
        'จนตลอด',
        'จนถึง',
        'จนทั่ว',
        'จนบัดนี้',
        'จรด',
        'จรดกับ',
        'จริง',
        'จริงจัง',
        'จริงๆ',
        'จริงๆ',
        'จวน',
        'จวนเจียน',
        'จวนจะ',
        'จวบ',
        'จวบกับ',
        'จวบจน',
        'จะ',
        'จ้ะ',
        'จ๊ะ',
        'จะได้',
        'จัง',
        'จังๆ',
        'จังๆ',
        'จัด',
        'จัดแจง',
        'จัดให้',
        'จัดการ',
        'จัดงาน',
        'จัดตั้ง',
        'จัดทํา',
        'จัดหา',
        'จับ',
        'จ้า',
        'จ้า',
        'จํา',
        'จําเป็น',
        'จาก',
        'จากนั้น',
        'จากนี้',
        'จากนี้ไป',
        'จําพวก',
        'จึง',
        'จึงเป็น',
        'จึงจะ',
        'จู่ๆ',
        'ฉะนั้น',
        'ฉะนี้',
        'ฉัน',
        'ช่วง',
        'ช่วงแรก',
        'ช่วงก่อน',
        'ช่วงต่อไป',
        'ช่วงถัดไป',
        'ช่วงท้าย',
        'ช่วงที่',
        'ช่วงนั้น',
        'ช่วงนี้',
        'ช่วงระหว่าง',
        'ช่วงหน้า',
        'ช่วงหลัง',
        'ช่วงๆ',
        'ช่วย',
        'ช้า',
        'ช้านาน',
        'ชาว',
        'ช้าๆ',
        'ซะ',
        'ซะก่อน',
        'ซะจน',
        'ซะจนกระทั่ง',
        'ซะจนถึง',
        'ซึ่ง',
        'ซึ่งได้แก่',
        'ซึ่งก็',
        'ซึ่งก็คือ',
        'ซึ่งกัน',
        'ซึ่งกันและกัน',
        'ซึ่งๆ',
        'ณ',
        'ด้วย',
        'ด้วยเช่นกัน',
        'ด้วยเพราะ',
        'ด้วยเหตุเพราะ',
        'ด้วยเหตุที่',
        'ด้วยเหตุนั้น',
        'ด้วยเหตุนี้',
        'ด้วยเหตุว่า',
        'ด้วยเหมือนกัน',
        'ด้วยกัน',
        'ด้วยที่',
        'ด้วยประการฉะนี้',
        'ด้วยว่า',
        'ดัง',
        'ดั่ง',
        'ดังเก่า',
        'ดั่งเก่า',
        'ดังเคย',
        'ดั่งเคย',
        'ดังเช่น',
        'ดั่งเช่น',
        'ดังเช่นที่',
        'ดั่งเช่นที่',
        'ดังเดิม',
        'ดั่งเดิม',
        'ดังเหมือน',
        'ดั่งเหมือน',
        'ดังแต่ก่อน',
        'ดั่งแต่ก่อน',
        'ดังแม้',
        'ดั่งแม้',
        'ดังกล่าว',
        'ดังกับ',
        'ดั่งกับ',
        'ดังกับว่า',
        'ดั่งกับว่า',
        'ดังจะ',
        'ดั่งจะ',
        'ดังต่อไปนี้',
        'ดังที่',
        'ดั่งที่',
        'ดังที่เคย',
        'ดังที่กล่าว',
        'ดังที่จะเป็น',
        'ดังนั้น',
        'ดังนี้',
        'ดังนี้เช่น',
        'ดังนี้เพราะ',
        'ดังว่า',
        'ดั่งว่า',
        'ดําเนิน',
        'ดําเนินไป',
        'ดําเนินการ',
        'ดําเนินงาน',
        'ด้าน',
        'ด้านๆ',
        'ดิฉัน',
        'ดี',
        'ดีๆ',
        'ดู',
        'ดูเหมือน',
        'ดูเหมือนว่า',
        'ดูแล',
        'ดูแล้ว',
        'ดูจะ',
        'ดูว่า',
        'ดูๆ',
        'ตน',
        'ตนเอง',
        'ตนฯ',
        'ตรง',
        'ตรงๆ',
        'ตลอด',
        'ตลอดเวลา',
        'ตลอดไป',
        'ตลอดกาล',
        'ตลอดกาลนาน',
        'ตลอดจน',
        'ตลอดถึง',
        'ตลอดทั้ง',
        'ตลอดทั่ว',
        'ตลอดทั่วถึง',
        'ตลอดทั่วทั้ง',
        'ตลอดปี',
        'ตลอดมา',
        'ตลอดระยะเวลา',
        'ตลอดวัน',
        'ตลอดศก',
        'ต่อ',
        'ต่อเมื่อ',
        'ต่อให้',
        'ต่อไป',
        'ต่อไปนี้',
        'ต่อกัน',
        'ต่อกับ',
        'ต้อง',
        'ต้องการ',
        'ต่อจาก',
        'ตอน',
        'ตอนแรก',
        'ตอนใด',
        'ตอนไหน',
        'ตอนก่อน',
        'ตอนต่อ',
        'ตอนต่อไป',
        'ตอนต่อมา',
        'ตอนถัดไป',
        'ตอนถัดมา',
        'ตอนที่',
        'ตอนที่แล้ว',
        'ตอนนั้น',
        'ตอนนี้',
        'ตอนสุดท้าย',
        'ตอนหน้า',
        'ตอนหลัง',
        'ตอนๆ',
        'ต่อมา',
        'ต่อว่า',
        'ต่อๆ',
        'ตะหาก',
        'ตั้ง',
        'ตั้งแต่',
        'ตั้งแต่แรก',
        'ตั้งแต่นั้น',
        'ตั้งแต่นี้',
        'ตั้งต้น',
        'ตั้งที่',
        'ตั้งอยู่',
        'ตัว',
        'ตัวเอง',
        'ตัวโน้น',
        'ตัวใด',
        'ตัวไหน',
        'ตัวที่',
        'ตัวนั้น',
        'ตัวนี้',
        'ตัวละ',
        'ตัวอย่างเช่น',
        'ตัวๆ',
        'ต่าง',
        'ต่างก็',
        'ต่างหาก',
        'ต่างๆ',
        'ตาม',
        'ตามแต่',
        'ตามด้วย',
        'ตามที่',
        'ตามๆ',
        'ถ้า',
        'ถ้าจะ',
        'ถ้าหาก',
        'ถึง',
        'ถึงเมื่อ',
        'ถึงเมื่อใด',
        'ถึงเมื่อไร',
        'ถึงแก่',
        'ถึงแม้',
        'ถึงแม้จะ',
        'ถึงแม้ว่า',
        'ถึงจะ',
        'ถึงบัดนั้น',
        'ถึงบัดนี้',
        'ถึงอย่างไร',
        'ถือ',
        'ถือว่า',
        'ถูก',
        'ถูกต้อง',
        'ถูกๆ',
        'ทรง',
        'ทว่า',
        'ทั้ง',
        'ทั้งเป็น',
        'ทั้งคน',
        'ทั้งตัว',
        'ทั้งที่',
        'ทั้งนั้น',
        'ทั้งนั้นเพราะ',
        'ทั้งนั้นด้วย',
        'ทั้งนี้',
        'ทั้งปวง',
        'ทั้งมวล',
        'ทั้งสิ้น',
        'ทั้งหมด',
        'ทั้งหลาย',
        'ทั้งๆ',
        'ทั้งๆ',
        'ทัน',
        'ทันใดนั้น',
        'ทันที',
        'ทันทีทันใด',
        'ทั่ว',
        'ทําให้',
        'ทําไม',
        'ทําไร',
        'ทําๆ',
        'ที',
        'ที่',
        'ที่',
        'ทีเดียว',
        'ทีเถอะ',
        'ที่แท้',
        'ที่แท้จริง',
        'ที่แล้ว',
        'ที่แห่งนั้น',
        'ทีใด',
        'ที่ใด',
        'ที่ได้',
        'ทีไร',
        'ที่ไหน',
        'ที่จริง',
        'ที่ซึ่ง',
        'ที่นั้น',
        'ที่นี้',
        'ทีละ',
        'ที่ละ',
        'ที่ว่า',
        'ที่สุด',
        'ทีๆ',
        'ที่ๆ',
        'ทุก',
        'ทุกเมื่อ',
        'ทุกแห่ง',
        'ทุกคน',
        'ทุกครั้ง',
        'ทุกครา',
        'ทุกคราว',
        'ทุกชิ้น',
        'ทุกตัว',
        'ทุกทาง',
        'ทุกที',
        'ทุกที่',
        'ทุกวัน',
        'ทุกวันนี้',
        'ทุกสิ่ง',
        'ทุกหน',
        'ทุกอย่าง',
        'ทุกอัน',
        'ทุกๆ',
        'นอก',
        'นอกเหนือ',
        'นอกจาก',
        'นอกจากที่',
        'นอกจากนั้น',
        'นอกจากนี้',
        'นอกจากว่า',
        'นอกนั้น',
        'น้อย',
        'น้อยกว่า',
        'น้อยๆ',
        'นะ',
        'น่ะ',
        'นัก',
        'นั่น',
        'นั้นไว',
        'นับแต่นี้',
        'นับจากนั้น',
        'นับจากนี้',
        'น่า',
        'นํา',
        'นาง',
        'นางสาว',
        'น่าจะ',
        'นาน',
        'นานๆ',
        'นําพา',
        'นํามา',
        'นาย',
        'นิด',
        'นิดหน่อย',
        'นิดๆ',
        'นี่',
        'นี้',
        'นี่เอง',
        'นี้เอง',
        'นี่แน่ะ',
        'นี้แหล่',
        'นี่แหละ',
        'นี่ไง',
        'นี่นา',
        'นู่น',
        'นู้น',
        'บน',
        'บอก',
        'บอกแล้ว',
        'บอกว่า',
        'บ่อย',
        'บ่อยกว่า',
        'บ่อยครั้ง',
        'บ่อยๆ',
        'บัดเดี๋ยวนี้',
        'บัดดล',
        'บัดนั้น',
        'บัดนี้',
        'บาง',
        'บ้าง',
        'บางแห่ง',
        'บางกว่า',
        'บางขณะ',
        'บางครั้ง',
        'บางครา',
        'บางคราว',
        'บางที',
        'บางที่',
        'บางๆ',
        'ปฏิบัติ',
        'ประกอบ',
        'ประการ',
        'ประการใด',
        'ประการฉะนี้',
        'ประการหนึ่ง',
        'ประมาณ',
        'ประสบ',
        'ปรับ',
        'ปรากฏ',
        'ปรากฏว่า',
        'ปัจจุบัน',
        'ปิด',
        'ผ่าน',
        'ผ่านๆ',
        'ผิด',
        'ผิดๆ',
        'ผู้',
        'ผู้ใด',
        'ฝ่าย',
        'ฝ่ายใด',
        'พบ',
        'พบว่า',
        'พยายาม',
        'พร้อม',
        'พร้อมเพียง',
        'พร้อมกัน',
        'พร้อมกับ',
        'พร้อมด้วย',
        'พร้อมทั้ง',
        'พร้อมที่',
        'พวก',
        'พวกเขา',
        'พวกเธอ',
        'พวกแก',
        'พวกโน้น',
        'พวกกัน',
        'พวกกู',
        'พวกคุณ',
        'พวกฉัน',
        'พวกท่าน',
        'พวกที่',
        'พวกนั้น',
        'พวกนี้',
        'พวกนู้น',
        'พวกมัน',
        'พวกมึง',
        'พอ',
        'พอเพียง',
        'พอเหมาะ',
        'พอแล้ว',
        'พอกัน',
        'พอควร',
        'พอจะ',
        'พอดี',
        'พอตัว',
        'พอที',
        'พอที่',
        'พอสม',
        'พอสมควร',
        'พอๆ',
        'พา',
        'พึง',
        'พึ่ง',
        'พื้นๆ',
        'พูด',
        'ภาค',
        'ภาย',
        'ภายใต้',
        'ภายนอก',
        'ภายหลัง',
        'มอง',
        'มองว่า',
        'มัก',
        'มักจะ',
        'มัน',
        'มั๊ย',
        'มา',
        'มาก',
        'มากกว่า',
        'มากมาย',
        'มิ',
        'มิใช่',
        'มิได้',
        'มิฉะนั้น',
        'มี',
        'มีแต่',
        'มึง',
        'มุ่ง',
        'มุ่งเน้น',
        'มุ่งหมาย',
        'ยก',
        'ยกให้',
        'ยงเพราะ',
        'ยอม',
        'ย่อม',
        'ยอมรับ',
        'ย่อย',
        'ยัง',
        'ยังแต่',
        'ยังโง้น',
        'ยังไง',
        'ยังคง',
        'ยังงั้น',
        'ยังงี้',
        'ยังจะ',
        'ยาก',
        'ยาว',
        'ยาวนาน',
        'ยิ่ง',
        'ยิ่งเมื่อ',
        'ยิ่งแล้ว',
        'ยิ่งใหญ่',
        'ยิ่งกว่า',
        'ยิ่งขึ้น',
        'ยิ่งขึ้นไป',
        'ยิ่งจน',
        'ยิ่งจะ',
        'ยิ่งนัก',
        'รวด',
        'รวดเร็ว',
        'รวม',
        'ร่วม',
        'รวมกัน',
        'ร่วมกัน',
        'รวมด้วย',
        'ร่วมด้วย',
        'รวมถึง',
        'รวมทั้ง',
        'ระยะ',
        'ระหว่าง',
        'รับ',
        'รึ',
        'รือ',
        'รือว่า',
        'ล้วน',
        'ล้วนแต่',
        'ล้วนจน',
        'ละ',
        'ล่าสุด',
        'วันใด',
        'วันไหน',
        'วันนั้น',
        'วันนี้',
        'สบาย',
        'สมัย',
        'สมัยโน้น',
        'สมัยก่อน',
        'สมัยนั้น',
        'สมัยนี้',
        'ส่วน',
        'ส่วนเกิน',
        'ส่วนใด',
        'ส่วนใหญ่',
        'ส่วนด้อย',
        'ส่วนดี',
        'ส่วนที่',
        'ส่วนน้อย',
        'ส่วนนั้น',
        'ส่วนมาก',
        'สั้น',
        'สั้นๆ',
        'สําคัญ',
        'สามารถ',
        'สิ่ง',
        'สิ่งใด',
        'สิ่งไหน',
        'สิ่งนั้น',
        'สิ่งนี้',
        'สิ้น',
        'สุด',
        'หน',
        'หนอ',
        'หนอย',
        'หน่อย',
        'หมด',
        'หมดกัน',
        'หมดสิ้น',
        'หรือเปล่า',
        'หรือไง',
        'หรือไม่',
        'หรือไร',
        'หรือยัง',
        'หลังจาก',
        'หาใช่',
        'หาก',
        'หากแม้',
        'หากแม้น',
        'หากแม้นว่า',
        'หากว่า',
        'หาความ',
        'หารือ',
        'อดีต',
        'อนึ่ง',
        'อยาก',
        'อย่าง',
        'อย่างเช่น',
        'อย่างเดียว',
        'อย่างโน้น',
        'อย่างใด',
        'อย่างไร',
        'อย่างไรเสีย',
        'อย่างไรก็',
        'อย่างไรก็ได้',
        'อย่างไหน',
        'อย่างดี',
        'อย่างที่',
        'อย่างน้อย',
        'อย่างนั้น',
        'อย่างนี้',
        'อย่างมาก',
        'อย่างยิ่ง',
        'อย่างละ',
        'อย่างหนึ่ง',
        'อย่างๆ',
        'อัน',
        'อันเนื่องมาจาก',
        'อันใด',
        'อันได้แก่',
        'อันไหน',
        'อันจะ',
        'อันที่',
        'อันที่จริง',
        'อันที่จะ',
        'อันละ',
        'อันๆ',
        'อาจ',
        'อาจเป็น',
        'อาจเป็นด้วย',
        'อาจจะ',
        'อีก',
        'อื่น',
        'อื่นๆ',
        'ฯ',
        'ฯพณฯ',
        'ฯล'
      ],
      tr: [
        'a',
        'acaba',
        'altı',
        'ama',
        'ancak',
        'artık',
        'asla',
        'aslında',
        'az',
        'b',
        'bana',
        'bazen',
        'bazı',
        'bazıları',
        'bazısı',
        'belki',
        'ben',
        'beni',
        'benim',
        'beş',
        'bile',
        'bir',
        'birçoğu',
        'birçok',
        'birçokları',
        'biri',
        'birisi',
        'birkaç',
        'birkaçı',
        'birşey',
        'birşeyi',
        'biz',
        'bize',
        'bizi',
        'bizim',
        'böyle',
        'böylece',
        'bu',
        'buna',
        'bunda',
        'bundan',
        'bunu',
        'bunun',
        'burada',
        'bütün',
        'c',
        'ç',
        'çoğu',
        'çoğuna',
        'çoğunu',
        'çok',
        'çünkü',
        'd',
        'da',
        'daha',
        'de',
        'değil',
        'demek',
        'diğer',
        'diğeri',
        'diğerleri',
        'diye',
        'dokuz',
        'dolayı',
        'dört',
        'e',
        'elbette',
        'en',
        'f',
        'fakat',
        'falan',
        'felan',
        'filan',
        'g',
        'gene',
        'gibi',
        'ğ',
        'h',
        'hâlâ',
        'hangi',
        'hangisi',
        'hani',
        'hatta',
        'hem',
        'henüz',
        'hep',
        'hepsi',
        'hepsine',
        'hepsini',
        'her',
        'her biri',
        'herkes',
        'herkese',
        'herkesi',
        'hiç',
        'hiç kimse',
        'hiçbiri',
        'hiçbirine',
        'hiçbirini',
        'ı',
        'i',
        'için',
        'içinde',
        'iki',
        'ile',
        'ise',
        'işte',
        'j',
        'k',
        'kaç',
        'kadar',
        'kendi',
        'kendine',
        'kendini',
        'ki',
        'kim',
        'kime',
        'kimi',
        'kimin',
        'kimisi',
        'l',
        'm',
        'madem',
        'mı',
        'mı',
        'mi',
        'mu',
        'mu',
        'mü',
        'mü',
        'n',
        'nasıl',
        'ne',
        'ne kadar',
        'ne zaman',
        'neden',
        'nedir',
        'nerde',
        'nerede',
        'nereden',
        'nereye',
        'nesi',
        'neyse',
        'niçin',
        'niye',
        'o',
        'on',
        'ona',
        'ondan',
        'onlar',
        'onlara',
        'onlardan',
        'onların',
        'onların',
        'onu',
        'onun',
        'orada',
        'oysa',
        'oysaki',
        'ö',
        'öbürü',
        'ön',
        'önce',
        'ötürü',
        'öyle',
        'p',
        'r',
        'rağmen',
        's',
        'sana',
        'sekiz',
        'sen',
        'senden',
        'seni',
        'senin',
        'siz',
        'sizden',
        'size',
        'sizi',
        'sizin',
        'son',
        'sonra',
        'ş',
        'şayet',
        'şey',
        'şeyden',
        'şeye',
        'şeyi',
        'şeyler',
        'şimdi',
        'şöyle',
        'şu',
        'şuna',
        'şunda',
        'şundan',
        'şunlar',
        'şunu',
        'şunun',
        't',
        'tabi',
        'tamam',
        'tüm',
        'tümü',
        'u',
        'ü',
        'üç',
        'üzere',
        'v',
        'var',
        've',
        'veya',
        'veyahut',
        'y',
        'ya',
        'ya da',
        'yani',
        'yedi',
        'yerine',
        'yine',
        'yoksa',
        'z',
        'zaten',
        'zira'
      ],
      zh: [
        '的',
        '一',
        '不',
        '在',
        '人',
        '有',
        '是',
        '为',
        '以',
        '于',
        '上',
        '他',
        '而',
        '后',
        '之',
        '来',
        '及',
        '了',
        '因',
        '下',
        '可',
        '到',
        '由',
        '这',
        '与',
        '也',
        '此',
        '但',
        '并',
        '个',
        '其',
        '已',
        '无',
        '小',
        '我',
        '们',
        '起',
        '最',
        '再',
        '今',
        '去',
        '好',
        '只',
        '又',
        '或',
        '很',
        '亦',
        '某',
        '把',
        '那',
        '你',
        '乃',
        '它',
        '吧',
        '被',
        '比',
        '别',
        '趁',
        '当',
        '从',
        '到',
        '得',
        '打',
        '凡',
        '儿',
        '尔',
        '该',
        '各',
        '给',
        '跟',
        '和',
        '何',
        '还',
        '即',
        '几',
        '既',
        '看',
        '据',
        '距',
        '靠',
        '啦',
        '了',
        '另',
        '么',
        '每',
        '们',
        '嘛',
        '拿',
        '哪',
        '那',
        '您',
        '凭',
        '且',
        '却',
        '让',
        '仍',
        '啥',
        '如',
        '若',
        '使',
        '谁',
        '虽',
        '随',
        '同',
        '所',
        '她',
        '哇',
        '嗡',
        '往',
        '哪',
        '些',
        '向',
        '沿',
        '哟',
        '用',
        '于',
        '咱',
        '则',
        '怎',
        '曾',
        '至',
        '致',
        '着',
        '诸',
        '自'
      ]
    }
  },
  function(module, exports, __webpack_require__) {
    void function() {
      var _,
        addNewlineToBr,
        cleanParagraphText,
        convertToText,
        formatter,
        linksToText,
        removeFewwordsParagraphs,
        removeNegativescoresNodes,
        replaceWithText,
        stopwords,
        ulToText,
        XRegExp
      stopwords = __webpack_require__(45)
      _ = __webpack_require__(3)
      XRegExp = __webpack_require__(120).XRegExp
      module.exports = formatter = function(doc, topNode, language) {
        removeNegativescoresNodes(doc, topNode)
        linksToText(doc, topNode)
        addNewlineToBr(doc, topNode)
        replaceWithText(doc, topNode)
        removeFewwordsParagraphs(doc, topNode, language)
        return convertToText(doc, topNode)
      }
      linksToText = function(doc, topNode) {
        var nodes
        nodes = topNode.find('a')
        return nodes.each(function() {
          return doc(this).replaceWith(doc(this).html())
        })
      }
      ulToText = function(doc, node) {
        var nodes, txt
        nodes = node.find('li')
        txt = ''
        nodes.each(function() {
          return (txt = txt + ('\n * ' + doc(this).text()))
        })
        txt = txt + '\n'
        return txt
      }
      replaceWithText = function(doc, topNode) {
        var nodes
        nodes = topNode.find('b, strong, i, br, sup')
        return nodes.each(function() {
          return doc(this).replaceWith(doc(this).text())
        })
      }
      cleanParagraphText = function(rawText) {
        var txt
        txt = rawText.trim()
        txt.replace(/[\s\t]+/g, ' ')
        return txt
      }
      convertToText = function(doc, topNode) {
        var hangingText, nodes, regex, txt, txts
        txts = []
        nodes = topNode.contents()
        hangingText = ''
        nodes.each(function() {
          var node, nodeName, nodeType, txt
          node = doc(this)
          nodeType = node[0].type
          nodeName = node[0].name
          if (nodeType === 'text') {
            hangingText += node.text()
            return true
          } else if (nodeName === 'ul') {
            hangingText += ulToText(doc, node)
            return true
          }
          if (hangingText.length > 0) {
            txt = cleanParagraphText(hangingText)
            txts = txts.concat(txt.split(/\r?\n/))
            hangingText = ''
          }
          txt = cleanParagraphText(node.text())
          return (txts = txts.concat(txt.split(/\r?\n/)))
        })
        if (hangingText.length > 0) {
          txt = cleanParagraphText(hangingText)
          txts = txts.concat(txt.split(/\r?\n/))
        }
        txts = _.map(txts, function(txt) {
          return txt.trim()
        })
        regex = XRegExp('[\\p{Number}\\p{Letter}]')
        txts = _.filter(txts, function(txt) {
          return regex.test(txt)
        })
        return txts.join('\n\n')
      }
      addNewlineToBr = function(doc, topNode) {
        var brs
        brs = topNode.find('br')
        return brs.each(function() {
          var br
          br = doc(this)
          return br.replaceWith('\n\n')
        })
      }
      removeNegativescoresNodes = function(doc, topNode) {
        var gravityItems
        gravityItems = topNode.find('*[gravityScore]')
        return gravityItems.each(function() {
          var item, score
          item = doc(this)
          score = parseInt(item.attr('gravityScore')) || 0
          if (score < 1) return doc(item).remove()
        })
      }
      removeFewwordsParagraphs = function(doc, topNode, language) {
        var allNodes
        allNodes = topNode.find('*')
        return allNodes.each(function() {
          var el, stopWords, tag, text, trimmed
          el = doc(this)
          tag = el[0].name
          text = el.text()
          stopWords = stopwords(text, language)
          if (
            (tag !== 'br' || text !== '\\r') &&
            stopWords.stopwordCount < 3 &&
            el.find('object').length === 0 &&
            el.find('embed').length === 0
          ) {
            return doc(el).remove()
          } else {
            trimmed = text.trim()
            if (trimmed[0] === '(' && trimmed[trimmed.length - 1] === ')')
              return doc(el).remove()
          }
        })
      }
    }.call(this)
  },
  function(module, exports, __webpack_require__) {
    var XRegExp
    XRegExp =
      XRegExp ||
      (function(undef) {
        'use strict'
        var self,
          addToken,
          add,
          features = {
            natives: false,
            extensibility: false
          },
          nativ = {
            exec: RegExp.prototype.exec,
            test: RegExp.prototype.test,
            match: String.prototype.match,
            replace: String.prototype.replace,
            split: String.prototype.split
          },
          fixed = {},
          cache = {},
          tokens = [],
          defaultScope = 'default',
          classScope = 'class',
          nativeTokens = {
            default: /^(?:\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S])|\(\?[:=!]|[?*+]\?|{\d+(?:,\d*)?}\??)/,
            class: /^(?:\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u[\dA-Fa-f]{4}|c[A-Za-z]|[\s\S]))/
          },
          replacementToken = /\$(?:{([\w$]+)}|(\d\d?|[\s\S]))/g,
          duplicateFlags = /([\s\S])(?=[\s\S]*\1)/g,
          quantifier = /^(?:[?*+]|{\d+(?:,\d*)?})\??/,
          compliantExecNpcg = nativ.exec.call(/()??/, '')[1] === undef,
          hasNativeY = RegExp.prototype.sticky !== undef,
          isInsideConstructor = false,
          registeredFlags = 'gim' + (hasNativeY ? 'y' : '')
        function augment(regex, captureNames, isNative) {
          var p
          for (p in self.prototype) {
            if (self.prototype.hasOwnProperty(p)) {
              regex[p] = self.prototype[p]
            }
          }
          regex.xregexp = {
            captureNames: captureNames,
            isNative: !!isNative
          }
          return regex
        }
        function getNativeFlags(regex) {
          return (
            (regex.global ? 'g' : '') +
            (regex.ignoreCase ? 'i' : '') +
            (regex.multiline ? 'm' : '') +
            (regex.extended ? 'x' : '') +
            (regex.sticky ? 'y' : '')
          )
        }
        function copy(regex, addFlags, removeFlags) {
          if (!self.isRegExp(regex)) {
            throw new TypeError('type RegExp expected')
          }
          var flags = nativ.replace.call(
            getNativeFlags(regex) + (addFlags || ''),
            duplicateFlags,
            ''
          )
          if (removeFlags) {
            flags = nativ.replace.call(
              flags,
              new RegExp('[' + removeFlags + ']+', 'g'),
              ''
            )
          }
          if (regex.xregexp && !regex.xregexp.isNative) {
            regex = augment(
              self(regex.source, flags),
              regex.xregexp.captureNames
                ? regex.xregexp.captureNames.slice(0)
                : null
            )
          } else {
            regex = augment(new RegExp(regex.source, flags), null, true)
          }
          return regex
        }
        function lastIndexOf(array, value) {
          var i = array.length
          if (Array.prototype.lastIndexOf) {
            return array.lastIndexOf(value)
          }
          while (i--) {
            if (array[i] === value) {
              return i
            }
          }
          return -1
        }
        function isType(value, type) {
          return (
            Object.prototype.toString.call(value).toLowerCase() ===
            '[object ' + type + ']'
          )
        }
        function prepareOptions(value) {
          value = value || {}
          if (value === 'all' || value.all) {
            value = {
              natives: true,
              extensibility: true
            }
          } else if (isType(value, 'string')) {
            value = self.forEach(
              value,
              /[^\s,]+/,
              function(m) {
                this[m] = true
              },
              {}
            )
          }
          return value
        }
        function runTokens(pattern, pos, scope, context) {
          var i = tokens.length,
            result = null,
            match,
            t
          isInsideConstructor = true
          try {
            while (i--) {
              t = tokens[i]
              if (
                (t.scope === 'all' || t.scope === scope) &&
                (!t.trigger || t.trigger.call(context))
              ) {
                t.pattern.lastIndex = pos
                match = fixed.exec.call(t.pattern, pattern)
                if (match && match.index === pos) {
                  result = {
                    output: t.handler.call(context, match, scope),
                    match: match
                  }
                  break
                }
              }
            }
          } catch (err) {
            throw err
          } finally {
            isInsideConstructor = false
          }
          return result
        }
        function setExtensibility(on) {
          self.addToken = addToken[on ? 'on' : 'off']
          features.extensibility = on
        }
        function setNatives(on) {
          RegExp.prototype.exec = (on ? fixed : nativ).exec
          RegExp.prototype.test = (on ? fixed : nativ).test
          String.prototype.match = (on ? fixed : nativ).match
          String.prototype.replace = (on ? fixed : nativ).replace
          String.prototype.split = (on ? fixed : nativ).split
          features.natives = on
        }
        self = function(pattern, flags) {
          if (self.isRegExp(pattern)) {
            if (flags !== undef) {
              throw new TypeError(
                "can't supply flags when constructing one RegExp from another"
              )
            }
            return copy(pattern)
          }
          if (isInsideConstructor) {
            throw new Error(
              "can't call the XRegExp constructor within token definition functions"
            )
          }
          var output = [],
            scope = defaultScope,
            tokenContext = {
              hasNamedCapture: false,
              captureNames: [],
              hasFlag: function(flag) {
                return flags.indexOf(flag) > -1
              }
            },
            pos = 0,
            tokenResult,
            match,
            chr
          pattern = pattern === undef ? '' : String(pattern)
          flags = flags === undef ? '' : String(flags)
          if (nativ.match.call(flags, duplicateFlags)) {
            throw new SyntaxError('invalid duplicate regular expression flag')
          }
          pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function(
            $0,
            $1
          ) {
            if (nativ.test.call(/[gy]/, $1)) {
              throw new SyntaxError("can't use flag g or y in mode modifier")
            }
            flags = nativ.replace.call(flags + $1, duplicateFlags, '')
            return ''
          })
          self.forEach(flags, /[\s\S]/, function(m) {
            if (registeredFlags.indexOf(m[0]) < 0) {
              throw new SyntaxError('invalid regular expression flag ' + m[0])
            }
          })
          while (pos < pattern.length) {
            tokenResult = runTokens(pattern, pos, scope, tokenContext)
            if (tokenResult) {
              output.push(tokenResult.output)
              pos += tokenResult.match[0].length || 1
            } else {
              match = nativ.exec.call(nativeTokens[scope], pattern.slice(pos))
              if (match) {
                output.push(match[0])
                pos += match[0].length
              } else {
                chr = pattern.charAt(pos)
                if (chr === '[') {
                  scope = classScope
                } else if (chr === ']') {
                  scope = defaultScope
                }
                output.push(chr)
                ++pos
              }
            }
          }
          return augment(
            new RegExp(
              output.join(''),
              nativ.replace.call(flags, /[^gimy]+/g, '')
            ),
            tokenContext.hasNamedCapture ? tokenContext.captureNames : null
          )
        }
        addToken = {
          on: function(regex, handler, options) {
            options = options || {}
            if (regex) {
              tokens.push({
                pattern: copy(regex, 'g' + (hasNativeY ? 'y' : '')),
                handler: handler,
                scope: options.scope || defaultScope,
                trigger: options.trigger || null
              })
            }
            if (options.customFlags) {
              registeredFlags = nativ.replace.call(
                registeredFlags + options.customFlags,
                duplicateFlags,
                ''
              )
            }
          },
          off: function() {
            throw new Error(
              'extensibility must be installed before using addToken'
            )
          }
        }
        self.addToken = addToken.off
        self.cache = function(pattern, flags) {
          var key = pattern + '/' + (flags || '')
          return cache[key] || (cache[key] = self(pattern, flags))
        }
        self.escape = function(str) {
          return nativ.replace.call(str, /[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
        }
        self.exec = function(str, regex, pos, sticky) {
          var r2 = copy(
              regex,
              'g' + (sticky && hasNativeY ? 'y' : ''),
              sticky === false ? 'y' : ''
            ),
            match
          r2.lastIndex = pos = pos || 0
          match = fixed.exec.call(r2, str)
          if (sticky && match && match.index !== pos) {
            match = null
          }
          if (regex.global) {
            regex.lastIndex = match ? r2.lastIndex : 0
          }
          return match
        }
        self.forEach = function(str, regex, callback, context) {
          var pos = 0,
            i = -1,
            match
          while ((match = self.exec(str, regex, pos))) {
            callback.call(context, match, ++i, str, regex)
            pos = match.index + (match[0].length || 1)
          }
          return context
        }
        self.globalize = function(regex) {
          return copy(regex, 'g')
        }
        self.install = function(options) {
          options = prepareOptions(options)
          if (!features.natives && options.natives) {
            setNatives(true)
          }
          if (!features.extensibility && options.extensibility) {
            setExtensibility(true)
          }
        }
        self.isInstalled = function(feature) {
          return !!features[feature]
        }
        self.isRegExp = function(value) {
          return isType(value, 'regexp')
        }
        self.matchChain = function(str, chain) {
          return (function recurseChain(values, level) {
            var item = chain[level].regex
                ? chain[level]
                : {
                    regex: chain[level]
                  },
              matches = [],
              addMatch = function(match) {
                matches.push(
                  item.backref ? match[item.backref] || '' : match[0]
                )
              },
              i
            for (i = 0; i < values.length; ++i) {
              self.forEach(values[i], item.regex, addMatch)
            }
            return level === chain.length - 1 || !matches.length
              ? matches
              : recurseChain(matches, level + 1)
          })([str], 0)
        }
        self.replace = function(str, search, replacement, scope) {
          var isRegex = self.isRegExp(search),
            search2 = search,
            result
          if (isRegex) {
            if (scope === undef && search.global) {
              scope = 'all'
            }
            search2 = copy(
              search,
              scope === 'all' ? 'g' : '',
              scope === 'all' ? '' : 'g'
            )
          } else if (scope === 'all') {
            search2 = new RegExp(self.escape(String(search)), 'g')
          }
          result = fixed.replace.call(String(str), search2, replacement)
          if (isRegex && search.global) {
            search.lastIndex = 0
          }
          return result
        }
        self.split = function(str, separator, limit) {
          return fixed.split.call(str, separator, limit)
        }
        self.test = function(str, regex, pos, sticky) {
          return !!self.exec(str, regex, pos, sticky)
        }
        self.uninstall = function(options) {
          options = prepareOptions(options)
          if (features.natives && options.natives) {
            setNatives(false)
          }
          if (features.extensibility && options.extensibility) {
            setExtensibility(false)
          }
        }
        self.union = function(patterns, flags) {
          var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*]/g,
            numCaptures = 0,
            numPriorCaptures,
            captureNames,
            rewrite = function(match, paren, backref) {
              var name = captureNames[numCaptures - numPriorCaptures]
              if (paren) {
                ++numCaptures
                if (name) {
                  return '(?<' + name + '>'
                }
              } else if (backref) {
                return '\\' + (+backref + numPriorCaptures)
              }
              return match
            },
            output = [],
            pattern,
            i
          if (!(isType(patterns, 'array') && patterns.length)) {
            throw new TypeError('patterns must be a nonempty array')
          }
          for (i = 0; i < patterns.length; ++i) {
            pattern = patterns[i]
            if (self.isRegExp(pattern)) {
              numPriorCaptures = numCaptures
              captureNames =
                (pattern.xregexp && pattern.xregexp.captureNames) || []
              output.push(self(pattern.source).source.replace(parts, rewrite))
            } else {
              output.push(self.escape(pattern))
            }
          }
          return self(output.join('|'), flags)
        }
        self.version = '2.0.0'
        fixed.exec = function(str) {
          var match, name, r2, origLastIndex, i
          if (!this.global) {
            origLastIndex = this.lastIndex
          }
          match = nativ.exec.apply(this, arguments)
          if (match) {
            if (
              !compliantExecNpcg &&
              match.length > 1 &&
              lastIndexOf(match, '') > -1
            ) {
              r2 = new RegExp(
                this.source,
                nativ.replace.call(getNativeFlags(this), 'g', '')
              )
              nativ.replace.call(
                String(str).slice(match.index),
                r2,
                function() {
                  var i
                  for (i = 1; i < arguments.length - 2; ++i) {
                    if (arguments[i] === undef) {
                      match[i] = undef
                    }
                  }
                }
              )
            }
            if (this.xregexp && this.xregexp.captureNames) {
              for (i = 1; i < match.length; ++i) {
                name = this.xregexp.captureNames[i - 1]
                if (name) {
                  match[name] = match[i]
                }
              }
            }
            if (
              this.global &&
              !match[0].length &&
              this.lastIndex > match.index
            ) {
              this.lastIndex = match.index
            }
          }
          if (!this.global) {
            this.lastIndex = origLastIndex
          }
          return match
        }
        fixed.test = function(str) {
          return !!fixed.exec.call(this, str)
        }
        fixed.match = function(regex) {
          if (!self.isRegExp(regex)) {
            regex = new RegExp(regex)
          } else if (regex.global) {
            var result = nativ.match.apply(this, arguments)
            regex.lastIndex = 0
            return result
          }
          return fixed.exec.call(regex, this)
        }
        fixed.replace = function(search, replacement) {
          var isRegex = self.isRegExp(search),
            captureNames,
            result,
            str,
            origLastIndex
          if (isRegex) {
            if (search.xregexp) {
              captureNames = search.xregexp.captureNames
            }
            if (!search.global) {
              origLastIndex = search.lastIndex
            }
          } else {
            search += ''
          }
          if (isType(replacement, 'function')) {
            result = nativ.replace.call(String(this), search, function() {
              var args = arguments,
                i
              if (captureNames) {
                args[0] = new String(args[0])
                for (i = 0; i < captureNames.length; ++i) {
                  if (captureNames[i]) {
                    args[0][captureNames[i]] = args[i + 1]
                  }
                }
              }
              if (isRegex && search.global) {
                search.lastIndex = args[args.length - 2] + args[0].length
              }
              return replacement.apply(null, args)
            })
          } else {
            str = String(this)
            result = nativ.replace.call(str, search, function() {
              var args = arguments
              return nativ.replace.call(
                String(replacement),
                replacementToken,
                function($0, $1, $2) {
                  var n
                  if ($1) {
                    n = +$1
                    if (n <= args.length - 3) {
                      return args[n] || ''
                    }
                    n = captureNames ? lastIndexOf(captureNames, $1) : -1
                    if (n < 0) {
                      throw new SyntaxError(
                        'backreference to undefined group ' + $0
                      )
                    }
                    return args[n + 1] || ''
                  }
                  if ($2 === '$') return '$'
                  if ($2 === '&' || +$2 === 0) return args[0]
                  if ($2 === '`')
                    return args[args.length - 1].slice(0, args[args.length - 2])
                  if ($2 === "'")
                    return args[args.length - 1].slice(
                      args[args.length - 2] + args[0].length
                    )
                  $2 = +$2
                  if (!isNaN($2)) {
                    if ($2 > args.length - 3) {
                      throw new SyntaxError(
                        'backreference to undefined group ' + $0
                      )
                    }
                    return args[$2] || ''
                  }
                  throw new SyntaxError('invalid token ' + $0)
                }
              )
            })
          }
          if (isRegex) {
            if (search.global) {
              search.lastIndex = 0
            } else {
              search.lastIndex = origLastIndex
            }
          }
          return result
        }
        fixed.split = function(separator, limit) {
          if (!self.isRegExp(separator)) {
            return nativ.split.apply(this, arguments)
          }
          var str = String(this),
            origLastIndex = separator.lastIndex,
            output = [],
            lastLastIndex = 0,
            lastLength
          limit = (limit === undef ? -1 : limit) >>> 0
          self.forEach(str, separator, function(match) {
            if (match.index + match[0].length > lastLastIndex) {
              output.push(str.slice(lastLastIndex, match.index))
              if (match.length > 1 && match.index < str.length) {
                Array.prototype.push.apply(output, match.slice(1))
              }
              lastLength = match[0].length
              lastLastIndex = match.index + lastLength
            }
          })
          if (lastLastIndex === str.length) {
            if (!nativ.test.call(separator, '') || lastLength) {
              output.push('')
            }
          } else {
            output.push(str.slice(lastLastIndex))
          }
          separator.lastIndex = origLastIndex
          return output.length > limit ? output.slice(0, limit) : output
        }
        add = addToken.on
        add(
          /\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4})|x(?![\dA-Fa-f]{2}))/,
          function(match, scope) {
            if (match[1] === 'B' && scope === defaultScope) {
              return match[0]
            }
            throw new SyntaxError('invalid escape ' + match[0])
          },
          {
            scope: 'all'
          }
        )
        add(/\[(\^?)]/, function(match) {
          return match[1] ? '[\\s\\S]' : '\\b\\B'
        })
        add(/(?:\(\?#[^)]*\))+/, function(match) {
          return nativ.test.call(
            quantifier,
            match.input.slice(match.index + match[0].length)
          )
            ? ''
            : '(?:)'
        })
        add(/\\k<([\w$]+)>/, function(match) {
          var index = isNaN(match[1])
              ? lastIndexOf(this.captureNames, match[1]) + 1
              : +match[1],
            endIndex = match.index + match[0].length
          if (!index || index > this.captureNames.length) {
            throw new SyntaxError(
              'backreference to undefined group ' + match[0]
            )
          }
          return (
            '\\' +
            index +
            (endIndex === match.input.length ||
            isNaN(match.input.charAt(endIndex))
              ? ''
              : '(?:)')
          )
        })
        add(
          /(?:\s+|#.*)+/,
          function(match) {
            return nativ.test.call(
              quantifier,
              match.input.slice(match.index + match[0].length)
            )
              ? ''
              : '(?:)'
          },
          {
            trigger: function() {
              return this.hasFlag('x')
            },
            customFlags: 'x'
          }
        )
        add(
          /\./,
          function() {
            return '[\\s\\S]'
          },
          {
            trigger: function() {
              return this.hasFlag('s')
            },
            customFlags: 's'
          }
        )
        add(/\(\?P?<([\w$]+)>/, function(match) {
          if (!isNaN(match[1])) {
            throw new SyntaxError(
              "can't use integer as capture name " + match[0]
            )
          }
          this.captureNames.push(match[1])
          this.hasNamedCapture = true
          return '('
        })
        add(
          /\\(\d+)/,
          function(match, scope) {
            if (
              !(
                scope === defaultScope &&
                /^[1-9]/.test(match[1]) &&
                +match[1] <= this.captureNames.length
              ) &&
              match[1] !== '0'
            ) {
              throw new SyntaxError(
                "can't use octal escape or backreference to undefined group " +
                  match[0]
              )
            }
            return match[0]
          },
          {
            scope: 'all'
          }
        )
        add(
          /\((?!\?)/,
          function() {
            if (this.hasFlag('n')) {
              return '(?:'
            }
            this.captureNames.push(null)
            return '('
          },
          {
            customFlags: 'n'
          }
        )
        if (true) {
          exports.XRegExp = self
        }
        return self
      })()
    ;(function(XRegExp) {
      'use strict'
      var unicode = {}
      function slug(name) {
        return name.replace(/[- _]+/g, '').toLowerCase()
      }
      function expand(str) {
        return str.replace(/\w{4}/g, '\\u$&')
      }
      function pad4(str) {
        while (str.length < 4) {
          str = '0' + str
        }
        return str
      }
      function dec(hex) {
        return parseInt(hex, 16)
      }
      function hex(dec) {
        return parseInt(dec, 10).toString(16)
      }
      function invert(range) {
        var output = [],
          lastEnd = -1,
          start
        XRegExp.forEach(range, /\\u(\w{4})(?:-\\u(\w{4}))?/, function(m) {
          start = dec(m[1])
          if (start > lastEnd + 1) {
            output.push('\\u' + pad4(hex(lastEnd + 1)))
            if (start > lastEnd + 2) {
              output.push('-\\u' + pad4(hex(start - 1)))
            }
          }
          lastEnd = dec(m[2] || m[1])
        })
        if (lastEnd < 65535) {
          output.push('\\u' + pad4(hex(lastEnd + 1)))
          if (lastEnd < 65534) {
            output.push('-\\uFFFF')
          }
        }
        return output.join('')
      }
      function cacheInversion(item) {
        return (
          unicode['^' + item] || (unicode['^' + item] = invert(unicode[item]))
        )
      }
      XRegExp.install('extensibility')
      XRegExp.addUnicodePackage = function(pack, aliases) {
        var p
        if (!XRegExp.isInstalled('extensibility')) {
          throw new Error(
            'extensibility must be installed before adding Unicode packages'
          )
        }
        if (pack) {
          for (p in pack) {
            if (pack.hasOwnProperty(p)) {
              unicode[slug(p)] = expand(pack[p])
            }
          }
        }
        if (aliases) {
          for (p in aliases) {
            if (aliases.hasOwnProperty(p)) {
              unicode[slug(aliases[p])] = unicode[slug(p)]
            }
          }
        }
      }
      XRegExp.addUnicodePackage(
        {
          L:
            '0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A008A2-08AC0904-0939093D09500958-09610971-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC'
        },
        {
          L: 'Letter'
        }
      )
      XRegExp.addToken(
        /\\([pP]){(\^?)([^}]*)}/,
        function(match, scope) {
          var inv = match[1] === 'P' || match[2] ? '^' : '',
            item = slug(match[3])
          if (match[1] === 'P' && match[2]) {
            throw new SyntaxError('invalid double negation \\P{^')
          }
          if (!unicode.hasOwnProperty(item)) {
            throw new SyntaxError(
              'invalid or unknown Unicode property ' + match[0]
            )
          }
          return scope === 'class'
            ? inv ? cacheInversion(item) : unicode[item]
            : '[' + inv + unicode[item] + ']'
        },
        {
          scope: 'all'
        }
      )
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      if (!XRegExp.addUnicodePackage) {
        throw new ReferenceError(
          'Unicode Base must be loaded before Unicode Categories'
        )
      }
      XRegExp.install('extensibility')
      XRegExp.addUnicodePackage(
        {
          Ll:
            '0061-007A00B500DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02AF037103730377037B-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1D2B1D6B-1D771D79-1D9A1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF7210A210E210F2113212F21342139213C213D2146-2149214E21842C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7B2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76FA771-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7FAFB00-FB06FB13-FB17FF41-FF5A',
          Lu:
            '0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F214521832C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A',
          Lt: '01C501C801CB01F21F88-1F8F1F98-1F9F1FA8-1FAF1FBC1FCC1FFC',
          Lm:
            '02B0-02C102C6-02D102E0-02E402EC02EE0374037A0559064006E506E607F407F507FA081A0824082809710E460EC610FC17D718431AA71C78-1C7D1D2C-1D6A1D781D9B-1DBF2071207F2090-209C2C7C2C7D2D6F2E2F30053031-3035303B309D309E30FC-30FEA015A4F8-A4FDA60CA67FA717-A71FA770A788A7F8A7F9A9CFAA70AADDAAF3AAF4FF70FF9EFF9F',
          Lo:
            '00AA00BA01BB01C0-01C3029405D0-05EA05F0-05F20620-063F0641-064A066E066F0671-06D306D506EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA0800-08150840-085808A008A2-08AC0904-0939093D09500958-09610972-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E450E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10D0-10FA10FD-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317DC1820-18421844-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C771CE9-1CEC1CEE-1CF11CF51CF62135-21382D30-2D672D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE3006303C3041-3096309F30A1-30FA30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A014A016-A48CA4D0-A4F7A500-A60BA610-A61FA62AA62BA66EA6A0-A6E5A7FB-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2AA00-AA28AA40-AA42AA44-AA4BAA60-AA6FAA71-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADBAADCAAE0-AAEAAAF2AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF66-FF6FFF71-FF9DFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC',
          M:
            '0300-036F0483-04890591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0903093A-093C093E-094F0951-0957096209630981-098309BC09BE-09C409C709C809CB-09CD09D709E209E30A01-0A030A3C0A3E-0A420A470A480A4B-0A4D0A510A700A710A750A81-0A830ABC0ABE-0AC50AC7-0AC90ACB-0ACD0AE20AE30B01-0B030B3C0B3E-0B440B470B480B4B-0B4D0B560B570B620B630B820BBE-0BC20BC6-0BC80BCA-0BCD0BD70C01-0C030C3E-0C440C46-0C480C4A-0C4D0C550C560C620C630C820C830CBC0CBE-0CC40CC6-0CC80CCA-0CCD0CD50CD60CE20CE30D020D030D3E-0D440D46-0D480D4A-0D4D0D570D620D630D820D830DCA0DCF-0DD40DD60DD8-0DDF0DF20DF30E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F3E0F3F0F71-0F840F860F870F8D-0F970F99-0FBC0FC6102B-103E1056-1059105E-10601062-10641067-106D1071-10741082-108D108F109A-109D135D-135F1712-17141732-1734175217531772177317B4-17D317DD180B-180D18A91920-192B1930-193B19B0-19C019C819C91A17-1A1B1A55-1A5E1A60-1A7C1A7F1B00-1B041B34-1B441B6B-1B731B80-1B821BA1-1BAD1BE6-1BF31C24-1C371CD0-1CD21CD4-1CE81CED1CF2-1CF41DC0-1DE61DFC-1DFF20D0-20F02CEF-2CF12D7F2DE0-2DFF302A-302F3099309AA66F-A672A674-A67DA69FA6F0A6F1A802A806A80BA823-A827A880A881A8B4-A8C4A8E0-A8F1A926-A92DA947-A953A980-A983A9B3-A9C0AA29-AA36AA43AA4CAA4DAA7BAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAEB-AAEFAAF5AAF6ABE3-ABEAABECABEDFB1EFE00-FE0FFE20-FE26',
          Mn:
            '0300-036F0483-04870591-05BD05BF05C105C205C405C505C70610-061A064B-065F067006D6-06DC06DF-06E406E706E806EA-06ED07110730-074A07A6-07B007EB-07F30816-0819081B-08230825-08270829-082D0859-085B08E4-08FE0900-0902093A093C0941-0948094D0951-095709620963098109BC09C1-09C409CD09E209E30A010A020A3C0A410A420A470A480A4B-0A4D0A510A700A710A750A810A820ABC0AC1-0AC50AC70AC80ACD0AE20AE30B010B3C0B3F0B41-0B440B4D0B560B620B630B820BC00BCD0C3E-0C400C46-0C480C4A-0C4D0C550C560C620C630CBC0CBF0CC60CCC0CCD0CE20CE30D41-0D440D4D0D620D630DCA0DD2-0DD40DD60E310E34-0E3A0E47-0E4E0EB10EB4-0EB90EBB0EBC0EC8-0ECD0F180F190F350F370F390F71-0F7E0F80-0F840F860F870F8D-0F970F99-0FBC0FC6102D-10301032-10371039103A103D103E10581059105E-10601071-1074108210851086108D109D135D-135F1712-17141732-1734175217531772177317B417B517B7-17BD17C617C9-17D317DD180B-180D18A91920-19221927192819321939-193B1A171A181A561A58-1A5E1A601A621A65-1A6C1A73-1A7C1A7F1B00-1B031B341B36-1B3A1B3C1B421B6B-1B731B801B811BA2-1BA51BA81BA91BAB1BE61BE81BE91BED1BEF-1BF11C2C-1C331C361C371CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF20D0-20DC20E120E5-20F02CEF-2CF12D7F2DE0-2DFF302A-302D3099309AA66FA674-A67DA69FA6F0A6F1A802A806A80BA825A826A8C4A8E0-A8F1A926-A92DA947-A951A980-A982A9B3A9B6-A9B9A9BCAA29-AA2EAA31AA32AA35AA36AA43AA4CAAB0AAB2-AAB4AAB7AAB8AABEAABFAAC1AAECAAEDAAF6ABE5ABE8ABEDFB1EFE00-FE0FFE20-FE26',
          Mc:
            '0903093B093E-09400949-094C094E094F0982098309BE-09C009C709C809CB09CC09D70A030A3E-0A400A830ABE-0AC00AC90ACB0ACC0B020B030B3E0B400B470B480B4B0B4C0B570BBE0BBF0BC10BC20BC6-0BC80BCA-0BCC0BD70C01-0C030C41-0C440C820C830CBE0CC0-0CC40CC70CC80CCA0CCB0CD50CD60D020D030D3E-0D400D46-0D480D4A-0D4C0D570D820D830DCF-0DD10DD8-0DDF0DF20DF30F3E0F3F0F7F102B102C10311038103B103C105610571062-10641067-106D108310841087-108C108F109A-109C17B617BE-17C517C717C81923-19261929-192B193019311933-193819B0-19C019C819C91A19-1A1B1A551A571A611A631A641A6D-1A721B041B351B3B1B3D-1B411B431B441B821BA11BA61BA71BAA1BAC1BAD1BE71BEA-1BEC1BEE1BF21BF31C24-1C2B1C341C351CE11CF21CF3302E302FA823A824A827A880A881A8B4-A8C3A952A953A983A9B4A9B5A9BAA9BBA9BD-A9C0AA2FAA30AA33AA34AA4DAA7BAAEBAAEEAAEFAAF5ABE3ABE4ABE6ABE7ABE9ABEAABEC',
          Me: '0488048920DD-20E020E2-20E4A670-A672',
          N:
            '0030-003900B200B300B900BC-00BE0660-066906F0-06F907C0-07C90966-096F09E6-09EF09F4-09F90A66-0A6F0AE6-0AEF0B66-0B6F0B72-0B770BE6-0BF20C66-0C6F0C78-0C7E0CE6-0CEF0D66-0D750E50-0E590ED0-0ED90F20-0F331040-10491090-10991369-137C16EE-16F017E0-17E917F0-17F91810-18191946-194F19D0-19DA1A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C5920702074-20792080-20892150-21822185-21892460-249B24EA-24FF2776-27932CFD30073021-30293038-303A3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA620-A629A6E6-A6EFA830-A835A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19',
          Nd:
            '0030-00390660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19',
          Nl: '16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF',
          No:
            '00B200B300B900BC-00BE09F4-09F90B72-0B770BF0-0BF20C78-0C7E0D70-0D750F2A-0F331369-137C17F0-17F919DA20702074-20792080-20892150-215F21892460-249B24EA-24FF2776-27932CFD3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA830-A835',
          P:
            '0021-00230025-002A002C-002F003A003B003F0040005B-005D005F007B007D00A100A700AB00B600B700BB00BF037E0387055A-055F0589058A05BE05C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F3A-0F3D0F850FD0-0FD40FD90FDA104A-104F10FB1360-13681400166D166E169B169C16EB-16ED1735173617D4-17D617D8-17DA1800-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD32010-20272030-20432045-20512053-205E207D207E208D208E2329232A2768-277527C527C627E6-27EF2983-299829D8-29DB29FC29FD2CF9-2CFC2CFE2CFF2D702E00-2E2E2E30-2E3B3001-30033008-30113014-301F3030303D30A030FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFD3EFD3FFE10-FE19FE30-FE52FE54-FE61FE63FE68FE6AFE6BFF01-FF03FF05-FF0AFF0C-FF0FFF1AFF1BFF1FFF20FF3B-FF3DFF3FFF5BFF5DFF5F-FF65',
          Pd:
            '002D058A05BE140018062010-20152E172E1A2E3A2E3B301C303030A0FE31FE32FE58FE63FF0D',
          Ps:
            '0028005B007B0F3A0F3C169B201A201E2045207D208D23292768276A276C276E27702772277427C527E627E827EA27EC27EE2983298529872989298B298D298F299129932995299729D829DA29FC2E222E242E262E283008300A300C300E3010301430163018301A301DFD3EFE17FE35FE37FE39FE3BFE3DFE3FFE41FE43FE47FE59FE5BFE5DFF08FF3BFF5BFF5FFF62',
          Pe:
            '0029005D007D0F3B0F3D169C2046207E208E232A2769276B276D276F27712773277527C627E727E927EB27ED27EF298429862988298A298C298E2990299229942996299829D929DB29FD2E232E252E272E293009300B300D300F3011301530173019301B301E301FFD3FFE18FE36FE38FE3AFE3CFE3EFE40FE42FE44FE48FE5AFE5CFE5EFF09FF3DFF5DFF60FF63',
          Pi: '00AB2018201B201C201F20392E022E042E092E0C2E1C2E20',
          Pf: '00BB2019201D203A2E032E052E0A2E0D2E1D2E21',
          Pc: '005F203F20402054FE33FE34FE4D-FE4FFF3F',
          Po:
            '0021-00230025-0027002A002C002E002F003A003B003F0040005C00A100A700B600B700BF037E0387055A-055F058905C005C305C605F305F40609060A060C060D061B061E061F066A-066D06D40700-070D07F7-07F90830-083E085E0964096509700AF00DF40E4F0E5A0E5B0F04-0F120F140F850FD0-0FD40FD90FDA104A-104F10FB1360-1368166D166E16EB-16ED1735173617D4-17D617D8-17DA1800-18051807-180A194419451A1E1A1F1AA0-1AA61AA8-1AAD1B5A-1B601BFC-1BFF1C3B-1C3F1C7E1C7F1CC0-1CC71CD3201620172020-20272030-2038203B-203E2041-20432047-205120532055-205E2CF9-2CFC2CFE2CFF2D702E002E012E06-2E082E0B2E0E-2E162E182E192E1B2E1E2E1F2E2A-2E2E2E30-2E393001-3003303D30FBA4FEA4FFA60D-A60FA673A67EA6F2-A6F7A874-A877A8CEA8CFA8F8-A8FAA92EA92FA95FA9C1-A9CDA9DEA9DFAA5C-AA5FAADEAADFAAF0AAF1ABEBFE10-FE16FE19FE30FE45FE46FE49-FE4CFE50-FE52FE54-FE57FE5F-FE61FE68FE6AFE6BFF01-FF03FF05-FF07FF0AFF0CFF0EFF0FFF1AFF1BFF1FFF20FF3CFF61FF64FF65',
          S:
            '0024002B003C-003E005E0060007C007E00A2-00A600A800A900AC00AE-00B100B400B800D700F702C2-02C502D2-02DF02E5-02EB02ED02EF-02FF03750384038503F60482058F0606-0608060B060E060F06DE06E906FD06FE07F609F209F309FA09FB0AF10B700BF3-0BFA0C7F0D790E3F0F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-139917DB194019DE-19FF1B61-1B6A1B74-1B7C1FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE20442052207A-207C208A-208C20A0-20B9210021012103-21062108210921142116-2118211E-2123212521272129212E213A213B2140-2144214A-214D214F2190-2328232B-23F32400-24262440-244A249C-24E92500-26FF2701-27672794-27C427C7-27E527F0-29822999-29D729DC-29FB29FE-2B4C2B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F309B309C319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A700-A716A720A721A789A78AA828-A82BA836-A839AA77-AA79FB29FBB2-FBC1FDFCFDFDFE62FE64-FE66FE69FF04FF0BFF1C-FF1EFF3EFF40FF5CFF5EFFE0-FFE6FFE8-FFEEFFFCFFFD',
          Sm:
            '002B003C-003E007C007E00AC00B100D700F703F60606-060820442052207A-207C208A-208C21182140-2144214B2190-2194219A219B21A021A321A621AE21CE21CF21D221D421F4-22FF2308-230B23202321237C239B-23B323DC-23E125B725C125F8-25FF266F27C0-27C427C7-27E527F0-27FF2900-29822999-29D729DC-29FB29FE-2AFF2B30-2B442B47-2B4CFB29FE62FE64-FE66FF0BFF1C-FF1EFF5CFF5EFFE2FFE9-FFEC',
          Sc:
            '002400A2-00A5058F060B09F209F309FB0AF10BF90E3F17DB20A0-20B9A838FDFCFE69FF04FFE0FFE1FFE5FFE6',
          Sk:
            '005E006000A800AF00B400B802C2-02C502D2-02DF02E5-02EB02ED02EF-02FF0375038403851FBD1FBF-1FC11FCD-1FCF1FDD-1FDF1FED-1FEF1FFD1FFE309B309CA700-A716A720A721A789A78AFBB2-FBC1FF3EFF40FFE3',
          So:
            '00A600A900AE00B00482060E060F06DE06E906FD06FE07F609FA0B700BF3-0BF80BFA0C7F0D790F01-0F030F130F15-0F170F1A-0F1F0F340F360F380FBE-0FC50FC7-0FCC0FCE0FCF0FD5-0FD8109E109F1390-1399194019DE-19FF1B61-1B6A1B74-1B7C210021012103-210621082109211421162117211E-2123212521272129212E213A213B214A214C214D214F2195-2199219C-219F21A121A221A421A521A7-21AD21AF-21CD21D021D121D321D5-21F32300-2307230C-231F2322-2328232B-237B237D-239A23B4-23DB23E2-23F32400-24262440-244A249C-24E92500-25B625B8-25C025C2-25F72600-266E2670-26FF2701-27672794-27BF2800-28FF2B00-2B2F2B452B462B50-2B592CE5-2CEA2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB300430123013302030363037303E303F319031913196-319F31C0-31E33200-321E322A-324732503260-327F328A-32B032C0-32FE3300-33FF4DC0-4DFFA490-A4C6A828-A82BA836A837A839AA77-AA79FDFDFFE4FFE8FFEDFFEEFFFCFFFD',
          Z: '002000A01680180E2000-200A20282029202F205F3000',
          Zs: '002000A01680180E2000-200A202F205F3000',
          Zl: '2028',
          Zp: '2029',
          C:
            '0000-001F007F-009F00AD03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-0605061C061D06DD070E070F074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF200B-200F202A-202E2060-206F20722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-F8FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFD-FF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFFBFFFEFFFF',
          Cc: '0000-001F007F-009F',
          Cf:
            '00AD0600-060406DD070F200B-200F202A-202E2060-2064206A-206FFEFFFFF9-FFFB',
          Co: 'E000-F8FF',
          Cs: 'D800-DFFF',
          Cn:
            '03780379037F-0383038B038D03A20528-05300557055805600588058B-058E059005C8-05CF05EB-05EF05F5-05FF0605061C061D070E074B074C07B2-07BF07FB-07FF082E082F083F085C085D085F-089F08A108AD-08E308FF097809800984098D098E0991099209A909B109B3-09B509BA09BB09C509C609C909CA09CF-09D609D8-09DB09DE09E409E509FC-0A000A040A0B-0A0E0A110A120A290A310A340A370A3A0A3B0A3D0A43-0A460A490A4A0A4E-0A500A52-0A580A5D0A5F-0A650A76-0A800A840A8E0A920AA90AB10AB40ABA0ABB0AC60ACA0ACE0ACF0AD1-0ADF0AE40AE50AF2-0B000B040B0D0B0E0B110B120B290B310B340B3A0B3B0B450B460B490B4A0B4E-0B550B58-0B5B0B5E0B640B650B78-0B810B840B8B-0B8D0B910B96-0B980B9B0B9D0BA0-0BA20BA5-0BA70BAB-0BAD0BBA-0BBD0BC3-0BC50BC90BCE0BCF0BD1-0BD60BD8-0BE50BFB-0C000C040C0D0C110C290C340C3A-0C3C0C450C490C4E-0C540C570C5A-0C5F0C640C650C70-0C770C800C810C840C8D0C910CA90CB40CBA0CBB0CC50CC90CCE-0CD40CD7-0CDD0CDF0CE40CE50CF00CF3-0D010D040D0D0D110D3B0D3C0D450D490D4F-0D560D58-0D5F0D640D650D76-0D780D800D810D840D97-0D990DB20DBC0DBE0DBF0DC7-0DC90DCB-0DCE0DD50DD70DE0-0DF10DF5-0E000E3B-0E3E0E5C-0E800E830E850E860E890E8B0E8C0E8E-0E930E980EA00EA40EA60EA80EA90EAC0EBA0EBE0EBF0EC50EC70ECE0ECF0EDA0EDB0EE0-0EFF0F480F6D-0F700F980FBD0FCD0FDB-0FFF10C610C8-10CC10CE10CF1249124E124F12571259125E125F1289128E128F12B112B612B712BF12C112C612C712D7131113161317135B135C137D-137F139A-139F13F5-13FF169D-169F16F1-16FF170D1715-171F1737-173F1754-175F176D17711774-177F17DE17DF17EA-17EF17FA-17FF180F181A-181F1878-187F18AB-18AF18F6-18FF191D-191F192C-192F193C-193F1941-1943196E196F1975-197F19AC-19AF19CA-19CF19DB-19DD1A1C1A1D1A5F1A7D1A7E1A8A-1A8F1A9A-1A9F1AAE-1AFF1B4C-1B4F1B7D-1B7F1BF4-1BFB1C38-1C3A1C4A-1C4C1C80-1CBF1CC8-1CCF1CF7-1CFF1DE7-1DFB1F161F171F1E1F1F1F461F471F4E1F4F1F581F5A1F5C1F5E1F7E1F7F1FB51FC51FD41FD51FDC1FF01FF11FF51FFF2065-206920722073208F209D-209F20BA-20CF20F1-20FF218A-218F23F4-23FF2427-243F244B-245F27002B4D-2B4F2B5A-2BFF2C2F2C5F2CF4-2CF82D262D28-2D2C2D2E2D2F2D68-2D6E2D71-2D7E2D97-2D9F2DA72DAF2DB72DBF2DC72DCF2DD72DDF2E3C-2E7F2E9A2EF4-2EFF2FD6-2FEF2FFC-2FFF3040309730983100-3104312E-3130318F31BB-31BF31E4-31EF321F32FF4DB6-4DBF9FCD-9FFFA48D-A48FA4C7-A4CFA62C-A63FA698-A69EA6F8-A6FFA78FA794-A79FA7AB-A7F7A82C-A82FA83A-A83FA878-A87FA8C5-A8CDA8DA-A8DFA8FC-A8FFA954-A95EA97D-A97FA9CEA9DA-A9DDA9E0-A9FFAA37-AA3FAA4EAA4FAA5AAA5BAA7C-AA7FAAC3-AADAAAF7-AB00AB07AB08AB0FAB10AB17-AB1FAB27AB2F-ABBFABEEABEFABFA-ABFFD7A4-D7AFD7C7-D7CAD7FC-D7FFFA6EFA6FFADA-FAFFFB07-FB12FB18-FB1CFB37FB3DFB3FFB42FB45FBC2-FBD2FD40-FD4FFD90FD91FDC8-FDEFFDFEFDFFFE1A-FE1FFE27-FE2FFE53FE67FE6C-FE6FFE75FEFDFEFEFF00FFBF-FFC1FFC8FFC9FFD0FFD1FFD8FFD9FFDD-FFDFFFE7FFEF-FFF8FFFEFFFF'
        },
        {
          Ll: 'Lowercase_Letter',
          Lu: 'Uppercase_Letter',
          Lt: 'Titlecase_Letter',
          Lm: 'Modifier_Letter',
          Lo: 'Other_Letter',
          M: 'Mark',
          Mn: 'Nonspacing_Mark',
          Mc: 'Spacing_Mark',
          Me: 'Enclosing_Mark',
          N: 'Number',
          Nd: 'Decimal_Number',
          Nl: 'Letter_Number',
          No: 'Other_Number',
          P: 'Punctuation',
          Pd: 'Dash_Punctuation',
          Ps: 'Open_Punctuation',
          Pe: 'Close_Punctuation',
          Pi: 'Initial_Punctuation',
          Pf: 'Final_Punctuation',
          Pc: 'Connector_Punctuation',
          Po: 'Other_Punctuation',
          S: 'Symbol',
          Sm: 'Math_Symbol',
          Sc: 'Currency_Symbol',
          Sk: 'Modifier_Symbol',
          So: 'Other_Symbol',
          Z: 'Separator',
          Zs: 'Space_Separator',
          Zl: 'Line_Separator',
          Zp: 'Paragraph_Separator',
          C: 'Other',
          Cc: 'Control',
          Cf: 'Format',
          Co: 'Private_Use',
          Cs: 'Surrogate',
          Cn: 'Unassigned'
        }
      )
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      if (!XRegExp.addUnicodePackage) {
        throw new ReferenceError(
          'Unicode Base must be loaded before Unicode Scripts'
        )
      }
      XRegExp.install('extensibility')
      XRegExp.addUnicodePackage({
        Arabic:
          '0600-06040606-060B060D-061A061E0620-063F0641-064A0656-065E066A-066F0671-06DC06DE-06FF0750-077F08A008A2-08AC08E4-08FEFB50-FBC1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFCFE70-FE74FE76-FEFC',
        Armenian: '0531-05560559-055F0561-0587058A058FFB13-FB17',
        Balinese: '1B00-1B4B1B50-1B7C',
        Bamum: 'A6A0-A6F7',
        Batak: '1BC0-1BF31BFC-1BFF',
        Bengali:
          '0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB',
        Bopomofo: '02EA02EB3105-312D31A0-31BA',
        Braille: '2800-28FF',
        Buginese: '1A00-1A1B1A1E1A1F',
        Buhid: '1740-1753',
        Canadian_Aboriginal: '1400-167F18B0-18F5',
        Cham: 'AA00-AA36AA40-AA4DAA50-AA59AA5C-AA5F',
        Cherokee: '13A0-13F4',
        Common:
          '0000-0040005B-0060007B-00A900AB-00B900BB-00BF00D700F702B9-02DF02E5-02E902EC-02FF0374037E038503870589060C061B061F06400660-066906DD096409650E3F0FD5-0FD810FB16EB-16ED173517361802180318051CD31CE11CE9-1CEC1CEE-1CF31CF51CF62000-200B200E-2064206A-20702074-207E2080-208E20A0-20B92100-21252127-2129212C-21312133-214D214F-215F21892190-23F32400-24262440-244A2460-26FF2701-27FF2900-2B4C2B50-2B592E00-2E3B2FF0-2FFB3000-300430063008-30203030-3037303C-303F309B309C30A030FB30FC3190-319F31C0-31E33220-325F327F-32CF3358-33FF4DC0-4DFFA700-A721A788-A78AA830-A839FD3EFD3FFDFDFE10-FE19FE30-FE52FE54-FE66FE68-FE6BFEFFFF01-FF20FF3B-FF40FF5B-FF65FF70FF9EFF9FFFE0-FFE6FFE8-FFEEFFF9-FFFD',
        Coptic: '03E2-03EF2C80-2CF32CF9-2CFF',
        Cyrillic: '0400-04840487-05271D2B1D782DE0-2DFFA640-A697A69F',
        Devanagari: '0900-09500953-09630966-09770979-097FA8E0-A8FB',
        Ethiopic:
          '1200-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-13992D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDEAB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2E',
        Georgian: '10A0-10C510C710CD10D0-10FA10FC-10FF2D00-2D252D272D2D',
        Glagolitic: '2C00-2C2E2C30-2C5E',
        Greek:
          '0370-03730375-0377037A-037D038403860388-038A038C038E-03A103A3-03E103F0-03FF1D26-1D2A1D5D-1D611D66-1D6A1DBF1F00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2126',
        Gujarati:
          '0A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF1',
        Gurmukhi:
          '0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A75',
        Han:
          '2E80-2E992E9B-2EF32F00-2FD5300530073021-30293038-303B3400-4DB54E00-9FCCF900-FA6DFA70-FAD9',
        Hangul:
          '1100-11FF302E302F3131-318E3200-321E3260-327EA960-A97CAC00-D7A3D7B0-D7C6D7CB-D7FBFFA0-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC',
        Hanunoo: '1720-1734',
        Hebrew:
          '0591-05C705D0-05EA05F0-05F4FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FB4F',
        Hiragana: '3041-3096309D-309F',
        Inherited:
          '0300-036F04850486064B-0655065F0670095109521CD0-1CD21CD4-1CE01CE2-1CE81CED1CF41DC0-1DE61DFC-1DFF200C200D20D0-20F0302A-302D3099309AFE00-FE0FFE20-FE26',
        Javanese: 'A980-A9CDA9CF-A9D9A9DEA9DF',
        Kannada:
          '0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF2',
        Katakana:
          '30A1-30FA30FD-30FF31F0-31FF32D0-32FE3300-3357FF66-FF6FFF71-FF9D',
        Kayah_Li: 'A900-A92F',
        Khmer: '1780-17DD17E0-17E917F0-17F919E0-19FF',
        Lao:
          '0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF',
        Latin:
          '0041-005A0061-007A00AA00BA00C0-00D600D8-00F600F8-02B802E0-02E41D00-1D251D2C-1D5C1D62-1D651D6B-1D771D79-1DBE1E00-1EFF2071207F2090-209C212A212B2132214E2160-21882C60-2C7FA722-A787A78B-A78EA790-A793A7A0-A7AAA7F8-A7FFFB00-FB06FF21-FF3AFF41-FF5A',
        Lepcha: '1C00-1C371C3B-1C491C4D-1C4F',
        Limbu: '1900-191C1920-192B1930-193B19401944-194F',
        Lisu: 'A4D0-A4FF',
        Malayalam:
          '0D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F',
        Mandaic: '0840-085B085E',
        Meetei_Mayek: 'AAE0-AAF6ABC0-ABEDABF0-ABF9',
        Mongolian: '1800180118041806-180E1810-18191820-18771880-18AA',
        Myanmar: '1000-109FAA60-AA7B',
        New_Tai_Lue: '1980-19AB19B0-19C919D0-19DA19DE19DF',
        Nko: '07C0-07FA',
        Ogham: '1680-169C',
        Ol_Chiki: '1C50-1C7F',
        Oriya:
          '0B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B77',
        Phags_Pa: 'A840-A877',
        Rejang: 'A930-A953A95F',
        Runic: '16A0-16EA16EE-16F0',
        Samaritan: '0800-082D0830-083E',
        Saurashtra: 'A880-A8C4A8CE-A8D9',
        Sinhala:
          '0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF4',
        Sundanese: '1B80-1BBF1CC0-1CC7',
        Syloti_Nagri: 'A800-A82B',
        Syriac: '0700-070D070F-074A074D-074F',
        Tagalog: '1700-170C170E-1714',
        Tagbanwa: '1760-176C176E-177017721773',
        Tai_Le: '1950-196D1970-1974',
        Tai_Tham: '1A20-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD',
        Tai_Viet: 'AA80-AAC2AADB-AADF',
        Tamil:
          '0B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA',
        Telugu:
          '0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F',
        Thaana: '0780-07B1',
        Thai: '0E01-0E3A0E40-0E5B',
        Tibetan:
          '0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FD40FD90FDA',
        Tifinagh: '2D30-2D672D6F2D702D7F',
        Vai: 'A500-A62B',
        Yi: 'A000-A48CA490-A4C6'
      })
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      if (!XRegExp.addUnicodePackage) {
        throw new ReferenceError(
          'Unicode Base must be loaded before Unicode Blocks'
        )
      }
      XRegExp.install('extensibility')
      XRegExp.addUnicodePackage({
        InBasic_Latin: '0000-007F',
        InLatin_1_Supplement: '0080-00FF',
        InLatin_Extended_A: '0100-017F',
        InLatin_Extended_B: '0180-024F',
        InIPA_Extensions: '0250-02AF',
        InSpacing_Modifier_Letters: '02B0-02FF',
        InCombining_Diacritical_Marks: '0300-036F',
        InGreek_and_Coptic: '0370-03FF',
        InCyrillic: '0400-04FF',
        InCyrillic_Supplement: '0500-052F',
        InArmenian: '0530-058F',
        InHebrew: '0590-05FF',
        InArabic: '0600-06FF',
        InSyriac: '0700-074F',
        InArabic_Supplement: '0750-077F',
        InThaana: '0780-07BF',
        InNKo: '07C0-07FF',
        InSamaritan: '0800-083F',
        InMandaic: '0840-085F',
        InArabic_Extended_A: '08A0-08FF',
        InDevanagari: '0900-097F',
        InBengali: '0980-09FF',
        InGurmukhi: '0A00-0A7F',
        InGujarati: '0A80-0AFF',
        InOriya: '0B00-0B7F',
        InTamil: '0B80-0BFF',
        InTelugu: '0C00-0C7F',
        InKannada: '0C80-0CFF',
        InMalayalam: '0D00-0D7F',
        InSinhala: '0D80-0DFF',
        InThai: '0E00-0E7F',
        InLao: '0E80-0EFF',
        InTibetan: '0F00-0FFF',
        InMyanmar: '1000-109F',
        InGeorgian: '10A0-10FF',
        InHangul_Jamo: '1100-11FF',
        InEthiopic: '1200-137F',
        InEthiopic_Supplement: '1380-139F',
        InCherokee: '13A0-13FF',
        InUnified_Canadian_Aboriginal_Syllabics: '1400-167F',
        InOgham: '1680-169F',
        InRunic: '16A0-16FF',
        InTagalog: '1700-171F',
        InHanunoo: '1720-173F',
        InBuhid: '1740-175F',
        InTagbanwa: '1760-177F',
        InKhmer: '1780-17FF',
        InMongolian: '1800-18AF',
        InUnified_Canadian_Aboriginal_Syllabics_Extended: '18B0-18FF',
        InLimbu: '1900-194F',
        InTai_Le: '1950-197F',
        InNew_Tai_Lue: '1980-19DF',
        InKhmer_Symbols: '19E0-19FF',
        InBuginese: '1A00-1A1F',
        InTai_Tham: '1A20-1AAF',
        InBalinese: '1B00-1B7F',
        InSundanese: '1B80-1BBF',
        InBatak: '1BC0-1BFF',
        InLepcha: '1C00-1C4F',
        InOl_Chiki: '1C50-1C7F',
        InSundanese_Supplement: '1CC0-1CCF',
        InVedic_Extensions: '1CD0-1CFF',
        InPhonetic_Extensions: '1D00-1D7F',
        InPhonetic_Extensions_Supplement: '1D80-1DBF',
        InCombining_Diacritical_Marks_Supplement: '1DC0-1DFF',
        InLatin_Extended_Additional: '1E00-1EFF',
        InGreek_Extended: '1F00-1FFF',
        InGeneral_Punctuation: '2000-206F',
        InSuperscripts_and_Subscripts: '2070-209F',
        InCurrency_Symbols: '20A0-20CF',
        InCombining_Diacritical_Marks_for_Symbols: '20D0-20FF',
        InLetterlike_Symbols: '2100-214F',
        InNumber_Forms: '2150-218F',
        InArrows: '2190-21FF',
        InMathematical_Operators: '2200-22FF',
        InMiscellaneous_Technical: '2300-23FF',
        InControl_Pictures: '2400-243F',
        InOptical_Character_Recognition: '2440-245F',
        InEnclosed_Alphanumerics: '2460-24FF',
        InBox_Drawing: '2500-257F',
        InBlock_Elements: '2580-259F',
        InGeometric_Shapes: '25A0-25FF',
        InMiscellaneous_Symbols: '2600-26FF',
        InDingbats: '2700-27BF',
        InMiscellaneous_Mathematical_Symbols_A: '27C0-27EF',
        InSupplemental_Arrows_A: '27F0-27FF',
        InBraille_Patterns: '2800-28FF',
        InSupplemental_Arrows_B: '2900-297F',
        InMiscellaneous_Mathematical_Symbols_B: '2980-29FF',
        InSupplemental_Mathematical_Operators: '2A00-2AFF',
        InMiscellaneous_Symbols_and_Arrows: '2B00-2BFF',
        InGlagolitic: '2C00-2C5F',
        InLatin_Extended_C: '2C60-2C7F',
        InCoptic: '2C80-2CFF',
        InGeorgian_Supplement: '2D00-2D2F',
        InTifinagh: '2D30-2D7F',
        InEthiopic_Extended: '2D80-2DDF',
        InCyrillic_Extended_A: '2DE0-2DFF',
        InSupplemental_Punctuation: '2E00-2E7F',
        InCJK_Radicals_Supplement: '2E80-2EFF',
        InKangxi_Radicals: '2F00-2FDF',
        InIdeographic_Description_Characters: '2FF0-2FFF',
        InCJK_Symbols_and_Punctuation: '3000-303F',
        InHiragana: '3040-309F',
        InKatakana: '30A0-30FF',
        InBopomofo: '3100-312F',
        InHangul_Compatibility_Jamo: '3130-318F',
        InKanbun: '3190-319F',
        InBopomofo_Extended: '31A0-31BF',
        InCJK_Strokes: '31C0-31EF',
        InKatakana_Phonetic_Extensions: '31F0-31FF',
        InEnclosed_CJK_Letters_and_Months: '3200-32FF',
        InCJK_Compatibility: '3300-33FF',
        InCJK_Unified_Ideographs_Extension_A: '3400-4DBF',
        InYijing_Hexagram_Symbols: '4DC0-4DFF',
        InCJK_Unified_Ideographs: '4E00-9FFF',
        InYi_Syllables: 'A000-A48F',
        InYi_Radicals: 'A490-A4CF',
        InLisu: 'A4D0-A4FF',
        InVai: 'A500-A63F',
        InCyrillic_Extended_B: 'A640-A69F',
        InBamum: 'A6A0-A6FF',
        InModifier_Tone_Letters: 'A700-A71F',
        InLatin_Extended_D: 'A720-A7FF',
        InSyloti_Nagri: 'A800-A82F',
        InCommon_Indic_Number_Forms: 'A830-A83F',
        InPhags_pa: 'A840-A87F',
        InSaurashtra: 'A880-A8DF',
        InDevanagari_Extended: 'A8E0-A8FF',
        InKayah_Li: 'A900-A92F',
        InRejang: 'A930-A95F',
        InHangul_Jamo_Extended_A: 'A960-A97F',
        InJavanese: 'A980-A9DF',
        InCham: 'AA00-AA5F',
        InMyanmar_Extended_A: 'AA60-AA7F',
        InTai_Viet: 'AA80-AADF',
        InMeetei_Mayek_Extensions: 'AAE0-AAFF',
        InEthiopic_Extended_A: 'AB00-AB2F',
        InMeetei_Mayek: 'ABC0-ABFF',
        InHangul_Syllables: 'AC00-D7AF',
        InHangul_Jamo_Extended_B: 'D7B0-D7FF',
        InHigh_Surrogates: 'D800-DB7F',
        InHigh_Private_Use_Surrogates: 'DB80-DBFF',
        InLow_Surrogates: 'DC00-DFFF',
        InPrivate_Use_Area: 'E000-F8FF',
        InCJK_Compatibility_Ideographs: 'F900-FAFF',
        InAlphabetic_Presentation_Forms: 'FB00-FB4F',
        InArabic_Presentation_Forms_A: 'FB50-FDFF',
        InVariation_Selectors: 'FE00-FE0F',
        InVertical_Forms: 'FE10-FE1F',
        InCombining_Half_Marks: 'FE20-FE2F',
        InCJK_Compatibility_Forms: 'FE30-FE4F',
        InSmall_Form_Variants: 'FE50-FE6F',
        InArabic_Presentation_Forms_B: 'FE70-FEFF',
        InHalfwidth_and_Fullwidth_Forms: 'FF00-FFEF',
        InSpecials: 'FFF0-FFFF'
      })
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      if (!XRegExp.addUnicodePackage) {
        throw new ReferenceError(
          'Unicode Base must be loaded before Unicode Properties'
        )
      }
      XRegExp.install('extensibility')
      XRegExp.addUnicodePackage({
        Alphabetic:
          '0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE03450370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705B0-05BD05BF05C105C205C405C505C705D0-05EA05F0-05F20610-061A0620-06570659-065F066E-06D306D5-06DC06E1-06E806ED-06EF06FA-06FC06FF0710-073F074D-07B107CA-07EA07F407F507FA0800-0817081A-082C0840-085808A008A2-08AC08E4-08E908F0-08FE0900-093B093D-094C094E-09500955-09630971-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BD-09C409C709C809CB09CC09CE09D709DC09DD09DF-09E309F009F10A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3E-0A420A470A480A4B0A4C0A510A59-0A5C0A5E0A70-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD-0AC50AC7-0AC90ACB0ACC0AD00AE0-0AE30B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D-0B440B470B480B4B0B4C0B560B570B5C0B5D0B5F-0B630B710B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCC0BD00BD70C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4C0C550C560C580C590C60-0C630C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD-0CC40CC6-0CC80CCA-0CCC0CD50CD60CDE0CE0-0CE30CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4C0D4E0D570D60-0D630D7A-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCF-0DD40DD60DD8-0DDF0DF20DF30E01-0E3A0E40-0E460E4D0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60ECD0EDC-0EDF0F000F40-0F470F49-0F6C0F71-0F810F88-0F970F99-0FBC1000-10361038103B-103F1050-10621065-1068106E-1086108E109C109D10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135F1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16EE-16F01700-170C170E-17131720-17331740-17531760-176C176E-1770177217731780-17B317B6-17C817D717DC1820-18771880-18AA18B0-18F51900-191C1920-192B1930-19381950-196D1970-19741980-19AB19B0-19C91A00-1A1B1A20-1A5E1A61-1A741AA71B00-1B331B35-1B431B45-1B4B1B80-1BA91BAC-1BAF1BBA-1BE51BE7-1BF11C00-1C351C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF31CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E2160-218824B6-24E92C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2DFF2E2F3005-30073021-30293031-30353038-303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA674-A67BA67F-A697A69F-A6EFA717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A827A840-A873A880-A8C3A8F2-A8F7A8FBA90A-A92AA930-A952A960-A97CA980-A9B2A9B4-A9BFA9CFAA00-AA36AA40-AA4DAA60-AA76AA7AAA80-AABEAAC0AAC2AADB-AADDAAE0-AAEFAAF2-AAF5AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEAAC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC',
        Uppercase:
          '0041-005A00C0-00D600D8-00DE01000102010401060108010A010C010E01100112011401160118011A011C011E01200122012401260128012A012C012E01300132013401360139013B013D013F0141014301450147014A014C014E01500152015401560158015A015C015E01600162016401660168016A016C016E017001720174017601780179017B017D018101820184018601870189-018B018E-0191019301940196-0198019C019D019F01A001A201A401A601A701A901AC01AE01AF01B1-01B301B501B701B801BC01C401C701CA01CD01CF01D101D301D501D701D901DB01DE01E001E201E401E601E801EA01EC01EE01F101F401F6-01F801FA01FC01FE02000202020402060208020A020C020E02100212021402160218021A021C021E02200222022402260228022A022C022E02300232023A023B023D023E02410243-02460248024A024C024E03700372037603860388-038A038C038E038F0391-03A103A3-03AB03CF03D2-03D403D803DA03DC03DE03E003E203E403E603E803EA03EC03EE03F403F703F903FA03FD-042F04600462046404660468046A046C046E04700472047404760478047A047C047E0480048A048C048E04900492049404960498049A049C049E04A004A204A404A604A804AA04AC04AE04B004B204B404B604B804BA04BC04BE04C004C104C304C504C704C904CB04CD04D004D204D404D604D804DA04DC04DE04E004E204E404E604E804EA04EC04EE04F004F204F404F604F804FA04FC04FE05000502050405060508050A050C050E05100512051405160518051A051C051E05200522052405260531-055610A0-10C510C710CD1E001E021E041E061E081E0A1E0C1E0E1E101E121E141E161E181E1A1E1C1E1E1E201E221E241E261E281E2A1E2C1E2E1E301E321E341E361E381E3A1E3C1E3E1E401E421E441E461E481E4A1E4C1E4E1E501E521E541E561E581E5A1E5C1E5E1E601E621E641E661E681E6A1E6C1E6E1E701E721E741E761E781E7A1E7C1E7E1E801E821E841E861E881E8A1E8C1E8E1E901E921E941E9E1EA01EA21EA41EA61EA81EAA1EAC1EAE1EB01EB21EB41EB61EB81EBA1EBC1EBE1EC01EC21EC41EC61EC81ECA1ECC1ECE1ED01ED21ED41ED61ED81EDA1EDC1EDE1EE01EE21EE41EE61EE81EEA1EEC1EEE1EF01EF21EF41EF61EF81EFA1EFC1EFE1F08-1F0F1F18-1F1D1F28-1F2F1F38-1F3F1F48-1F4D1F591F5B1F5D1F5F1F68-1F6F1FB8-1FBB1FC8-1FCB1FD8-1FDB1FE8-1FEC1FF8-1FFB21022107210B-210D2110-211221152119-211D212421262128212A-212D2130-2133213E213F21452160-216F218324B6-24CF2C00-2C2E2C602C62-2C642C672C692C6B2C6D-2C702C722C752C7E-2C802C822C842C862C882C8A2C8C2C8E2C902C922C942C962C982C9A2C9C2C9E2CA02CA22CA42CA62CA82CAA2CAC2CAE2CB02CB22CB42CB62CB82CBA2CBC2CBE2CC02CC22CC42CC62CC82CCA2CCC2CCE2CD02CD22CD42CD62CD82CDA2CDC2CDE2CE02CE22CEB2CED2CF2A640A642A644A646A648A64AA64CA64EA650A652A654A656A658A65AA65CA65EA660A662A664A666A668A66AA66CA680A682A684A686A688A68AA68CA68EA690A692A694A696A722A724A726A728A72AA72CA72EA732A734A736A738A73AA73CA73EA740A742A744A746A748A74AA74CA74EA750A752A754A756A758A75AA75CA75EA760A762A764A766A768A76AA76CA76EA779A77BA77DA77EA780A782A784A786A78BA78DA790A792A7A0A7A2A7A4A7A6A7A8A7AAFF21-FF3A',
        Lowercase:
          '0061-007A00AA00B500BA00DF-00F600F8-00FF01010103010501070109010B010D010F01110113011501170119011B011D011F01210123012501270129012B012D012F01310133013501370138013A013C013E014001420144014601480149014B014D014F01510153015501570159015B015D015F01610163016501670169016B016D016F0171017301750177017A017C017E-0180018301850188018C018D019201950199-019B019E01A101A301A501A801AA01AB01AD01B001B401B601B901BA01BD-01BF01C601C901CC01CE01D001D201D401D601D801DA01DC01DD01DF01E101E301E501E701E901EB01ED01EF01F001F301F501F901FB01FD01FF02010203020502070209020B020D020F02110213021502170219021B021D021F02210223022502270229022B022D022F02310233-0239023C023F0240024202470249024B024D024F-02930295-02B802C002C102E0-02E40345037103730377037A-037D039003AC-03CE03D003D103D5-03D703D903DB03DD03DF03E103E303E503E703E903EB03ED03EF-03F303F503F803FB03FC0430-045F04610463046504670469046B046D046F04710473047504770479047B047D047F0481048B048D048F04910493049504970499049B049D049F04A104A304A504A704A904AB04AD04AF04B104B304B504B704B904BB04BD04BF04C204C404C604C804CA04CC04CE04CF04D104D304D504D704D904DB04DD04DF04E104E304E504E704E904EB04ED04EF04F104F304F504F704F904FB04FD04FF05010503050505070509050B050D050F05110513051505170519051B051D051F05210523052505270561-05871D00-1DBF1E011E031E051E071E091E0B1E0D1E0F1E111E131E151E171E191E1B1E1D1E1F1E211E231E251E271E291E2B1E2D1E2F1E311E331E351E371E391E3B1E3D1E3F1E411E431E451E471E491E4B1E4D1E4F1E511E531E551E571E591E5B1E5D1E5F1E611E631E651E671E691E6B1E6D1E6F1E711E731E751E771E791E7B1E7D1E7F1E811E831E851E871E891E8B1E8D1E8F1E911E931E95-1E9D1E9F1EA11EA31EA51EA71EA91EAB1EAD1EAF1EB11EB31EB51EB71EB91EBB1EBD1EBF1EC11EC31EC51EC71EC91ECB1ECD1ECF1ED11ED31ED51ED71ED91EDB1EDD1EDF1EE11EE31EE51EE71EE91EEB1EED1EEF1EF11EF31EF51EF71EF91EFB1EFD1EFF-1F071F10-1F151F20-1F271F30-1F371F40-1F451F50-1F571F60-1F671F70-1F7D1F80-1F871F90-1F971FA0-1FA71FB0-1FB41FB61FB71FBE1FC2-1FC41FC61FC71FD0-1FD31FD61FD71FE0-1FE71FF2-1FF41FF61FF72071207F2090-209C210A210E210F2113212F21342139213C213D2146-2149214E2170-217F218424D0-24E92C30-2C5E2C612C652C662C682C6A2C6C2C712C732C742C76-2C7D2C812C832C852C872C892C8B2C8D2C8F2C912C932C952C972C992C9B2C9D2C9F2CA12CA32CA52CA72CA92CAB2CAD2CAF2CB12CB32CB52CB72CB92CBB2CBD2CBF2CC12CC32CC52CC72CC92CCB2CCD2CCF2CD12CD32CD52CD72CD92CDB2CDD2CDF2CE12CE32CE42CEC2CEE2CF32D00-2D252D272D2DA641A643A645A647A649A64BA64DA64FA651A653A655A657A659A65BA65DA65FA661A663A665A667A669A66BA66DA681A683A685A687A689A68BA68DA68FA691A693A695A697A723A725A727A729A72BA72DA72F-A731A733A735A737A739A73BA73DA73FA741A743A745A747A749A74BA74DA74FA751A753A755A757A759A75BA75DA75FA761A763A765A767A769A76BA76DA76F-A778A77AA77CA77FA781A783A785A787A78CA78EA791A793A7A1A7A3A7A5A7A7A7A9A7F8-A7FAFB00-FB06FB13-FB17FF41-FF5A',
        White_Space:
          '0009-000D0020008500A01680180E2000-200A20282029202F205F3000',
        Noncharacter_Code_Point: 'FDD0-FDEFFFFEFFFF',
        Default_Ignorable_Code_Point:
          '00AD034F115F116017B417B5180B-180D200B-200F202A-202E2060-206F3164FE00-FE0FFEFFFFA0FFF0-FFF8',
        Any: '0000-FFFF',
        Ascii: '0000-007F',
        Assigned:
          '0000-0377037A-037E0384-038A038C038E-03A103A3-05270531-05560559-055F0561-05870589058A058F0591-05C705D0-05EA05F0-05F40600-06040606-061B061E-070D070F-074A074D-07B107C0-07FA0800-082D0830-083E0840-085B085E08A008A2-08AC08E4-08FE0900-09770979-097F0981-09830985-098C098F09900993-09A809AA-09B009B209B6-09B909BC-09C409C709C809CB-09CE09D709DC09DD09DF-09E309E6-09FB0A01-0A030A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A3C0A3E-0A420A470A480A4B-0A4D0A510A59-0A5C0A5E0A66-0A750A81-0A830A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABC-0AC50AC7-0AC90ACB-0ACD0AD00AE0-0AE30AE6-0AF10B01-0B030B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3C-0B440B470B480B4B-0B4D0B560B570B5C0B5D0B5F-0B630B66-0B770B820B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BBE-0BC20BC6-0BC80BCA-0BCD0BD00BD70BE6-0BFA0C01-0C030C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D-0C440C46-0C480C4A-0C4D0C550C560C580C590C60-0C630C66-0C6F0C78-0C7F0C820C830C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBC-0CC40CC6-0CC80CCA-0CCD0CD50CD60CDE0CE0-0CE30CE6-0CEF0CF10CF20D020D030D05-0D0C0D0E-0D100D12-0D3A0D3D-0D440D46-0D480D4A-0D4E0D570D60-0D630D66-0D750D79-0D7F0D820D830D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60DCA0DCF-0DD40DD60DD8-0DDF0DF2-0DF40E01-0E3A0E3F-0E5B0E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB90EBB-0EBD0EC0-0EC40EC60EC8-0ECD0ED0-0ED90EDC-0EDF0F00-0F470F49-0F6C0F71-0F970F99-0FBC0FBE-0FCC0FCE-0FDA1000-10C510C710CD10D0-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A135D-137C1380-139913A0-13F41400-169C16A0-16F01700-170C170E-17141720-17361740-17531760-176C176E-1770177217731780-17DD17E0-17E917F0-17F91800-180E1810-18191820-18771880-18AA18B0-18F51900-191C1920-192B1930-193B19401944-196D1970-19741980-19AB19B0-19C919D0-19DA19DE-1A1B1A1E-1A5E1A60-1A7C1A7F-1A891A90-1A991AA0-1AAD1B00-1B4B1B50-1B7C1B80-1BF31BFC-1C371C3B-1C491C4D-1C7F1CC0-1CC71CD0-1CF61D00-1DE61DFC-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FC41FC6-1FD31FD6-1FDB1FDD-1FEF1FF2-1FF41FF6-1FFE2000-2064206A-20712074-208E2090-209C20A0-20B920D0-20F02100-21892190-23F32400-24262440-244A2460-26FF2701-2B4C2B50-2B592C00-2C2E2C30-2C5E2C60-2CF32CF9-2D252D272D2D2D30-2D672D6F2D702D7F-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2DE0-2E3B2E80-2E992E9B-2EF32F00-2FD52FF0-2FFB3000-303F3041-30963099-30FF3105-312D3131-318E3190-31BA31C0-31E331F0-321E3220-32FE3300-4DB54DC0-9FCCA000-A48CA490-A4C6A4D0-A62BA640-A697A69F-A6F7A700-A78EA790-A793A7A0-A7AAA7F8-A82BA830-A839A840-A877A880-A8C4A8CE-A8D9A8E0-A8FBA900-A953A95F-A97CA980-A9CDA9CF-A9D9A9DEA9DFAA00-AA36AA40-AA4DAA50-AA59AA5C-AA7BAA80-AAC2AADB-AAF6AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABEDABF0-ABF9AC00-D7A3D7B0-D7C6D7CB-D7FBD800-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1D-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBC1FBD3-FD3FFD50-FD8FFD92-FDC7FDF0-FDFDFE00-FE19FE20-FE26FE30-FE52FE54-FE66FE68-FE6BFE70-FE74FE76-FEFCFEFFFF01-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDCFFE0-FFE6FFE8-FFEEFFF9-FFFD'
      })
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      function row(value, name, start, end) {
        return {
          value: value,
          name: name,
          start: start,
          end: end
        }
      }
      XRegExp.matchRecursive = function(str, left, right, flags, options) {
        flags = flags || ''
        options = options || {}
        var global = flags.indexOf('g') > -1,
          sticky = flags.indexOf('y') > -1,
          basicFlags = flags.replace(/y/g, ''),
          escapeChar = options.escapeChar,
          vN = options.valueNames,
          output = [],
          openTokens = 0,
          delimStart = 0,
          delimEnd = 0,
          lastOuterEnd = 0,
          outerStart,
          innerStart,
          leftMatch,
          rightMatch,
          esc
        left = XRegExp(left, basicFlags)
        right = XRegExp(right, basicFlags)
        if (escapeChar) {
          if (escapeChar.length > 1) {
            throw new SyntaxError("can't use more than one escape character")
          }
          escapeChar = XRegExp.escape(escapeChar)
          esc = new RegExp(
            '(?:' +
              escapeChar +
              '[\\S\\s]|(?:(?!' +
              XRegExp.union([left, right]).source +
              ')[^' +
              escapeChar +
              '])+)+',
            flags.replace(/[^im]+/g, '')
          )
        }
        while (true) {
          if (escapeChar) {
            delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0]
              .length
          }
          leftMatch = XRegExp.exec(str, left, delimEnd)
          rightMatch = XRegExp.exec(str, right, delimEnd)
          if (leftMatch && rightMatch) {
            if (leftMatch.index <= rightMatch.index) {
              rightMatch = null
            } else {
              leftMatch = null
            }
          }
          if (leftMatch || rightMatch) {
            delimStart = (leftMatch || rightMatch).index
            delimEnd = delimStart + (leftMatch || rightMatch)[0].length
          } else if (!openTokens) {
            break
          }
          if (sticky && !openTokens && delimStart > lastOuterEnd) {
            break
          }
          if (leftMatch) {
            if (!openTokens) {
              outerStart = delimStart
              innerStart = delimEnd
            }
            ++openTokens
          } else if (rightMatch && openTokens) {
            if (!--openTokens) {
              if (vN) {
                if (vN[0] && outerStart > lastOuterEnd) {
                  output.push(
                    row(
                      vN[0],
                      str.slice(lastOuterEnd, outerStart),
                      lastOuterEnd,
                      outerStart
                    )
                  )
                }
                if (vN[1]) {
                  output.push(
                    row(
                      vN[1],
                      str.slice(outerStart, innerStart),
                      outerStart,
                      innerStart
                    )
                  )
                }
                if (vN[2]) {
                  output.push(
                    row(
                      vN[2],
                      str.slice(innerStart, delimStart),
                      innerStart,
                      delimStart
                    )
                  )
                }
                if (vN[3]) {
                  output.push(
                    row(
                      vN[3],
                      str.slice(delimStart, delimEnd),
                      delimStart,
                      delimEnd
                    )
                  )
                }
              } else {
                output.push(str.slice(innerStart, delimStart))
              }
              lastOuterEnd = delimEnd
              if (!global) {
                break
              }
            }
          } else {
            throw new Error('string contains unbalanced delimiters')
          }
          if (delimStart === delimEnd) {
            ++delimEnd
          }
        }
        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
          output.push(
            row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length)
          )
        }
        return output
      }
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      var subparts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*]/g,
        parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subparts], 'g')
      function deanchor(pattern) {
        var startAnchor = /^(?:\(\?:\))?\^/,
          endAnchor = /\$(?:\(\?:\))?$/
        if (endAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
          return pattern.replace(startAnchor, '').replace(endAnchor, '')
        }
        return pattern
      }
      function asXRegExp(value) {
        return XRegExp.isRegExp(value)
          ? value.xregexp && !value.xregexp.isNative
            ? value
            : XRegExp(value.source)
          : XRegExp(value)
      }
      XRegExp.build = function(pattern, subs, flags) {
        var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern),
          data = {},
          numCaps = 0,
          numPriorCaps,
          numOuterCaps = 0,
          outerCapsMap = [0],
          outerCapNames,
          sub,
          p
        if (inlineFlags) {
          flags = flags || ''
          inlineFlags[1].replace(/./g, function(flag) {
            flags += flags.indexOf(flag) > -1 ? '' : flag
          })
        }
        for (p in subs) {
          if (subs.hasOwnProperty(p)) {
            sub = asXRegExp(subs[p])
            data[p] = {
              pattern: deanchor(sub.source),
              names: sub.xregexp.captureNames || []
            }
          }
        }
        pattern = asXRegExp(pattern)
        outerCapNames = pattern.xregexp.captureNames || []
        pattern = pattern.source.replace(parts, function($0, $1, $2, $3, $4) {
          var subName = $1 || $2,
            capName,
            intro
          if (subName) {
            if (!data.hasOwnProperty(subName)) {
              throw new ReferenceError('undefined property ' + $0)
            }
            if ($1) {
              capName = outerCapNames[numOuterCaps]
              outerCapsMap[++numOuterCaps] = ++numCaps
              intro = '(?<' + (capName || subName) + '>'
            } else {
              intro = '(?:'
            }
            numPriorCaps = numCaps
            return (
              intro +
              data[subName].pattern.replace(subparts, function(
                match,
                paren,
                backref
              ) {
                if (paren) {
                  capName = data[subName].names[numCaps - numPriorCaps]
                  ++numCaps
                  if (capName) {
                    return '(?<' + capName + '>'
                  }
                } else if (backref) {
                  return '\\' + (+backref + numPriorCaps)
                }
                return match
              }) +
              ')'
            )
          }
          if ($3) {
            capName = outerCapNames[numOuterCaps]
            outerCapsMap[++numOuterCaps] = ++numCaps
            if (capName) {
              return '(?<' + capName + '>'
            }
          } else if ($4) {
            return '\\' + outerCapsMap[+$4]
          }
          return $0
        })
        return XRegExp(pattern, flags)
      }
    })(XRegExp)
    ;(function(XRegExp) {
      'use strict'
      function extend(a, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) {
            a[p] = b[p]
          }
        }
      }
      extend(XRegExp.prototype, {
        apply: function(context, args) {
          return this.test(args[0])
        },
        call: function(context, str) {
          return this.test(str)
        },
        forEach: function(str, callback, context) {
          return XRegExp.forEach(str, this, callback, context)
        },
        globalize: function() {
          return XRegExp.globalize(this)
        },
        xexec: function(str, pos, sticky) {
          return XRegExp.exec(str, this, pos, sticky)
        },
        xtest: function(str, pos, sticky) {
          return XRegExp.test(str, this, pos, sticky)
        }
      })
    })(XRegExp)
  },
  function(module, exports, __webpack_require__) {
    void function() {
      var _,
        cleanArticleTags,
        cleanBadTags,
        cleanCodeBlocks,
        cleanEmTags,
        cleaner,
        cleanErrantLinebreaks,
        cleanParaSpans,
        cleanUnderlines,
        divToPara,
        getReplacementNodes,
        removeBodyClasses,
        removeDropCaps,
        removeNodesRegex,
        removeScriptsStyles,
        replaceWithPara
      _ = __webpack_require__(3)
      module.exports = cleaner = function(doc) {
        removeBodyClasses(doc)
        cleanArticleTags(doc)
        cleanEmTags(doc)
        cleanCodeBlocks(doc)
        removeDropCaps(doc)
        removeScriptsStyles(doc)
        cleanBadTags(doc)
        removeNodesRegex(doc, /^caption$/)
        removeNodesRegex(doc, / google /)
        removeNodesRegex(doc, /^[^entry-]more.*$/)
        removeNodesRegex(doc, /[^-]facebook/)
        removeNodesRegex(doc, /facebook-broadcasting/)
        removeNodesRegex(doc, /[^-]twitter/)
        cleanParaSpans(doc)
        cleanUnderlines(doc)
        cleanErrantLinebreaks(doc)
        divToPara(doc, 'div')
        divToPara(doc, 'span')
        return doc
      }
      removeBodyClasses = function(doc) {
        return doc('body').removeClass()
      }
      cleanArticleTags = function(doc) {
        var articles
        articles = doc('article')
        return articles.each(function() {
          doc(this).removeAttr('id')
          doc(this).removeAttr('name')
          return doc(this).removeAttr('class')
        })
      }
      cleanEmTags = function(doc) {
        var ems
        ems = doc('em')
        return ems.each(function() {
          var images
          images = ems.find('img')
          if (images.length === 0)
            return doc(this).replaceWith(doc(this).html())
        })
      }
      cleanCodeBlocks = function(doc) {
        var nodes
        nodes = doc("[class*='highlight-'], pre code, code, pre, ul.task-list")
        return nodes.each(function() {
          return doc(this).replaceWith(doc(this).text())
        })
      }
      removeDropCaps = function(doc) {
        var nodes
        nodes = doc('span[class~=dropcap], span[class~=drop_cap]')
        return nodes.each(function() {
          return doc(this).replaceWith(doc(this).html())
        })
      }
      removeScriptsStyles = function(doc) {
        var comments
        doc('script').remove()
        doc('style').remove()
        comments = doc('*')
          .contents()
          .filter(function() {
            return this.type === 'comment'
          })
        return doc(comments).remove()
      }
      cleanBadTags = function(doc) {
        var re, removeNodesRe, toRemove
        removeNodesRe =
          '^side$|combx|retweet|mediaarticlerelated|menucontainer|navbar|partner-gravity-ad|video-full-transcript|storytopbar-bucket|utility-bar|inline-share-tools|comment|PopularQuestions|contact|foot|footer|Footer|footnote|cnn_strycaptiontxt|cnn_html_slideshow|cnn_strylftcntnt|links|meta$|shoutbox|sponsor|tags|socialnetworking|socialNetworking|cnnStryHghLght|cnn_stryspcvbx|^inset$|pagetools|post-attributes|welcome_form|contentTools2|the_answers|communitypromo|runaroundLeft|subscribe|vcard|articleheadings|date|^print$|popup|author-dropdown|tools|socialtools|byline|konafilter|KonaFilter|breadcrumbs|^fn$|wp-caption-text|legende|ajoutVideo|timestamp|js_replies'
        re = new RegExp(removeNodesRe, 'i')
        toRemove = doc('*').filter(function() {
          var cache$, cache$1, cache$2
          return (
            (null != (cache$ = doc(this).attr('id'))
              ? cache$.match(re)
              : void 0) ||
            (null != (cache$1 = doc(this).attr('class'))
              ? cache$1.match(re)
              : void 0) ||
            (null != (cache$2 = doc(this).attr('name'))
              ? cache$2.match(re)
              : void 0)
          )
        })
        return doc(toRemove).remove()
      }
      removeNodesRegex = function(doc, pattern) {
        var toRemove
        toRemove = doc('div').filter(function() {
          var cache$, cache$1
          return (
            (null != (cache$ = doc(this).attr('id'))
              ? cache$.match(pattern)
              : void 0) ||
            (null != (cache$1 = doc(this).attr('class'))
              ? cache$1.match(pattern)
              : void 0)
          )
        })
        return doc(toRemove).remove()
      }
      cleanParaSpans = function(doc) {
        var nodes
        nodes = doc('p span')
        return nodes.each(function() {
          return doc(this).replaceWith(doc(this).html())
        })
      }
      cleanUnderlines = function(doc) {
        var nodes
        nodes = doc('u')
        return nodes.each(function() {
          return doc(this).replaceWith(doc(this).html())
        })
      }
      getReplacementNodes = function(doc, div) {
        var childs, nodesToRemove, nodesToReturn, replacementText, txt
        replacementText = []
        nodesToReturn = []
        nodesToRemove = []
        childs = div.contents()
        childs.each(function() {
          var kid,
            kidText,
            kidTextNode,
            nextSiblingNode,
            outer,
            previousSiblingNode,
            replaceText,
            txt
          kid = doc(this)
          if (kid[0].name === 'p' && replacementText.length > 0) {
            txt = replacementText.join('')
            nodesToReturn.push(txt)
            replacementText = []
            return nodesToReturn.push(doc(kid).html())
          } else if (kid[0].type === 'text') {
            kidTextNode = kid
            kidText = kid.text()
            replaceText = kidText
              .replace(/\n/g, '\n\n')
              .replace(/\t/g, '')
              .replace(/^\s+$/g, '')
            if (replaceText.length > 1) {
              previousSiblingNode = kidTextNode.prev()
              while (
                previousSiblingNode[0] &&
                previousSiblingNode[0].name === 'a' &&
                previousSiblingNode.attr('grv-usedalready') !== 'yes'
              ) {
                outer = ' ' + doc.html(previousSiblingNode) + ' '
                replacementText.push(outer)
                nodesToRemove.push(previousSiblingNode)
                previousSiblingNode.attr('grv-usedalready', 'yes')
                previousSiblingNode = previousSiblingNode.prev()
              }
              replacementText.push(replaceText)
              nextSiblingNode = kidTextNode.next()
              return function(accum$) {
                while (
                  nextSiblingNode[0] &&
                  nextSiblingNode[0].name === 'a' &&
                  nextSiblingNode.attr('grv-usedalready') !== 'yes'
                ) {
                  outer = ' ' + doc.html(nextSiblingNode) + ' '
                  replacementText.push(outer)
                  nodesToRemove.push(nextSiblingNode)
                  nextSiblingNode.attr('grv-usedalready', 'yes')
                  accum$.push((previousSiblingNode = nextSiblingNode.next()))
                }
                return accum$
              }.call(this, [])
            }
          } else {
            return nodesToReturn.push(doc(kid).html())
          }
        })
        if (replacementText.length > 0) {
          txt = replacementText.join('')
          nodesToReturn.push(txt)
          replacementText = []
        }
        _.each(nodesToRemove, function(n) {
          return doc(n).remove()
        })
        return nodesToReturn
      }
      replaceWithPara = function(doc, div) {
        var divContent
        divContent = doc(div).html()
        return doc(div).replaceWith('<p>' + divContent + '</p>')
      }
      divToPara = function(doc, domType) {
        var divs, lastCount, tags
        divs = doc(domType)
        lastCount = divs.length + 1
        tags = [
          'a',
          'blockquote',
          'dl',
          'div',
          'img',
          'ol',
          'p',
          'pre',
          'table',
          'ul'
        ]
        return divs.each(function() {
          var div, html, items, replaceNodes
          div = doc(this)
          items = div.find(tags.join(', '))
          if (items.length === 0) {
            return replaceWithPara(doc, this)
          } else {
            replaceNodes = getReplacementNodes(doc, div)
            html = ''
            _.each(replaceNodes, function(node) {
              if (node !== '') return (html += '<p>' + node + '</p>')
            })
            div.empty()
            return doc(div).replaceWith('' + html)
          }
        })
      }
      cleanErrantLinebreaks = function(doc) {
        return doc('p').each(function() {
          var c, node
          node = doc(this)
          c = node.contents()
          return doc(c).each(function() {
            var n
            n = doc(this)
            if (n[0].type === 'text')
              return n.replaceWith(
                n.text().replace(/([^\n])\n([^\n])/g, '$1 $2')
              )
          })
        })
      }
    }.call(this)
  },
  function(module, exports, __webpack_require__) {
    'use strict'
    var sanitizeHtml = __webpack_require__(123)
    var String = __webpack_require__(124)
    var Match = __webpack_require__(125)
    var newline_placeholder = ' @~@ '
    var newline_placeholder_t = newline_placeholder.trim()
    var buildSentences = function(text, options) {
      Match.setAbbreviations(options.abbreviations)
      if (options.newline_boundaries) {
        text = text.replace(/\n+|[-#=_+*]{4,}/g, newline_placeholder)
      }
      if (options.html_boundaries) {
        var html_boundaries_regexp =
          '(<br\\s*\\/?>|<\\/(' + options.html_boundaries_tags.join('|') + ')>)'
        var re = new RegExp(html_boundaries_regexp, 'g')
        text = text.replace(re, '$1' + newline_placeholder)
      }
      if (options.sanitize || options.allowed_tags) {
        if (!options.allowed_tags) {
          options.allowed_tags = ['']
        }
        text = sanitizeHtml(text, {
          allowedTags: options.allowed_tags
        })
      }
      var words = text.trim().match(/\S+|[\n\r]/g)
      var wordCount = 0
      var index = 0
      var temp = []
      var sentences = []
      var current = []
      if (!words || !words.length) {
        return []
      }
      for (var i = 0, L = words.length; i < L; i++) {
        wordCount++
        if (words[i] === '\n' || words[i] === '\r') {
          sentences.push(current)
          sentences.push([words[i]])
          current = []
          wordCount = 0
          continue
        }
        current.push(words[i])
        if (~words[i].indexOf(',')) {
          wordCount = 0
        }
        if (
          Match.isBoundaryChar(words[i]) ||
          String.endsWithChar(words[i], '?!') ||
          words[i] === newline_placeholder_t
        ) {
          if (
            (options.newline_boundaries || options.html_boundaries) &&
            words[i] === newline_placeholder_t
          ) {
            current.pop()
          }
          sentences.push(current)
          wordCount = 0
          current = []
          continue
        }
        if (
          String.endsWithChar(words[i], '"') ||
          String.endsWithChar(words[i], '”')
        ) {
          words[i] = words[i].slice(0, -1)
        }
        if (String.endsWithChar(words[i], '.')) {
          if (i + 1 < L) {
            if (words[i].length === 2 && isNaN(words[i].charAt(0))) {
              continue
            }
            if (Match.isCommonAbbreviation(words[i])) {
              continue
            }
            if (Match.isSentenceStarter(words[i + 1])) {
              if (Match.isTimeAbbreviation(words[i], words[i + 1])) {
                continue
              }
              if (Match.isNameAbbreviation(wordCount, words.slice(i, 6))) {
                continue
              }
              if (Match.isNumber(words[i + 1])) {
                if (Match.isCustomAbbreviation(words[i])) {
                  continue
                }
              }
            } else {
              if (String.endsWith(words[i], '..')) {
                continue
              }
              if (Match.isDottedAbbreviation(words[i])) {
                continue
              }
              if (Match.isNameAbbreviation(wordCount, words.slice(i, 5))) {
                continue
              }
            }
          }
          sentences.push(current)
          current = []
          wordCount = 0
          continue
        }
        if ((index = words[i].indexOf('.')) > -1) {
          if (Match.isNumber(words[i], index)) {
            continue
          }
          if (Match.isDottedAbbreviation(words[i])) {
            continue
          }
          if (Match.isURL(words[i]) || Match.isPhoneNr(words[i])) {
            continue
          }
        }
        if ((temp = Match.isConcatenated(words[i]))) {
          current.pop()
          current.push(temp[0])
          sentences.push(current)
          current = []
          wordCount = 0
          current.push(temp[1])
        }
      }
      if (current.length) {
        sentences.push(current)
      }
      sentences = sentences.filter(function(s) {
        return s.length > 0
      })
      return sentences
    }
    var sentenceStrings = function(sentences) {
      var strings = []
      var sentence = ''
      for (var i = 0; i < sentences.length; i++) {
        sentence = sentences[i].join(' ')
        if (
          sentences[i].length === 1 &&
          sentences[i][0].length < 4 &&
          sentences[i][0].indexOf('.') > -1
        ) {
          if (sentences[i + 1] && sentences[i + 1][0].indexOf('.') < 0) {
            sentence += ' ' + sentences[i + 1].join(' ')
            i++
          }
        }
        strings.push(sentence)
      }
      return strings
    }
    var sentenceWords = function(sentences) {
      var words = []
      var sentence = ''
      for (var i = 0; i < sentences.length; i++) {
        sentence = sentences[i]
        if (
          sentences[i].length === 1 &&
          sentences[i][0].length < 4 &&
          sentences[i][0].indexOf('.') > -1
        ) {
          if (sentences[i + 1] && sentences[i + 1][0].indexOf('.') < 0) {
            sentence = sentences[i].concat(sentences[i + 1])
            i++
          }
        }
        words.push(sentence)
      }
      return words
    }
    exports.sentences = function(text, user_options) {
      if (!text || typeof text !== 'string' || !text.length) {
        return []
      }
      var options = {
        parse_type: 'strings',
        newline_boundaries: false,
        html_boundaries: false,
        html_boundaries_tags: ['p', 'div', 'ul', 'ol'],
        sanitize: false,
        allowed_tags: false,
        abbreviations: null
      }
      if (typeof user_options === 'boolean') {
        options.newline_boundaries = true
      } else {
        for (var k in user_options) {
          options[k] = user_options[k]
        }
      }
      var sentenceData = buildSentences(text, options)
      if (options.parse_type === 'words') {
        return sentenceWords(sentenceData)
      } else {
        return sentenceStrings(sentenceData)
      }
    }
  },
  function(module, exports) {
    module.exports = function sanitizeHtml(text, opts) {
      if (typeof text == 'string' || text instanceof String) {
        var $div = document.createElement('DIV')
        $div.innerHTML = text
        text = ($div.textContent || '').trim()
      } else if (typeof text === 'object' && text.textContent) {
        text = (text.textContent || '').trim()
      }
      return text
    }
  },
  function(module, exports) {
    exports.endsWithChar = function ends_with_char(word, c) {
      if (c.length > 1) {
        return c.indexOf(word.slice(-1)) > -1
      }
      return word.slice(-1) === c
    }
    exports.endsWith = function ends_with(word, end) {
      return word.slice(word.length - end.length) === end
    }
  },
  function(module, exports) {
    var abbreviations
    var englishAbbreviations = [
      'al',
      'adj',
      'assn',
      'Ave',
      'BSc',
      'MSc',
      'Cell',
      'Ch',
      'Co',
      'cc',
      'Corp',
      'Dem',
      'Dept',
      'ed',
      'eg',
      'Eq',
      'Eqs',
      'est',
      'est',
      'etc',
      'Ex',
      'ext',
      'Fig',
      'fig',
      'Figs',
      'figs',
      'i.e',
      'ie',
      'Inc',
      'inc',
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Sept',
      'Oct',
      'Nov',
      'Dec',
      'jr',
      'mi',
      'Miss',
      'Mrs',
      'Mr',
      'Ms',
      'Mol',
      'mt',
      'mts',
      'no',
      'Nos',
      'PhD',
      'MD',
      'BA',
      'MA',
      'MM',
      'pl',
      'pop',
      'pp',
      'Prof',
      'Dr',
      'pt',
      'Ref',
      'Refs',
      'Rep',
      'repr',
      'rev',
      'Sec',
      'Secs',
      'Sgt',
      'Col',
      'Gen',
      'Rep',
      'Sen',
      'Gov',
      'Lt',
      'Maj',
      'Capt',
      'St',
      'Sr',
      'sr',
      'Jr',
      'jr',
      'Rev',
      'Sun',
      'Mon',
      'Tu',
      'Tue',
      'Tues',
      'Wed',
      'Th',
      'Thu',
      'Thur',
      'Thurs',
      'Fri',
      'Sat',
      'trans',
      'Univ',
      'Viz',
      'Vol',
      'vs',
      'v'
    ]
    exports.setAbbreviations = function(abbr) {
      if (abbr) {
        abbreviations = abbr
      } else {
        abbreviations = englishAbbreviations
      }
    }
    exports.isCapitalized = function(str) {
      return /^[A-Z][a-z].*/.test(str) || this.isNumber(str)
    }
    exports.isSentenceStarter = function(str) {
      return this.isCapitalized(str) || /``|"|'/.test(str.substring(0, 2))
    }
    exports.isCommonAbbreviation = function(str) {
      return ~abbreviations.indexOf(str.replace(/\W+/g, ''))
    }
    exports.isTimeAbbreviation = function(word, next) {
      if (word === 'a.m.' || word === 'p.m.') {
        var tmp = next
          .replace(/\W+/g, '')
          .slice(-3)
          .toLowerCase()
        if (tmp === 'day') {
          return true
        }
      }
      return false
    }
    exports.isDottedAbbreviation = function(word) {
      var matches = word.replace(/[\(\)\[\]\{\}]/g, '').match(/(.\.)*/)
      return matches && matches[0].length > 0
    }
    exports.isCustomAbbreviation = function(str) {
      if (str.length <= 3) {
        return true
      }
      return this.isCapitalized(str)
    }
    exports.isNameAbbreviation = function(wordCount, words) {
      if (words.length > 0) {
        if (
          wordCount < 5 &&
          words[0].length < 6 &&
          this.isCapitalized(words[0])
        ) {
          return true
        }
        var capitalized = words.filter(function(str) {
          return /[A-Z]/.test(str.charAt(0))
        })
        return capitalized.length >= 3
      }
      return false
    }
    exports.isNumber = function(str, dotPos) {
      if (dotPos) {
        str = str.slice(dotPos - 1, dotPos + 2)
      }
      return !isNaN(str)
    }
    exports.isPhoneNr = function(str) {
      return str.match(
        /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/
      )
    }
    exports.isURL = function(str) {
      return str.match(
        /[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/
      )
    }
    exports.isConcatenated = function(word) {
      var i = 0
      if (
        (i = word.indexOf('.')) > -1 ||
        (i = word.indexOf('!')) > -1 ||
        (i = word.indexOf('?')) > -1
      ) {
        var c = word.charAt(i + 1)
        if (c.match(/[a-zA-Z].*/)) {
          return [word.slice(0, i), word.slice(i + 1)]
        }
      }
      return false
    }
    exports.isBoundaryChar = function(word) {
      return word === '.' || word === '!' || word === '?'
    }
  },
  function(module, __webpack_exports__, __webpack_require__) {
    'use strict'
    Object.defineProperty(__webpack_exports__, '__esModule', {
      value: true
    })
    var coreCSS =
      "  /*readerly-main.css* * Refer to main display script (currently ReaderlyDisplay.js* on 12/20/16) for DOM structure.* * Affects mostly main display, but also others.* * TODO:* - Implement more robust hiding. (jQuery .hide type thing atm)* - More robust defaults.*//* ============================== *//* STRUCTURE *//* ============================== */#__rdly_iframe {  position: fixed;  top: 0;  left: 0;  width: 100%;  z-index: 4300200100;  /* Cannot get rid of scrollbars while retaining scrolling */  /* http://stackoverflow.com/questions/3296644/hiding-the-scrollbar-on-an-html-page */  /* https://stackoverflow.com/questions/16670931/hide-scroll-bar-but-still-being-able-to-scroll */  /* very simple example of alternative: https://jsfiddle.net/fpd4fb80/1/ (without iframe) */  /* example with iframe: https://jsfiddle.net/fpd4fb80/31/ */}html, body {  /* !!!! Not on the parent site please! !!!! */  // height: 100%;  // overflow: hidden;}#__rdly,#__rdly * {  box-sizing: border-box;}#__rdly {  display: flex;  flex-direction: column;  top: 0;  left: 0;  width: 100%;  transition: top 100ms linear;}.__rdly-main-section {  width: 100%;  display: flex;  /* For absolutely positioned children */  position: relative;}/* Should be 'top' and 'bottom' instead? */#__rdly #__rdly_above_bar {  top: 0;  /* function */  z-index: 50;}#__rdly_below_bar {  top: 100%;  display: flex;}#__rdly #__rdly_bar {  /* ??: Will this work if font-size is declared lower down? */  min-height: 2em;  text-align: center;  overflow: hidden;}/* ??: Generalize positions? Left, right, top, bottom, center, middle? */#__rdly .__rdly-bar-left,#__rdly .__rdly-bar-center,#__rdly .__rdly-bar-right {  /* vertically centered without flexbox */  position: absolute;  top: 50%;  transform: translateY(-50%);  height: 100%;  display: flex;  align-items: center;  align-content: center;  justify-content: center;}#__rdly .__rdly-bar-left,#__rdly .__rdly-bar-right {  padding: 0.75%;}#__rdly .__rdly-bar-left {  left: 0;  z-index: 1;}#__rdly .__rdly-bar-center {  height: 100%;  text-align: center;}#__rdly .__rdly-bar-right {  right: 0;}#__rdly .__rdly-bar-right2 {    position: absolute;    top: 60%;    display: flex;    right: 10px;    z-index: 9999;}.__rdly-sup-menu-button {    font-size: 18px !important;    height: 25px !important;}#__rdly #__rdly_close {  align-self: flex-start;}#__rdly #__rdly_text_elements {  /* em counts the widest possible text */  position:relative;  width: 1250;  height: 100%;  user-select: none;  //pointer-events: none;  -webkit-font-smoothing: antialiased !important;}/* Horizontally and vertically centered without flexbox *//* Comes last to take precedence */#__rdly .__rdly-transform-centered {  position: absolute;  top: 50%;  left: 50%;  transform: translate( -50% ,-50% );}div.__rdly-flexible{  display:flex;  position: absolute;  transform: translate(-50%,-50%);  left: 50%;  width: 100%;  top: 50%;}#__rdly_indicator {  position:absolute;  width: 100%;  left: 0;  top: 50%;  color: rgb(190,190,190);  transform: translate(0,calc(-50% - 1px));}div.__rdly-center{  justify-content: center;}.__rdly-text {  flex-grow: 1;  flex-basis: 20%;  display: flex;}#__rdly-text-left{    justify-content: flex-end;}#__rdly-text-center{  flex-grow: 0;  flex-basis: auto;}/* ============================== *//* SKIN *//* ============================== */#__rdly_iframe {  border: 0;  top: 40;}body {  margin: 0;}#__rdly div,#__rdly span,#__rdly a,#__rdly li {  /* font defaults from chrome inspection */  font-family: Clear Sans Light;  font-size: 15px;  line-height: normal;  font-style: normal;  font-weight: normal;  font-variant: none;  font-stretch: normal;  font-feature-settings: normal;  font-kerning: auto;  -webkit-font-smoothing: auto;  text-transform: none;}#__rdly {  /*border: 1px solid gray;*/  /*border-left: 0;*/  /*border-right: 0;*/  background-color: rgba(250, 250, 250, 1);}.__rdly-main-section {  border: 0;  border-bottom: 1px solid gray;}#__rdly #__rdly_bar,#__rdly #__rdly_bar div,#__rdly #__rdly_bar span,#__rdly #__rdly_bar a,#__rdly #__rdly_bar li {  font-size: 37px;  font-family: Clear Sans Light;}/* Should this be in readerly-main.css? new readerly-ui.css?*/#__rdly button::-moz-focus-inner,#__rdly input::-moz-focus-inner {  /*padding: 0;*/  /*background-color: rgba( 220, 220, 220, 1 );*/}#__rdly button {  border-radius: 3px;  user-select: none;  border-style: solid;  box-shadow: none;  outline: none;}label {  user-select: none;}#__rdly button {  background-color: rgba( 220, 220, 220, 1 );}#__rdly button:hover,#__rdly .__rdly-active-ui {  background-color: rgba(160, 160, 160, 1);  fill: rgba(100, 100, 100, 1);}/* TODO: add:#__rdly .__rdly-active-ui {  border-style: inset;}*//* ============================== *//* FUNCTION *//* ============================== */#__rdly .__rdly-hidden {  display: none;}#__rdly .__rdly-rotating {    -webkit-animation:spin 4s linear infinite;    -moz-animation:spin 4s linear infinite;    animation:spin 4s linear infinite;}@-moz-keyframes spin {  100%  { -moz-transform: rotate(360deg); }}@-webkit-keyframes spin {  100%  { -webkit-transform: rotate(360deg); }}@keyframes spin {  100%  { transform:rotate(360deg); }}#__rdly .__rdly-scrollable-y {  display: block;  overflow-y: hidden;  overflow-x: hidden;}#__rdly .__rdly-scrollable-y > * {  height: auto;  overflow: hidden;}.__rdly-big-menu-button-image {  height: 27.75;}"
    __webpack_exports__['default'] = coreCSS
  },
  function(module, __webpack_exports__, __webpack_require__) {
    'use strict'
    Object.defineProperty(__webpack_exports__, '__esModule', {
      value: true
    })
    var nouiCSS =
      "/* noUi.css */.noUi-target,.noUi-target * {  -webkit-touch-callout: none;  -webkit-user-select: none;  -ms-touch-action: none;  -ms-user-select: none;  -moz-user-select: none;  -moz-box-sizing: border-box;  box-sizing: border-box;}/* instead of background, it seems, in v8 */.noUi-target {  background: #FAFAFA;  box-shadow: inset 0 1px 1px #B3B3B3;  border: 1px solid rgba( 80, 80, 80, 1 );}.noUi-base {  width: 100%;  height: 100%;  position: relative;}.noUi-origin {  position: absolute;  right: 0;  top: 0;  left: 0;  bottom: 0;}.noUi-handle {  position: relative;  z-index: 1;}.noUi-stacking .noUi-handle {  /* This class is applied to the lower origin when     its values is > 50%. */  z-index: 10;}.noUi-stacking + .noUi-origin {  /* Fix stacking order in IE7, which incorrectly     creates a new context for the origins. */  /* *z-index: -1; - Original. Meant to be this way? */  z-index: -1;}.noUi-state-tap .noUi-origin {  /*-webkit-transition: left 0.3s, top 0.3s;*/  /*transition: left 0.3s, top 0.3s;*/}.noUi-state-drag * {  cursor: inherit !important;}/* Slider size and handle placement */.noUi-horizontal {  height: 18px;}.noUi-horizontal .noUi-handle {  width: 32px;  height: 20px;  /* Can't do adjustable height that's good with small sizes (min-height) with no min-top too :/ */  /*min-height: 20px;*/  /*height: 140%;*/  /*top: 69%;*/  left: -16px;  /* vertical centering without flexbox */  top: 50%;  transform: translateY(-50%);}.noUi-vertical {  width: 18px;}.noUi-vertical .noUi-handle {  width: 28px;  height: 34px;  left: -6px;  top: -17px;}.noUi-vertical.noUi-extended {  padding: 15px 0;}.noUi-vertical.noUi-extended .noUi-origin {  height: 100%;  bottom: -15px;}/* Styling */.noUi-background {  background: #FAFAFA;  box-shadow: inset 0 1px 1px #B3B3B3;  border: 1px solid gray;}.noUi-connect {  position: absolute;  height: 100%;  background: #3498DB;  box-shadow: inset 0 0 3px rgba(51, 51, 51, 0.45);  /*border: 3px double black;*/  /*border: 1px solid rgba( 80, 80, 80, 1 );*/  -webkit-transition: background 450ms;  transition: background 450ms;}.noUi-origin {  border-radius: 2px;}.noUi-target {  box-shadow: inset 0 1px 1px #f0f0f0, 0 3px 6px -5px #bbbbbb;}/* Handles and cursors */.noUi-dragable {  cursor: w-resize;}.noUi-vertical .noUi-dragable {  cursor: n-resize;}.noUi-handle {  border: 1.5px solid #959191;  border-radius: 3px;  background: #FFF;  cursor: default;  box-shadow: inset 0 0 1px white, inset 0 1px 7px #ebebeb, 0 3px 6px -3px #bbbbbb;}.noUi-active {  box-shadow: inset 0 0 1px white, inset 0 1px 7px #dddddd, 0 3px 6px -3px #bbbbbb;}.noUi-handle:after {  left: 16px;}.noUi-vertical .noUi-handle:before,.noUi-vertical .noUi-handle:after {  width: 14px;  height: 1px;  left: 6px;  top: 14px;}.noUi-vertical .noUi-handle:after {  top: 17px;}/* Disabled state */[disabled].noUi-connect,[disabled] .noUi-connect {  background: #B8B8B8;}[disabled] .noUi-handle {  cursor: not-allowed;}/* Blocked state */.noUi-state-blocked.noUi-connect,.noUi-state-blocked .noUi-connect {  background: #4FDACF;}/* Containing handles within the slider bar (horizontal) */.noUi-horizontal.noUi-extended {\t/*padding-right: 32px;*/  /* ??: Why is 32px not working? https://refreshless.com/nouislider/more/ bottom*/  padding-right: 30px;}.noUi-horizontal.noUi-extended .noUi-handle {\tleft: -1px;}.noUi-horizontal.noUi-extended .noUi-origin  {\tright: -32px;}/*  PROGRESSS BAR AND SCRUBBER  */#__rdly_progress .noUi-handle {  top: 6px;  height: 15px;}#__rdly_progress .noUi-handle::before,#__rdly_progress .noUi-handle::after {  height: 80%;  top: 50%;  transform: translateY(-50%);}"
    __webpack_exports__['default'] = nouiCSS
  },
  function(module, __webpack_exports__, __webpack_require__) {
    'use strict'
    Object.defineProperty(__webpack_exports__, '__esModule', {
      value: true
    })
    var playbackCSS =
      "/* readerly-playback.css *//* ============================== *//* STRUCTURE *//* ============================== */#__rdly_progress {\tposition: relative;\theight: 7px;\twidth: 100%;\t/* function */\t/*cursor: pointer;*/}#__rdly_percent_done {\tposition: relative;\theight: 100%;\twidth: 0;\ttransition: width 200ms linear;}#__rdly_scrubber {\t/* Probably needs to be an arrow pointing up. svg time */\tposition: absolute;\theight: .75rem;\twidth: .5rem;\tright: 0;\ttop:0;\ttransform: translate( 50%, 0 );}#__rdly_indicator {\t/* Don't get in the way of text */\tposition: absolute;\tz-index: -10;}#__rdly_text_button {\twidth: 100%;\theight: 100%;\ttext-align: center;        outline: none;}#__rdly_loading {\t/* Can't be centered with transform because transform is used to rotate it */\t/* Horizontally centered by parent text-align */\tdisplay: inline-block;\twidth: 2em;\theight: 2em;}#__rdly_restart {\t/*position: relative;*/\t/*width: 1.5em;*/\t/*height: 1.5em;*/\t/* function */\t/*cursor: pointer;*/}#__rdly_playback_controls {\tclear: both;\theight: 1em;\t/* For now */\tdisplay: none;}#__rdly_playback_controls:last-child {\tpadding-right: 0;}/* This should be controlled elsewhere */.__rdly-playback-button,.__rdly-playback-feedback {        user-select: none;\twidth: 2.5em;\theight: 2.5em;}#__rdly_play_pause_feedback {\tdisplay: flex;\t/*function*/        user-select: none;\tpointer-events: none;        height: 100%;}#__rdly_play_feedback, #__rdly_pause_feedback {\tdisplay: flex;        user-select: none;    align-items: center;    justify-content: center;}/* ============================== *//* SKIN *//* ============================== */#__rdly_above_bar {\tborder-bottom: 0;}#__rdly_progress {\tborder:0;\tborder-top: 1px solid gray;\tborder-bottom: 1px solid gray;}#__rdly_percent_done {\tbackground-color: #3498db;}#__rdly_scrubber {\t/* temp */\t/*background-color: rgba( 0, 0, 0, 0.2 );*/}#__rdly_indicator {\theight: 1.52em;        top: 54%;        color:   #ff9999;}/* Somehow get rid of the need for #__rdly in this definition */#__rdly #__rdly_text_button {    background: none;    border: none;    height: 90%;    outline: none;\tfont-family: 'droid', serif;\tfont-size: 35px;\tline-height: normal;\tfont-style: normal;\tfont-variant: none;\tfont-stretch: normal;\tfont-feature-settings: normal;\tfont-kerning: auto;\ttext-transform: none;}#__rdly_loading {\tfill: rgba( 150, 150, 150, 1 );\t/* temp for visibility before icon is chosen */\tborder: 1px solid gray;}#__rdly_play_feedback, #__rdly_pause_feedback {\tborder-radius: 50%;\twidth: 1.75em;        height: 1.75em;        font-size: inherit;        font-weight: bold;        color: rgb(220, 220, 220);        background: rgb(50, 50, 50);        user-select: none;}#__rdly_rewind_sentence {\t/*background-image: url('');*/}#__rdly_rewind_word {\t/*background-image: url('');*/}#__rdly_pause {\t/*background-image: url('');*/}#__rdly_play {\t/*background-image: url('');*/}#__rdly_fastforward_word {\t/*background-image: url('');*/}#__rdly_fastforward_sentence {\t/*background-image: url('');*/}#__rdly_restart {\t/*background-image: url('');*/}.__rdly-selected {\tbackground-color: salmon !important;}"
    __webpack_exports__['default'] = playbackCSS
  },
  function(module, __webpack_exports__, __webpack_require__) {
    'use strict'
    Object.defineProperty(__webpack_exports__, '__esModule', {
      value: true
    })
    var settingsCSS =
      '/* settings.css* * Refer to main settings script (currently ReaderlySettings.js* on 12/20/16) for DOM structure.* * Affects main settings, settings modules, and playback.* Consider name change.* * TODO:* - More robust defualts*//* ============================== *//* SKIN *//* ============================== *//* Should this be in readerly-main.css? */#__rdly button {\tposition: relative;\tpadding: 0;  /* functional */  cursor: pointer;}#__rdly button,#__rdly label,#__rdly input {  /* font defaults from chrome inspection */  font-size: 15px;  line-height: normal;  font-style: normal;  font-weight: normal;  font-variant: none;  font-stretch: normal;  font-feature-settings: normal;  font-kerning: auto;  -webkit-font-smoothing: auto;  text-transform: none;}#__rdly .__rdly-big-menu-button {\twidth: 3em;\theight: 3em;  /* default followed by desired setting */  margin: 0;\tmargin-right: .3em;}.__rdly-sup-menu-button {  position: relative;  top: 0;  right: 0;  width: 1.5em;  height: 1.5em;  margin: 0;}/* Solution to transition? https://stackoverflow.com/questions/3508605/how-can-i-transition-height-0-to-height-auto-using-css#8331169 *//* See comments on the thread */#__rdly_settings_container {  width: 100%;  display: flex;  flex-direction: column;  overflow: hidden;}#__rdly_settings_tabs,#__rdly_settings_menus,.__rdly_settings_menu {\tposition: relative;\twidth: 100%;}#__rdly_settings_tabs {\tdisplay: flex;\tjustify-content: center;\theight: auto;  font-size: 1.23em;\toverflow: hidden;}.__rdly-settings-tab {\tflex-grow: 1;\tpadding: 0.1em;  display: flex;  justify-content: center;}#__rdly_settings_menus {\theight: auto;\ttext-align: center;        overflow: hidden;}#__rdly .__rdly-settings-menu {  position: relative;  display: flex;  flex-wrap: wrap;  justify-content: space-around;  padding: 0 .5%;}#__rdly .__rdly-setting {  /* For more visibility, try even more vertical padding */  position: relative;  /* % causes weird rendering to happen in flexbox (maybe others too?) */  /*padding: 1.3% 1.5%;*/  padding: 13px;}#__rdly .__rdly-slider-controls {  display: flex;  align-items: center;  margin-top: 0.2rem;}#__rdly .__rdly-slider-input {  text-align: center;  width: 3.5em;  height: 1.6em;  font-size: 16px;  margin-right: 0.3em;  padding: 0;}#__rdly .__rdly-slider {  display: inline-block;  width: 150px;  height: 10px;}/* ============================== *//* SKIN *//* ============================== *//*#__rdly_below_bar .__rdly-section-open {  border-bottom: 0;}*/#__rdly_settings_container {\tbackground-color: rgba( 230, 230, 230, 1);}#__rdly_settings_tabs {\tborder-bottom: 1px solid gray;}#__rdly_settings_tab {\tborder-right: 1px solid gray;}#__rdly_settings_tabs:last-child {\tborder-right: 0;}#__rdly .__rdly-slider-label {  font-size: 21px;}#__rdly .__rdly-slider-input {  -webkit-border-radius: 3px;  -moz-border-radius: 3px;  -ms-border-radius: 3px;  -o-border-radius: 3px;  border-radius: 3px;  -webkit-box-shadow: inset 1px 1px 3px rgba(179, 179, 179, 1);  -moz-box-shadow: inset 1px 1px 3px rgba(179, 179, 179, 1);  box-shadow: inset 1px 1px 3px rgba(179, 179, 179, 1);  /* Inset look with better color control */  border-top: 2px solid gray;  border-left: 2px solid gray;  border-right: 2px solid rgba(180,180,180, 1);  border-bottom: 2px solid rgba(180,180,180, 1);}#__rdly .__rdly-slider-input:focus {  border: 1px solid #3498db;  -webkit-border-radius: 2px;  -moz-border-radius: 2px;  -ms-border-radius: 2px;  -o-border-radius: 2px;  border-radius: 2px;}'
    __webpack_exports__['default'] = settingsCSS
  }
])
